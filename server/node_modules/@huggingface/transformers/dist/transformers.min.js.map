{"version":3,"file":"transformers.min.js","mappings":"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","sources":["webpack://@huggingface/transformers/webpack/runtime/create fake namespace object","webpack://@huggingface/transformers/./node_modules/@huggingface/jinja/dist/index.js","webpack://@huggingface/transformers/./node_modules/onnxruntime-common/dist/esm/backend-impl.js","webpack://@huggingface/transformers/./node_modules/onnxruntime-common/dist/esm/env-impl.js","webpack://@huggingface/transformers/./node_modules/onnxruntime-common/dist/esm/env.js","webpack://@huggingface/transformers/./node_modules/onnxruntime-common/dist/esm/inference-session-impl.js","webpack://@huggingface/transformers/./node_modules/onnxruntime-common/dist/esm/inference-session.js","webpack://@huggingface/transformers/./node_modules/onnxruntime-common/dist/esm/tensor-conversion-impl.js","webpack://@huggingface/transformers/./node_modules/onnxruntime-common/dist/esm/tensor-factory-impl.js","webpack://@huggingface/transformers/./node_modules/onnxruntime-common/dist/esm/tensor-impl-type-mapping.js","webpack://@huggingface/transformers/./node_modules/onnxruntime-common/dist/esm/tensor-impl.js","webpack://@huggingface/transformers/./node_modules/onnxruntime-common/dist/esm/tensor-utils-impl.js","webpack://@huggingface/transformers/./node_modules/onnxruntime-common/dist/esm/tensor.js","webpack://@huggingface/transformers/./node_modules/onnxruntime-common/dist/esm/trace.js","webpack://@huggingface/transformers/./node_modules/onnxruntime-common/dist/esm/training-session-impl.js","webpack://@huggingface/transformers/./node_modules/onnxruntime-common/dist/esm/training-session.js","webpack://@huggingface/transformers/./node_modules/onnxruntime-common/dist/esm/version.js","webpack://@huggingface/transformers/./node_modules/onnxruntime-web/dist/ort.webgpu.bundle.min.mjs","webpack://@huggingface/transformers/./src/backends/onnx.js","webpack://@huggingface/transformers/./src/configs.js","webpack://@huggingface/transformers/./src/env.js","webpack://@huggingface/transformers/./src/generation/configuration_utils.js","webpack://@huggingface/transformers/./src/generation/logits_process.js","webpack://@huggingface/transformers/./src/generation/logits_sampler.js","webpack://@huggingface/transformers/./src/generation/stopping_criteria.js","webpack://@huggingface/transformers/./src/generation/streamers.js","webpack://@huggingface/transformers/./src/models.js","webpack://@huggingface/transformers/./src/models/whisper/common_whisper.js","webpack://@huggingface/transformers/./src/models/whisper/generation_whisper.js","webpack://@huggingface/transformers/./src/ops/registry.js","webpack://@huggingface/transformers/./src/pipelines.js","webpack://@huggingface/transformers/./src/processors.js","webpack://@huggingface/transformers/./src/tokenizers.js","webpack://@huggingface/transformers/./src/utils/audio.js","webpack://@huggingface/transformers/./src/utils/constants.js","webpack://@huggingface/transformers/./src/utils/core.js","webpack://@huggingface/transformers/./src/utils/data-structures.js","webpack://@huggingface/transformers/./src/utils/devices.js","webpack://@huggingface/transformers/./src/utils/dtypes.js","webpack://@huggingface/transformers/./src/utils/generic.js","webpack://@huggingface/transformers/./src/utils/hub.js","webpack://@huggingface/transformers/./src/utils/image.js","webpack://@huggingface/transformers/./src/utils/maths.js","webpack://@huggingface/transformers/./src/utils/tensor.js","webpack://@huggingface/transformers/webpack/bootstrap","webpack://@huggingface/transformers/webpack/runtime/define property getters","webpack://@huggingface/transformers/webpack/runtime/hasOwnProperty shorthand","webpack://@huggingface/transformers/webpack/runtime/make namespace object","webpack://@huggingface/transformers/webpack/runtime/publicPath","webpack://@huggingface/transformers/webpack/runtime/base uri"],"sourcesContent":["var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// src/lexer.ts\nvar TOKEN_TYPES = Object.freeze({\n  Text: \"Text\",\n  // The text between Jinja statements or expressions\n  NumericLiteral: \"NumericLiteral\",\n  // e.g., 123\n  BooleanLiteral: \"BooleanLiteral\",\n  // true or false\n  StringLiteral: \"StringLiteral\",\n  // 'string'\n  Identifier: \"Identifier\",\n  // Variables, functions, etc.\n  Equals: \"Equals\",\n  // =\n  OpenParen: \"OpenParen\",\n  // (\n  CloseParen: \"CloseParen\",\n  // )\n  OpenStatement: \"OpenStatement\",\n  // {%\n  CloseStatement: \"CloseStatement\",\n  // %}\n  OpenExpression: \"OpenExpression\",\n  // {{\n  CloseExpression: \"CloseExpression\",\n  // }}\n  OpenSquareBracket: \"OpenSquareBracket\",\n  // [\n  CloseSquareBracket: \"CloseSquareBracket\",\n  // ]\n  OpenCurlyBracket: \"OpenCurlyBracket\",\n  // {\n  CloseCurlyBracket: \"CloseCurlyBracket\",\n  // }\n  Comma: \"Comma\",\n  // ,\n  Dot: \"Dot\",\n  // .\n  Colon: \"Colon\",\n  // :\n  Pipe: \"Pipe\",\n  // |\n  CallOperator: \"CallOperator\",\n  // ()\n  AdditiveBinaryOperator: \"AdditiveBinaryOperator\",\n  // + -\n  MultiplicativeBinaryOperator: \"MultiplicativeBinaryOperator\",\n  // * / %\n  ComparisonBinaryOperator: \"ComparisonBinaryOperator\",\n  // < > <= >= == !=\n  UnaryOperator: \"UnaryOperator\",\n  // ! - +\n  // Keywords\n  Set: \"Set\",\n  If: \"If\",\n  For: \"For\",\n  In: \"In\",\n  Is: \"Is\",\n  NotIn: \"NotIn\",\n  Else: \"Else\",\n  EndIf: \"EndIf\",\n  ElseIf: \"ElseIf\",\n  EndFor: \"EndFor\",\n  And: \"And\",\n  Or: \"Or\",\n  Not: \"UnaryOperator\",\n  Macro: \"Macro\",\n  EndMacro: \"EndMacro\"\n});\nvar KEYWORDS = Object.freeze({\n  set: TOKEN_TYPES.Set,\n  for: TOKEN_TYPES.For,\n  in: TOKEN_TYPES.In,\n  is: TOKEN_TYPES.Is,\n  if: TOKEN_TYPES.If,\n  else: TOKEN_TYPES.Else,\n  endif: TOKEN_TYPES.EndIf,\n  elif: TOKEN_TYPES.ElseIf,\n  endfor: TOKEN_TYPES.EndFor,\n  and: TOKEN_TYPES.And,\n  or: TOKEN_TYPES.Or,\n  not: TOKEN_TYPES.Not,\n  \"not in\": TOKEN_TYPES.NotIn,\n  macro: TOKEN_TYPES.Macro,\n  endmacro: TOKEN_TYPES.EndMacro,\n  // Literals\n  true: TOKEN_TYPES.BooleanLiteral,\n  false: TOKEN_TYPES.BooleanLiteral,\n  // NOTE: According to the Jinja docs: The special constants true, false, and none are indeed lowercase.\n  // Because that caused confusion in the past, (True used to expand to an undefined variable that was considered false),\n  // all three can now also be written in title case (True, False, and None). However, for consistency, (all Jinja identifiers are lowercase)\n  // you should use the lowercase versions.\n  True: TOKEN_TYPES.BooleanLiteral,\n  False: TOKEN_TYPES.BooleanLiteral\n});\nvar Token = class {\n  /**\n   * Constructs a new Token.\n   * @param {string} value The raw value as seen inside the source code.\n   * @param {TokenType} type The type of token.\n   */\n  constructor(value, type) {\n    this.value = value;\n    this.type = type;\n  }\n};\nfunction isWord(char) {\n  return /\\w/.test(char);\n}\nfunction isInteger(char) {\n  return /[0-9]/.test(char);\n}\nvar ORDERED_MAPPING_TABLE = [\n  // Control sequences\n  [\"{%\", TOKEN_TYPES.OpenStatement],\n  [\"%}\", TOKEN_TYPES.CloseStatement],\n  [\"{{\", TOKEN_TYPES.OpenExpression],\n  [\"}}\", TOKEN_TYPES.CloseExpression],\n  // Single character tokens\n  [\"(\", TOKEN_TYPES.OpenParen],\n  [\")\", TOKEN_TYPES.CloseParen],\n  [\"{\", TOKEN_TYPES.OpenCurlyBracket],\n  [\"}\", TOKEN_TYPES.CloseCurlyBracket],\n  [\"[\", TOKEN_TYPES.OpenSquareBracket],\n  [\"]\", TOKEN_TYPES.CloseSquareBracket],\n  [\",\", TOKEN_TYPES.Comma],\n  [\".\", TOKEN_TYPES.Dot],\n  [\":\", TOKEN_TYPES.Colon],\n  [\"|\", TOKEN_TYPES.Pipe],\n  // Comparison operators\n  [\"<=\", TOKEN_TYPES.ComparisonBinaryOperator],\n  [\">=\", TOKEN_TYPES.ComparisonBinaryOperator],\n  [\"==\", TOKEN_TYPES.ComparisonBinaryOperator],\n  [\"!=\", TOKEN_TYPES.ComparisonBinaryOperator],\n  [\"<\", TOKEN_TYPES.ComparisonBinaryOperator],\n  [\">\", TOKEN_TYPES.ComparisonBinaryOperator],\n  // Arithmetic operators\n  [\"+\", TOKEN_TYPES.AdditiveBinaryOperator],\n  [\"-\", TOKEN_TYPES.AdditiveBinaryOperator],\n  [\"*\", TOKEN_TYPES.MultiplicativeBinaryOperator],\n  [\"/\", TOKEN_TYPES.MultiplicativeBinaryOperator],\n  [\"%\", TOKEN_TYPES.MultiplicativeBinaryOperator],\n  // Assignment operator\n  [\"=\", TOKEN_TYPES.Equals]\n];\nvar ESCAPE_CHARACTERS = /* @__PURE__ */ new Map([\n  [\"n\", \"\\n\"],\n  // New line\n  [\"t\", \"\t\"],\n  // Horizontal tab\n  [\"r\", \"\\r\"],\n  // Carriage return\n  [\"b\", \"\\b\"],\n  // Backspace\n  [\"f\", \"\\f\"],\n  // Form feed\n  [\"v\", \"\\v\"],\n  // Vertical tab\n  [\"'\", \"'\"],\n  // Single quote\n  ['\"', '\"'],\n  // Double quote\n  [\"\\\\\", \"\\\\\"]\n  // Backslash\n]);\nfunction preprocess(template, options = {}) {\n  if (template.endsWith(\"\\n\")) {\n    template = template.slice(0, -1);\n  }\n  template = template.replace(/{#.*?#}/gs, \"{##}\");\n  if (options.lstrip_blocks) {\n    template = template.replace(/^[ \\t]*({[#%])/gm, \"$1\");\n  }\n  if (options.trim_blocks) {\n    template = template.replace(/([#%]})\\n/g, \"$1\");\n  }\n  return template.replace(/{##}/g, \"\").replace(/-%}\\s*/g, \"%}\").replace(/\\s*{%-/g, \"{%\").replace(/-}}\\s*/g, \"}}\").replace(/\\s*{{-/g, \"{{\");\n}\nfunction tokenize(source, options = {}) {\n  const tokens = [];\n  const src = preprocess(source, options);\n  let cursorPosition = 0;\n  const consumeWhile = (predicate) => {\n    let str = \"\";\n    while (predicate(src[cursorPosition])) {\n      if (src[cursorPosition] === \"\\\\\") {\n        ++cursorPosition;\n        if (cursorPosition >= src.length)\n          throw new SyntaxError(\"Unexpected end of input\");\n        const escaped = src[cursorPosition++];\n        const unescaped = ESCAPE_CHARACTERS.get(escaped);\n        if (unescaped === void 0) {\n          throw new SyntaxError(`Unexpected escaped character: ${escaped}`);\n        }\n        str += unescaped;\n        continue;\n      }\n      str += src[cursorPosition++];\n      if (cursorPosition >= src.length)\n        throw new SyntaxError(\"Unexpected end of input\");\n    }\n    return str;\n  };\n  main:\n    while (cursorPosition < src.length) {\n      const lastTokenType = tokens.at(-1)?.type;\n      if (lastTokenType === void 0 || lastTokenType === TOKEN_TYPES.CloseStatement || lastTokenType === TOKEN_TYPES.CloseExpression) {\n        let text = \"\";\n        while (cursorPosition < src.length && // Keep going until we hit the next Jinja statement or expression\n        !(src[cursorPosition] === \"{\" && (src[cursorPosition + 1] === \"%\" || src[cursorPosition + 1] === \"{\"))) {\n          text += src[cursorPosition++];\n        }\n        if (text.length > 0) {\n          tokens.push(new Token(text, TOKEN_TYPES.Text));\n          continue;\n        }\n      }\n      consumeWhile((char2) => /\\s/.test(char2));\n      const char = src[cursorPosition];\n      if (char === \"-\" || char === \"+\") {\n        const lastTokenType2 = tokens.at(-1)?.type;\n        if (lastTokenType2 === TOKEN_TYPES.Text || lastTokenType2 === void 0) {\n          throw new SyntaxError(`Unexpected character: ${char}`);\n        }\n        switch (lastTokenType2) {\n          case TOKEN_TYPES.Identifier:\n          case TOKEN_TYPES.NumericLiteral:\n          case TOKEN_TYPES.BooleanLiteral:\n          case TOKEN_TYPES.StringLiteral:\n          case TOKEN_TYPES.CloseParen:\n          case TOKEN_TYPES.CloseSquareBracket:\n            break;\n          default: {\n            ++cursorPosition;\n            const num = consumeWhile(isInteger);\n            tokens.push(\n              new Token(`${char}${num}`, num.length > 0 ? TOKEN_TYPES.NumericLiteral : TOKEN_TYPES.UnaryOperator)\n            );\n            continue;\n          }\n        }\n      }\n      for (const [char2, token] of ORDERED_MAPPING_TABLE) {\n        const slice2 = src.slice(cursorPosition, cursorPosition + char2.length);\n        if (slice2 === char2) {\n          tokens.push(new Token(char2, token));\n          cursorPosition += char2.length;\n          continue main;\n        }\n      }\n      if (char === \"'\" || char === '\"') {\n        ++cursorPosition;\n        const str = consumeWhile((c) => c !== char);\n        tokens.push(new Token(str, TOKEN_TYPES.StringLiteral));\n        ++cursorPosition;\n        continue;\n      }\n      if (isInteger(char)) {\n        const num = consumeWhile(isInteger);\n        tokens.push(new Token(num, TOKEN_TYPES.NumericLiteral));\n        continue;\n      }\n      if (isWord(char)) {\n        const word = consumeWhile(isWord);\n        const type = Object.hasOwn(KEYWORDS, word) ? KEYWORDS[word] : TOKEN_TYPES.Identifier;\n        if (type === TOKEN_TYPES.In && tokens.at(-1)?.type === TOKEN_TYPES.Not) {\n          tokens.pop();\n          tokens.push(new Token(\"not in\", TOKEN_TYPES.NotIn));\n        } else {\n          tokens.push(new Token(word, type));\n        }\n        continue;\n      }\n      throw new SyntaxError(`Unexpected character: ${char}`);\n    }\n  return tokens;\n}\n\n// src/ast.ts\nvar Statement = class {\n  type = \"Statement\";\n};\nvar Program = class extends Statement {\n  constructor(body) {\n    super();\n    this.body = body;\n  }\n  type = \"Program\";\n};\nvar If = class extends Statement {\n  constructor(test, body, alternate) {\n    super();\n    this.test = test;\n    this.body = body;\n    this.alternate = alternate;\n  }\n  type = \"If\";\n};\nvar For = class extends Statement {\n  constructor(loopvar, iterable, body, defaultBlock) {\n    super();\n    this.loopvar = loopvar;\n    this.iterable = iterable;\n    this.body = body;\n    this.defaultBlock = defaultBlock;\n  }\n  type = \"For\";\n};\nvar SetStatement = class extends Statement {\n  constructor(assignee, value) {\n    super();\n    this.assignee = assignee;\n    this.value = value;\n  }\n  type = \"Set\";\n};\nvar Macro = class extends Statement {\n  constructor(name, args, body) {\n    super();\n    this.name = name;\n    this.args = args;\n    this.body = body;\n  }\n  type = \"Macro\";\n};\nvar Expression = class extends Statement {\n  type = \"Expression\";\n};\nvar MemberExpression = class extends Expression {\n  constructor(object, property, computed) {\n    super();\n    this.object = object;\n    this.property = property;\n    this.computed = computed;\n  }\n  type = \"MemberExpression\";\n};\nvar CallExpression = class extends Expression {\n  constructor(callee, args) {\n    super();\n    this.callee = callee;\n    this.args = args;\n  }\n  type = \"CallExpression\";\n};\nvar Identifier = class extends Expression {\n  /**\n   * @param {string} value The name of the identifier\n   */\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  type = \"Identifier\";\n};\nvar Literal = class extends Expression {\n  constructor(value) {\n    super();\n    this.value = value;\n  }\n  type = \"Literal\";\n};\nvar NumericLiteral = class extends Literal {\n  type = \"NumericLiteral\";\n};\nvar StringLiteral = class extends Literal {\n  type = \"StringLiteral\";\n};\nvar BooleanLiteral = class extends Literal {\n  type = \"BooleanLiteral\";\n};\nvar ArrayLiteral = class extends Literal {\n  type = \"ArrayLiteral\";\n};\nvar TupleLiteral = class extends Literal {\n  type = \"TupleLiteral\";\n};\nvar ObjectLiteral = class extends Literal {\n  type = \"ObjectLiteral\";\n};\nvar BinaryExpression = class extends Expression {\n  constructor(operator, left, right) {\n    super();\n    this.operator = operator;\n    this.left = left;\n    this.right = right;\n  }\n  type = \"BinaryExpression\";\n};\nvar FilterExpression = class extends Expression {\n  constructor(operand, filter) {\n    super();\n    this.operand = operand;\n    this.filter = filter;\n  }\n  type = \"FilterExpression\";\n};\nvar SelectExpression = class extends Expression {\n  constructor(iterable, test) {\n    super();\n    this.iterable = iterable;\n    this.test = test;\n  }\n  type = \"SelectExpression\";\n};\nvar TestExpression = class extends Expression {\n  constructor(operand, negate, test) {\n    super();\n    this.operand = operand;\n    this.negate = negate;\n    this.test = test;\n  }\n  type = \"TestExpression\";\n};\nvar UnaryExpression = class extends Expression {\n  constructor(operator, argument) {\n    super();\n    this.operator = operator;\n    this.argument = argument;\n  }\n  type = \"UnaryExpression\";\n};\nvar SliceExpression = class extends Expression {\n  constructor(start = void 0, stop = void 0, step = void 0) {\n    super();\n    this.start = start;\n    this.stop = stop;\n    this.step = step;\n  }\n  type = \"SliceExpression\";\n};\nvar KeywordArgumentExpression = class extends Expression {\n  constructor(key, value) {\n    super();\n    this.key = key;\n    this.value = value;\n  }\n  type = \"KeywordArgumentExpression\";\n};\n\n// src/parser.ts\nfunction parse(tokens) {\n  const program = new Program([]);\n  let current = 0;\n  function expect(type, error) {\n    const prev = tokens[current++];\n    if (!prev || prev.type !== type) {\n      throw new Error(`Parser Error: ${error}. ${prev.type} !== ${type}.`);\n    }\n    return prev;\n  }\n  function parseAny() {\n    switch (tokens[current].type) {\n      case TOKEN_TYPES.Text:\n        return parseText();\n      case TOKEN_TYPES.OpenStatement:\n        return parseJinjaStatement();\n      case TOKEN_TYPES.OpenExpression:\n        return parseJinjaExpression();\n      default:\n        throw new SyntaxError(`Unexpected token type: ${tokens[current].type}`);\n    }\n  }\n  function not(...types) {\n    return current + types.length <= tokens.length && types.some((type, i) => type !== tokens[current + i].type);\n  }\n  function is(...types) {\n    return current + types.length <= tokens.length && types.every((type, i) => type === tokens[current + i].type);\n  }\n  function parseText() {\n    return new StringLiteral(expect(TOKEN_TYPES.Text, \"Expected text token\").value);\n  }\n  function parseJinjaStatement() {\n    expect(TOKEN_TYPES.OpenStatement, \"Expected opening statement token\");\n    let result;\n    switch (tokens[current].type) {\n      case TOKEN_TYPES.Set:\n        ++current;\n        result = parseSetStatement();\n        expect(TOKEN_TYPES.CloseStatement, \"Expected closing statement token\");\n        break;\n      case TOKEN_TYPES.If:\n        ++current;\n        result = parseIfStatement();\n        expect(TOKEN_TYPES.OpenStatement, \"Expected {% token\");\n        expect(TOKEN_TYPES.EndIf, \"Expected endif token\");\n        expect(TOKEN_TYPES.CloseStatement, \"Expected %} token\");\n        break;\n      case TOKEN_TYPES.Macro:\n        ++current;\n        result = parseMacroStatement();\n        expect(TOKEN_TYPES.OpenStatement, \"Expected {% token\");\n        expect(TOKEN_TYPES.EndMacro, \"Expected endmacro token\");\n        expect(TOKEN_TYPES.CloseStatement, \"Expected %} token\");\n        break;\n      case TOKEN_TYPES.For:\n        ++current;\n        result = parseForStatement();\n        expect(TOKEN_TYPES.OpenStatement, \"Expected {% token\");\n        expect(TOKEN_TYPES.EndFor, \"Expected endfor token\");\n        expect(TOKEN_TYPES.CloseStatement, \"Expected %} token\");\n        break;\n      default:\n        throw new SyntaxError(`Unknown statement type: ${tokens[current].type}`);\n    }\n    return result;\n  }\n  function parseJinjaExpression() {\n    expect(TOKEN_TYPES.OpenExpression, \"Expected opening expression token\");\n    const result = parseExpression();\n    expect(TOKEN_TYPES.CloseExpression, \"Expected closing expression token\");\n    return result;\n  }\n  function parseSetStatement() {\n    const left = parseExpression();\n    if (is(TOKEN_TYPES.Equals)) {\n      ++current;\n      const value = parseSetStatement();\n      return new SetStatement(left, value);\n    }\n    return left;\n  }\n  function parseIfStatement() {\n    const test = parseExpression();\n    expect(TOKEN_TYPES.CloseStatement, \"Expected closing statement token\");\n    const body = [];\n    const alternate = [];\n    while (!(tokens[current]?.type === TOKEN_TYPES.OpenStatement && (tokens[current + 1]?.type === TOKEN_TYPES.ElseIf || tokens[current + 1]?.type === TOKEN_TYPES.Else || tokens[current + 1]?.type === TOKEN_TYPES.EndIf))) {\n      body.push(parseAny());\n    }\n    if (tokens[current]?.type === TOKEN_TYPES.OpenStatement && tokens[current + 1]?.type !== TOKEN_TYPES.EndIf) {\n      ++current;\n      if (is(TOKEN_TYPES.ElseIf)) {\n        expect(TOKEN_TYPES.ElseIf, \"Expected elseif token\");\n        alternate.push(parseIfStatement());\n      } else {\n        expect(TOKEN_TYPES.Else, \"Expected else token\");\n        expect(TOKEN_TYPES.CloseStatement, \"Expected closing statement token\");\n        while (!(tokens[current]?.type === TOKEN_TYPES.OpenStatement && tokens[current + 1]?.type === TOKEN_TYPES.EndIf)) {\n          alternate.push(parseAny());\n        }\n      }\n    }\n    return new If(test, body, alternate);\n  }\n  function parseMacroStatement() {\n    const name = parsePrimaryExpression();\n    if (name.type !== \"Identifier\") {\n      throw new SyntaxError(`Expected identifier following macro statement`);\n    }\n    const args = parseArgs();\n    expect(TOKEN_TYPES.CloseStatement, \"Expected closing statement token\");\n    const body = [];\n    while (not(TOKEN_TYPES.OpenStatement, TOKEN_TYPES.EndMacro)) {\n      body.push(parseAny());\n    }\n    return new Macro(name, args, body);\n  }\n  function parseExpressionSequence(primary = false) {\n    const fn = primary ? parsePrimaryExpression : parseExpression;\n    const expressions = [fn()];\n    const isTuple = is(TOKEN_TYPES.Comma);\n    while (isTuple) {\n      ++current;\n      expressions.push(fn());\n      if (!is(TOKEN_TYPES.Comma)) {\n        break;\n      }\n    }\n    return isTuple ? new TupleLiteral(expressions) : expressions[0];\n  }\n  function parseForStatement() {\n    const loopVariable = parseExpressionSequence(true);\n    if (!(loopVariable instanceof Identifier || loopVariable instanceof TupleLiteral)) {\n      throw new SyntaxError(`Expected identifier/tuple for the loop variable, got ${loopVariable.type} instead`);\n    }\n    expect(TOKEN_TYPES.In, \"Expected `in` keyword following loop variable\");\n    const iterable = parseExpression();\n    expect(TOKEN_TYPES.CloseStatement, \"Expected closing statement token\");\n    const body = [];\n    while (not(TOKEN_TYPES.OpenStatement, TOKEN_TYPES.EndFor) && not(TOKEN_TYPES.OpenStatement, TOKEN_TYPES.Else)) {\n      body.push(parseAny());\n    }\n    const alternative = [];\n    if (is(TOKEN_TYPES.OpenStatement, TOKEN_TYPES.Else)) {\n      ++current;\n      ++current;\n      expect(TOKEN_TYPES.CloseStatement, \"Expected closing statement token\");\n      while (not(TOKEN_TYPES.OpenStatement, TOKEN_TYPES.EndFor)) {\n        alternative.push(parseAny());\n      }\n    }\n    return new For(loopVariable, iterable, body, alternative);\n  }\n  function parseExpression() {\n    return parseIfExpression();\n  }\n  function parseIfExpression() {\n    const a = parseLogicalOrExpression();\n    if (is(TOKEN_TYPES.If)) {\n      ++current;\n      const predicate = parseLogicalOrExpression();\n      if (is(TOKEN_TYPES.Else)) {\n        ++current;\n        const b = parseLogicalOrExpression();\n        return new If(predicate, [a], [b]);\n      } else {\n        return new SelectExpression(a, predicate);\n      }\n    }\n    return a;\n  }\n  function parseLogicalOrExpression() {\n    let left = parseLogicalAndExpression();\n    while (is(TOKEN_TYPES.Or)) {\n      const operator = tokens[current];\n      ++current;\n      const right = parseLogicalAndExpression();\n      left = new BinaryExpression(operator, left, right);\n    }\n    return left;\n  }\n  function parseLogicalAndExpression() {\n    let left = parseLogicalNegationExpression();\n    while (is(TOKEN_TYPES.And)) {\n      const operator = tokens[current];\n      ++current;\n      const right = parseLogicalNegationExpression();\n      left = new BinaryExpression(operator, left, right);\n    }\n    return left;\n  }\n  function parseLogicalNegationExpression() {\n    let right;\n    while (is(TOKEN_TYPES.Not)) {\n      const operator = tokens[current];\n      ++current;\n      const arg = parseLogicalNegationExpression();\n      right = new UnaryExpression(operator, arg);\n    }\n    return right ?? parseComparisonExpression();\n  }\n  function parseComparisonExpression() {\n    let left = parseAdditiveExpression();\n    while (is(TOKEN_TYPES.ComparisonBinaryOperator) || is(TOKEN_TYPES.In) || is(TOKEN_TYPES.NotIn)) {\n      const operator = tokens[current];\n      ++current;\n      const right = parseAdditiveExpression();\n      left = new BinaryExpression(operator, left, right);\n    }\n    return left;\n  }\n  function parseAdditiveExpression() {\n    let left = parseMultiplicativeExpression();\n    while (is(TOKEN_TYPES.AdditiveBinaryOperator)) {\n      const operator = tokens[current];\n      ++current;\n      const right = parseMultiplicativeExpression();\n      left = new BinaryExpression(operator, left, right);\n    }\n    return left;\n  }\n  function parseCallMemberExpression() {\n    const member = parseMemberExpression();\n    if (is(TOKEN_TYPES.OpenParen)) {\n      return parseCallExpression(member);\n    }\n    return member;\n  }\n  function parseCallExpression(callee) {\n    let callExpression = new CallExpression(callee, parseArgs());\n    if (is(TOKEN_TYPES.OpenParen)) {\n      callExpression = parseCallExpression(callExpression);\n    }\n    return callExpression;\n  }\n  function parseArgs() {\n    expect(TOKEN_TYPES.OpenParen, \"Expected opening parenthesis for arguments list\");\n    const args = parseArgumentsList();\n    expect(TOKEN_TYPES.CloseParen, \"Expected closing parenthesis for arguments list\");\n    return args;\n  }\n  function parseArgumentsList() {\n    const args = [];\n    while (!is(TOKEN_TYPES.CloseParen)) {\n      let argument = parseExpression();\n      if (is(TOKEN_TYPES.Equals)) {\n        ++current;\n        if (!(argument instanceof Identifier)) {\n          throw new SyntaxError(`Expected identifier for keyword argument`);\n        }\n        const value = parseExpression();\n        argument = new KeywordArgumentExpression(argument, value);\n      }\n      args.push(argument);\n      if (is(TOKEN_TYPES.Comma)) {\n        ++current;\n      }\n    }\n    return args;\n  }\n  function parseMemberExpressionArgumentsList() {\n    const slices = [];\n    let isSlice = false;\n    while (!is(TOKEN_TYPES.CloseSquareBracket)) {\n      if (is(TOKEN_TYPES.Colon)) {\n        slices.push(void 0);\n        ++current;\n        isSlice = true;\n      } else {\n        slices.push(parseExpression());\n        if (is(TOKEN_TYPES.Colon)) {\n          ++current;\n          isSlice = true;\n        }\n      }\n    }\n    if (slices.length === 0) {\n      throw new SyntaxError(`Expected at least one argument for member/slice expression`);\n    }\n    if (isSlice) {\n      if (slices.length > 3) {\n        throw new SyntaxError(`Expected 0-3 arguments for slice expression`);\n      }\n      return new SliceExpression(...slices);\n    }\n    return slices[0];\n  }\n  function parseMemberExpression() {\n    let object = parsePrimaryExpression();\n    while (is(TOKEN_TYPES.Dot) || is(TOKEN_TYPES.OpenSquareBracket)) {\n      const operator = tokens[current];\n      ++current;\n      let property;\n      const computed = operator.type !== TOKEN_TYPES.Dot;\n      if (computed) {\n        property = parseMemberExpressionArgumentsList();\n        expect(TOKEN_TYPES.CloseSquareBracket, \"Expected closing square bracket\");\n      } else {\n        property = parsePrimaryExpression();\n        if (property.type !== \"Identifier\") {\n          throw new SyntaxError(`Expected identifier following dot operator`);\n        }\n      }\n      object = new MemberExpression(object, property, computed);\n    }\n    return object;\n  }\n  function parseMultiplicativeExpression() {\n    let left = parseTestExpression();\n    while (is(TOKEN_TYPES.MultiplicativeBinaryOperator)) {\n      const operator = tokens[current];\n      ++current;\n      const right = parseTestExpression();\n      left = new BinaryExpression(operator, left, right);\n    }\n    return left;\n  }\n  function parseTestExpression() {\n    let operand = parseFilterExpression();\n    while (is(TOKEN_TYPES.Is)) {\n      ++current;\n      const negate = is(TOKEN_TYPES.Not);\n      if (negate) {\n        ++current;\n      }\n      let filter = parsePrimaryExpression();\n      if (filter instanceof BooleanLiteral) {\n        filter = new Identifier(filter.value.toString());\n      }\n      if (!(filter instanceof Identifier)) {\n        throw new SyntaxError(`Expected identifier for the test`);\n      }\n      operand = new TestExpression(operand, negate, filter);\n    }\n    return operand;\n  }\n  function parseFilterExpression() {\n    let operand = parseCallMemberExpression();\n    while (is(TOKEN_TYPES.Pipe)) {\n      ++current;\n      let filter = parsePrimaryExpression();\n      if (!(filter instanceof Identifier)) {\n        throw new SyntaxError(`Expected identifier for the filter`);\n      }\n      if (is(TOKEN_TYPES.OpenParen)) {\n        filter = parseCallExpression(filter);\n      }\n      operand = new FilterExpression(operand, filter);\n    }\n    return operand;\n  }\n  function parsePrimaryExpression() {\n    const token = tokens[current];\n    switch (token.type) {\n      case TOKEN_TYPES.NumericLiteral:\n        ++current;\n        return new NumericLiteral(Number(token.value));\n      case TOKEN_TYPES.StringLiteral:\n        ++current;\n        return new StringLiteral(token.value);\n      case TOKEN_TYPES.BooleanLiteral:\n        ++current;\n        return new BooleanLiteral(token.value.toLowerCase() === \"true\");\n      case TOKEN_TYPES.Identifier:\n        ++current;\n        return new Identifier(token.value);\n      case TOKEN_TYPES.OpenParen: {\n        ++current;\n        const expression = parseExpressionSequence();\n        if (tokens[current].type !== TOKEN_TYPES.CloseParen) {\n          throw new SyntaxError(`Expected closing parenthesis, got ${tokens[current].type} instead`);\n        }\n        ++current;\n        return expression;\n      }\n      case TOKEN_TYPES.OpenSquareBracket: {\n        ++current;\n        const values = [];\n        while (!is(TOKEN_TYPES.CloseSquareBracket)) {\n          values.push(parseExpression());\n          if (is(TOKEN_TYPES.Comma)) {\n            ++current;\n          }\n        }\n        ++current;\n        return new ArrayLiteral(values);\n      }\n      case TOKEN_TYPES.OpenCurlyBracket: {\n        ++current;\n        const values = /* @__PURE__ */ new Map();\n        while (!is(TOKEN_TYPES.CloseCurlyBracket)) {\n          const key = parseExpression();\n          expect(TOKEN_TYPES.Colon, \"Expected colon between key and value in object literal\");\n          const value = parseExpression();\n          values.set(key, value);\n          if (is(TOKEN_TYPES.Comma)) {\n            ++current;\n          }\n        }\n        ++current;\n        return new ObjectLiteral(values);\n      }\n      default:\n        throw new SyntaxError(`Unexpected token: ${token.type}`);\n    }\n  }\n  while (current < tokens.length) {\n    program.body.push(parseAny());\n  }\n  return program;\n}\n\n// src/utils.ts\nfunction range(start, stop, step = 1) {\n  if (stop === void 0) {\n    stop = start;\n    start = 0;\n  }\n  const result = [];\n  for (let i = start; i < stop; i += step) {\n    result.push(i);\n  }\n  return result;\n}\nfunction slice(array, start, stop, step = 1) {\n  const direction = Math.sign(step);\n  if (direction >= 0) {\n    start = (start ??= 0) < 0 ? Math.max(array.length + start, 0) : Math.min(start, array.length);\n    stop = (stop ??= array.length) < 0 ? Math.max(array.length + stop, 0) : Math.min(stop, array.length);\n  } else {\n    start = (start ??= array.length - 1) < 0 ? Math.max(array.length + start, -1) : Math.min(start, array.length - 1);\n    stop = (stop ??= -1) < -1 ? Math.max(array.length + stop, -1) : Math.min(stop, array.length - 1);\n  }\n  const result = [];\n  for (let i = start; direction * i < direction * stop; i += step) {\n    result.push(array[i]);\n  }\n  return result;\n}\nfunction titleCase(value) {\n  return value.replace(/\\b\\w/g, (c) => c.toUpperCase());\n}\n\n// src/runtime.ts\nvar RuntimeValue = class {\n  type = \"RuntimeValue\";\n  value;\n  /**\n   * A collection of built-in functions for this type.\n   */\n  builtins = /* @__PURE__ */ new Map();\n  /**\n   * Creates a new RuntimeValue.\n   */\n  constructor(value = void 0) {\n    this.value = value;\n  }\n  /**\n   * Determines truthiness or falsiness of the runtime value.\n   * This function should be overridden by subclasses if it has custom truthiness criteria.\n   * @returns {BooleanValue} BooleanValue(true) if the value is truthy, BooleanValue(false) otherwise.\n   */\n  __bool__() {\n    return new BooleanValue(!!this.value);\n  }\n};\nvar NumericValue = class extends RuntimeValue {\n  type = \"NumericValue\";\n};\nvar StringValue = class extends RuntimeValue {\n  type = \"StringValue\";\n  builtins = /* @__PURE__ */ new Map([\n    [\n      \"upper\",\n      new FunctionValue(() => {\n        return new StringValue(this.value.toUpperCase());\n      })\n    ],\n    [\n      \"lower\",\n      new FunctionValue(() => {\n        return new StringValue(this.value.toLowerCase());\n      })\n    ],\n    [\n      \"strip\",\n      new FunctionValue(() => {\n        return new StringValue(this.value.trim());\n      })\n    ],\n    [\n      \"title\",\n      new FunctionValue(() => {\n        return new StringValue(titleCase(this.value));\n      })\n    ],\n    [\"length\", new NumericValue(this.value.length)]\n  ]);\n};\nvar BooleanValue = class extends RuntimeValue {\n  type = \"BooleanValue\";\n};\nvar ObjectValue = class extends RuntimeValue {\n  type = \"ObjectValue\";\n  /**\n   * NOTE: necessary to override since all JavaScript arrays are considered truthy,\n   * while only non-empty Python arrays are consider truthy.\n   *\n   * e.g.,\n   *  - JavaScript:  {} && 5 -> 5\n   *  - Python:      {} and 5 -> {}\n   */\n  __bool__() {\n    return new BooleanValue(this.value.size > 0);\n  }\n  builtins = /* @__PURE__ */ new Map([\n    [\n      \"get\",\n      new FunctionValue(([key, defaultValue]) => {\n        if (!(key instanceof StringValue)) {\n          throw new Error(`Object key must be a string: got ${key.type}`);\n        }\n        return this.value.get(key.value) ?? defaultValue ?? new NullValue();\n      })\n    ],\n    [\n      \"items\",\n      new FunctionValue(() => {\n        return new ArrayValue(\n          Array.from(this.value.entries()).map(([key, value]) => new ArrayValue([new StringValue(key), value]))\n        );\n      })\n    ]\n  ]);\n};\nvar KeywordArgumentsValue = class extends ObjectValue {\n  type = \"KeywordArgumentsValue\";\n};\nvar ArrayValue = class extends RuntimeValue {\n  type = \"ArrayValue\";\n  builtins = /* @__PURE__ */ new Map([[\"length\", new NumericValue(this.value.length)]]);\n  /**\n   * NOTE: necessary to override since all JavaScript arrays are considered truthy,\n   * while only non-empty Python arrays are consider truthy.\n   *\n   * e.g.,\n   *  - JavaScript:  [] && 5 -> 5\n   *  - Python:      [] and 5 -> []\n   */\n  __bool__() {\n    return new BooleanValue(this.value.length > 0);\n  }\n};\nvar TupleValue = class extends ArrayValue {\n  type = \"TupleValue\";\n};\nvar FunctionValue = class extends RuntimeValue {\n  type = \"FunctionValue\";\n};\nvar NullValue = class extends RuntimeValue {\n  type = \"NullValue\";\n};\nvar UndefinedValue = class extends RuntimeValue {\n  type = \"UndefinedValue\";\n};\nvar Environment = class {\n  constructor(parent) {\n    this.parent = parent;\n  }\n  /**\n   * The variables declared in this environment.\n   */\n  variables = /* @__PURE__ */ new Map([\n    [\n      \"namespace\",\n      new FunctionValue((args) => {\n        if (args.length === 0) {\n          return new ObjectValue(/* @__PURE__ */ new Map());\n        }\n        if (args.length !== 1 || !(args[0] instanceof ObjectValue)) {\n          throw new Error(\"`namespace` expects either zero arguments or a single object argument\");\n        }\n        return args[0];\n      })\n    ]\n  ]);\n  /**\n   * The tests available in this environment.\n   */\n  tests = /* @__PURE__ */ new Map([\n    [\"boolean\", (operand) => operand.type === \"BooleanValue\"],\n    [\"callable\", (operand) => operand instanceof FunctionValue],\n    [\n      \"odd\",\n      (operand) => {\n        if (operand.type !== \"NumericValue\") {\n          throw new Error(`Cannot apply test \"odd\" to type: ${operand.type}`);\n        }\n        return operand.value % 2 !== 0;\n      }\n    ],\n    [\n      \"even\",\n      (operand) => {\n        if (operand.type !== \"NumericValue\") {\n          throw new Error(`Cannot apply test \"even\" to type: ${operand.type}`);\n        }\n        return operand.value % 2 === 0;\n      }\n    ],\n    [\"false\", (operand) => operand.type === \"BooleanValue\" && !operand.value],\n    [\"true\", (operand) => operand.type === \"BooleanValue\" && operand.value],\n    [\"string\", (operand) => operand.type === \"StringValue\"],\n    [\"number\", (operand) => operand.type === \"NumericValue\"],\n    [\"integer\", (operand) => operand.type === \"NumericValue\" && Number.isInteger(operand.value)],\n    [\"iterable\", (operand) => operand instanceof ArrayValue || operand instanceof StringValue],\n    [\n      \"lower\",\n      (operand) => {\n        const str = operand.value;\n        return operand.type === \"StringValue\" && str === str.toLowerCase();\n      }\n    ],\n    [\n      \"upper\",\n      (operand) => {\n        const str = operand.value;\n        return operand.type === \"StringValue\" && str === str.toUpperCase();\n      }\n    ],\n    [\"none\", (operand) => operand.type === \"NullValue\"],\n    [\"defined\", (operand) => operand.type !== \"UndefinedValue\"],\n    [\"undefined\", (operand) => operand.type === \"UndefinedValue\"],\n    [\"equalto\", (a, b) => a.value === b.value],\n    [\"eq\", (a, b) => a.value === b.value]\n  ]);\n  /**\n   * Set the value of a variable in the current environment.\n   */\n  set(name, value) {\n    return this.declareVariable(name, convertToRuntimeValues(value));\n  }\n  declareVariable(name, value) {\n    if (this.variables.has(name)) {\n      throw new SyntaxError(`Variable already declared: ${name}`);\n    }\n    this.variables.set(name, value);\n    return value;\n  }\n  // private assignVariable(name: string, value: AnyRuntimeValue): AnyRuntimeValue {\n  // \tconst env = this.resolve(name);\n  // \tenv.variables.set(name, value);\n  // \treturn value;\n  // }\n  /**\n   * Set variable in the current scope.\n   * See https://jinja.palletsprojects.com/en/3.0.x/templates/#assignments for more information.\n   */\n  setVariable(name, value) {\n    this.variables.set(name, value);\n    return value;\n  }\n  /**\n   * Resolve the environment in which the variable is declared.\n   * @param {string} name The name of the variable.\n   * @returns {Environment} The environment in which the variable is declared.\n   */\n  resolve(name) {\n    if (this.variables.has(name)) {\n      return this;\n    }\n    if (this.parent) {\n      return this.parent.resolve(name);\n    }\n    throw new Error(`Unknown variable: ${name}`);\n  }\n  lookupVariable(name) {\n    try {\n      return this.resolve(name).variables.get(name) ?? new UndefinedValue();\n    } catch {\n      return new UndefinedValue();\n    }\n  }\n};\nvar Interpreter = class {\n  global;\n  constructor(env) {\n    this.global = env ?? new Environment();\n  }\n  /**\n   * Run the program.\n   */\n  run(program) {\n    return this.evaluate(program, this.global);\n  }\n  /**\n   * Evaluates expressions following the binary operation type.\n   */\n  evaluateBinaryExpression(node, environment) {\n    const left = this.evaluate(node.left, environment);\n    switch (node.operator.value) {\n      case \"and\":\n        return left.__bool__().value ? this.evaluate(node.right, environment) : left;\n      case \"or\":\n        return left.__bool__().value ? left : this.evaluate(node.right, environment);\n    }\n    const right = this.evaluate(node.right, environment);\n    switch (node.operator.value) {\n      case \"==\":\n        return new BooleanValue(left.value == right.value);\n      case \"!=\":\n        return new BooleanValue(left.value != right.value);\n    }\n    if (left instanceof UndefinedValue || right instanceof UndefinedValue) {\n      throw new Error(\"Cannot perform operation on undefined values\");\n    } else if (left instanceof NullValue || right instanceof NullValue) {\n      throw new Error(\"Cannot perform operation on null values\");\n    } else if (left instanceof NumericValue && right instanceof NumericValue) {\n      switch (node.operator.value) {\n        case \"+\":\n          return new NumericValue(left.value + right.value);\n        case \"-\":\n          return new NumericValue(left.value - right.value);\n        case \"*\":\n          return new NumericValue(left.value * right.value);\n        case \"/\":\n          return new NumericValue(left.value / right.value);\n        case \"%\":\n          return new NumericValue(left.value % right.value);\n        case \"<\":\n          return new BooleanValue(left.value < right.value);\n        case \">\":\n          return new BooleanValue(left.value > right.value);\n        case \">=\":\n          return new BooleanValue(left.value >= right.value);\n        case \"<=\":\n          return new BooleanValue(left.value <= right.value);\n      }\n    } else if (left instanceof ArrayValue && right instanceof ArrayValue) {\n      switch (node.operator.value) {\n        case \"+\":\n          return new ArrayValue(left.value.concat(right.value));\n      }\n    } else if (right instanceof ArrayValue) {\n      const member = right.value.find((x) => x.value === left.value) !== void 0;\n      switch (node.operator.value) {\n        case \"in\":\n          return new BooleanValue(member);\n        case \"not in\":\n          return new BooleanValue(!member);\n      }\n    }\n    if (left instanceof StringValue || right instanceof StringValue) {\n      switch (node.operator.value) {\n        case \"+\":\n          return new StringValue(left.value.toString() + right.value.toString());\n      }\n    }\n    if (left instanceof StringValue && right instanceof StringValue) {\n      switch (node.operator.value) {\n        case \"in\":\n          return new BooleanValue(right.value.includes(left.value));\n        case \"not in\":\n          return new BooleanValue(!right.value.includes(left.value));\n      }\n    }\n    if (left instanceof StringValue && right instanceof ObjectValue) {\n      switch (node.operator.value) {\n        case \"in\":\n          return new BooleanValue(right.value.has(left.value));\n        case \"not in\":\n          return new BooleanValue(!right.value.has(left.value));\n      }\n    }\n    throw new SyntaxError(`Unknown operator \"${node.operator.value}\" between ${left.type} and ${right.type}`);\n  }\n  evaluateArguments(args, environment) {\n    const positionalArguments = [];\n    const keywordArguments = /* @__PURE__ */ new Map();\n    for (const argument of args) {\n      if (argument.type === \"KeywordArgumentExpression\") {\n        const kwarg = argument;\n        keywordArguments.set(kwarg.key.value, this.evaluate(kwarg.value, environment));\n      } else {\n        if (keywordArguments.size > 0) {\n          throw new Error(\"Positional arguments must come before keyword arguments\");\n        }\n        positionalArguments.push(this.evaluate(argument, environment));\n      }\n    }\n    return [positionalArguments, keywordArguments];\n  }\n  /**\n   * Evaluates expressions following the filter operation type.\n   */\n  evaluateFilterExpression(node, environment) {\n    const operand = this.evaluate(node.operand, environment);\n    if (node.filter.type === \"Identifier\") {\n      const filter = node.filter;\n      if (filter.value === \"tojson\") {\n        return new StringValue(toJSON(operand));\n      }\n      if (operand instanceof ArrayValue) {\n        switch (filter.value) {\n          case \"list\":\n            return operand;\n          case \"first\":\n            return operand.value[0];\n          case \"last\":\n            return operand.value[operand.value.length - 1];\n          case \"length\":\n            return new NumericValue(operand.value.length);\n          case \"reverse\":\n            return new ArrayValue(operand.value.reverse());\n          case \"sort\":\n            return new ArrayValue(\n              operand.value.sort((a, b) => {\n                if (a.type !== b.type) {\n                  throw new Error(`Cannot compare different types: ${a.type} and ${b.type}`);\n                }\n                switch (a.type) {\n                  case \"NumericValue\":\n                    return a.value - b.value;\n                  case \"StringValue\":\n                    return a.value.localeCompare(b.value);\n                  default:\n                    throw new Error(`Cannot compare type: ${a.type}`);\n                }\n              })\n            );\n          default:\n            throw new Error(`Unknown ArrayValue filter: ${filter.value}`);\n        }\n      } else if (operand instanceof StringValue) {\n        switch (filter.value) {\n          case \"length\":\n            return new NumericValue(operand.value.length);\n          case \"upper\":\n            return new StringValue(operand.value.toUpperCase());\n          case \"lower\":\n            return new StringValue(operand.value.toLowerCase());\n          case \"title\":\n            return new StringValue(titleCase(operand.value));\n          case \"capitalize\":\n            return new StringValue(operand.value.charAt(0).toUpperCase() + operand.value.slice(1));\n          case \"trim\":\n            return new StringValue(operand.value.trim());\n          case \"indent\":\n            return new StringValue(\n              operand.value.split(\"\\n\").map(\n                (x, i) => (\n                  // By default, don't indent the first line or empty lines\n                  i === 0 || x.length === 0 ? x : \"    \" + x\n                )\n              ).join(\"\\n\")\n            );\n          case \"string\":\n            return operand;\n          default:\n            throw new Error(`Unknown StringValue filter: ${filter.value}`);\n        }\n      } else if (operand instanceof NumericValue) {\n        switch (filter.value) {\n          case \"abs\":\n            return new NumericValue(Math.abs(operand.value));\n          default:\n            throw new Error(`Unknown NumericValue filter: ${filter.value}`);\n        }\n      } else if (operand instanceof ObjectValue) {\n        switch (filter.value) {\n          case \"items\":\n            return new ArrayValue(\n              Array.from(operand.value.entries()).map(([key, value]) => new ArrayValue([new StringValue(key), value]))\n            );\n          case \"length\":\n            return new NumericValue(operand.value.size);\n          default:\n            throw new Error(`Unknown ObjectValue filter: ${filter.value}`);\n        }\n      }\n      throw new Error(`Cannot apply filter \"${filter.value}\" to type: ${operand.type}`);\n    } else if (node.filter.type === \"CallExpression\") {\n      const filter = node.filter;\n      if (filter.callee.type !== \"Identifier\") {\n        throw new Error(`Unknown filter: ${filter.callee.type}`);\n      }\n      const filterName = filter.callee.value;\n      if (filterName === \"tojson\") {\n        const [, kwargs] = this.evaluateArguments(filter.args, environment);\n        const indent = kwargs.get(\"indent\") ?? new NullValue();\n        if (!(indent instanceof NumericValue || indent instanceof NullValue)) {\n          throw new Error(\"If set, indent must be a number\");\n        }\n        return new StringValue(toJSON(operand, indent.value));\n      }\n      if (operand instanceof ArrayValue) {\n        switch (filterName) {\n          case \"selectattr\": {\n            if (operand.value.some((x) => !(x instanceof ObjectValue))) {\n              throw new Error(\"`selectattr` can only be applied to array of objects\");\n            }\n            if (filter.args.some((x) => x.type !== \"StringLiteral\")) {\n              throw new Error(\"arguments of `selectattr` must be strings\");\n            }\n            const [attr, testName, value] = filter.args.map((x) => this.evaluate(x, environment));\n            let testFunction;\n            if (testName) {\n              const test = environment.tests.get(testName.value);\n              if (!test) {\n                throw new Error(`Unknown test: ${testName.value}`);\n              }\n              testFunction = test;\n            } else {\n              testFunction = (...x) => x[0].__bool__().value;\n            }\n            const filtered = operand.value.filter((item) => {\n              const a = item.value.get(attr.value);\n              if (a) {\n                return testFunction(a, value);\n              }\n              return false;\n            });\n            return new ArrayValue(filtered);\n          }\n          case \"map\": {\n            const [, kwargs] = this.evaluateArguments(filter.args, environment);\n            if (kwargs.has(\"attribute\")) {\n              const attr = kwargs.get(\"attribute\");\n              if (!(attr instanceof StringValue)) {\n                throw new Error(\"attribute must be a string\");\n              }\n              const defaultValue = kwargs.get(\"default\");\n              const mapped = operand.value.map((item) => {\n                if (!(item instanceof ObjectValue)) {\n                  throw new Error(\"items in map must be an object\");\n                }\n                return item.value.get(attr.value) ?? defaultValue ?? new UndefinedValue();\n              });\n              return new ArrayValue(mapped);\n            } else {\n              throw new Error(\"`map` expressions without `attribute` set are not currently supported.\");\n            }\n          }\n        }\n        throw new Error(`Unknown ArrayValue filter: ${filterName}`);\n      } else if (operand instanceof StringValue) {\n        switch (filterName) {\n          case \"indent\": {\n            const [args, kwargs] = this.evaluateArguments(filter.args, environment);\n            const width = args.at(0) ?? kwargs.get(\"width\") ?? new NumericValue(4);\n            if (!(width instanceof NumericValue)) {\n              throw new Error(\"width must be a number\");\n            }\n            const first = args.at(1) ?? kwargs.get(\"first\") ?? new BooleanValue(false);\n            const blank = args.at(2) ?? kwargs.get(\"blank\") ?? new BooleanValue(false);\n            const lines = operand.value.split(\"\\n\");\n            const indent = \" \".repeat(width.value);\n            const indented = lines.map(\n              (x, i) => !first.value && i === 0 || !blank.value && x.length === 0 ? x : indent + x\n            );\n            return new StringValue(indented.join(\"\\n\"));\n          }\n        }\n        throw new Error(`Unknown StringValue filter: ${filterName}`);\n      } else {\n        throw new Error(`Cannot apply filter \"${filterName}\" to type: ${operand.type}`);\n      }\n    }\n    throw new Error(`Unknown filter: ${node.filter.type}`);\n  }\n  /**\n   * Evaluates expressions following the test operation type.\n   */\n  evaluateTestExpression(node, environment) {\n    const operand = this.evaluate(node.operand, environment);\n    const test = environment.tests.get(node.test.value);\n    if (!test) {\n      throw new Error(`Unknown test: ${node.test.value}`);\n    }\n    const result = test(operand);\n    return new BooleanValue(node.negate ? !result : result);\n  }\n  /**\n   * Evaluates expressions following the unary operation type.\n   */\n  evaluateUnaryExpression(node, environment) {\n    const argument = this.evaluate(node.argument, environment);\n    switch (node.operator.value) {\n      case \"not\":\n        return new BooleanValue(!argument.value);\n      default:\n        throw new SyntaxError(`Unknown operator: ${node.operator.value}`);\n    }\n  }\n  evalProgram(program, environment) {\n    return this.evaluateBlock(program.body, environment);\n  }\n  evaluateBlock(statements, environment) {\n    let result = \"\";\n    for (const statement of statements) {\n      const lastEvaluated = this.evaluate(statement, environment);\n      if (lastEvaluated.type !== \"NullValue\" && lastEvaluated.type !== \"UndefinedValue\") {\n        result += lastEvaluated.value;\n      }\n    }\n    return new StringValue(result);\n  }\n  evaluateIdentifier(node, environment) {\n    return environment.lookupVariable(node.value);\n  }\n  evaluateCallExpression(expr, environment) {\n    const [args, kwargs] = this.evaluateArguments(expr.args, environment);\n    if (kwargs.size > 0) {\n      args.push(new KeywordArgumentsValue(kwargs));\n    }\n    const fn = this.evaluate(expr.callee, environment);\n    if (fn.type !== \"FunctionValue\") {\n      throw new Error(`Cannot call something that is not a function: got ${fn.type}`);\n    }\n    return fn.value(args, environment);\n  }\n  evaluateSliceExpression(object, expr, environment) {\n    if (!(object instanceof ArrayValue || object instanceof StringValue)) {\n      throw new Error(\"Slice object must be an array or string\");\n    }\n    const start = this.evaluate(expr.start, environment);\n    const stop = this.evaluate(expr.stop, environment);\n    const step = this.evaluate(expr.step, environment);\n    if (!(start instanceof NumericValue || start instanceof UndefinedValue)) {\n      throw new Error(\"Slice start must be numeric or undefined\");\n    }\n    if (!(stop instanceof NumericValue || stop instanceof UndefinedValue)) {\n      throw new Error(\"Slice stop must be numeric or undefined\");\n    }\n    if (!(step instanceof NumericValue || step instanceof UndefinedValue)) {\n      throw new Error(\"Slice step must be numeric or undefined\");\n    }\n    if (object instanceof ArrayValue) {\n      return new ArrayValue(slice(object.value, start.value, stop.value, step.value));\n    } else {\n      return new StringValue(slice(Array.from(object.value), start.value, stop.value, step.value).join(\"\"));\n    }\n  }\n  evaluateMemberExpression(expr, environment) {\n    const object = this.evaluate(expr.object, environment);\n    let property;\n    if (expr.computed) {\n      if (expr.property.type === \"SliceExpression\") {\n        return this.evaluateSliceExpression(object, expr.property, environment);\n      } else {\n        property = this.evaluate(expr.property, environment);\n      }\n    } else {\n      property = new StringValue(expr.property.value);\n    }\n    let value;\n    if (object instanceof ObjectValue) {\n      if (!(property instanceof StringValue)) {\n        throw new Error(`Cannot access property with non-string: got ${property.type}`);\n      }\n      value = object.value.get(property.value) ?? object.builtins.get(property.value);\n    } else if (object instanceof ArrayValue || object instanceof StringValue) {\n      if (property instanceof NumericValue) {\n        value = object.value.at(property.value);\n        if (object instanceof StringValue) {\n          value = new StringValue(object.value.at(property.value));\n        }\n      } else if (property instanceof StringValue) {\n        value = object.builtins.get(property.value);\n      } else {\n        throw new Error(`Cannot access property with non-string/non-number: got ${property.type}`);\n      }\n    } else {\n      if (!(property instanceof StringValue)) {\n        throw new Error(`Cannot access property with non-string: got ${property.type}`);\n      }\n      value = object.builtins.get(property.value);\n    }\n    return value instanceof RuntimeValue ? value : new UndefinedValue();\n  }\n  evaluateSet(node, environment) {\n    const rhs = this.evaluate(node.value, environment);\n    if (node.assignee.type === \"Identifier\") {\n      const variableName = node.assignee.value;\n      environment.setVariable(variableName, rhs);\n    } else if (node.assignee.type === \"MemberExpression\") {\n      const member = node.assignee;\n      const object = this.evaluate(member.object, environment);\n      if (!(object instanceof ObjectValue)) {\n        throw new Error(\"Cannot assign to member of non-object\");\n      }\n      if (member.property.type !== \"Identifier\") {\n        throw new Error(\"Cannot assign to member with non-identifier property\");\n      }\n      object.value.set(member.property.value, rhs);\n    } else {\n      throw new Error(`Invalid LHS inside assignment expression: ${JSON.stringify(node.assignee)}`);\n    }\n    return new NullValue();\n  }\n  evaluateIf(node, environment) {\n    const test = this.evaluate(node.test, environment);\n    return this.evaluateBlock(test.__bool__().value ? node.body : node.alternate, environment);\n  }\n  evaluateFor(node, environment) {\n    const scope = new Environment(environment);\n    let test, iterable;\n    if (node.iterable.type === \"SelectExpression\") {\n      const select = node.iterable;\n      iterable = this.evaluate(select.iterable, scope);\n      test = select.test;\n    } else {\n      iterable = this.evaluate(node.iterable, scope);\n    }\n    if (!(iterable instanceof ArrayValue)) {\n      throw new Error(`Expected iterable type in for loop: got ${iterable.type}`);\n    }\n    const items = [];\n    const scopeUpdateFunctions = [];\n    for (let i = 0; i < iterable.value.length; ++i) {\n      const loopScope = new Environment(scope);\n      const current = iterable.value[i];\n      let scopeUpdateFunction;\n      if (node.loopvar.type === \"Identifier\") {\n        scopeUpdateFunction = (scope2) => scope2.setVariable(node.loopvar.value, current);\n      } else if (node.loopvar.type === \"TupleLiteral\") {\n        const loopvar = node.loopvar;\n        if (current.type !== \"ArrayValue\") {\n          throw new Error(`Cannot unpack non-iterable type: ${current.type}`);\n        }\n        const c = current;\n        if (loopvar.value.length !== c.value.length) {\n          throw new Error(`Too ${loopvar.value.length > c.value.length ? \"few\" : \"many\"} items to unpack`);\n        }\n        scopeUpdateFunction = (scope2) => {\n          for (let j = 0; j < loopvar.value.length; ++j) {\n            if (loopvar.value[j].type !== \"Identifier\") {\n              throw new Error(`Cannot unpack non-identifier type: ${loopvar.value[j].type}`);\n            }\n            scope2.setVariable(loopvar.value[j].value, c.value[j]);\n          }\n        };\n      } else {\n        throw new Error(`Invalid loop variable(s): ${node.loopvar.type}`);\n      }\n      if (test) {\n        scopeUpdateFunction(loopScope);\n        const testValue = this.evaluate(test, loopScope);\n        if (!testValue.__bool__().value) {\n          continue;\n        }\n      }\n      items.push(current);\n      scopeUpdateFunctions.push(scopeUpdateFunction);\n    }\n    let result = \"\";\n    let noIteration = true;\n    for (let i = 0; i < items.length; ++i) {\n      const loop = /* @__PURE__ */ new Map([\n        [\"index\", new NumericValue(i + 1)],\n        [\"index0\", new NumericValue(i)],\n        [\"revindex\", new NumericValue(items.length - i)],\n        [\"revindex0\", new NumericValue(items.length - i - 1)],\n        [\"first\", new BooleanValue(i === 0)],\n        [\"last\", new BooleanValue(i === items.length - 1)],\n        [\"length\", new NumericValue(items.length)],\n        [\"previtem\", i > 0 ? items[i - 1] : new UndefinedValue()],\n        [\"nextitem\", i < items.length - 1 ? items[i + 1] : new UndefinedValue()]\n      ]);\n      scope.setVariable(\"loop\", new ObjectValue(loop));\n      scopeUpdateFunctions[i](scope);\n      const evaluated = this.evaluateBlock(node.body, scope);\n      result += evaluated.value;\n      noIteration = false;\n    }\n    if (noIteration) {\n      const defaultEvaluated = this.evaluateBlock(node.defaultBlock, scope);\n      result += defaultEvaluated.value;\n    }\n    return new StringValue(result);\n  }\n  /**\n   * See https://jinja.palletsprojects.com/en/3.1.x/templates/#macros for more information.\n   */\n  evaluateMacro(node, environment) {\n    environment.setVariable(\n      node.name.value,\n      new FunctionValue((args, scope) => {\n        const macroScope = new Environment(scope);\n        args = args.slice();\n        let kwargs;\n        if (args.at(-1)?.type === \"KeywordArgumentsValue\") {\n          kwargs = args.pop();\n        }\n        for (let i = 0; i < node.args.length; ++i) {\n          const nodeArg = node.args[i];\n          const passedArg = args[i];\n          if (nodeArg.type === \"Identifier\") {\n            const identifier = nodeArg;\n            if (!passedArg) {\n              throw new Error(`Missing positional argument: ${identifier.value}`);\n            }\n            macroScope.setVariable(identifier.value, passedArg);\n          } else if (nodeArg.type === \"KeywordArgumentExpression\") {\n            const kwarg = nodeArg;\n            const value = passedArg ?? // Try positional arguments first\n            kwargs?.value.get(kwarg.key.value) ?? // Look in user-passed kwargs\n            this.evaluate(kwarg.value, macroScope);\n            macroScope.setVariable(kwarg.key.value, value);\n          } else {\n            throw new Error(`Unknown argument type: ${nodeArg.type}`);\n          }\n        }\n        return this.evaluateBlock(node.body, macroScope);\n      })\n    );\n    return new NullValue();\n  }\n  evaluate(statement, environment) {\n    if (statement === void 0)\n      return new UndefinedValue();\n    switch (statement.type) {\n      case \"Program\":\n        return this.evalProgram(statement, environment);\n      case \"Set\":\n        return this.evaluateSet(statement, environment);\n      case \"If\":\n        return this.evaluateIf(statement, environment);\n      case \"For\":\n        return this.evaluateFor(statement, environment);\n      case \"Macro\":\n        return this.evaluateMacro(statement, environment);\n      case \"NumericLiteral\":\n        return new NumericValue(Number(statement.value));\n      case \"StringLiteral\":\n        return new StringValue(statement.value);\n      case \"BooleanLiteral\":\n        return new BooleanValue(statement.value);\n      case \"ArrayLiteral\":\n        return new ArrayValue(statement.value.map((x) => this.evaluate(x, environment)));\n      case \"TupleLiteral\":\n        return new TupleValue(statement.value.map((x) => this.evaluate(x, environment)));\n      case \"ObjectLiteral\": {\n        const mapping = /* @__PURE__ */ new Map();\n        for (const [key, value] of statement.value) {\n          const evaluatedKey = this.evaluate(key, environment);\n          if (!(evaluatedKey instanceof StringValue)) {\n            throw new Error(`Object keys must be strings: got ${evaluatedKey.type}`);\n          }\n          mapping.set(evaluatedKey.value, this.evaluate(value, environment));\n        }\n        return new ObjectValue(mapping);\n      }\n      case \"Identifier\":\n        return this.evaluateIdentifier(statement, environment);\n      case \"CallExpression\":\n        return this.evaluateCallExpression(statement, environment);\n      case \"MemberExpression\":\n        return this.evaluateMemberExpression(statement, environment);\n      case \"UnaryExpression\":\n        return this.evaluateUnaryExpression(statement, environment);\n      case \"BinaryExpression\":\n        return this.evaluateBinaryExpression(statement, environment);\n      case \"FilterExpression\":\n        return this.evaluateFilterExpression(statement, environment);\n      case \"TestExpression\":\n        return this.evaluateTestExpression(statement, environment);\n      default:\n        throw new SyntaxError(`Unknown node type: ${statement.type}`);\n    }\n  }\n};\nfunction convertToRuntimeValues(input) {\n  switch (typeof input) {\n    case \"number\":\n      return new NumericValue(input);\n    case \"string\":\n      return new StringValue(input);\n    case \"boolean\":\n      return new BooleanValue(input);\n    case \"undefined\":\n      return new UndefinedValue();\n    case \"object\":\n      if (input === null) {\n        return new NullValue();\n      } else if (Array.isArray(input)) {\n        return new ArrayValue(input.map(convertToRuntimeValues));\n      } else {\n        return new ObjectValue(\n          new Map(Object.entries(input).map(([key, value]) => [key, convertToRuntimeValues(value)]))\n        );\n      }\n    case \"function\":\n      return new FunctionValue((args, _scope) => {\n        const result = input(...args.map((x) => x.value)) ?? null;\n        return convertToRuntimeValues(result);\n      });\n    default:\n      throw new Error(`Cannot convert to runtime value: ${input}`);\n  }\n}\nfunction toJSON(input, indent, depth) {\n  const currentDepth = depth ?? 0;\n  switch (input.type) {\n    case \"NullValue\":\n    case \"UndefinedValue\":\n      return \"null\";\n    case \"NumericValue\":\n    case \"StringValue\":\n    case \"BooleanValue\":\n      return JSON.stringify(input.value);\n    case \"ArrayValue\":\n    case \"ObjectValue\": {\n      const indentValue = indent ? \" \".repeat(indent) : \"\";\n      const basePadding = \"\\n\" + indentValue.repeat(currentDepth);\n      const childrenPadding = basePadding + indentValue;\n      if (input.type === \"ArrayValue\") {\n        const core = input.value.map((x) => toJSON(x, indent, currentDepth + 1));\n        return indent ? `[${childrenPadding}${core.join(`,${childrenPadding}`)}${basePadding}]` : `[${core.join(\", \")}]`;\n      } else {\n        const core = Array.from(input.value.entries()).map(([key, value]) => {\n          const v = `\"${key}\": ${toJSON(value, indent, currentDepth + 1)}`;\n          return indent ? `${childrenPadding}${v}` : v;\n        });\n        return indent ? `{${core.join(\",\")}${basePadding}}` : `{${core.join(\", \")}}`;\n      }\n    }\n    default:\n      throw new Error(`Cannot convert to JSON: ${input.type}`);\n  }\n}\n\n// src/index.ts\nvar Template = class {\n  parsed;\n  /**\n   * @param {string} template The template string\n   */\n  constructor(template) {\n    const tokens = tokenize(template, {\n      lstrip_blocks: true,\n      trim_blocks: true\n    });\n    this.parsed = parse(tokens);\n  }\n  render(items) {\n    const env = new Environment();\n    env.set(\"false\", false);\n    env.set(\"true\", true);\n    env.set(\"raise_exception\", (args) => {\n      throw new Error(args);\n    });\n    env.set(\"range\", range);\n    for (const [key, value] of Object.entries(items)) {\n      env.set(key, value);\n    }\n    const interpreter = new Interpreter(env);\n    const result = interpreter.run(this.parsed);\n    return result.value;\n  }\n};\nexport {\n  Environment,\n  Interpreter,\n  Template,\n  parse,\n  tokenize\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nconst backends = new Map();\nconst backendsSortedByPriority = [];\n/**\n * Register a backend.\n *\n * @param name - the name as a key to lookup as an execution provider.\n * @param backend - the backend object.\n * @param priority - an integer indicating the priority of the backend. Higher number means higher priority. if priority\n * < 0, it will be considered as a 'beta' version and will not be used as a fallback backend by default.\n *\n * @ignore\n */\nexport const registerBackend = (name, backend, priority) => {\n    if (backend && typeof backend.init === 'function' && typeof backend.createInferenceSessionHandler === 'function') {\n        const currentBackend = backends.get(name);\n        if (currentBackend === undefined) {\n            backends.set(name, { backend, priority });\n        }\n        else if (currentBackend.priority > priority) {\n            // same name is already registered with a higher priority. skip registeration.\n            return;\n        }\n        else if (currentBackend.priority === priority) {\n            if (currentBackend.backend !== backend) {\n                throw new Error(`cannot register backend \"${name}\" using priority ${priority}`);\n            }\n        }\n        if (priority >= 0) {\n            const i = backendsSortedByPriority.indexOf(name);\n            if (i !== -1) {\n                backendsSortedByPriority.splice(i, 1);\n            }\n            for (let i = 0; i < backendsSortedByPriority.length; i++) {\n                if (backends.get(backendsSortedByPriority[i]).priority <= priority) {\n                    backendsSortedByPriority.splice(i, 0, name);\n                    return;\n                }\n            }\n            backendsSortedByPriority.push(name);\n        }\n        return;\n    }\n    throw new TypeError('not a valid backend');\n};\n/**\n * Try to resolve and initialize a backend.\n *\n * @param backendName - the name of the backend.\n * @returns the backend instance if resolved and initialized successfully, or an error message if failed.\n */\nconst tryResolveAndInitializeBackend = async (backendName) => {\n    const backendInfo = backends.get(backendName);\n    if (!backendInfo) {\n        return 'backend not found.';\n    }\n    if (backendInfo.initialized) {\n        return backendInfo.backend;\n    }\n    else if (backendInfo.aborted) {\n        return backendInfo.error;\n    }\n    else {\n        const isInitializing = !!backendInfo.initPromise;\n        try {\n            if (!isInitializing) {\n                backendInfo.initPromise = backendInfo.backend.init(backendName);\n            }\n            await backendInfo.initPromise;\n            backendInfo.initialized = true;\n            return backendInfo.backend;\n        }\n        catch (e) {\n            if (!isInitializing) {\n                backendInfo.error = `${e}`;\n                backendInfo.aborted = true;\n            }\n            return backendInfo.error;\n        }\n        finally {\n            delete backendInfo.initPromise;\n        }\n    }\n};\n/**\n * Resolve execution providers from the specific session options.\n *\n * @param options - the session options object.\n * @returns a promise that resolves to a tuple of an initialized backend instance and a session options object with\n * filtered EP list.\n *\n * @ignore\n */\nexport const resolveBackendAndExecutionProviders = async (options) => {\n    // extract backend hints from session options\n    const eps = options.executionProviders || [];\n    const backendHints = eps.map(i => typeof i === 'string' ? i : i.name);\n    const backendNames = backendHints.length === 0 ? backendsSortedByPriority : backendHints;\n    // try to resolve and initialize all requested backends\n    let backend;\n    const errors = [];\n    const availableBackendNames = new Set();\n    for (const backendName of backendNames) {\n        const resolveResult = await tryResolveAndInitializeBackend(backendName);\n        if (typeof resolveResult === 'string') {\n            errors.push({ name: backendName, err: resolveResult });\n        }\n        else {\n            if (!backend) {\n                backend = resolveResult;\n            }\n            if (backend === resolveResult) {\n                availableBackendNames.add(backendName);\n            }\n        }\n    }\n    // if no backend is available, throw error.\n    if (!backend) {\n        throw new Error(`no available backend found. ERR: ${errors.map(e => `[${e.name}] ${e.err}`).join(', ')}`);\n    }\n    // for each explicitly requested backend, if it's not available, output warning message.\n    for (const { name, err } of errors) {\n        if (backendHints.includes(name)) {\n            // eslint-disable-next-line no-console\n            console.warn(`removing requested execution provider \"${name}\" from session options because it is not available: ${err}`);\n        }\n    }\n    const filteredEps = eps.filter(i => availableBackendNames.has(typeof i === 'string' ? i : i.name));\n    return [\n        backend, new Proxy(options, {\n            get: (target, prop) => {\n                if (prop === 'executionProviders') {\n                    return filteredEps;\n                }\n                return Reflect.get(target, prop);\n            }\n        })\n    ];\n};\n//# sourceMappingURL=backend-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { version } from './version.js';\nlet logLevelValue = 'warning';\nexport const env = {\n    wasm: {},\n    webgl: {},\n    webgpu: {},\n    versions: { common: version },\n    set logLevel(value) {\n        if (value === undefined) {\n            return;\n        }\n        if (typeof value !== 'string' || ['verbose', 'info', 'warning', 'error', 'fatal'].indexOf(value) === -1) {\n            throw new Error(`Unsupported logging level: ${value}`);\n        }\n        logLevelValue = value;\n    },\n    get logLevel() {\n        return logLevelValue;\n    },\n};\n// set property 'logLevel' so that they can be correctly transferred to worker by `postMessage()`.\nObject.defineProperty(env, 'logLevel', { enumerable: true });\n//# sourceMappingURL=env-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { env as envImpl } from './env-impl.js';\n/**\n * Represent a set of flags as a global singleton.\n */\nexport const env = envImpl;\n//# sourceMappingURL=env.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { resolveBackendAndExecutionProviders } from './backend-impl.js';\nimport { Tensor } from './tensor.js';\nimport { TRACE_FUNC_BEGIN, TRACE_FUNC_END } from './trace.js';\nexport class InferenceSession {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    async run(feeds, arg1, arg2) {\n        TRACE_FUNC_BEGIN();\n        const fetches = {};\n        let options = {};\n        // check inputs\n        if (typeof feeds !== 'object' || feeds === null || feeds instanceof Tensor || Array.isArray(feeds)) {\n            throw new TypeError('\\'feeds\\' must be an object that use input names as keys and OnnxValue as corresponding values.');\n        }\n        let isFetchesEmpty = true;\n        // determine which override is being used\n        if (typeof arg1 === 'object') {\n            if (arg1 === null) {\n                throw new TypeError('Unexpected argument[1]: cannot be null.');\n            }\n            if (arg1 instanceof Tensor) {\n                throw new TypeError('\\'fetches\\' cannot be a Tensor');\n            }\n            if (Array.isArray(arg1)) {\n                if (arg1.length === 0) {\n                    throw new TypeError('\\'fetches\\' cannot be an empty array.');\n                }\n                isFetchesEmpty = false;\n                // output names\n                for (const name of arg1) {\n                    if (typeof name !== 'string') {\n                        throw new TypeError('\\'fetches\\' must be a string array or an object.');\n                    }\n                    if (this.outputNames.indexOf(name) === -1) {\n                        throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n                    }\n                    fetches[name] = null;\n                }\n                if (typeof arg2 === 'object' && arg2 !== null) {\n                    options = arg2;\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'options\\' must be an object.');\n                }\n            }\n            else {\n                // decide whether arg1 is fetches or options\n                // if any output name is present and its value is valid OnnxValue, we consider it fetches\n                let isFetches = false;\n                const arg1Keys = Object.getOwnPropertyNames(arg1);\n                for (const name of this.outputNames) {\n                    if (arg1Keys.indexOf(name) !== -1) {\n                        const v = arg1[name];\n                        if (v === null || v instanceof Tensor) {\n                            isFetches = true;\n                            isFetchesEmpty = false;\n                            fetches[name] = v;\n                        }\n                    }\n                }\n                if (isFetches) {\n                    if (typeof arg2 === 'object' && arg2 !== null) {\n                        options = arg2;\n                    }\n                    else if (typeof arg2 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else {\n                    options = arg1;\n                }\n            }\n        }\n        else if (typeof arg1 !== 'undefined') {\n            throw new TypeError('Unexpected argument[1]: must be \\'fetches\\' or \\'options\\'.');\n        }\n        // check if all inputs are in feed\n        for (const name of this.inputNames) {\n            if (typeof feeds[name] === 'undefined') {\n                throw new Error(`input '${name}' is missing in 'feeds'.`);\n            }\n        }\n        // if no fetches is specified, we use the full output names list\n        if (isFetchesEmpty) {\n            for (const name of this.outputNames) {\n                fetches[name] = null;\n            }\n        }\n        // feeds, fetches and options are prepared\n        const results = await this.handler.run(feeds, fetches, options);\n        const returnValue = {};\n        for (const key in results) {\n            if (Object.hasOwnProperty.call(results, key)) {\n                const result = results[key];\n                if (result instanceof Tensor) {\n                    returnValue[key] = result;\n                }\n                else {\n                    returnValue[key] = new Tensor(result.type, result.data, result.dims);\n                }\n            }\n        }\n        TRACE_FUNC_END();\n        return returnValue;\n    }\n    async release() {\n        return this.handler.dispose();\n    }\n    static async create(arg0, arg1, arg2, arg3) {\n        TRACE_FUNC_BEGIN();\n        // either load from a file or buffer\n        let filePathOrUint8Array;\n        let options = {};\n        if (typeof arg0 === 'string') {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof Uint8Array) {\n            filePathOrUint8Array = arg0;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n        }\n        else if (arg0 instanceof ArrayBuffer ||\n            (typeof SharedArrayBuffer !== 'undefined' && arg0 instanceof SharedArrayBuffer)) {\n            const buffer = arg0;\n            let byteOffset = 0;\n            let byteLength = arg0.byteLength;\n            if (typeof arg1 === 'object' && arg1 !== null) {\n                options = arg1;\n            }\n            else if (typeof arg1 === 'number') {\n                byteOffset = arg1;\n                if (!Number.isSafeInteger(byteOffset)) {\n                    throw new RangeError('\\'byteOffset\\' must be an integer.');\n                }\n                if (byteOffset < 0 || byteOffset >= buffer.byteLength) {\n                    throw new RangeError(`'byteOffset' is out of range [0, ${buffer.byteLength}).`);\n                }\n                byteLength = arg0.byteLength - byteOffset;\n                if (typeof arg2 === 'number') {\n                    byteLength = arg2;\n                    if (!Number.isSafeInteger(byteLength)) {\n                        throw new RangeError('\\'byteLength\\' must be an integer.');\n                    }\n                    if (byteLength <= 0 || byteOffset + byteLength > buffer.byteLength) {\n                        throw new RangeError(`'byteLength' is out of range (0, ${buffer.byteLength - byteOffset}].`);\n                    }\n                    if (typeof arg3 === 'object' && arg3 !== null) {\n                        options = arg3;\n                    }\n                    else if (typeof arg3 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'byteLength\\' must be a number.');\n                }\n            }\n            else if (typeof arg1 !== 'undefined') {\n                throw new TypeError('\\'options\\' must be an object.');\n            }\n            filePathOrUint8Array = new Uint8Array(buffer, byteOffset, byteLength);\n        }\n        else {\n            throw new TypeError('Unexpected argument[0]: must be \\'path\\' or \\'buffer\\'.');\n        }\n        // resolve backend, update session options with validated EPs, and create session handler\n        const [backend, optionsWithValidatedEPs] = await resolveBackendAndExecutionProviders(options);\n        const handler = await backend.createInferenceSessionHandler(filePathOrUint8Array, optionsWithValidatedEPs);\n        TRACE_FUNC_END();\n        return new InferenceSession(handler);\n    }\n    startProfiling() {\n        this.handler.startProfiling();\n    }\n    endProfiling() {\n        this.handler.endProfiling();\n    }\n    get inputNames() {\n        return this.handler.inputNames;\n    }\n    get outputNames() {\n        return this.handler.outputNames;\n    }\n}\n//# sourceMappingURL=inference-session-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { InferenceSession as InferenceSessionImpl } from './inference-session-impl.js';\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const InferenceSession = InferenceSessionImpl;\n//# sourceMappingURL=inference-session.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n/**\n * implementation of Tensor.toDataURL()\n */\nexport const tensorToDataURL = (tensor, options) => {\n    const canvas = typeof document !== 'undefined' ? document.createElement('canvas') : (new OffscreenCanvas(1, 1));\n    canvas.width = tensor.dims[3];\n    canvas.height = tensor.dims[2];\n    const pixels2DContext = canvas.getContext('2d');\n    if (pixels2DContext != null) {\n        // Default values for height and width & format\n        let width;\n        let height;\n        if (options?.tensorLayout !== undefined && options.tensorLayout === 'NHWC') {\n            width = tensor.dims[2];\n            height = tensor.dims[3];\n        }\n        else { // Default layout is NCWH\n            width = tensor.dims[3];\n            height = tensor.dims[2];\n        }\n        const inputformat = options?.format !== undefined ? options.format : 'RGB';\n        const norm = options?.norm;\n        let normMean;\n        let normBias;\n        if (norm === undefined || norm.mean === undefined) {\n            normMean = [255, 255, 255, 255];\n        }\n        else {\n            if (typeof (norm.mean) === 'number') {\n                normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n            }\n            else {\n                normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 0];\n                if (norm.mean[3] !== undefined) {\n                    normMean[3] = norm.mean[3];\n                }\n            }\n        }\n        if (norm === undefined || norm.bias === undefined) {\n            normBias = [0, 0, 0, 0];\n        }\n        else {\n            if (typeof (norm.bias) === 'number') {\n                normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n            }\n            else {\n                normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];\n                if (norm.bias[3] !== undefined) {\n                    normBias[3] = norm.bias[3];\n                }\n            }\n        }\n        const stride = height * width;\n        // Default pointer assignments\n        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n        // Updating the pointer assignments based on the input image format\n        if (inputformat === 'RGBA') {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n            aTensorPointer = stride * 3;\n        }\n        else if (inputformat === 'RGB') {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n        }\n        else if (inputformat === 'RBG') {\n            rTensorPointer = 0;\n            bTensorPointer = stride;\n            gTensorPointer = stride * 2;\n        }\n        for (let i = 0; i < height; i++) {\n            for (let j = 0; j < width; j++) {\n                const R = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0]; // R value\n                const G = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1]; // G value\n                const B = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2]; // B value\n                const A = aTensorPointer === -1 ?\n                    255 :\n                    (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3]; // A value\n                // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n                pixels2DContext.fillStyle = 'rgba(' + R + ',' + G + ',' + B + ',' + A + ')';\n                pixels2DContext.fillRect(j, i, 1, 1);\n            }\n        }\n        if ('toDataURL' in canvas) {\n            return canvas.toDataURL();\n        }\n        else {\n            throw new Error('toDataURL is not supported');\n        }\n    }\n    else {\n        throw new Error('Can not access image data');\n    }\n};\n/**\n * implementation of Tensor.toImageData()\n */\nexport const tensorToImageData = (tensor, options) => {\n    const pixels2DContext = typeof document !== 'undefined' ?\n        document.createElement('canvas').getContext('2d') :\n        new OffscreenCanvas(1, 1).getContext('2d');\n    let image;\n    if (pixels2DContext != null) {\n        // Default values for height and width & format\n        let width;\n        let height;\n        let channels;\n        if (options?.tensorLayout !== undefined && options.tensorLayout === 'NHWC') {\n            width = tensor.dims[2];\n            height = tensor.dims[1];\n            channels = tensor.dims[3];\n        }\n        else { // Default layout is NCWH\n            width = tensor.dims[3];\n            height = tensor.dims[2];\n            channels = tensor.dims[1];\n        }\n        const inputformat = options !== undefined ? (options.format !== undefined ? options.format : 'RGB') : 'RGB';\n        const norm = options?.norm;\n        let normMean;\n        let normBias;\n        if (norm === undefined || norm.mean === undefined) {\n            normMean = [255, 255, 255, 255];\n        }\n        else {\n            if (typeof (norm.mean) === 'number') {\n                normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n            }\n            else {\n                normMean = [norm.mean[0], norm.mean[1], norm.mean[2], 255];\n                if (norm.mean[3] !== undefined) {\n                    normMean[3] = norm.mean[3];\n                }\n            }\n        }\n        if (norm === undefined || norm.bias === undefined) {\n            normBias = [0, 0, 0, 0];\n        }\n        else {\n            if (typeof (norm.bias) === 'number') {\n                normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n            }\n            else {\n                normBias = [norm.bias[0], norm.bias[1], norm.bias[2], 0];\n                if (norm.bias[3] !== undefined) {\n                    normBias[3] = norm.bias[3];\n                }\n            }\n        }\n        const stride = height * width;\n        if (options !== undefined) {\n            if (options.format !== undefined && (channels === 4 && options.format !== 'RGBA') ||\n                (channels === 3 && (options.format !== 'RGB' && options.format !== 'BGR'))) {\n                throw new Error('Tensor format doesn\\'t match input tensor dims');\n            }\n        }\n        // Default pointer assignments\n        const step = 4;\n        let rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n        let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n        // Updating the pointer assignments based on the input image format\n        if (inputformat === 'RGBA') {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n            aTensorPointer = stride * 3;\n        }\n        else if (inputformat === 'RGB') {\n            rTensorPointer = 0;\n            gTensorPointer = stride;\n            bTensorPointer = stride * 2;\n        }\n        else if (inputformat === 'RBG') {\n            rTensorPointer = 0;\n            bTensorPointer = stride;\n            gTensorPointer = stride * 2;\n        }\n        image = pixels2DContext.createImageData(width, height);\n        for (let i = 0; i < height * width; rImagePointer += step, gImagePointer += step, bImagePointer += step, aImagePointer += step, i++) {\n            image.data[rImagePointer] = (tensor.data[rTensorPointer++] - normBias[0]) * normMean[0]; // R value\n            image.data[gImagePointer] = (tensor.data[gTensorPointer++] - normBias[1]) * normMean[1]; // G value\n            image.data[bImagePointer] = (tensor.data[bTensorPointer++] - normBias[2]) * normMean[2]; // B value\n            image.data[aImagePointer] = aTensorPointer === -1 ?\n                255 :\n                (tensor.data[aTensorPointer++] - normBias[3]) * normMean[3]; // A value\n        }\n    }\n    else {\n        throw new Error('Can not access image data');\n    }\n    return image;\n};\n//# sourceMappingURL=tensor-conversion-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { Tensor } from './tensor-impl.js';\n/**\n * Create a new tensor object from image object\n *\n * @param buffer - Extracted image buffer data - assuming RGBA format\n * @param imageFormat - input image configuration - required configurations height, width, format\n * @param tensorFormat - output tensor configuration - Default is RGB format\n */\nexport const bufferToTensor = (buffer, options) => {\n    if (buffer === undefined) {\n        throw new Error('Image buffer must be defined');\n    }\n    if (options.height === undefined || options.width === undefined) {\n        throw new Error('Image height and width must be defined');\n    }\n    if (options.tensorLayout === 'NHWC') {\n        throw new Error('NHWC Tensor layout is not supported yet');\n    }\n    const { height, width } = options;\n    const norm = options.norm ?? { mean: 255, bias: 0 };\n    let normMean;\n    let normBias;\n    if (typeof (norm.mean) === 'number') {\n        normMean = [norm.mean, norm.mean, norm.mean, norm.mean];\n    }\n    else {\n        normMean = [norm.mean[0], norm.mean[1], norm.mean[2], norm.mean[3] ?? 255];\n    }\n    if (typeof (norm.bias) === 'number') {\n        normBias = [norm.bias, norm.bias, norm.bias, norm.bias];\n    }\n    else {\n        normBias = [norm.bias[0], norm.bias[1], norm.bias[2], norm.bias[3] ?? 0];\n    }\n    const inputformat = options.format !== undefined ? options.format : 'RGBA';\n    // default value is RGBA since imagedata and HTMLImageElement uses it\n    const outputformat = options.tensorFormat !== undefined ? (options.tensorFormat !== undefined ? options.tensorFormat : 'RGB') : 'RGB';\n    const stride = height * width;\n    const float32Data = outputformat === 'RGBA' ? new Float32Array(stride * 4) : new Float32Array(stride * 3);\n    // Default pointer assignments\n    let step = 4, rImagePointer = 0, gImagePointer = 1, bImagePointer = 2, aImagePointer = 3;\n    let rTensorPointer = 0, gTensorPointer = stride, bTensorPointer = stride * 2, aTensorPointer = -1;\n    // Updating the pointer assignments based on the input image format\n    if (inputformat === 'RGB') {\n        step = 3;\n        rImagePointer = 0;\n        gImagePointer = 1;\n        bImagePointer = 2;\n        aImagePointer = -1;\n    }\n    // Updating the pointer assignments based on the output tensor format\n    if (outputformat === 'RGBA') {\n        aTensorPointer = stride * 3;\n    }\n    else if (outputformat === 'RBG') {\n        rTensorPointer = 0;\n        bTensorPointer = stride;\n        gTensorPointer = stride * 2;\n    }\n    else if (outputformat === 'BGR') {\n        bTensorPointer = 0;\n        gTensorPointer = stride;\n        rTensorPointer = stride * 2;\n    }\n    for (let i = 0; i < stride; i++, rImagePointer += step, bImagePointer += step, gImagePointer += step, aImagePointer += step) {\n        float32Data[rTensorPointer++] = (buffer[rImagePointer] + normBias[0]) / normMean[0];\n        float32Data[gTensorPointer++] = (buffer[gImagePointer] + normBias[1]) / normMean[1];\n        float32Data[bTensorPointer++] = (buffer[bImagePointer] + normBias[2]) / normMean[2];\n        if (aTensorPointer !== -1 && aImagePointer !== -1) {\n            float32Data[aTensorPointer++] = (buffer[aImagePointer] + normBias[3]) / normMean[3];\n        }\n    }\n    // Float32Array -> ort.Tensor\n    const outputTensor = outputformat === 'RGBA' ? new Tensor('float32', float32Data, [1, 4, height, width]) :\n        new Tensor('float32', float32Data, [1, 3, height, width]);\n    return outputTensor;\n};\n/**\n * implementation of Tensor.fromImage().\n */\nexport const tensorFromImage = async (image, options) => {\n    // checking the type of image object\n    const isHTMLImageEle = typeof (HTMLImageElement) !== 'undefined' && image instanceof HTMLImageElement;\n    const isImageDataEle = typeof (ImageData) !== 'undefined' && image instanceof ImageData;\n    const isImageBitmap = typeof (ImageBitmap) !== 'undefined' && image instanceof ImageBitmap;\n    const isString = typeof image === 'string';\n    let data;\n    let bufferToTensorOptions = options ?? {};\n    const createCanvas = () => {\n        if (typeof document !== 'undefined') {\n            return document.createElement('canvas');\n        }\n        else if (typeof OffscreenCanvas !== 'undefined') {\n            return new OffscreenCanvas(1, 1);\n        }\n        else {\n            throw new Error('Canvas is not supported');\n        }\n    };\n    const createCanvasContext = (canvas) => {\n        if (canvas instanceof HTMLCanvasElement) {\n            return canvas.getContext('2d');\n        }\n        else if (canvas instanceof OffscreenCanvas) {\n            return canvas.getContext('2d');\n        }\n        else {\n            return null;\n        }\n    };\n    // filling and checking image configuration options\n    if (isHTMLImageEle) {\n        // HTMLImageElement - image object - format is RGBA by default\n        const canvas = createCanvas();\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const pixels2DContext = createCanvasContext(canvas);\n        if (pixels2DContext != null) {\n            let height = image.height;\n            let width = image.width;\n            if (options !== undefined && options.resizedHeight !== undefined && options.resizedWidth !== undefined) {\n                height = options.resizedHeight;\n                width = options.resizedWidth;\n            }\n            if (options !== undefined) {\n                bufferToTensorOptions = options;\n                if (options.tensorFormat !== undefined) {\n                    throw new Error('Image input config format must be RGBA for HTMLImageElement');\n                }\n                else {\n                    bufferToTensorOptions.tensorFormat = 'RGBA';\n                }\n                bufferToTensorOptions.height = height;\n                bufferToTensorOptions.width = width;\n            }\n            else {\n                bufferToTensorOptions.tensorFormat = 'RGBA';\n                bufferToTensorOptions.height = height;\n                bufferToTensorOptions.width = width;\n            }\n            pixels2DContext.drawImage(image, 0, 0);\n            data = pixels2DContext.getImageData(0, 0, width, height).data;\n        }\n        else {\n            throw new Error('Can not access image data');\n        }\n    }\n    else if (isImageDataEle) {\n        let height;\n        let width;\n        if (options !== undefined && options.resizedWidth !== undefined && options.resizedHeight !== undefined) {\n            height = options.resizedHeight;\n            width = options.resizedWidth;\n        }\n        else {\n            height = image.height;\n            width = image.width;\n        }\n        if (options !== undefined) {\n            bufferToTensorOptions = options;\n        }\n        bufferToTensorOptions.format = 'RGBA';\n        bufferToTensorOptions.height = height;\n        bufferToTensorOptions.width = width;\n        if (options !== undefined) {\n            const tempCanvas = createCanvas();\n            tempCanvas.width = width;\n            tempCanvas.height = height;\n            const pixels2DContext = createCanvasContext(tempCanvas);\n            if (pixels2DContext != null) {\n                pixels2DContext.putImageData(image, 0, 0);\n                data = pixels2DContext.getImageData(0, 0, width, height).data;\n            }\n            else {\n                throw new Error('Can not access image data');\n            }\n        }\n        else {\n            data = image.data;\n        }\n    }\n    else if (isImageBitmap) {\n        // ImageBitmap - image object - format must be provided by user\n        if (options === undefined) {\n            throw new Error('Please provide image config with format for Imagebitmap');\n        }\n        const canvas = createCanvas();\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const pixels2DContext = createCanvasContext(canvas);\n        if (pixels2DContext != null) {\n            const height = image.height;\n            const width = image.width;\n            pixels2DContext.drawImage(image, 0, 0, width, height);\n            data = pixels2DContext.getImageData(0, 0, width, height).data;\n            bufferToTensorOptions.height = height;\n            bufferToTensorOptions.width = width;\n            return bufferToTensor(data, bufferToTensorOptions);\n        }\n        else {\n            throw new Error('Can not access image data');\n        }\n    }\n    else if (isString) {\n        return new Promise((resolve, reject) => {\n            const canvas = createCanvas();\n            const context = createCanvasContext(canvas);\n            if (!image || !context) {\n                return reject();\n            }\n            const newImage = new Image();\n            newImage.crossOrigin = 'Anonymous';\n            newImage.src = image;\n            newImage.onload = () => {\n                canvas.width = newImage.width;\n                canvas.height = newImage.height;\n                context.drawImage(newImage, 0, 0, canvas.width, canvas.height);\n                const img = context.getImageData(0, 0, canvas.width, canvas.height);\n                bufferToTensorOptions.height = canvas.height;\n                bufferToTensorOptions.width = canvas.width;\n                resolve(bufferToTensor(img.data, bufferToTensorOptions));\n            };\n        });\n    }\n    else {\n        throw new Error('Input data provided is not supported - aborted tensor creation');\n    }\n    if (data !== undefined) {\n        return bufferToTensor(data, bufferToTensorOptions);\n    }\n    else {\n        throw new Error('Input data provided is not supported - aborted tensor creation');\n    }\n};\n/**\n * implementation of Tensor.fromTexture().\n */\nexport const tensorFromTexture = (texture, options) => {\n    const { width, height, download, dispose } = options;\n    // Always assume RGBAF32. TODO: support different texture format\n    const dims = [1, height, width, 4];\n    return new Tensor({ location: 'texture', type: 'float32', texture, dims, download, dispose });\n};\n/**\n * implementation of Tensor.fromGpuBuffer().\n */\nexport const tensorFromGpuBuffer = (gpuBuffer, options) => {\n    const { dataType, dims, download, dispose } = options;\n    return new Tensor({ location: 'gpu-buffer', type: dataType ?? 'float32', gpuBuffer, dims, download, dispose });\n};\n/**\n * implementation of Tensor.fromPinnedBuffer().\n */\nexport const tensorFromPinnedBuffer = (type, buffer, dims) => new Tensor({ location: 'cpu-pinned', type, data: buffer, dims: dims ?? [buffer.length] });\n//# sourceMappingURL=tensor-factory-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nexport const NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = new Map([\n    ['float32', Float32Array],\n    ['uint8', Uint8Array],\n    ['int8', Int8Array],\n    ['uint16', Uint16Array],\n    ['int16', Int16Array],\n    ['int32', Int32Array],\n    ['bool', Uint8Array],\n    ['float64', Float64Array],\n    ['uint32', Uint32Array],\n]);\n// a runtime map that maps type string to TypedArray constructor. Should match Tensor.DataTypeMap.\nexport const NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = new Map([\n    [Float32Array, 'float32'],\n    [Uint8Array, 'uint8'],\n    [Int8Array, 'int8'],\n    [Uint16Array, 'uint16'],\n    [Int16Array, 'int16'],\n    [Int32Array, 'int32'],\n    [Float64Array, 'float64'],\n    [Uint32Array, 'uint32'],\n]);\n// the following code allows delaying execution of BigInt/Float16Array checking. This allows lazy initialization for\n// NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP and NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP, which allows BigInt/Float16Array\n// polyfill if available.\nlet isTypedArrayChecked = false;\nexport const checkTypedArray = () => {\n    if (!isTypedArrayChecked) {\n        isTypedArrayChecked = true;\n        const isBigInt64ArrayAvailable = typeof BigInt64Array !== 'undefined' && BigInt64Array.from;\n        const isBigUint64ArrayAvailable = typeof BigUint64Array !== 'undefined' && BigUint64Array.from;\n        const isFloat16ArrayAvailable = typeof Float16Array !== 'undefined' && Float16Array.from;\n        if (isBigInt64ArrayAvailable) {\n            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('int64', BigInt64Array);\n            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, 'int64');\n        }\n        if (isBigUint64ArrayAvailable) {\n            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('uint64', BigUint64Array);\n            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, 'uint64');\n        }\n        if (isFloat16ArrayAvailable) {\n            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('float16', Float16Array);\n            NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(Float16Array, 'float16');\n        }\n        else {\n            // if Float16Array is not available, use 'Uint16Array' to store the data.\n            NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set('float16', Uint16Array);\n        }\n    }\n};\n//# sourceMappingURL=tensor-impl-type-mapping.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { tensorToDataURL, tensorToImageData } from './tensor-conversion-impl.js';\nimport { tensorFromGpuBuffer, tensorFromImage, tensorFromPinnedBuffer, tensorFromTexture } from './tensor-factory-impl.js';\nimport { checkTypedArray, NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP, NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP } from './tensor-impl-type-mapping.js';\nimport { calculateSize, tensorReshape } from './tensor-utils-impl.js';\n/**\n * the implementation of Tensor interface.\n *\n * @ignore\n */\nexport class Tensor {\n    /**\n     * implementation.\n     */\n    constructor(arg0, arg1, arg2) {\n        // perform one-time check for BigInt/Float16Array support\n        checkTypedArray();\n        let type;\n        let dims;\n        if (typeof arg0 === 'object' && 'location' in arg0) {\n            //\n            // constructing tensor from specific location\n            //\n            this.dataLocation = arg0.location;\n            type = arg0.type;\n            dims = arg0.dims;\n            switch (arg0.location) {\n                case 'cpu-pinned': {\n                    const expectedTypedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(type);\n                    if (!expectedTypedArrayConstructor) {\n                        throw new TypeError(`unsupported type \"${type}\" to create tensor from pinned buffer`);\n                    }\n                    if (!(arg0.data instanceof expectedTypedArrayConstructor)) {\n                        throw new TypeError(`buffer should be of type ${expectedTypedArrayConstructor.name}`);\n                    }\n                    this.cpuData = arg0.data;\n                    break;\n                }\n                case 'texture': {\n                    if (type !== 'float32') {\n                        throw new TypeError(`unsupported type \"${type}\" to create tensor from texture`);\n                    }\n                    this.gpuTextureData = arg0.texture;\n                    this.downloader = arg0.download;\n                    this.disposer = arg0.dispose;\n                    break;\n                }\n                case 'gpu-buffer': {\n                    if ((type !== 'float32' && type !== 'float16' && type !== 'int32' && type !== 'int64' && type !== 'uint32' &&\n                        type !== 'uint8' && type !== 'bool')) {\n                        throw new TypeError(`unsupported type \"${type}\" to create tensor from gpu buffer`);\n                    }\n                    this.gpuBufferData = arg0.gpuBuffer;\n                    this.downloader = arg0.download;\n                    this.disposer = arg0.dispose;\n                    break;\n                }\n                default:\n                    throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`);\n            }\n        }\n        else {\n            //\n            // constructing tensor of location 'cpu'\n            //\n            let data;\n            let maybeDims;\n            // check whether arg0 is type or data\n            if (typeof arg0 === 'string') {\n                //\n                // Override: constructor(type, data, ...)\n                //\n                type = arg0;\n                maybeDims = arg2;\n                if (arg0 === 'string') {\n                    // string tensor\n                    if (!Array.isArray(arg1)) {\n                        throw new TypeError('A string tensor\\'s data must be a string array.');\n                    }\n                    // we don't check whether every element in the array is string; this is too slow. we assume it's correct and\n                    // error will be populated at inference\n                    data = arg1;\n                }\n                else {\n                    // numeric tensor\n                    const typedArrayConstructor = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(arg0);\n                    if (typedArrayConstructor === undefined) {\n                        throw new TypeError(`Unsupported tensor type: ${arg0}.`);\n                    }\n                    if (Array.isArray(arg1)) {\n                        if (arg0 === 'float16' && typedArrayConstructor === Uint16Array) {\n                            // When no Float16Array polyfill is used, we cannot create 'float16' tensor from number array.\n                            //\n                            // Throw error here because when user try to use number array as data,\n                            // e.g. new Tensor('float16', [1, 2, 3, 4], dims)), it will actually call\n                            // Uint16Array.from(arg1) which generates wrong data.\n                            throw new TypeError('Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.');\n                        }\n                        else if (arg0 === 'uint64' || arg0 === 'int64') {\n                            // use 'as any' here because:\n                            // 1. TypeScript's check on type of 'Array.isArray()' does not work with readonly arrays.\n                            // see https://github.com/microsoft/TypeScript/issues/17002\n                            // 2. TypeScript's check on union type of '(BigInt64ArrayConstructor|BigUint64ArrayConstructor).from()'\n                            // does not accept parameter mapFn.\n                            // 3. parameters of 'SupportedTypedArrayConstructors.from()' does not match the requirement of the union\n                            // type.\n                            // assume 'arg1' is of type \"readonly number[]|readonly bigint[]\" here.\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            data = typedArrayConstructor.from(arg1, BigInt);\n                        }\n                        else {\n                            // assume 'arg1' is of type \"readonly number[]\" here.\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            data = typedArrayConstructor.from(arg1);\n                        }\n                    }\n                    else if (arg1 instanceof typedArrayConstructor) {\n                        data = arg1;\n                    }\n                    else {\n                        throw new TypeError(`A ${type} tensor's data must be type of ${typedArrayConstructor}`);\n                    }\n                }\n            }\n            else {\n                //\n                // Override: constructor(data, ...)\n                //\n                maybeDims = arg1;\n                if (Array.isArray(arg0)) {\n                    // only boolean[] and string[] is supported\n                    if (arg0.length === 0) {\n                        throw new TypeError('Tensor type cannot be inferred from an empty array.');\n                    }\n                    const firstElementType = typeof arg0[0];\n                    if (firstElementType === 'string') {\n                        type = 'string';\n                        data = arg0;\n                    }\n                    else if (firstElementType === 'boolean') {\n                        type = 'bool';\n                        // 'arg0' is of type 'boolean[]'. Uint8Array.from(boolean[]) actually works, but typescript thinks this is\n                        // wrong type. We use 'as any' to make it happy.\n                        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                        data = Uint8Array.from(arg0);\n                    }\n                    else {\n                        throw new TypeError(`Invalid element type of data array: ${firstElementType}.`);\n                    }\n                }\n                else {\n                    // get tensor type from TypedArray\n                    const mappedType = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(arg0.constructor);\n                    if (mappedType === undefined) {\n                        throw new TypeError(`Unsupported type for tensor data: ${arg0.constructor}.`);\n                    }\n                    type = mappedType;\n                    data = arg0;\n                }\n            }\n            // type and data is processed, now processing dims\n            if (maybeDims === undefined) {\n                // assume 1-D tensor if dims omitted\n                maybeDims = [data.length];\n            }\n            else if (!Array.isArray(maybeDims)) {\n                throw new TypeError('A tensor\\'s dims must be a number array');\n            }\n            dims = maybeDims;\n            this.cpuData = data;\n            this.dataLocation = 'cpu';\n        }\n        // perform check on dims\n        const size = calculateSize(dims);\n        // if data is on CPU, check whether data length matches tensor size\n        if (this.cpuData && size !== this.cpuData.length) {\n            throw new Error(`Tensor's size(${size}) does not match data length(${this.cpuData.length}).`);\n        }\n        this.type = type;\n        this.dims = dims;\n        this.size = size;\n    }\n    // #endregion\n    // #region factory\n    static async fromImage(image, options) {\n        return tensorFromImage(image, options);\n    }\n    static fromTexture(texture, options) {\n        return tensorFromTexture(texture, options);\n    }\n    static fromGpuBuffer(gpuBuffer, options) {\n        return tensorFromGpuBuffer(gpuBuffer, options);\n    }\n    static fromPinnedBuffer(type, buffer, dims) {\n        return tensorFromPinnedBuffer(type, buffer, dims);\n    }\n    // #endregion\n    // #region conversions\n    toDataURL(options) {\n        return tensorToDataURL(this, options);\n    }\n    toImageData(options) {\n        return tensorToImageData(this, options);\n    }\n    // #endregion\n    // #region properties\n    get data() {\n        this.ensureValid();\n        if (!this.cpuData) {\n            throw new Error('The data is not on CPU. Use `getData()` to download GPU data to CPU, ' +\n                'or use `texture` or `gpuBuffer` property to access the GPU data directly.');\n        }\n        return this.cpuData;\n    }\n    get location() {\n        return this.dataLocation;\n    }\n    get texture() {\n        this.ensureValid();\n        if (!this.gpuTextureData) {\n            throw new Error('The data is not stored as a WebGL texture.');\n        }\n        return this.gpuTextureData;\n    }\n    get gpuBuffer() {\n        this.ensureValid();\n        if (!this.gpuBufferData) {\n            throw new Error('The data is not stored as a WebGPU buffer.');\n        }\n        return this.gpuBufferData;\n    }\n    // #endregion\n    // #region methods\n    async getData(releaseData) {\n        this.ensureValid();\n        switch (this.dataLocation) {\n            case 'cpu':\n            case 'cpu-pinned':\n                return this.data;\n            case 'texture':\n            case 'gpu-buffer': {\n                if (!this.downloader) {\n                    throw new Error('The current tensor is not created with a specified data downloader.');\n                }\n                if (this.isDownloading) {\n                    throw new Error('The current tensor is being downloaded.');\n                }\n                try {\n                    this.isDownloading = true;\n                    const data = await this.downloader();\n                    this.downloader = undefined;\n                    this.dataLocation = 'cpu';\n                    this.cpuData = data;\n                    if (releaseData && this.disposer) {\n                        this.disposer();\n                        this.disposer = undefined;\n                    }\n                    return data;\n                }\n                finally {\n                    this.isDownloading = false;\n                }\n            }\n            default:\n                throw new Error(`cannot get data from location: ${this.dataLocation}`);\n        }\n    }\n    dispose() {\n        if (this.isDownloading) {\n            throw new Error('The current tensor is being downloaded.');\n        }\n        if (this.disposer) {\n            this.disposer();\n            this.disposer = undefined;\n        }\n        this.cpuData = undefined;\n        this.gpuTextureData = undefined;\n        this.gpuBufferData = undefined;\n        this.downloader = undefined;\n        this.isDownloading = undefined;\n        this.dataLocation = 'none';\n    }\n    // #endregion\n    // #region tensor utilities\n    ensureValid() {\n        if (this.dataLocation === 'none') {\n            throw new Error('The tensor is disposed.');\n        }\n    }\n    reshape(dims) {\n        this.ensureValid();\n        if (this.downloader || this.disposer) {\n            throw new Error('Cannot reshape a tensor that owns GPU resource.');\n        }\n        return tensorReshape(this, dims);\n    }\n}\n//# sourceMappingURL=tensor-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { Tensor } from './tensor-impl.js';\n/**\n * calculate size from dims.\n *\n * @param dims the dims array. May be an illegal input.\n */\nexport const calculateSize = (dims) => {\n    let size = 1;\n    for (let i = 0; i < dims.length; i++) {\n        const dim = dims[i];\n        if (typeof dim !== 'number' || !Number.isSafeInteger(dim)) {\n            throw new TypeError(`dims[${i}] must be an integer, got: ${dim}`);\n        }\n        if (dim < 0) {\n            throw new RangeError(`dims[${i}] must be a non-negative integer, got: ${dim}`);\n        }\n        size *= dim;\n    }\n    return size;\n};\n/**\n * implementation of Tensor.reshape()\n */\nexport const tensorReshape = (tensor, dims) => {\n    switch (tensor.location) {\n        case 'cpu':\n            return new Tensor(tensor.type, tensor.data, dims);\n        case 'cpu-pinned':\n            return new Tensor({\n                location: 'cpu-pinned',\n                data: tensor.data,\n                type: tensor.type,\n                dims,\n            });\n        case 'texture':\n            return new Tensor({\n                location: 'texture',\n                texture: tensor.texture,\n                type: tensor.type,\n                dims,\n            });\n        case 'gpu-buffer':\n            return new Tensor({\n                location: 'gpu-buffer',\n                gpuBuffer: tensor.gpuBuffer,\n                type: tensor.type,\n                dims,\n            });\n        default:\n            throw new Error(`tensorReshape: tensor location ${tensor.location} is not supported`);\n    }\n};\n//# sourceMappingURL=tensor-utils-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { Tensor as TensorImpl } from './tensor-impl.js';\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const Tensor = TensorImpl;\n//# sourceMappingURL=tensor.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { env } from './env-impl.js';\n/**\n * @ignore\n */\nexport const TRACE = (deviceType, label) => {\n    if (typeof env.trace === 'undefined' ? !env.wasm.trace : !env.trace) {\n        return;\n    }\n    // eslint-disable-next-line no-console\n    console.timeStamp(`${deviceType}::ORT::${label}`);\n};\nconst TRACE_FUNC = (msg, extraMsg) => {\n    const stack = new Error().stack?.split(/\\r\\n|\\r|\\n/g) || [];\n    let hasTraceFunc = false;\n    for (let i = 0; i < stack.length; i++) {\n        if (hasTraceFunc && !stack[i].includes('TRACE_FUNC')) {\n            let label = `FUNC_${msg}::${stack[i].trim().split(' ')[1]}`;\n            if (extraMsg) {\n                label += `::${extraMsg}`;\n            }\n            TRACE('CPU', label);\n            return;\n        }\n        if (stack[i].includes('TRACE_FUNC')) {\n            hasTraceFunc = true;\n        }\n    }\n};\n/**\n * @ignore\n */\nexport const TRACE_FUNC_BEGIN = (extraMsg) => {\n    if (typeof env.trace === 'undefined' ? !env.wasm.trace : !env.trace) {\n        return;\n    }\n    TRACE_FUNC('BEGIN', extraMsg);\n};\n/**\n * @ignore\n */\nexport const TRACE_FUNC_END = (extraMsg) => {\n    if (typeof env.trace === 'undefined' ? !env.wasm.trace : !env.trace) {\n        return;\n    }\n    TRACE_FUNC('END', extraMsg);\n};\n//# sourceMappingURL=trace.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { resolveBackendAndExecutionProviders } from './backend-impl.js';\nimport { Tensor } from './tensor.js';\nconst noBackendErrMsg = 'Training backend could not be resolved. ' +\n    'Make sure you\\'re using the correct configuration & WebAssembly files.';\nexport class TrainingSession {\n    constructor(handler, hasOptimizerModel, hasEvalModel) {\n        this.handler = handler;\n        this.hasOptimizerModel = hasOptimizerModel;\n        this.hasEvalModel = hasEvalModel;\n    }\n    get trainingInputNames() {\n        return this.handler.inputNames;\n    }\n    get trainingOutputNames() {\n        return this.handler.outputNames;\n    }\n    get evalInputNames() {\n        if (this.hasEvalModel) {\n            return this.handler.evalInputNames;\n        }\n        else {\n            throw new Error('This training session has no evalModel loaded.');\n        }\n    }\n    get evalOutputNames() {\n        if (this.hasEvalModel) {\n            return this.handler.evalOutputNames;\n        }\n        else {\n            throw new Error('This training session has no evalModel loaded.');\n        }\n    }\n    static async create(trainingOptions, sessionOptions) {\n        const evalModel = trainingOptions.evalModel || '';\n        const optimizerModel = trainingOptions.optimizerModel || '';\n        const options = sessionOptions || {};\n        // resolve backend, update session options with validated EPs, and create session handler\n        const [backend, optionsWithValidatedEPs] = await resolveBackendAndExecutionProviders(options);\n        if (backend.createTrainingSessionHandler) {\n            const handler = await backend.createTrainingSessionHandler(trainingOptions.checkpointState, trainingOptions.trainModel, evalModel, optimizerModel, optionsWithValidatedEPs);\n            return new TrainingSession(handler, !!trainingOptions.optimizerModel, !!trainingOptions.evalModel);\n        }\n        else {\n            throw new Error(noBackendErrMsg);\n        }\n    }\n    /**\n     * Helper function for runTrainStep and future runStep methods that handles the type-narrowing conversion from\n     * the given parameters to SessionHandler.FetchesType and RunOptions.\n     *\n     * @param inputNames the feeds object is checked that they contain all input names in the provided list of input\n     * names.\n     * @param outputNames the fetches object is checked that their keys match up with valid names in the list of output\n     * names.\n     * @param feeds the required input\n     * @param arg1 narrowed & converted into the SessionHandler.FetchesType or RunOptions object\n     * @param arg2 optional RunOptions object.\n     * @returns\n     */\n    typeNarrowingForRunStep(inputNames, outputNames, feeds, arg1, arg2) {\n        const fetches = {};\n        let options = {};\n        // check inputs\n        if (typeof feeds !== 'object' || feeds === null || feeds instanceof Tensor || Array.isArray(feeds)) {\n            throw new TypeError('\\'feeds\\' must be an object that use input names as keys and OnnxValue as corresponding values.');\n        }\n        let isFetchesEmpty = true;\n        // determine which override is being used\n        if (typeof arg1 === 'object') {\n            if (arg1 === null) {\n                throw new TypeError('Unexpected argument[1]: cannot be null.');\n            }\n            if (arg1 instanceof Tensor) {\n                throw new TypeError('\\'fetches\\' cannot be a Tensor');\n            }\n            if (Array.isArray(arg1)) {\n                if (arg1.length === 0) {\n                    throw new TypeError('\\'fetches\\' cannot be an empty array.');\n                }\n                isFetchesEmpty = false;\n                // output names\n                for (const name of arg1) {\n                    if (typeof name !== 'string') {\n                        throw new TypeError('\\'fetches\\' must be a string array or an object.');\n                    }\n                    if (outputNames.indexOf(name) === -1) {\n                        throw new RangeError(`'fetches' contains invalid output name: ${name}.`);\n                    }\n                    fetches[name] = null;\n                }\n                if (typeof arg2 === 'object' && arg2 !== null) {\n                    options = arg2;\n                }\n                else if (typeof arg2 !== 'undefined') {\n                    throw new TypeError('\\'options\\' must be an object.');\n                }\n            }\n            else {\n                // decide whether arg1 is fetches or options\n                // if any output name is present and its value is valid OnnxValue, we consider it fetches\n                let isFetches = false;\n                const arg1Keys = Object.getOwnPropertyNames(arg1);\n                for (const name of outputNames) {\n                    if (arg1Keys.indexOf(name) !== -1) {\n                        const v = arg1[name];\n                        if (v === null || v instanceof Tensor) {\n                            isFetches = true;\n                            isFetchesEmpty = false;\n                            fetches[name] = v;\n                        }\n                    }\n                }\n                if (isFetches) {\n                    if (typeof arg2 === 'object' && arg2 !== null) {\n                        options = arg2;\n                    }\n                    else if (typeof arg2 !== 'undefined') {\n                        throw new TypeError('\\'options\\' must be an object.');\n                    }\n                }\n                else {\n                    options = arg1;\n                }\n            }\n        }\n        else if (typeof arg1 !== 'undefined') {\n            throw new TypeError('Unexpected argument[1]: must be \\'fetches\\' or \\'options\\'.');\n        }\n        // check if all inputs are in feed\n        for (const name of inputNames) {\n            if (typeof feeds[name] === 'undefined') {\n                throw new Error(`input '${name}' is missing in 'feeds'.`);\n            }\n        }\n        // if no fetches is specified, we use the full output names list\n        if (isFetchesEmpty) {\n            for (const name of outputNames) {\n                fetches[name] = null;\n            }\n        }\n        return [fetches, options];\n    }\n    /**\n     * Helper method for runTrainStep and any other runStep methods. Takes the ReturnType result from the SessionHandler\n     * and changes it into a map of Tensors.\n     *\n     * @param results\n     * @returns\n     */\n    convertHandlerReturnTypeToMapOfTensors(results) {\n        const returnValue = {};\n        for (const key in results) {\n            if (Object.hasOwnProperty.call(results, key)) {\n                const result = results[key];\n                if (result instanceof Tensor) {\n                    returnValue[key] = result;\n                }\n                else {\n                    returnValue[key] = new Tensor(result.type, result.data, result.dims);\n                }\n            }\n        }\n        return returnValue;\n    }\n    async lazyResetGrad() {\n        await this.handler.lazyResetGrad();\n    }\n    async runTrainStep(feeds, arg1, arg2) {\n        const [fetches, options] = this.typeNarrowingForRunStep(this.trainingInputNames, this.trainingOutputNames, feeds, arg1, arg2);\n        const results = await this.handler.runTrainStep(feeds, fetches, options);\n        return this.convertHandlerReturnTypeToMapOfTensors(results);\n    }\n    async runOptimizerStep(options) {\n        if (this.hasOptimizerModel) {\n            await this.handler.runOptimizerStep(options || {});\n        }\n        else {\n            throw new Error('This TrainingSession has no OptimizerModel loaded.');\n        }\n    }\n    async runEvalStep(feeds, arg1, arg2) {\n        if (this.hasEvalModel) {\n            const [fetches, options] = this.typeNarrowingForRunStep(this.evalInputNames, this.evalOutputNames, feeds, arg1, arg2);\n            const results = await this.handler.runEvalStep(feeds, fetches, options);\n            return this.convertHandlerReturnTypeToMapOfTensors(results);\n        }\n        else {\n            throw new Error('This TrainingSession has no EvalModel loaded.');\n        }\n    }\n    async getParametersSize(trainableOnly = true) {\n        return this.handler.getParametersSize(trainableOnly);\n    }\n    async loadParametersBuffer(array, trainableOnly = true) {\n        const paramsSize = await this.getParametersSize(trainableOnly);\n        // checking that the size of the Uint8Array is equivalent to the byte length of a Float32Array of the number\n        // of parameters\n        if (array.length !== 4 * paramsSize) {\n            throw new Error('Size of the buffer passed into loadParametersBuffer must match the number of parameters in ' +\n                'the model. Please use getParametersSize method to check.');\n        }\n        return this.handler.loadParametersBuffer(array, trainableOnly);\n    }\n    async getContiguousParameters(trainableOnly = true) {\n        return this.handler.getContiguousParameters(trainableOnly);\n    }\n    async release() {\n        return this.handler.dispose();\n    }\n}\n//# sourceMappingURL=training-session-impl.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { TrainingSession as TrainingSessionImpl } from './training-session-impl.js';\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const TrainingSession = TrainingSessionImpl;\n//# sourceMappingURL=training-session.js.map","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n// This file is generated by /js/scripts/update-version.ts\n// Do not modify file content manually.\nexport const version = '1.18.0';\n//# sourceMappingURL=version.js.map","/*!\n * ONNX Runtime Web v1.19.0-dev.20240804-ee2fe87e2d\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nvar Rn=Object.defineProperty;var op=Object.getOwnPropertyDescriptor;var ip=Object.getOwnPropertyNames;var ap=Object.prototype.hasOwnProperty;var Mn=(e=>typeof require<\"u\"?require:typeof Proxy<\"u\"?new Proxy(e,{get:(t,r)=>(typeof require<\"u\"?require:t)[r]}):e)(function(e){if(typeof require<\"u\")return require.apply(this,arguments);throw Error('Dynamic require of \"'+e+'\" is not supported')});var U=(e,t)=>()=>(e&&(t=e(e=0)),t);var Ft=(e,t)=>{for(var r in t)Rn(e,r,{get:t[r],enumerable:!0})},sp=(e,t,r,n)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let o of ip(t))!ap.call(e,o)&&o!==r&&Rn(e,o,{get:()=>t[o],enumerable:!(n=op(t,o))||n.enumerable});return e};var br=e=>sp(Rn({},\"__esModule\",{value:!0}),e);var wr,$t,_t,up,vr,$r=U(()=>{\"use strict\";wr=new Map,$t=[],_t=(e,t,r)=>{if(t&&typeof t.init==\"function\"&&typeof t.createInferenceSessionHandler==\"function\"){let n=wr.get(e);if(n===void 0)wr.set(e,{backend:t,priority:r});else{if(n.priority>r)return;if(n.priority===r&&n.backend!==t)throw new Error(`cannot register backend \"${e}\" using priority ${r}`)}if(r>=0){let o=$t.indexOf(e);o!==-1&&$t.splice(o,1);for(let i=0;i<$t.length;i++)if(wr.get($t[i]).priority<=r){$t.splice(i,0,e);return}$t.push(e)}return}throw new TypeError(\"not a valid backend\")},up=async e=>{let t=wr.get(e);if(!t)return\"backend not found.\";if(t.initialized)return t.backend;if(t.aborted)return t.error;{let r=!!t.initPromise;try{return r||(t.initPromise=t.backend.init(e)),await t.initPromise,t.initialized=!0,t.backend}catch(n){return r||(t.error=`${n}`,t.aborted=!0),t.error}finally{delete t.initPromise}}},vr=async e=>{let t=e.executionProviders||[],r=t.map(d=>typeof d==\"string\"?d:d.name),n=r.length===0?$t:r,o,i=[],a=new Set;for(let d of n){let p=await up(d);typeof p==\"string\"?i.push({name:d,err:p}):(o||(o=p),o===p&&a.add(d))}if(!o)throw new Error(`no available backend found. ERR: ${i.map(d=>`[${d.name}] ${d.err}`).join(\", \")}`);for(let{name:d,err:p}of i)r.includes(d)&&console.warn(`removing requested execution provider \"${d}\" from session options because it is not available: ${p}`);let l=t.filter(d=>a.has(typeof d==\"string\"?d:d.name));return[o,new Proxy(e,{get:(d,p)=>p===\"executionProviders\"?l:Reflect.get(d,p)})]}});var Yi=U(()=>{\"use strict\";$r()});var Xi,Zi=U(()=>{\"use strict\";Xi=\"1.19.0-dev.20240730-530a2d7b41\"});var Qi,Ne,Un=U(()=>{\"use strict\";Zi();Qi=\"warning\",Ne={wasm:{},webgl:{},webgpu:{},versions:{common:Xi},set logLevel(e){if(e!==void 0){if(typeof e!=\"string\"||[\"verbose\",\"info\",\"warning\",\"error\",\"fatal\"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);Qi=e}},get logLevel(){return Qi}};Object.defineProperty(Ne,\"logLevel\",{enumerable:!0})});var be,Ji=U(()=>{\"use strict\";Un();be=Ne});var ea,ta,ra=U(()=>{\"use strict\";ea=(e,t)=>{let r=typeof document<\"u\"?document.createElement(\"canvas\"):new OffscreenCanvas(1,1);r.width=e.dims[3],r.height=e.dims[2];let n=r.getContext(\"2d\");if(n!=null){let o,i;t?.tensorLayout!==void 0&&t.tensorLayout===\"NHWC\"?(o=e.dims[2],i=e.dims[3]):(o=e.dims[3],i=e.dims[2]);let a=t?.format!==void 0?t.format:\"RGB\",l=t?.norm,d,p;l===void 0||l.mean===void 0?d=[255,255,255,255]:typeof l.mean==\"number\"?d=[l.mean,l.mean,l.mean,l.mean]:(d=[l.mean[0],l.mean[1],l.mean[2],0],l.mean[3]!==void 0&&(d[3]=l.mean[3])),l===void 0||l.bias===void 0?p=[0,0,0,0]:typeof l.bias==\"number\"?p=[l.bias,l.bias,l.bias,l.bias]:(p=[l.bias[0],l.bias[1],l.bias[2],0],l.bias[3]!==void 0&&(p[3]=l.bias[3]));let m=i*o,u=0,h=m,w=m*2,g=-1;a===\"RGBA\"?(u=0,h=m,w=m*2,g=m*3):a===\"RGB\"?(u=0,h=m,w=m*2):a===\"RBG\"&&(u=0,w=m,h=m*2);for(let b=0;b<i;b++)for(let x=0;x<o;x++){let _=(e.data[u++]-p[0])*d[0],$=(e.data[h++]-p[1])*d[1],S=(e.data[w++]-p[2])*d[2],I=g===-1?255:(e.data[g++]-p[3])*d[3];n.fillStyle=\"rgba(\"+_+\",\"+$+\",\"+S+\",\"+I+\")\",n.fillRect(x,b,1,1)}if(\"toDataURL\"in r)return r.toDataURL();throw new Error(\"toDataURL is not supported\")}else throw new Error(\"Can not access image data\")},ta=(e,t)=>{let r=typeof document<\"u\"?document.createElement(\"canvas\").getContext(\"2d\"):new OffscreenCanvas(1,1).getContext(\"2d\"),n;if(r!=null){let o,i,a;t?.tensorLayout!==void 0&&t.tensorLayout===\"NHWC\"?(o=e.dims[2],i=e.dims[1],a=e.dims[3]):(o=e.dims[3],i=e.dims[2],a=e.dims[1]);let l=t!==void 0&&t.format!==void 0?t.format:\"RGB\",d=t?.norm,p,m;d===void 0||d.mean===void 0?p=[255,255,255,255]:typeof d.mean==\"number\"?p=[d.mean,d.mean,d.mean,d.mean]:(p=[d.mean[0],d.mean[1],d.mean[2],255],d.mean[3]!==void 0&&(p[3]=d.mean[3])),d===void 0||d.bias===void 0?m=[0,0,0,0]:typeof d.bias==\"number\"?m=[d.bias,d.bias,d.bias,d.bias]:(m=[d.bias[0],d.bias[1],d.bias[2],0],d.bias[3]!==void 0&&(m[3]=d.bias[3]));let u=i*o;if(t!==void 0&&(t.format!==void 0&&a===4&&t.format!==\"RGBA\"||a===3&&t.format!==\"RGB\"&&t.format!==\"BGR\"))throw new Error(\"Tensor format doesn't match input tensor dims\");let h=4,w=0,g=1,b=2,x=3,_=0,$=u,S=u*2,I=-1;l===\"RGBA\"?(_=0,$=u,S=u*2,I=u*3):l===\"RGB\"?(_=0,$=u,S=u*2):l===\"RBG\"&&(_=0,S=u,$=u*2),n=r.createImageData(o,i);for(let T=0;T<i*o;w+=h,g+=h,b+=h,x+=h,T++)n.data[w]=(e.data[_++]-m[0])*p[0],n.data[g]=(e.data[$++]-m[1])*p[1],n.data[b]=(e.data[S++]-m[2])*p[2],n.data[x]=I===-1?255:(e.data[I++]-m[3])*p[3]}else throw new Error(\"Can not access image data\");return n}});var Vn,na,oa,ia,aa,sa=U(()=>{\"use strict\";_r();Vn=(e,t)=>{if(e===void 0)throw new Error(\"Image buffer must be defined\");if(t.height===void 0||t.width===void 0)throw new Error(\"Image height and width must be defined\");if(t.tensorLayout===\"NHWC\")throw new Error(\"NHWC Tensor layout is not supported yet\");let{height:r,width:n}=t,o=t.norm??{mean:255,bias:0},i,a;typeof o.mean==\"number\"?i=[o.mean,o.mean,o.mean,o.mean]:i=[o.mean[0],o.mean[1],o.mean[2],o.mean[3]??255],typeof o.bias==\"number\"?a=[o.bias,o.bias,o.bias,o.bias]:a=[o.bias[0],o.bias[1],o.bias[2],o.bias[3]??0];let l=t.format!==void 0?t.format:\"RGBA\",d=t.tensorFormat!==void 0&&t.tensorFormat!==void 0?t.tensorFormat:\"RGB\",p=r*n,m=d===\"RGBA\"?new Float32Array(p*4):new Float32Array(p*3),u=4,h=0,w=1,g=2,b=3,x=0,_=p,$=p*2,S=-1;l===\"RGB\"&&(u=3,h=0,w=1,g=2,b=-1),d===\"RGBA\"?S=p*3:d===\"RBG\"?(x=0,$=p,_=p*2):d===\"BGR\"&&($=0,_=p,x=p*2);for(let T=0;T<p;T++,h+=u,g+=u,w+=u,b+=u)m[x++]=(e[h]+a[0])/i[0],m[_++]=(e[w]+a[1])/i[1],m[$++]=(e[g]+a[2])/i[2],S!==-1&&b!==-1&&(m[S++]=(e[b]+a[3])/i[3]);return d===\"RGBA\"?new Be(\"float32\",m,[1,4,r,n]):new Be(\"float32\",m,[1,3,r,n])},na=async(e,t)=>{let r=typeof HTMLImageElement<\"u\"&&e instanceof HTMLImageElement,n=typeof ImageData<\"u\"&&e instanceof ImageData,o=typeof ImageBitmap<\"u\"&&e instanceof ImageBitmap,i=typeof e==\"string\",a,l=t??{},d=()=>{if(typeof document<\"u\")return document.createElement(\"canvas\");if(typeof OffscreenCanvas<\"u\")return new OffscreenCanvas(1,1);throw new Error(\"Canvas is not supported\")},p=m=>m instanceof HTMLCanvasElement||m instanceof OffscreenCanvas?m.getContext(\"2d\"):null;if(r){let m=d();m.width=e.width,m.height=e.height;let u=p(m);if(u!=null){let h=e.height,w=e.width;if(t!==void 0&&t.resizedHeight!==void 0&&t.resizedWidth!==void 0&&(h=t.resizedHeight,w=t.resizedWidth),t!==void 0){if(l=t,t.tensorFormat!==void 0)throw new Error(\"Image input config format must be RGBA for HTMLImageElement\");l.tensorFormat=\"RGBA\",l.height=h,l.width=w}else l.tensorFormat=\"RGBA\",l.height=h,l.width=w;u.drawImage(e,0,0),a=u.getImageData(0,0,w,h).data}else throw new Error(\"Can not access image data\")}else if(n){let m,u;if(t!==void 0&&t.resizedWidth!==void 0&&t.resizedHeight!==void 0?(m=t.resizedHeight,u=t.resizedWidth):(m=e.height,u=e.width),t!==void 0&&(l=t),l.format=\"RGBA\",l.height=m,l.width=u,t!==void 0){let h=d();h.width=u,h.height=m;let w=p(h);if(w!=null)w.putImageData(e,0,0),a=w.getImageData(0,0,u,m).data;else throw new Error(\"Can not access image data\")}else a=e.data}else if(o){if(t===void 0)throw new Error(\"Please provide image config with format for Imagebitmap\");let m=d();m.width=e.width,m.height=e.height;let u=p(m);if(u!=null){let h=e.height,w=e.width;return u.drawImage(e,0,0,w,h),a=u.getImageData(0,0,w,h).data,l.height=h,l.width=w,Vn(a,l)}else throw new Error(\"Can not access image data\")}else{if(i)return new Promise((m,u)=>{let h=d(),w=p(h);if(!e||!w)return u();let g=new Image;g.crossOrigin=\"Anonymous\",g.src=e,g.onload=()=>{h.width=g.width,h.height=g.height,w.drawImage(g,0,0,h.width,h.height);let b=w.getImageData(0,0,h.width,h.height);l.height=h.height,l.width=h.width,m(Vn(b.data,l))}});throw new Error(\"Input data provided is not supported - aborted tensor creation\")}if(a!==void 0)return Vn(a,l);throw new Error(\"Input data provided is not supported - aborted tensor creation\")},oa=(e,t)=>{let{width:r,height:n,download:o,dispose:i}=t,a=[1,n,r,4];return new Be({location:\"texture\",type:\"float32\",texture:e,dims:a,download:o,dispose:i})},ia=(e,t)=>{let{dataType:r,dims:n,download:o,dispose:i}=t;return new Be({location:\"gpu-buffer\",type:r??\"float32\",gpuBuffer:e,dims:n,download:o,dispose:i})},aa=(e,t,r)=>new Be({location:\"cpu-pinned\",type:e,data:t,dims:r??[t.length]})});var xt,qt,ua,da,la=U(()=>{\"use strict\";xt=new Map([[\"float32\",Float32Array],[\"uint8\",Uint8Array],[\"int8\",Int8Array],[\"uint16\",Uint16Array],[\"int16\",Int16Array],[\"int32\",Int32Array],[\"bool\",Uint8Array],[\"float64\",Float64Array],[\"uint32\",Uint32Array]]),qt=new Map([[Float32Array,\"float32\"],[Uint8Array,\"uint8\"],[Int8Array,\"int8\"],[Uint16Array,\"uint16\"],[Int16Array,\"int16\"],[Int32Array,\"int32\"],[Float64Array,\"float64\"],[Uint32Array,\"uint32\"]]),ua=!1,da=()=>{if(!ua){ua=!0;let e=typeof BigInt64Array<\"u\"&&BigInt64Array.from,t=typeof BigUint64Array<\"u\"&&BigUint64Array.from,r=typeof Float16Array<\"u\"&&Float16Array.from;e&&(xt.set(\"int64\",BigInt64Array),qt.set(BigInt64Array,\"int64\")),t&&(xt.set(\"uint64\",BigUint64Array),qt.set(BigUint64Array,\"uint64\")),r?(xt.set(\"float16\",Float16Array),qt.set(Float16Array,\"float16\")):xt.set(\"float16\",Uint16Array)}}});var ca,pa,ma=U(()=>{\"use strict\";_r();ca=e=>{let t=1;for(let r=0;r<e.length;r++){let n=e[r];if(typeof n!=\"number\"||!Number.isSafeInteger(n))throw new TypeError(`dims[${r}] must be an integer, got: ${n}`);if(n<0)throw new RangeError(`dims[${r}] must be a non-negative integer, got: ${n}`);t*=n}return t},pa=(e,t)=>{switch(e.location){case\"cpu\":return new Be(e.type,e.data,t);case\"cpu-pinned\":return new Be({location:\"cpu-pinned\",data:e.data,type:e.type,dims:t});case\"texture\":return new Be({location:\"texture\",texture:e.texture,type:e.type,dims:t});case\"gpu-buffer\":return new Be({location:\"gpu-buffer\",gpuBuffer:e.gpuBuffer,type:e.type,dims:t});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}}});var Be,_r=U(()=>{\"use strict\";ra();sa();la();ma();Be=class{constructor(t,r,n){da();let o,i;if(typeof t==\"object\"&&\"location\"in t)switch(this.dataLocation=t.location,o=t.type,i=t.dims,t.location){case\"cpu-pinned\":{let l=xt.get(o);if(!l)throw new TypeError(`unsupported type \"${o}\" to create tensor from pinned buffer`);if(!(t.data instanceof l))throw new TypeError(`buffer should be of type ${l.name}`);this.cpuData=t.data;break}case\"texture\":{if(o!==\"float32\")throw new TypeError(`unsupported type \"${o}\" to create tensor from texture`);this.gpuTextureData=t.texture,this.downloader=t.download,this.disposer=t.dispose;break}case\"gpu-buffer\":{if(o!==\"float32\"&&o!==\"float16\"&&o!==\"int32\"&&o!==\"int64\"&&o!==\"uint32\"&&o!==\"uint8\"&&o!==\"bool\")throw new TypeError(`unsupported type \"${o}\" to create tensor from gpu buffer`);this.gpuBufferData=t.gpuBuffer,this.downloader=t.download,this.disposer=t.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let l,d;if(typeof t==\"string\")if(o=t,d=n,t===\"string\"){if(!Array.isArray(r))throw new TypeError(\"A string tensor's data must be a string array.\");l=r}else{let p=xt.get(t);if(p===void 0)throw new TypeError(`Unsupported tensor type: ${t}.`);if(Array.isArray(r)){if(t===\"float16\"&&p===Uint16Array)throw new TypeError(\"Creating a float16 tensor from number array is not supported. Please use Uint16Array as data.\");t===\"uint64\"||t===\"int64\"?l=p.from(r,BigInt):l=p.from(r)}else if(r instanceof p)l=r;else throw new TypeError(`A ${o} tensor's data must be type of ${p}`)}else if(d=r,Array.isArray(t)){if(t.length===0)throw new TypeError(\"Tensor type cannot be inferred from an empty array.\");let p=typeof t[0];if(p===\"string\")o=\"string\",l=t;else if(p===\"boolean\")o=\"bool\",l=Uint8Array.from(t);else throw new TypeError(`Invalid element type of data array: ${p}.`)}else{let p=qt.get(t.constructor);if(p===void 0)throw new TypeError(`Unsupported type for tensor data: ${t.constructor}.`);o=p,l=t}if(d===void 0)d=[l.length];else if(!Array.isArray(d))throw new TypeError(\"A tensor's dims must be a number array\");i=d,this.cpuData=l,this.dataLocation=\"cpu\"}let a=ca(i);if(this.cpuData&&a!==this.cpuData.length)throw new Error(`Tensor's size(${a}) does not match data length(${this.cpuData.length}).`);this.type=o,this.dims=i,this.size=a}static async fromImage(t,r){return na(t,r)}static fromTexture(t,r){return oa(t,r)}static fromGpuBuffer(t,r){return ia(t,r)}static fromPinnedBuffer(t,r,n){return aa(t,r,n)}toDataURL(t){return ea(this,t)}toImageData(t){return ta(this,t)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error(\"The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.\");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error(\"The data is not stored as a WebGL texture.\");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error(\"The data is not stored as a WebGPU buffer.\");return this.gpuBufferData}async getData(t){switch(this.ensureValid(),this.dataLocation){case\"cpu\":case\"cpu-pinned\":return this.data;case\"texture\":case\"gpu-buffer\":{if(!this.downloader)throw new Error(\"The current tensor is not created with a specified data downloader.\");if(this.isDownloading)throw new Error(\"The current tensor is being downloaded.\");try{this.isDownloading=!0;let r=await this.downloader();return this.downloader=void 0,this.dataLocation=\"cpu\",this.cpuData=r,t&&this.disposer&&(this.disposer(),this.disposer=void 0),r}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error(\"The current tensor is being downloaded.\");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation=\"none\"}ensureValid(){if(this.dataLocation===\"none\")throw new Error(\"The tensor is disposed.\")}reshape(t){if(this.ensureValid(),this.downloader||this.disposer)throw new Error(\"Cannot reshape a tensor that owns GPU resource.\");return pa(this,t)}}});var De,xr=U(()=>{\"use strict\";_r();De=Be});var Sr,fa,We,Me,Nn=U(()=>{\"use strict\";Un();Sr=(e,t)=>{(typeof Ne.trace>\"u\"?!Ne.wasm.trace:!Ne.trace)||console.timeStamp(`${e}::ORT::${t}`)},fa=(e,t)=>{let r=new Error().stack?.split(/\\r\\n|\\r|\\n/g)||[],n=!1;for(let o=0;o<r.length;o++){if(n&&!r[o].includes(\"TRACE_FUNC\")){let i=`FUNC_${e}::${r[o].trim().split(\" \")[1]}`;t&&(i+=`::${t}`),Sr(\"CPU\",i);return}r[o].includes(\"TRACE_FUNC\")&&(n=!0)}},We=e=>{(typeof Ne.trace>\"u\"?!Ne.wasm.trace:!Ne.trace)||fa(\"BEGIN\",e)},Me=e=>{(typeof Ne.trace>\"u\"?!Ne.wasm.trace:!Ne.trace)||fa(\"END\",e)}});var Ir,ha=U(()=>{\"use strict\";$r();xr();Nn();Ir=class e{constructor(t){this.handler=t}async run(t,r,n){We();let o={},i={};if(typeof t!=\"object\"||t===null||t instanceof De||Array.isArray(t))throw new TypeError(\"'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.\");let a=!0;if(typeof r==\"object\"){if(r===null)throw new TypeError(\"Unexpected argument[1]: cannot be null.\");if(r instanceof De)throw new TypeError(\"'fetches' cannot be a Tensor\");if(Array.isArray(r)){if(r.length===0)throw new TypeError(\"'fetches' cannot be an empty array.\");a=!1;for(let p of r){if(typeof p!=\"string\")throw new TypeError(\"'fetches' must be a string array or an object.\");if(this.outputNames.indexOf(p)===-1)throw new RangeError(`'fetches' contains invalid output name: ${p}.`);o[p]=null}if(typeof n==\"object\"&&n!==null)i=n;else if(typeof n<\"u\")throw new TypeError(\"'options' must be an object.\")}else{let p=!1,m=Object.getOwnPropertyNames(r);for(let u of this.outputNames)if(m.indexOf(u)!==-1){let h=r[u];(h===null||h instanceof De)&&(p=!0,a=!1,o[u]=h)}if(p){if(typeof n==\"object\"&&n!==null)i=n;else if(typeof n<\"u\")throw new TypeError(\"'options' must be an object.\")}else i=r}}else if(typeof r<\"u\")throw new TypeError(\"Unexpected argument[1]: must be 'fetches' or 'options'.\");for(let p of this.inputNames)if(typeof t[p]>\"u\")throw new Error(`input '${p}' is missing in 'feeds'.`);if(a)for(let p of this.outputNames)o[p]=null;let l=await this.handler.run(t,o,i),d={};for(let p in l)if(Object.hasOwnProperty.call(l,p)){let m=l[p];m instanceof De?d[p]=m:d[p]=new De(m.type,m.data,m.dims)}return Me(),d}async release(){return this.handler.dispose()}static async create(t,r,n,o){We();let i,a={};if(typeof t==\"string\"){if(i=t,typeof r==\"object\"&&r!==null)a=r;else if(typeof r<\"u\")throw new TypeError(\"'options' must be an object.\")}else if(t instanceof Uint8Array){if(i=t,typeof r==\"object\"&&r!==null)a=r;else if(typeof r<\"u\")throw new TypeError(\"'options' must be an object.\")}else if(t instanceof ArrayBuffer||typeof SharedArrayBuffer<\"u\"&&t instanceof SharedArrayBuffer){let m=t,u=0,h=t.byteLength;if(typeof r==\"object\"&&r!==null)a=r;else if(typeof r==\"number\"){if(u=r,!Number.isSafeInteger(u))throw new RangeError(\"'byteOffset' must be an integer.\");if(u<0||u>=m.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${m.byteLength}).`);if(h=t.byteLength-u,typeof n==\"number\"){if(h=n,!Number.isSafeInteger(h))throw new RangeError(\"'byteLength' must be an integer.\");if(h<=0||u+h>m.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${m.byteLength-u}].`);if(typeof o==\"object\"&&o!==null)a=o;else if(typeof o<\"u\")throw new TypeError(\"'options' must be an object.\")}else if(typeof n<\"u\")throw new TypeError(\"'byteLength' must be a number.\")}else if(typeof r<\"u\")throw new TypeError(\"'options' must be an object.\");i=new Uint8Array(m,u,h)}else throw new TypeError(\"Unexpected argument[0]: must be 'path' or 'buffer'.\");let[l,d]=await vr(a),p=await l.createInferenceSessionHandler(i,d);return Me(),new e(p)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}}});var dp,ga=U(()=>{\"use strict\";ha();dp=Ir});var ya=U(()=>{\"use strict\"});var ba=U(()=>{\"use strict\"});var wa=U(()=>{\"use strict\"});var va=U(()=>{\"use strict\"});var lp,Cr,$a=U(()=>{\"use strict\";$r();xr();lp=\"Training backend could not be resolved. Make sure you're using the correct configuration & WebAssembly files.\",Cr=class e{constructor(t,r,n){this.handler=t,this.hasOptimizerModel=r,this.hasEvalModel=n}get trainingInputNames(){return this.handler.inputNames}get trainingOutputNames(){return this.handler.outputNames}get evalInputNames(){if(this.hasEvalModel)return this.handler.evalInputNames;throw new Error(\"This training session has no evalModel loaded.\")}get evalOutputNames(){if(this.hasEvalModel)return this.handler.evalOutputNames;throw new Error(\"This training session has no evalModel loaded.\")}static async create(t,r){let n=t.evalModel||\"\",o=t.optimizerModel||\"\",i=r||{},[a,l]=await vr(i);if(a.createTrainingSessionHandler){let d=await a.createTrainingSessionHandler(t.checkpointState,t.trainModel,n,o,l);return new e(d,!!t.optimizerModel,!!t.evalModel)}else throw new Error(lp)}typeNarrowingForRunStep(t,r,n,o,i){let a={},l={};if(typeof n!=\"object\"||n===null||n instanceof De||Array.isArray(n))throw new TypeError(\"'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.\");let d=!0;if(typeof o==\"object\"){if(o===null)throw new TypeError(\"Unexpected argument[1]: cannot be null.\");if(o instanceof De)throw new TypeError(\"'fetches' cannot be a Tensor\");if(Array.isArray(o)){if(o.length===0)throw new TypeError(\"'fetches' cannot be an empty array.\");d=!1;for(let p of o){if(typeof p!=\"string\")throw new TypeError(\"'fetches' must be a string array or an object.\");if(r.indexOf(p)===-1)throw new RangeError(`'fetches' contains invalid output name: ${p}.`);a[p]=null}if(typeof i==\"object\"&&i!==null)l=i;else if(typeof i<\"u\")throw new TypeError(\"'options' must be an object.\")}else{let p=!1,m=Object.getOwnPropertyNames(o);for(let u of r)if(m.indexOf(u)!==-1){let h=o[u];(h===null||h instanceof De)&&(p=!0,d=!1,a[u]=h)}if(p){if(typeof i==\"object\"&&i!==null)l=i;else if(typeof i<\"u\")throw new TypeError(\"'options' must be an object.\")}else l=o}}else if(typeof o<\"u\")throw new TypeError(\"Unexpected argument[1]: must be 'fetches' or 'options'.\");for(let p of t)if(typeof n[p]>\"u\")throw new Error(`input '${p}' is missing in 'feeds'.`);if(d)for(let p of r)a[p]=null;return[a,l]}convertHandlerReturnTypeToMapOfTensors(t){let r={};for(let n in t)if(Object.hasOwnProperty.call(t,n)){let o=t[n];o instanceof De?r[n]=o:r[n]=new De(o.type,o.data,o.dims)}return r}async lazyResetGrad(){await this.handler.lazyResetGrad()}async runTrainStep(t,r,n){let[o,i]=this.typeNarrowingForRunStep(this.trainingInputNames,this.trainingOutputNames,t,r,n),a=await this.handler.runTrainStep(t,o,i);return this.convertHandlerReturnTypeToMapOfTensors(a)}async runOptimizerStep(t){if(this.hasOptimizerModel)await this.handler.runOptimizerStep(t||{});else throw new Error(\"This TrainingSession has no OptimizerModel loaded.\")}async runEvalStep(t,r,n){if(this.hasEvalModel){let[o,i]=this.typeNarrowingForRunStep(this.evalInputNames,this.evalOutputNames,t,r,n),a=await this.handler.runEvalStep(t,o,i);return this.convertHandlerReturnTypeToMapOfTensors(a)}else throw new Error(\"This TrainingSession has no EvalModel loaded.\")}async getParametersSize(t=!0){return this.handler.getParametersSize(t)}async loadParametersBuffer(t,r=!0){let n=await this.getParametersSize(r);if(t.length!==4*n)throw new Error(\"Size of the buffer passed into loadParametersBuffer must match the number of parameters in the model. Please use getParametersSize method to check.\");return this.handler.loadParametersBuffer(t,r)}async getContiguousParameters(t=!0){return this.handler.getContiguousParameters(t)}async release(){return this.handler.dispose()}}});var cp,_a=U(()=>{\"use strict\";$a();cp=Cr});var Wn={};Ft(Wn,{InferenceSession:()=>dp,TRACE:()=>Sr,TRACE_FUNC_BEGIN:()=>We,TRACE_FUNC_END:()=>Me,Tensor:()=>De,TrainingSession:()=>cp,env:()=>be,registerBackend:()=>_t});var Ke=U(()=>{\"use strict\";Yi();Ji();ga();xr();ya();ba();Nn();wa();va();_a()});var Tr=U(()=>{\"use strict\"});var Ca={};Ft(Ca,{default:()=>pp});var Sa,Ia,pp,Ta=U(()=>{\"use strict\";Hn();St();jt();Sa=\"ort-wasm-proxy-worker\",Ia=globalThis.self?.name===Sa;Ia&&(self.onmessage=e=>{let{type:t,in:r}=e.data;try{switch(t){case\"init-wasm\":Ar(r.wasm).then(()=>{Er(r).then(()=>{postMessage({type:t})},n=>{postMessage({type:t,err:n})})},n=>{postMessage({type:t,err:n})});break;case\"init-ep\":{let{epName:n,env:o}=r;kr(o,n).then(()=>{postMessage({type:t})},i=>{postMessage({type:t,err:i})});break}case\"copy-from\":{let{buffer:n}=r,o=Kt(n);postMessage({type:t,out:o});break}case\"create\":{let{model:n,options:o}=r;Pr(n,o).then(i=>{postMessage({type:t,out:i})},i=>{postMessage({type:t,err:i})});break}case\"release\":Or(r),postMessage({type:t});break;case\"run\":{let{sessionId:n,inputIndices:o,inputs:i,outputIndices:a,options:l}=r;Dr(n,o,i,a,new Array(a.length).fill(null),l).then(d=>{d.some(p=>p[3]!==\"cpu\")?postMessage({type:t,err:\"Proxy does not support non-cpu tensor location.\"}):postMessage({type:t,out:d},Br([...i,...d]))},d=>{postMessage({type:t,err:d})});break}case\"end-profiling\":zr(r),postMessage({type:t});break;default:}}catch(n){postMessage({type:t,err:n})}});pp=Ia?null:e=>new Worker(e??Ut,{type:\"module\",name:Sa})});var Ea={};Ft(Ea,{default:()=>mp});var Gn,Aa,mp,ka=U(()=>{\"use strict\";Aa=(Gn=import.meta.url,async function(e={}){function t(){return le.buffer!=re.buffer&&we(),re}function r(){return le.buffer!=re.buffer&&we(),se}function n(){return le.buffer!=re.buffer&&we(),Z}function o(){return le.buffer!=re.buffer&&we(),ne}function i(){return le.buffer!=re.buffer&&we(),J}function a(){return le.buffer!=re.buffer&&we(),ke}function l(){return le.buffer!=re.buffer&&we(),R}function d(){return le.buffer!=re.buffer&&we(),Re}var p,m,u=Object.assign({},e),h=new Promise((s,c)=>{p=s,m=c}),w=typeof window==\"object\",g=typeof importScripts==\"function\",b=g&&self.name==\"em-pthread\";u.mountExternalData=(s,c)=>{(u.Fb||(u.Fb=new Map)).set(s,c)},u.unmountExternalData=()=>{delete u.Fb};var x=globalThis.SharedArrayBuffer??new WebAssembly.Memory({initial:0,maximum:0,shared:!0}).buffer.constructor;let _=()=>{let s=(f,y,v)=>(...C)=>{let O=Je,B=y?.();C=f(...C);let N=y?.();return B!==N&&(f=N,v(B),y=v=null),Je!=O?new Promise((L,j)=>{An={resolve:L,reject:j}}):C},c=f=>async(...y)=>{try{if(u.Eb)throw Error(\"Session already started\");let v=u.Eb={bc:y[0],errors:[]},C=await f(...y);if(u.Eb!==v)throw Error(\"Session mismatch\");u.Mb?.flush();let O=v.errors;if(0<O.length){let B=await Promise.all(O);if(B=B.filter(N=>N),0<B.length)throw Error(B.join(`\n`))}return C}finally{u.Eb=null}};u._OrtCreateSession=s(u._OrtCreateSession,()=>u._OrtCreateSession,f=>u._OrtCreateSession=f),u._OrtRun=c(s(u._OrtRun,()=>u._OrtRun,f=>u._OrtRun=f)),u._OrtRunWithBinding=c(s(u._OrtRunWithBinding,()=>u._OrtRunWithBinding,f=>u._OrtRunWithBinding=f)),u._OrtBindInput=s(u._OrtBindInput,()=>u._OrtBindInput,f=>u._OrtBindInput=f),_=void 0};u.jsepInit=(s,c)=>{if(_?.(),s===\"webgpu\"){[u.Mb,u.Tb,u.Xb,u.Nb,u.Wb,u.jb,u.Yb,u.$b,u.Ub,u.Vb,u.Zb]=c;let f=u.Mb;u.jsepRegisterBuffer=(y,v,C,O)=>f.registerBuffer(y,v,C,O),u.jsepGetBuffer=y=>f.getBuffer(y),u.jsepCreateDownloader=(y,v,C)=>f.createDownloader(y,v,C),u.jsepOnReleaseSession=y=>{f.onReleaseSession(y)},u.jsepOnRunStart=y=>f.onRunStart(y)}};var $,S,I=Object.assign({},u),T=\"./this.program\",A=(s,c)=>{throw c},D=\"\";(w||g)&&(g?D=self.location.href:typeof document<\"u\"&&document.currentScript&&(D=document.currentScript.src),Gn&&(D=Gn),D=D.startsWith(\"blob:\")?\"\":D.substr(0,D.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1),g&&(S=s=>{var c=new XMLHttpRequest;return c.open(\"GET\",s,!1),c.responseType=\"arraybuffer\",c.send(null),new Uint8Array(c.response)}),$=(s,c,f)=>{var y=new XMLHttpRequest;y.open(\"GET\",s,!0),y.responseType=\"arraybuffer\",y.onload=()=>{y.status==200||y.status==0&&y.response?c(y.response):f()},y.onerror=f,y.send(null)});var z,H=console.log.bind(console),W=console.error.bind(console),X=H,Y=W;if(Object.assign(u,I),I=null,b){let s=function(c){try{var f=c.data,y=f.cmd;if(y===\"load\"){let v=[];self.onmessage=C=>v.push(C),self.startWorker=()=>{postMessage({cmd:\"loaded\"});for(let C of v)s(C);self.onmessage=s};for(let C of f.handlers)u[C]&&!u[C].proxy||(u[C]=(...O)=>{postMessage({Lb:\"callHandler\",kc:C,args:O})},C==\"print\"&&(X=u[C]),C==\"printErr\"&&(Y=u[C]));le=f.wasmMemory,we(),pe(f.wasmModule)}else if(y===\"run\"){On(f.pthread_ptr,0,0,1,0,0),In(f.pthread_ptr),Hl(),No(),ue||(Mi(),ue=!0);try{Gl(f.start_routine,f.arg)}catch(v){if(v!=\"unwind\")throw v}}else y===\"cancel\"?Mt()&&gr(-1):f.target!==\"setimmediate\"&&(y===\"checkMailbox\"?ue&&sr():y&&(Y(`worker: received unknown command ${y}`),Y(f)))}catch(v){throw Ui(),v}};var Ih=s,pe,ue=!1;Y=function(...c){c=c.join(\" \"),console.error(c)},self.alert=function(...c){postMessage({Lb:\"alert\",text:c.join(\" \"),mc:Mt()})},u.instantiateWasm=(c,f)=>new Promise(y=>{pe=v=>{v=new WebAssembly.Instance(v,Bo()),f(v),y()}}),self.onunhandledrejection=c=>{throw c.reason||c},self.onmessage=s}u.wasmBinary&&(z=u.wasmBinary);var le,K,de,re,se,Z,ne,J,ke,R,F,ce,Re,Se=!1;function we(){var s=le.buffer;u.HEAP8=re=new Int8Array(s),u.HEAP16=Z=new Int16Array(s),u.HEAPU8=se=new Uint8Array(s),u.HEAPU16=ne=new Uint16Array(s),u.HEAP32=J=new Int32Array(s),u.HEAPU32=ke=new Uint32Array(s),u.HEAPF32=R=new Float32Array(s),u.HEAPF64=Re=new Float64Array(s),u.HEAP64=F=new BigInt64Array(s),u.HEAPU64=ce=new BigUint64Array(s)}if(!b){if(!((le=new WebAssembly.Memory({initial:256,maximum:65536,shared:!0})).buffer instanceof x))throw Y(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),Error(\"bad memory\");we()}var Lt=[],Pe=[],ze=[],Fe=0,Ot=null,yt=null;function ko(){if(--Fe==0&&(Ot!==null&&(clearInterval(Ot),Ot=null),yt)){var s=yt;yt=null,s()}}function Dt(s){throw Y(s=\"Aborted(\"+s+\")\"),Se=!0,de=1,s=new WebAssembly.RuntimeError(s+\". Build with -sASSERTIONS for more info.\"),m(s),s}var mn,Po=s=>s.startsWith(\"data:application/octet-stream;base64,\"),Oo=s=>s.startsWith(\"file://\");function Do(s){if(s==mn&&z)return new Uint8Array(z);if(S)return S(s);throw\"both async and sync fetching of the wasm failed\"}function zo(s,c,f){return function(y){if(!z&&(w||g)){if(typeof fetch==\"function\"&&!Oo(y))return fetch(y,{credentials:\"same-origin\"}).then(v=>{if(!v.ok)throw`failed to load wasm binary file at '${y}'`;return v.arrayBuffer()}).catch(()=>Do(y));if($)return new Promise((v,C)=>{$(y,O=>v(new Uint8Array(O)),C)})}return Promise.resolve().then(()=>Do(y))}(s).then(y=>WebAssembly.instantiate(y,c)).then(f,y=>{Y(`failed to asynchronously prepare wasm: ${y}`),Dt(y)})}function Bo(){return{a:{M:Wl,za:Nl,b:Fl,$:Lo,z:jo,pa:Ko,X:Xo,Z:Zo,qa:Qo,na:Jo,ga:ei,ma:ti,J:ri,Y:ni,V:oi,oa:ii,W:ai,va:ql,D:Kl,P:Yl,O:Zl,C:Jl,s:ec,p:tc,E:rc,y:dc,Q:lc,ta:cc,ja:pc,T:mc,aa:fc,F:hc,ia:In,sa:gc,u:yc,B:vc,o:$c,m:xc,c:xn,n:Sc,k:Tc,Aa:Ac,r:Ec,f:kc,v:Pc,l:Oc,g:Dc,i:zc,j:Bc,h:Rc,e:Mc,da:Uc,ea:Vc,fa:Nc,ba:vi,ca:$i,S:Wc,d:Hc,N:Gc,G:Lc,K:Fc,w:qc,ra:jc,U:Kc,t:xi,x:Yc,L:Xc,R:Zc,ya:Qc,xa:Jc,ka:Ci,la:Ti,_:bn,A:Ai,I:Ei,ha:ki,H:Pi,a:le,wa:yn,ua:zi,q:rp}}}var fn={848436:(s,c,f,y)=>{if(u===void 0||!u.Fb)return 1;if((s=Ae(s>>>0)).startsWith(\"./\")&&(s=s.substring(2)),!(s=u.Fb.get(s)))return 2;if(y>>>=0,(c>>>=0)+(f>>>=0)>s.byteLength)return 3;try{return r().set(s.subarray(c,c+f),y>>>0),0}catch{return 4}},848937:()=>{u.Ub()},848968:()=>{u.Vb()},848997:()=>{u.Zb()},849022:s=>u.Tb(s),849055:s=>u.Xb(s),849087:(s,c,f)=>{u.Nb(s,c,f,!0)},849126:(s,c,f)=>{u.Nb(s,c,f)},849159:()=>typeof wasmOffsetConverter<\"u\",849216:s=>{u.jb(\"Abs\",s,void 0)},849267:s=>{u.jb(\"Neg\",s,void 0)},849318:s=>{u.jb(\"Floor\",s,void 0)},849371:s=>{u.jb(\"Ceil\",s,void 0)},849423:s=>{u.jb(\"Reciprocal\",s,void 0)},849481:s=>{u.jb(\"Sqrt\",s,void 0)},849533:s=>{u.jb(\"Exp\",s,void 0)},849584:s=>{u.jb(\"Erf\",s,void 0)},849635:s=>{u.jb(\"Sigmoid\",s,void 0)},849690:(s,c,f)=>{u.jb(\"HardSigmoid\",s,{alpha:c,beta:f})},849769:s=>{u.jb(\"Log\",s,void 0)},849820:s=>{u.jb(\"Sin\",s,void 0)},849871:s=>{u.jb(\"Cos\",s,void 0)},849922:s=>{u.jb(\"Tan\",s,void 0)},849973:s=>{u.jb(\"Asin\",s,void 0)},850025:s=>{u.jb(\"Acos\",s,void 0)},850077:s=>{u.jb(\"Atan\",s,void 0)},850129:s=>{u.jb(\"Sinh\",s,void 0)},850181:s=>{u.jb(\"Cosh\",s,void 0)},850233:s=>{u.jb(\"Asinh\",s,void 0)},850286:s=>{u.jb(\"Acosh\",s,void 0)},850339:s=>{u.jb(\"Atanh\",s,void 0)},850392:s=>{u.jb(\"Tanh\",s,void 0)},850444:s=>{u.jb(\"Not\",s,void 0)},850495:(s,c,f)=>{u.jb(\"Clip\",s,{min:c,max:f})},850564:s=>{u.jb(\"Clip\",s,void 0)},850616:(s,c)=>{u.jb(\"Elu\",s,{alpha:c})},850674:s=>{u.jb(\"Relu\",s,void 0)},850726:(s,c)=>{u.jb(\"LeakyRelu\",s,{alpha:c})},850790:(s,c)=>{u.jb(\"ThresholdedRelu\",s,{alpha:c})},850860:(s,c)=>{u.jb(\"Cast\",s,{to:c})},850918:s=>{u.jb(\"Add\",s,void 0)},850969:s=>{u.jb(\"Sub\",s,void 0)},851020:s=>{u.jb(\"Mul\",s,void 0)},851071:s=>{u.jb(\"Div\",s,void 0)},851122:s=>{u.jb(\"Pow\",s,void 0)},851173:s=>{u.jb(\"Equal\",s,void 0)},851226:s=>{u.jb(\"Greater\",s,void 0)},851281:s=>{u.jb(\"GreaterOrEqual\",s,void 0)},851343:s=>{u.jb(\"Less\",s,void 0)},851395:s=>{u.jb(\"LessOrEqual\",s,void 0)},851454:(s,c,f,y,v)=>{u.jb(\"ReduceMean\",s,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:y?Array.from(i().subarray(y>>>0,v>>>0)):[]})},851613:(s,c,f,y,v)=>{u.jb(\"ReduceMax\",s,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:y?Array.from(i().subarray(y>>>0,v>>>0)):[]})},851771:(s,c,f,y,v)=>{u.jb(\"ReduceMin\",s,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:y?Array.from(i().subarray(y>>>0,v>>>0)):[]})},851929:(s,c,f,y,v)=>{u.jb(\"ReduceProd\",s,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:y?Array.from(i().subarray(y>>>0,v>>>0)):[]})},852088:(s,c,f,y,v)=>{u.jb(\"ReduceSum\",s,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:y?Array.from(i().subarray(y>>>0,v>>>0)):[]})},852246:(s,c,f,y,v)=>{u.jb(\"ReduceL1\",s,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:y?Array.from(i().subarray(y>>>0,v>>>0)):[]})},852403:(s,c,f,y,v)=>{u.jb(\"ReduceL2\",s,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:y?Array.from(i().subarray(y>>>0,v>>>0)):[]})},852560:(s,c,f,y,v)=>{u.jb(\"ReduceLogSum\",s,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:y?Array.from(i().subarray(y>>>0,v>>>0)):[]})},852721:(s,c,f,y,v)=>{u.jb(\"ReduceSumSquare\",s,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:y?Array.from(i().subarray(y>>>0,v>>>0)):[]})},852885:(s,c,f,y,v)=>{u.jb(\"ReduceLogSumExp\",s,{keepDims:!!c,noopWithEmptyAxes:!!f,axes:y?Array.from(i().subarray(y>>>0,v>>>0)):[]})},853049:s=>{u.jb(\"Where\",s,void 0)},853102:(s,c,f)=>{u.jb(\"Transpose\",s,{perm:c?Array.from(i().subarray(c>>>0,f>>>0)):[]})},853210:(s,c,f,y)=>{u.jb(\"DepthToSpace\",s,{blocksize:c,mode:Ae(f),format:y?\"NHWC\":\"NCHW\"})},853343:(s,c,f,y)=>{u.jb(\"DepthToSpace\",s,{blocksize:c,mode:Ae(f),format:y?\"NHWC\":\"NCHW\"})},853476:(s,c,f,y,v,C,O,B,N,L,j,me,he,P,ee)=>{u.jb(\"ConvTranspose\",s,{format:N?\"NHWC\":\"NCHW\",autoPad:c,dilations:[f],group:y,kernelShape:[v],pads:[C,O],strides:[B],wIsConst:()=>!!t()[L>>>0],outputPadding:j?Array.from(i().subarray(j>>>0,me>>>0)):[],outputShape:he?Array.from(i().subarray(he>>>0,P>>>0)):[],activation:Ae(ee)})},853877:(s,c,f,y,v,C,O,B,N,L,j,me,he,P)=>{u.jb(\"ConvTranspose\",s,{format:B?\"NHWC\":\"NCHW\",autoPad:c,dilations:Array.from(i().subarray(f>>>0,2+(f>>>0)>>>0)),group:y,kernelShape:Array.from(i().subarray(v>>>0,2+(v>>>0)>>>0)),pads:Array.from(i().subarray(C>>>0,4+(C>>>0)>>>0)),strides:Array.from(i().subarray(O>>>0,2+(O>>>0)>>>0)),wIsConst:()=>!!t()[N>>>0],outputPadding:L?Array.from(i().subarray(L>>>0,j>>>0)):[],outputShape:me?Array.from(i().subarray(me>>>0,he>>>0)):[],activation:Ae(P)})},854442:(s,c,f,y,v,C,O,B,N,L,j,me,he,P,ee)=>{u.jb(\"ConvTranspose\",s,{format:N?\"NHWC\":\"NCHW\",autoPad:c,dilations:[f],group:y,kernelShape:[v],pads:[C,O],strides:[B],wIsConst:()=>!!t()[L>>>0],outputPadding:j?Array.from(i().subarray(j>>>0,me>>>0)):[],outputShape:he?Array.from(i().subarray(he>>>0,P>>>0)):[],activation:Ae(ee)})},854843:(s,c,f,y,v,C,O,B,N,L,j,me,he,P)=>{u.jb(\"ConvTranspose\",s,{format:B?\"NHWC\":\"NCHW\",autoPad:c,dilations:Array.from(i().subarray(f>>>0,2+(f>>>0)>>>0)),group:y,kernelShape:Array.from(i().subarray(v>>>0,2+(v>>>0)>>>0)),pads:Array.from(i().subarray(C>>>0,4+(C>>>0)>>>0)),strides:Array.from(i().subarray(O>>>0,2+(O>>>0)>>>0)),wIsConst:()=>!!t()[N>>>0],outputPadding:L?Array.from(i().subarray(L>>>0,j>>>0)):[],outputShape:me?Array.from(i().subarray(me>>>0,he>>>0)):[],activation:Ae(P)})},855408:(s,c)=>{u.jb(\"GlobalAveragePool\",s,{format:c?\"NHWC\":\"NCHW\"})},855499:(s,c,f,y,v,C,O,B,N,L,j,me,he,P,ee,ye)=>{u.jb(\"AveragePool\",s,{format:ye?\"NHWC\":\"NCHW\",auto_pad:c,ceil_mode:f,count_include_pad:y,storage_order:v,dilations:[C,O],kernel_shape:[B,N],pads:[L,j,me,he],strides:[P,ee]})},855783:(s,c)=>{u.jb(\"GlobalAveragePool\",s,{format:c?\"NHWC\":\"NCHW\"})},855874:(s,c,f,y,v,C,O,B,N,L,j,me,he,P,ee,ye)=>{u.jb(\"AveragePool\",s,{format:ye?\"NHWC\":\"NCHW\",auto_pad:c,ceil_mode:f,count_include_pad:y,storage_order:v,dilations:[C,O],kernel_shape:[B,N],pads:[L,j,me,he],strides:[P,ee]})},856158:(s,c)=>{u.jb(\"GlobalMaxPool\",s,{format:c?\"NHWC\":\"NCHW\"})},856245:(s,c,f,y,v,C,O,B,N,L,j,me,he,P,ee,ye)=>{u.jb(\"MaxPool\",s,{format:ye?\"NHWC\":\"NCHW\",auto_pad:c,ceil_mode:f,count_include_pad:y,storage_order:v,dilations:[C,O],kernel_shape:[B,N],pads:[L,j,me,he],strides:[P,ee]})},856525:(s,c)=>{u.jb(\"GlobalMaxPool\",s,{format:c?\"NHWC\":\"NCHW\"})},856612:(s,c,f,y,v,C,O,B,N,L,j,me,he,P,ee,ye)=>{u.jb(\"MaxPool\",s,{format:ye?\"NHWC\":\"NCHW\",auto_pad:c,ceil_mode:f,count_include_pad:y,storage_order:v,dilations:[C,O],kernel_shape:[B,N],pads:[L,j,me,he],strides:[P,ee]})},856892:(s,c,f,y,v)=>{u.jb(\"Gemm\",s,{alpha:c,beta:f,transA:y,transB:v})},856996:s=>{u.jb(\"MatMul\",s,void 0)},857050:(s,c,f,y)=>{u.jb(\"ArgMax\",s,{keepDims:!!c,selectLastIndex:!!f,axis:y})},857158:(s,c,f,y)=>{u.jb(\"ArgMin\",s,{keepDims:!!c,selectLastIndex:!!f,axis:y})},857266:(s,c)=>{u.jb(\"Softmax\",s,{axis:c})},857329:(s,c)=>{u.jb(\"Concat\",s,{axis:c})},857389:(s,c,f,y,v)=>{u.jb(\"Split\",s,{axis:c,numOutputs:f,splitSizes:y?Array.from(i().subarray(y>>>0,v>>>0)):[]})},857529:s=>{u.jb(\"Expand\",s,void 0)},857583:(s,c)=>{u.jb(\"Gather\",s,{axis:Number(c)})},857654:(s,c)=>{u.jb(\"GatherElements\",s,{axis:Number(c)})},857733:(s,c,f,y,v,C,O,B,N,L,j)=>{u.jb(\"Resize\",s,{antialias:c,axes:f?Array.from(i().subarray(f>>>0,y>>>0)):[],coordinateTransformMode:Ae(v),cubicCoeffA:C,excludeOutside:O,extrapolationValue:B,keepAspectRatioPolicy:Ae(N),mode:Ae(L),nearestMode:Ae(j)})},858079:(s,c,f,y,v,C,O)=>{u.jb(\"Slice\",s,{starts:c?Array.from(i().subarray(c>>>0,f>>>0)):[],ends:y?Array.from(i().subarray(y>>>0,v>>>0)):[],axes:C?Array.from(i().subarray(C>>>0,O>>>0)):[]})},858295:s=>{u.jb(\"Tile\",s,void 0)},858347:(s,c,f)=>{u.jb(\"InstanceNormalization\",s,{epsilon:c,format:f?\"NHWC\":\"NCHW\"})},858461:(s,c,f)=>{u.jb(\"InstanceNormalization\",s,{epsilon:c,format:f?\"NHWC\":\"NCHW\"})},858575:s=>{u.jb(\"Range\",s,void 0)},858628:(s,c)=>{u.jb(\"Einsum\",s,{equation:Ae(c)})},858709:(s,c,f,y,v)=>{u.jb(\"Pad\",s,{mode:c,value:f,pads:y?Array.from(i().subarray(y>>>0,v>>>0)):[]})},858836:(s,c,f,y,v,C)=>{u.jb(\"BatchNormalization\",s,{epsilon:c,momentum:f,spatial:!!v,trainingMode:!!y,format:C?\"NHWC\":\"NCHW\"})},859005:(s,c,f,y,v,C)=>{u.jb(\"BatchNormalization\",s,{epsilon:c,momentum:f,spatial:!!v,trainingMode:!!y,format:C?\"NHWC\":\"NCHW\"})},859174:(s,c,f)=>{u.jb(\"CumSum\",s,{exclusive:Number(c),reverse:Number(f)})},859271:(s,c,f,y,v,C,O,B,N)=>{u.jb(\"Attention\",s,{numHeads:c,isUnidirectional:f,maskFilterValue:y,scale:v,doRotary:C,qkvHiddenSizes:O?Array.from(i().subarray(Number(B)>>>0,Number(B)+O>>>0)):[],pastPresentShareBuffer:!!N})},859543:s=>{u.jb(\"BiasAdd\",s,void 0)},859598:s=>{u.jb(\"BiasSplitGelu\",s,void 0)},859659:s=>{u.jb(\"FastGelu\",s,void 0)},859715:(s,c,f,y,v,C,O,B,N,L,j,me,he,P,ee,ye)=>{u.jb(\"Conv\",s,{format:me?\"NHWC\":\"NCHW\",auto_pad:c,dilations:f?Array.from(i().subarray(f>>>0,y>>>0)):[],group:v,kernel_shape:C?Array.from(i().subarray(C>>>0,O>>>0)):[],pads:B?Array.from(i().subarray(B>>>0,N>>>0)):[],strides:L?Array.from(i().subarray(L>>>0,j>>>0)):[],w_is_const:()=>!!t()[he>>>0],activation:Ae(P),activation_params:ee?Array.from(l().subarray(ee>>>0,ye>>>0)):[]})},860211:s=>{u.jb(\"Gelu\",s,void 0)},860263:(s,c,f,y)=>{u.jb(\"GroupQueryAttention\",s,{numHeads:c,kvNumHeads:f,scale:y})},860376:(s,c,f,y)=>{u.jb(\"LayerNormalization\",s,{axis:c,epsilon:f,simplified:!!y})},860487:(s,c,f,y)=>{u.jb(\"LayerNormalization\",s,{axis:c,epsilon:f,simplified:!!y})},860598:(s,c,f,y,v,C)=>{u.jb(\"MatMulNBits\",s,{k:c,n:f,accuracyLevel:y,bits:v,blockSize:C})},860725:(s,c,f,y,v,C)=>{u.jb(\"MultiHeadAttention\",s,{numHeads:c,isUnidirectional:f,maskFilterValue:y,scale:v,doRotary:C})},860884:(s,c)=>{u.jb(\"QuickGelu\",s,{alpha:c})},860948:(s,c,f,y,v)=>{u.jb(\"RotaryEmbedding\",s,{interleaved:!!c,numHeads:f,rotaryEmbeddingDim:y,scale:v})},861087:(s,c,f)=>{u.jb(\"SkipLayerNormalization\",s,{epsilon:c,simplified:!!f})},861189:s=>{u.Yb(s)},861223:(s,c)=>u.$b(s,c,u.Eb.bc,u.Eb.errors),861335:(s,c,f)=>{u.jb(\"SkipLayerNormalization\",s,{epsilon:c,simplified:!!f})}};function Nl(s,c,f){return hi(async()=>{await u.Wb(s,c,f)})}function Wl(){return typeof wasmOffsetConverter<\"u\"}function hn(s){this.name=\"ExitStatus\",this.message=`Program terminated with exit(${s})`,this.status=s}var gn=s=>{s.terminate(),s.onmessage=()=>{}},Ro=s=>{ct.length==0&&(Ho(),Wo(ct[0]));var c=ct.pop();if(!c)return 6;wt.push(c),Ze[s.Ab]=c,c.Ab=s.Ab;var f={cmd:\"run\",start_routine:s.cc,arg:s.Pb,pthread_ptr:s.Ab};return c.postMessage(f,s.ic),0},bt=0,xe=(s,c,...f)=>{for(var y=2*f.length,v=Bn(),C=zn(8*y),O=C>>>3,B=0;B<f.length;B++){var N=f[B];typeof N==\"bigint\"?(F[O+2*B]=1n,F[O+2*B+1]=N):(F[O+2*B]=0n,d()[O+2*B+1>>>0]=N)}return s=Vi(s,0,y,C,c),yr(v),s};function yn(s){if(b)return xe(0,1,s);if(de=s,!(0<bt)){for(var c of wt)gn(c);for(c of ct)gn(c);ct=[],wt=[],Ze=[],Se=!0}A(s,new hn(s))}function Mo(s){if(b)return xe(1,0,s);bn(s)}var bn=s=>{if(de=s,b)throw Mo(s),\"unwind\";yn(s)},ct=[],wt=[],Uo=[],Ze={},Vo=s=>{var c=s.Ab;delete Ze[c],ct.push(s),wt.splice(wt.indexOf(s),1),s.Ab=0,Dn(c)};function No(){Uo.forEach(s=>s())}var Wo=s=>new Promise(c=>{s.onmessage=v=>{var C=(v=v.data).cmd;if(v.targetThread&&v.targetThread!=Mt()){var O=Ze[v.targetThread];O?O.postMessage(v,v.transferList):Y(`Internal error! Worker sent a message \"${C}\" to target pthread ${v.targetThread}, but that thread no longer exists!`)}else C===\"checkMailbox\"?sr():C===\"spawnThread\"?Ro(v):C===\"cleanupThread\"?Vo(Ze[v.thread]):C===\"killThread\"?(v=v.thread,C=Ze[v],delete Ze[v],gn(C),Dn(v),wt.splice(wt.indexOf(C),1),C.Ab=0):C===\"cancelThread\"?Ze[v.thread].postMessage({cmd:\"cancel\"}):C===\"loaded\"?(s.loaded=!0,c(s)):C===\"alert\"?alert(`Thread ${v.threadId}: ${v.text}`):v.target===\"setimmediate\"?s.postMessage(v):C===\"callHandler\"?u[v.handler](...v.args):C&&Y(`worker sent an unknown command ${C}`)},s.onerror=v=>{throw Y(`worker sent an error! ${v.filename}:${v.lineno}: ${v.message}`),v};var f,y=[];for(f of[])u.hasOwnProperty(f)&&y.push(f);s.postMessage({cmd:\"load\",handlers:y,wasmMemory:le,wasmModule:K})});function Ho(){var s=new Worker(new URL(import.meta.url),{type:\"module\",workerData:\"em-pthread\",name:\"em-pthread\"});ct.push(s)}var ar=s=>{for(;0<s.length;)s.shift()(u)},Hl=()=>{var s=Mt(),c=a()[s+52>>>2>>>0];s=a()[s+56>>>2>>>0],Wi(c,c-s),yr(c)},Gl=(s,c)=>{bt=0,s=Hi(s,c),0<bt?de=s:gr(s)};class Ll{constructor(c){this.Ib=c-24}}function Fl(s,c,f){var y=new Ll(s>>>=0);throw c>>>=0,f>>>=0,a()[y.Ib+16>>>2>>>0]=0,a()[y.Ib+4>>>2>>>0]=c,a()[y.Ib+8>>>2>>>0]=f,s}function Go(s,c,f,y){return b?xe(2,1,s,c,f,y):Lo(s,c,f,y)}function Lo(s,c,f,y){if(s>>>=0,c>>>=0,f>>>=0,y>>>=0,x===void 0)return Y(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var v=[];return b&&v.length===0?Go(s,c,f,y):(s={cc:f,Ab:s,Pb:y,ic:v},b?(s.Lb=\"spawnThread\",postMessage(s,v),0):Ro(s))}var Fo=typeof TextDecoder<\"u\"?new TextDecoder(\"utf8\"):void 0,qo=(s,c,f)=>{var y=(c>>>=0)+f;for(f=c;s[f]&&!(f>=y);)++f;if(16<f-c&&s.buffer&&Fo)return Fo.decode(s.buffer instanceof x?s.slice(c,f):s.subarray(c,f));for(y=\"\";c<f;){var v=s[c++];if(128&v){var C=63&s[c++];if((224&v)==192)y+=String.fromCharCode((31&v)<<6|C);else{var O=63&s[c++];65536>(v=(240&v)==224?(15&v)<<12|C<<6|O:(7&v)<<18|C<<12|O<<6|63&s[c++])?y+=String.fromCharCode(v):(v-=65536,y+=String.fromCharCode(55296|v>>10,56320|1023&v))}}else y+=String.fromCharCode(v)}return y},Ae=(s,c)=>(s>>>=0)?qo(r(),s,c):\"\";function jo(s,c,f){return b?xe(3,1,s,c,f):0}function Ko(s,c){if(b)return xe(4,1,s,c)}var wn=s=>{for(var c=0,f=0;f<s.length;++f){var y=s.charCodeAt(f);127>=y?c++:2047>=y?c+=2:55296<=y&&57343>=y?(c+=4,++f):c+=3}return c},Yo=(s,c,f,y)=>{if(!(0<y))return 0;var v=f>>>=0;y=f+y-1;for(var C=0;C<s.length;++C){var O=s.charCodeAt(C);if(55296<=O&&57343>=O&&(O=65536+((1023&O)<<10)|1023&s.charCodeAt(++C)),127>=O){if(f>=y)break;c[f++>>>0]=O}else{if(2047>=O){if(f+1>=y)break;c[f++>>>0]=192|O>>6}else{if(65535>=O){if(f+2>=y)break;c[f++>>>0]=224|O>>12}else{if(f+3>=y)break;c[f++>>>0]=240|O>>18,c[f++>>>0]=128|O>>12&63}c[f++>>>0]=128|O>>6&63}c[f++>>>0]=128|63&O}}return c[f>>>0]=0,f-v},zt=(s,c,f)=>Yo(s,r(),c,f);function Xo(s,c){if(b)return xe(5,1,s,c)}function Zo(s,c,f){if(b)return xe(6,1,s,c,f)}function Qo(s,c,f){return b?xe(7,1,s,c,f):0}function Jo(s,c){if(b)return xe(8,1,s,c)}function ei(s,c,f){if(b)return xe(9,1,s,c,f)}function ti(s,c,f,y){if(b)return xe(10,1,s,c,f,y)}function ri(s,c,f,y){if(b)return xe(11,1,s,c,f,y)}function ni(s,c,f,y){if(b)return xe(12,1,s,c,f,y)}function oi(s){if(b)return xe(13,1,s)}function ii(s,c){if(b)return xe(14,1,s,c)}function ai(s,c,f){if(b)return xe(15,1,s,c,f)}var si,pt,ql=()=>{Dt(\"\")},Qe=s=>{for(var c=\"\";r()[s>>>0];)c+=si[r()[s++>>>0]];return c},vn={},$n={},jl={};function st(s,c,f={}){if(!(\"argPackAdvance\"in c))throw new TypeError(\"registerType registeredInstance requires argPackAdvance\");return function(y,v,C={}){var O=v.name;if(!y)throw new pt(`type \"${O}\" must have a positive integer typeid pointer`);if($n.hasOwnProperty(y)){if(C.Rb)return;throw new pt(`Cannot register type '${O}' twice`)}$n[y]=v,delete jl[y],vn.hasOwnProperty(y)&&(v=vn[y],delete vn[y],v.forEach(B=>B()))}(s,c,f)}var ui=(s,c,f)=>{switch(c){case 1:return f?y=>t()[y>>>0]:y=>r()[y>>>0];case 2:return f?y=>n()[y>>>1>>>0]:y=>o()[y>>>1>>>0];case 4:return f?y=>i()[y>>>2>>>0]:y=>a()[y>>>2>>>0];case 8:return f?y=>F[y>>>3]:y=>ce[y>>>3];default:throw new TypeError(`invalid integer width (${c}): ${s}`)}};function Kl(s,c,f){f>>>=0,st(s>>>=0,{name:c=Qe(c>>>0),fromWireType:y=>y,toWireType:function(y,v){if(typeof v!=\"bigint\"&&typeof v!=\"number\")throw v=v===null?\"null\":(y=typeof v)==\"object\"||y===\"array\"||y===\"function\"?v.toString():\"\"+v,new TypeError(`Cannot convert \"${v}\" to ${this.name}`);return typeof v==\"number\"&&(v=BigInt(v)),v},argPackAdvance:mt,readValueFromPointer:ui(c,f,c.indexOf(\"u\")==-1),Db:null})}var mt=8;function Yl(s,c,f,y){st(s>>>=0,{name:c=Qe(c>>>0),fromWireType:function(v){return!!v},toWireType:function(v,C){return C?f:y},argPackAdvance:mt,readValueFromPointer:function(v){return this.fromWireType(r()[v>>>0])},Db:null})}var _n=[],ut=[];function xn(s){9<(s>>>=0)&&--ut[s+1]==0&&(ut[s]=void 0,_n.push(s))}var qe=s=>{if(!s)throw new pt(\"Cannot use deleted val. handle = \"+s);return ut[s]},je=s=>{switch(s){case void 0:return 2;case null:return 4;case!0:return 6;case!1:return 8;default:let c=_n.pop()||ut.length;return ut[c]=s,ut[c+1]=1,c}};function Sn(s){return this.fromWireType(a()[s>>>2>>>0])}var Xl={name:\"emscripten::val\",fromWireType:s=>{var c=qe(s);return xn(s),c},toWireType:(s,c)=>je(c),argPackAdvance:mt,readValueFromPointer:Sn,Db:null};function Zl(s){return st(s>>>0,Xl)}var Ql=(s,c)=>{switch(c){case 4:return function(f){return this.fromWireType(l()[f>>>2>>>0])};case 8:return function(f){return this.fromWireType(d()[f>>>3>>>0])};default:throw new TypeError(`invalid float width (${c}): ${s}`)}};function Jl(s,c,f){f>>>=0,st(s>>>=0,{name:c=Qe(c>>>0),fromWireType:y=>y,toWireType:(y,v)=>v,argPackAdvance:mt,readValueFromPointer:Ql(c,f),Db:null})}function ec(s,c,f,y,v){if(s>>>=0,f>>>=0,c=Qe(c>>>0),v===-1&&(v=4294967295),v=B=>B,y===0){var C=32-8*f;v=B=>B<<C>>>C}var O=c.includes(\"unsigned\")?function(B,N){return N>>>0}:function(B,N){return N};st(s,{name:c,fromWireType:v,toWireType:O,argPackAdvance:mt,readValueFromPointer:ui(c,f,y!==0),Db:null})}function tc(s,c,f){function y(C){var O=a()[C>>>2>>>0];return C=a()[C+4>>>2>>>0],new v(t().buffer,C,O)}var v=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,BigInt64Array,BigUint64Array][c];st(s>>>=0,{name:f=Qe(f>>>0),fromWireType:y,argPackAdvance:mt,readValueFromPointer:y},{Rb:!0})}function rc(s,c){s>>>=0;var f=(c=Qe(c>>>0))===\"std::string\";st(s,{name:c,fromWireType:function(y){var v=a()[y>>>2>>>0],C=y+4;if(f)for(var O=C,B=0;B<=v;++B){var N=C+B;if(B==v||r()[N>>>0]==0){if(O=Ae(O,N-O),L===void 0)var L=O;else L+=String.fromCharCode(0),L+=O;O=N+1}}else{for(L=Array(v),B=0;B<v;++B)L[B]=String.fromCharCode(r()[C+B>>>0]);L=L.join(\"\")}return et(y),L},toWireType:function(y,v){v instanceof ArrayBuffer&&(v=new Uint8Array(v));var C=typeof v==\"string\";if(!(C||v instanceof Uint8Array||v instanceof Uint8ClampedArray||v instanceof Int8Array))throw new pt(\"Cannot pass non-string to std::string\");var O=f&&C?wn(v):v.length,B=hr(4+O+1),N=B+4;if(a()[B>>>2>>>0]=O,f&&C)zt(v,N,O+1);else if(C)for(C=0;C<O;++C){var L=v.charCodeAt(C);if(255<L)throw et(N),new pt(\"String has UTF-16 code units that do not fit in 8 bits\");r()[N+C>>>0]=L}else for(C=0;C<O;++C)r()[N+C>>>0]=v[C];return y!==null&&y.push(et,B),B},argPackAdvance:mt,readValueFromPointer:Sn,Db(y){et(y)}})}var di=typeof TextDecoder<\"u\"?new TextDecoder(\"utf-16le\"):void 0,nc=(s,c)=>{for(var f=s>>1,y=f+c/2;!(f>=y)&&o()[f>>>0];)++f;if(32<(f<<=1)-s&&di)return di.decode(r().slice(s,f));for(f=\"\",y=0;!(y>=c/2);++y){var v=n()[s+2*y>>>1>>>0];if(v==0)break;f+=String.fromCharCode(v)}return f},oc=(s,c,f)=>{if(f??=2147483647,2>f)return 0;var y=c;f=(f-=2)<2*s.length?f/2:s.length;for(var v=0;v<f;++v){var C=s.charCodeAt(v);n()[c>>>1>>>0]=C,c+=2}return n()[c>>>1>>>0]=0,c-y},ic=s=>2*s.length,ac=(s,c)=>{for(var f=0,y=\"\";!(f>=c/4);){var v=i()[s+4*f>>>2>>>0];if(v==0)break;++f,65536<=v?(v-=65536,y+=String.fromCharCode(55296|v>>10,56320|1023&v)):y+=String.fromCharCode(v)}return y},sc=(s,c,f)=>{if(c>>>=0,f??=2147483647,4>f)return 0;var y=c;f=y+f-4;for(var v=0;v<s.length;++v){var C=s.charCodeAt(v);if(55296<=C&&57343>=C&&(C=65536+((1023&C)<<10)|1023&s.charCodeAt(++v)),i()[c>>>2>>>0]=C,(c+=4)+4>f)break}return i()[c>>>2>>>0]=0,c-y},uc=s=>{for(var c=0,f=0;f<s.length;++f){var y=s.charCodeAt(f);55296<=y&&57343>=y&&++f,c+=4}return c};function dc(s,c,f){if(s>>>=0,c>>>=0,f=Qe(f>>>=0),c===2)var y=nc,v=oc,C=ic,O=B=>o()[B>>>1>>>0];else c===4&&(y=ac,v=sc,C=uc,O=B=>a()[B>>>2>>>0]);st(s,{name:f,fromWireType:B=>{for(var N,L=a()[B>>>2>>>0],j=B+4,me=0;me<=L;++me){var he=B+4+me*c;me!=L&&O(he)!=0||(j=y(j,he-j),N===void 0?N=j:(N+=String.fromCharCode(0),N+=j),j=he+c)}return et(B),N},toWireType:(B,N)=>{if(typeof N!=\"string\")throw new pt(`Cannot pass non-string to C++ string type ${f}`);var L=C(N),j=hr(4+L+c);return a()[j>>>2>>>0]=L/c,v(N,j+4,L+c),B!==null&&B.push(et,j),j},argPackAdvance:mt,readValueFromPointer:Sn,Db(B){et(B)}})}function lc(s,c){st(s>>>=0,{Sb:!0,name:c=Qe(c>>>0),argPackAdvance:0,fromWireType:()=>{},toWireType:()=>{}})}var cc=()=>1;function pc(s){On(s>>>0,!g,1,!w,131072,!1),No()}var li=s=>{if(!Se)try{if(s(),!(0<bt))try{b?gr(de):bn(de)}catch(c){c instanceof hn||c==\"unwind\"||A(1,c)}}catch(c){c instanceof hn||c==\"unwind\"||A(1,c)}};function In(s){s>>>=0,typeof Atomics.jc==\"function\"&&(Atomics.jc(i(),s>>>2,s).value.then(sr),s+=128,Atomics.store(i(),s>>>2,1))}var sr=()=>{var s=Mt();s&&(In(s),li(Ni))};function mc(s,c){(s>>>=0)==c>>>0?setTimeout(sr):b?postMessage({targetThread:s,cmd:\"checkMailbox\"}):(s=Ze[s])&&s.postMessage({cmd:\"checkMailbox\"})}var Cn=[];function fc(s,c,f,y,v){for(c>>>=0,y/=2,Cn.length=y,f=v>>>0>>>3,v=0;v<y;v++)Cn[v]=F[f+2*v]?F[f+2*v+1]:d()[f+2*v+1>>>0];return(c?fn[c]:np[s])(...Cn)}function hc(s){s>>>=0,b?postMessage({cmd:\"cleanupThread\",thread:s}):Vo(Ze[s])}function gc(s){}var Tn=(s,c)=>{var f=$n[s];if(f===void 0)throw s=Ri(s),f=Qe(s),et(s),new pt(`${c} has unknown type ${f}`);return f},ci=(s,c,f)=>{var y=[];return s=s.toWireType(y,f),y.length&&(a()[c>>>2>>>0]=je(y)),s};function yc(s,c,f){return c>>>=0,f>>>=0,s=qe(s>>>0),c=Tn(c,\"emval::as\"),ci(c,f,s)}var ur=s=>{try{s()}catch(c){Dt(c)}},ft=0,Je=null,pi=0,dr=[],mi={},fi={},bc=0,An=null,wc=[];function hi(s){return function(c){if(!Se){if(ft===0){var f=!1,y=!1;c((v=0)=>{if(!Se&&(pi=v,f=!0,y)){ft=2,ur(()=>Fi(Je)),typeof Browser<\"u\"&&Browser.Jb.Qb&&Browser.Jb.resume(),v=!1;try{var C=function(){var N=i()[Je+8>>>2>>>0];return N=q[fi[N]],--bt,N()}()}catch(N){C=N,v=!0}var O=!1;if(!Je){var B=An;B&&(An=null,(v?B.reject:B.resolve)(C),O=!0)}if(v&&!O)throw C}}),y=!0,f||(ft=1,Je=function(){var v=hr(65548),C=v+12;a()[v>>>2>>>0]=C,a()[v+4>>>2>>>0]=C+65536,C=dr[0];var O=mi[C];return O===void 0&&(O=bc++,mi[C]=O,fi[O]=C),C=O,i()[v+8>>>2>>>0]=C,v}(),typeof Browser<\"u\"&&Browser.Jb.Qb&&Browser.Jb.pause(),ur(()=>Gi(Je)))}else ft===2?(ft=0,ur(qi),et(Je),Je=null,wc.forEach(li)):Dt(`invalid state: ${ft}`);return pi}}(c=>{s().then(c)})}function vc(s){return s>>>=0,hi(()=>(s=qe(s)).then(je))}var lr=[];function $c(s,c,f,y){return f>>>=0,y>>>=0,(s=lr[s>>>0])(null,c=qe(c>>>0),f,y)}var _c={},cr=s=>{var c=_c[s];return c===void 0?Qe(s):c};function xc(s,c,f,y,v){return f>>>=0,y>>>=0,v>>>=0,(s=lr[s>>>0])(c=qe(c>>>0),c[f=cr(f)],y,v)}var gi=()=>typeof globalThis==\"object\"?globalThis:Function(\"return this\")();function Sc(s){return(s>>>=0)==0?je(gi()):(s=cr(s),je(gi()[s]))}var Ic=s=>{var c=lr.length;return lr.push(s),c},Cc=(s,c)=>{for(var f=Array(s),y=0;y<s;++y)f[y]=Tn(a()[c+4*y>>>2>>>0],\"parameter \"+y);return f},yi=(s,c)=>Object.defineProperty(c,\"name\",{value:s});function Tc(s,c,f){var y=(c=Cc(s,c>>>0)).shift();s--;var v=`return function (obj, func, destructorsRef, args) {\n`,C=0,O=[];f===0&&O.push(\"obj\");for(var B=[\"retType\"],N=[y],L=0;L<s;++L)O.push(\"arg\"+L),B.push(\"argType\"+L),N.push(c[L]),v+=`  var arg${L} = argType${L}.readValueFromPointer(args${C?\"+\"+C:\"\"});\n`,C+=c[L].argPackAdvance;return v+=`  var rv = ${f===1?\"new func\":\"func.call\"}(${O.join(\", \")});\n`,y.Sb||(B.push(\"emval_returnValue\"),N.push(ci),v+=`  return emval_returnValue(retType, destructorsRef, rv);\n`),B.push(v+`};\n`),s=function(j){var me=Function;if(!(me instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof me} which is not a function`);var he=yi(me.name||\"unknownFunctionName\",function(){});return he.prototype=me.prototype,he=new he,(j=me.apply(he,j))instanceof Object?j:he}(B)(...N),f=`methodCaller<(${c.map(j=>j.name).join(\", \")}) => ${y.name}>`,Ic(yi(f,s))}function Ac(s){return s=cr(s>>>0),je(u[s])}function Ec(s,c){return c>>>=0,s=qe(s>>>0),c=qe(c),je(s[c])}function kc(s){9<(s>>>=0)&&(ut[s+1]+=1)}function Pc(){return je([])}function Oc(s){s=qe(s>>>0);for(var c=Array(s.length),f=0;f<s.length;f++)c[f]=s[f];return je(c)}function Dc(s){return je(cr(s>>>0))}function zc(){return je({})}function Bc(s){for(var c=qe(s>>>=0);c.length;){var f=c.pop();c.pop()(f)}xn(s)}function Rc(s,c,f){c>>>=0,f>>>=0,s=qe(s>>>0),c=qe(c),f=qe(f),s[c]=f}function Mc(s,c){return c>>>=0,s=(s=Tn(s>>>0,\"_emval_take_value\")).readValueFromPointer(c),je(s)}function Uc(s,c){s=-9007199254740992>s||9007199254740992<s?NaN:Number(s),c>>>=0,s=new Date(1e3*s),i()[c>>>2>>>0]=s.getUTCSeconds(),i()[c+4>>>2>>>0]=s.getUTCMinutes(),i()[c+8>>>2>>>0]=s.getUTCHours(),i()[c+12>>>2>>>0]=s.getUTCDate(),i()[c+16>>>2>>>0]=s.getUTCMonth(),i()[c+20>>>2>>>0]=s.getUTCFullYear()-1900,i()[c+24>>>2>>>0]=s.getUTCDay(),s=(s.getTime()-Date.UTC(s.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,i()[c+28>>>2>>>0]=s}var Bt=s=>s%4==0&&(s%100!=0||s%400==0),bi=[0,31,60,91,121,152,182,213,244,274,305,335],wi=[0,31,59,90,120,151,181,212,243,273,304,334];function Vc(s,c){s=-9007199254740992>s||9007199254740992<s?NaN:Number(s),c>>>=0,s=new Date(1e3*s),i()[c>>>2>>>0]=s.getSeconds(),i()[c+4>>>2>>>0]=s.getMinutes(),i()[c+8>>>2>>>0]=s.getHours(),i()[c+12>>>2>>>0]=s.getDate(),i()[c+16>>>2>>>0]=s.getMonth(),i()[c+20>>>2>>>0]=s.getFullYear()-1900,i()[c+24>>>2>>>0]=s.getDay();var f=(Bt(s.getFullYear())?bi:wi)[s.getMonth()]+s.getDate()-1|0;i()[c+28>>>2>>>0]=f,i()[c+36>>>2>>>0]=-60*s.getTimezoneOffset(),f=new Date(s.getFullYear(),6,1).getTimezoneOffset();var y=new Date(s.getFullYear(),0,1).getTimezoneOffset();s=0|(f!=y&&s.getTimezoneOffset()==Math.min(y,f)),i()[c+32>>>2>>>0]=s}function Nc(s){s>>>=0;var c=new Date(i()[s+20>>>2>>>0]+1900,i()[s+16>>>2>>>0],i()[s+12>>>2>>>0],i()[s+8>>>2>>>0],i()[s+4>>>2>>>0],i()[s>>>2>>>0],0),f=i()[s+32>>>2>>>0],y=c.getTimezoneOffset(),v=new Date(c.getFullYear(),6,1).getTimezoneOffset(),C=new Date(c.getFullYear(),0,1).getTimezoneOffset(),O=Math.min(C,v);return 0>f?i()[s+32>>>2>>>0]=+(v!=C&&O==y):0<f!=(O==y)&&(v=Math.max(C,v),c.setTime(c.getTime()+6e4*((0<f?O:v)-y))),i()[s+24>>>2>>>0]=c.getDay(),f=(Bt(c.getFullYear())?bi:wi)[c.getMonth()]+c.getDate()-1|0,i()[s+28>>>2>>>0]=f,i()[s>>>2>>>0]=c.getSeconds(),i()[s+4>>>2>>>0]=c.getMinutes(),i()[s+8>>>2>>>0]=c.getHours(),i()[s+12>>>2>>>0]=c.getDate(),i()[s+16>>>2>>>0]=c.getMonth(),i()[s+20>>>2>>>0]=c.getYear(),s=c.getTime(),BigInt(isNaN(s)?-1:s/1e3)}function vi(s,c,f,y,v,C,O){return b?xe(16,1,s,c,f,y,v,C,O):-52}function $i(s,c,f,y,v,C){if(b)return xe(17,1,s,c,f,y,v,C)}function Wc(s,c,f,y){s>>>=0,c>>>=0,f>>>=0,y>>>=0;var v=new Date().getFullYear(),C=new Date(v,0,1),O=new Date(v,6,1);v=C.getTimezoneOffset();var B=O.getTimezoneOffset(),N=Math.max(v,B);a()[s>>>2>>>0]=60*N,i()[c>>>2>>>0]=+(v!=B),C=(s=L=>L.toLocaleTimeString(void 0,{hour12:!1,timeZoneName:\"short\"}).split(\" \")[1])(C),O=s(O),B<v?(zt(C,f,17),zt(O,y,17)):(zt(C,y,17),zt(O,f,17))}var En=[],_i=(s,c)=>{En.length=0;for(var f;f=r()[s++>>>0];){var y=f!=105;c+=(y&=f!=112)&&c%8?4:0,En.push(f==112?a()[c>>>2>>>0]:f==106?F[c>>>3]:f==105?i()[c>>>2>>>0]:d()[c>>>3>>>0]),c+=y?8:4}return En};function Hc(s,c,f){return s>>>=0,c=_i(c>>>0,f>>>0),fn[s](...c)}function Gc(s,c,f){return s>>>=0,c=_i(c>>>0,f>>>0),fn[s](...c)}var Lc=()=>{},Fc=()=>Date.now();function qc(s,c){return Y(Ae(s>>>0,c>>>0))}var xi,jc=()=>{throw bt+=1,\"unwind\"};function Kc(){return 4294901760}xi=()=>performance.timeOrigin+performance.now();var Yc=()=>navigator.hardwareConcurrency;function Xc(){return Dt(\"Cannot use emscripten_pc_get_function without -sUSE_OFFSET_CONVERTER\"),0}function Zc(s){s>>>=0;var c=r().length;if(s<=c||4294901760<s)return!1;for(var f=1;4>=f;f*=2){var y=c*(1+.2/f);y=Math.min(y,s+100663296);var v=Math;y=Math.max(s,y);e:{v=(v.min.call(v,4294901760,y+(65536-y%65536)%65536)-le.buffer.byteLength+65535)/65536;try{le.grow(v),we();var C=1;break e}catch{}C=void 0}if(C)return!0}return!1}var pr=()=>(Dt(\"Cannot use convertFrameToPC (needed by __builtin_return_address) without -sUSE_OFFSET_CONVERTER\"),0),Rt={},Si=s=>{s.forEach(c=>{var f=pr();f&&(Rt[f]=c)})};function Qc(){var s=Error().stack.toString().split(`\n`);return s[0]==\"Error\"&&s.shift(),Si(s),Rt.Ob=pr(),Rt.ac=s,Rt.Ob}function Jc(s,c,f){if(s>>>=0,c>>>=0,Rt.Ob==s)var y=Rt.ac;else(y=Error().stack.toString().split(`\n`))[0]==\"Error\"&&y.shift(),Si(y);for(var v=3;y[v]&&pr()!=s;)++v;for(s=0;s<f&&y[s+v];++s)i()[c+4*s>>>2>>>0]=pr();return s}var kn,Pn={},Ii=()=>{if(!kn){var s,c={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(typeof navigator==\"object\"&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:T||\"./this.program\"};for(s in Pn)Pn[s]===void 0?delete c[s]:c[s]=Pn[s];var f=[];for(s in c)f.push(`${s}=${c[s]}`);kn=f}return kn};function Ci(s,c){if(b)return xe(18,1,s,c);s>>>=0,c>>>=0;var f=0;return Ii().forEach((y,v)=>{var C=c+f;for(v=a()[s+4*v>>>2>>>0]=C,C=0;C<y.length;++C)t()[v++>>>0]=y.charCodeAt(C);t()[v>>>0]=0,f+=y.length+1}),0}function Ti(s,c){if(b)return xe(19,1,s,c);s>>>=0,c>>>=0;var f=Ii();a()[s>>>2>>>0]=f.length;var y=0;return f.forEach(v=>y+=v.length+1),a()[c>>>2>>>0]=y,0}function Ai(s){return b?xe(20,1,s):52}function Ei(s,c,f,y){return b?xe(21,1,s,c,f,y):52}function ki(s,c,f,y){return b?xe(22,1,s,c,f,y):70}var ep=[null,[],[]];function Pi(s,c,f,y){if(b)return xe(23,1,s,c,f,y);c>>>=0,f>>>=0,y>>>=0;for(var v=0,C=0;C<f;C++){var O=a()[c>>>2>>>0],B=a()[c+4>>>2>>>0];c+=8;for(var N=0;N<B;N++){var L=r()[O+N>>>0],j=ep[s];L===0||L===10?((s===1?X:Y)(qo(j,0)),j.length=0):j.push(L)}v+=B}return a()[y>>>2>>>0]=v,0}var Oi=[31,29,31,30,31,30,31,31,30,31,30,31],Di=[31,28,31,30,31,30,31,31,30,31,30,31],tp=(s,c)=>{t().set(s,c>>>0)};function zi(s,c,f,y){function v(P,ee,ye){for(P=typeof P==\"number\"?P.toString():P||\"\";P.length<ee;)P=ye[0]+P;return P}function C(P,ee){return v(P,ee,\"0\")}function O(P,ee){function ye(Ki){return 0>Ki?-1:0<Ki?1:0}var vt;return(vt=ye(P.getFullYear()-ee.getFullYear()))===0&&(vt=ye(P.getMonth()-ee.getMonth()))===0&&(vt=ye(P.getDate()-ee.getDate())),vt}function B(P){switch(P.getDay()){case 0:return new Date(P.getFullYear()-1,11,29);case 1:return P;case 2:return new Date(P.getFullYear(),0,3);case 3:return new Date(P.getFullYear(),0,2);case 4:return new Date(P.getFullYear(),0,1);case 5:return new Date(P.getFullYear()-1,11,31);case 6:return new Date(P.getFullYear()-1,11,30)}}function N(P){var ee=P.Bb;for(P=new Date(new Date(P.Cb+1900,0,1).getTime());0<ee;){var ye=P.getMonth(),vt=(Bt(P.getFullYear())?Oi:Di)[ye];if(!(ee>vt-P.getDate())){P.setDate(P.getDate()+ee);break}ee-=vt-P.getDate()+1,P.setDate(1),11>ye?P.setMonth(ye+1):(P.setMonth(0),P.setFullYear(P.getFullYear()+1))}return ye=new Date(P.getFullYear()+1,0,4),ee=B(new Date(P.getFullYear(),0,4)),ye=B(ye),0>=O(ee,P)?0>=O(ye,P)?P.getFullYear()+1:P.getFullYear():P.getFullYear()-1}s>>>=0,c>>>=0,f>>>=0,y>>>=0;var L=a()[y+40>>>2>>>0];for(var j in y={fc:i()[y>>>2>>>0],ec:i()[y+4>>>2>>>0],Gb:i()[y+8>>>2>>>0],Kb:i()[y+12>>>2>>>0],Hb:i()[y+16>>>2>>>0],Cb:i()[y+20>>>2>>>0],ub:i()[y+24>>>2>>>0],Bb:i()[y+28>>>2>>>0],nc:i()[y+32>>>2>>>0],dc:i()[y+36>>>2>>>0],hc:L?Ae(L):\"\"},f=Ae(f),L={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})f=f.replace(new RegExp(j,\"g\"),L[j]);var me=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),he=\"January February March April May June July August September October November December\".split(\" \");for(j in L={\"%a\":P=>me[P.ub].substring(0,3),\"%A\":P=>me[P.ub],\"%b\":P=>he[P.Hb].substring(0,3),\"%B\":P=>he[P.Hb],\"%C\":P=>C((P.Cb+1900)/100|0,2),\"%d\":P=>C(P.Kb,2),\"%e\":P=>v(P.Kb,2,\" \"),\"%g\":P=>N(P).toString().substring(2),\"%G\":N,\"%H\":P=>C(P.Gb,2),\"%I\":P=>((P=P.Gb)==0?P=12:12<P&&(P-=12),C(P,2)),\"%j\":P=>{for(var ee=0,ye=0;ye<=P.Hb-1;ee+=(Bt(P.Cb+1900)?Oi:Di)[ye++]);return C(P.Kb+ee,3)},\"%m\":P=>C(P.Hb+1,2),\"%M\":P=>C(P.ec,2),\"%n\":()=>`\n`,\"%p\":P=>0<=P.Gb&&12>P.Gb?\"AM\":\"PM\",\"%S\":P=>C(P.fc,2),\"%t\":()=>\"\t\",\"%u\":P=>P.ub||7,\"%U\":P=>C(Math.floor((P.Bb+7-P.ub)/7),2),\"%V\":P=>{var ee=Math.floor((P.Bb+7-(P.ub+6)%7)/7);if(2>=(P.ub+371-P.Bb-2)%7&&ee++,ee)ee==53&&((ye=(P.ub+371-P.Bb)%7)==4||ye==3&&Bt(P.Cb)||(ee=1));else{ee=52;var ye=(P.ub+7-P.Bb-1)%7;(ye==4||ye==5&&Bt(P.Cb%400-1))&&ee++}return C(ee,2)},\"%w\":P=>P.ub,\"%W\":P=>C(Math.floor((P.Bb+7-(P.ub+6)%7)/7),2),\"%y\":P=>(P.Cb+1900).toString().substring(2),\"%Y\":P=>P.Cb+1900,\"%z\":P=>{var ee=0<=(P=P.dc);return P=Math.abs(P)/60,(ee?\"+\":\"-\")+(\"0000\"+(P/60*100+P%60)).slice(-4)},\"%Z\":P=>P.hc,\"%%\":()=>\"%\"},f=f.replace(/%%/g,\"\\0\\0\"),L)f.includes(j)&&(f=f.replace(new RegExp(j,\"g\"),L[j](y)));return j=function(P){var ee=Array(wn(P)+1);return Yo(P,ee,0,ee.length),ee}(f=f.replace(/\\0\\0/g,\"%\")),j.length>c?0:(tp(j,s),j.length-1)}function rp(s,c,f,y){return zi(s>>>0,c>>>0,f>>>0,y>>>0)}b||function(){for(var s=u.numThreads-1;s--;)Ho();Lt.unshift(()=>{Fe++,function(c){b?c():Promise.all(ct.map(Wo)).then(c)}(()=>ko())})}();for(var Bi=Array(256),mr=0;256>mr;++mr)Bi[mr]=String.fromCharCode(mr);si=Bi,pt=u.BindingError=class extends Error{constructor(s){super(s),this.name=\"BindingError\"}},u.InternalError=class extends Error{constructor(s){super(s),this.name=\"InternalError\"}},ut.push(0,1,void 0,1,null,1,!0,1,!1,1),u.count_emval_handles=()=>ut.length/2-5-_n.length;var np=[yn,Mo,Go,jo,Ko,Xo,Zo,Qo,Jo,ei,ti,ri,ni,oi,ii,ai,vi,$i,Ci,Ti,Ai,Ei,ki,Pi],q=function(){function s(f,y){return q=f.exports,q=function(){var v=q,C={};for(let[O,B]of Object.entries(v))C[O]=typeof B==\"function\"?(...N)=>{dr.push(O);try{return B(...N)}finally{Se||(dr.pop(),Je&&ft===1&&dr.length===0&&(ft=0,bt+=1,ur(Li),typeof Fibers<\"u\"&&Fibers.oc()))}}:B;return C}(),q=function(){var v=q,C=B=>N=>B(N)>>>0,O=B=>()=>B()>>>0;return(v=Object.assign({},v)).Ca=C(v.Ca),v.fb=O(v.fb),v.gb=C(v.gb),v.emscripten_main_runtime_thread_id=O(v.emscripten_main_runtime_thread_id),v.sb=C(v.sb),v.tb=O(v.tb),v}(),Uo.push(q.ib),Pe.unshift(q.Ba),K=y,ko(),q}var c=Bo();if(Fe++,u.instantiateWasm)try{return u.instantiateWasm(c,s)}catch(f){Y(`Module.instantiateWasm callback failed with error: ${f}`),m(f)}return mn||=u.locateFile?Po(\"ort-wasm-simd-threaded.jsep.wasm\")?\"ort-wasm-simd-threaded.jsep.wasm\":u.locateFile?u.locateFile(\"ort-wasm-simd-threaded.jsep.wasm\",D):D+\"ort-wasm-simd-threaded.jsep.wasm\":new URL(\"ort-wasm-simd-threaded.jsep.wasm\",import.meta.url).href,function(f,y){var v=mn;return z||typeof WebAssembly.instantiateStreaming!=\"function\"||Po(v)||Oo(v)||typeof fetch!=\"function\"?zo(v,f,y):fetch(v,{credentials:\"same-origin\"}).then(C=>WebAssembly.instantiateStreaming(C,f).then(y,function(O){return Y(`wasm streaming compile failed: ${O}`),Y(\"falling back to ArrayBuffer instantiation\"),zo(v,f,y)}))}(c,function(f){s(f.instance,f.module)}).catch(m),{}}(),Ri=s=>(Ri=q.Ca)(s),Mi=()=>(Mi=q.Da)();u._OrtInit=(s,c)=>(u._OrtInit=q.Ea)(s,c),u._OrtGetLastError=(s,c)=>(u._OrtGetLastError=q.Fa)(s,c),u._OrtCreateSessionOptions=(s,c,f,y,v,C,O,B,N,L)=>(u._OrtCreateSessionOptions=q.Ga)(s,c,f,y,v,C,O,B,N,L),u._OrtAppendExecutionProvider=(s,c)=>(u._OrtAppendExecutionProvider=q.Ha)(s,c),u._OrtAddFreeDimensionOverride=(s,c,f)=>(u._OrtAddFreeDimensionOverride=q.Ia)(s,c,f),u._OrtAddSessionConfigEntry=(s,c,f)=>(u._OrtAddSessionConfigEntry=q.Ja)(s,c,f),u._OrtReleaseSessionOptions=s=>(u._OrtReleaseSessionOptions=q.Ka)(s),u._OrtCreateSession=(s,c,f)=>(u._OrtCreateSession=q.La)(s,c,f),u._OrtReleaseSession=s=>(u._OrtReleaseSession=q.Ma)(s),u._OrtGetInputOutputCount=(s,c,f)=>(u._OrtGetInputOutputCount=q.Na)(s,c,f),u._OrtGetInputName=(s,c)=>(u._OrtGetInputName=q.Oa)(s,c),u._OrtGetOutputName=(s,c)=>(u._OrtGetOutputName=q.Pa)(s,c),u._OrtFree=s=>(u._OrtFree=q.Qa)(s),u._OrtCreateTensor=(s,c,f,y,v,C)=>(u._OrtCreateTensor=q.Ra)(s,c,f,y,v,C),u._OrtGetTensorData=(s,c,f,y,v)=>(u._OrtGetTensorData=q.Sa)(s,c,f,y,v),u._OrtReleaseTensor=s=>(u._OrtReleaseTensor=q.Ta)(s),u._OrtCreateRunOptions=(s,c,f,y)=>(u._OrtCreateRunOptions=q.Ua)(s,c,f,y),u._OrtAddRunConfigEntry=(s,c,f)=>(u._OrtAddRunConfigEntry=q.Va)(s,c,f),u._OrtReleaseRunOptions=s=>(u._OrtReleaseRunOptions=q.Wa)(s),u._OrtCreateBinding=s=>(u._OrtCreateBinding=q.Xa)(s),u._OrtBindInput=(s,c,f)=>(u._OrtBindInput=q.Ya)(s,c,f),u._OrtBindOutput=(s,c,f,y)=>(u._OrtBindOutput=q.Za)(s,c,f,y),u._OrtClearBoundOutputs=s=>(u._OrtClearBoundOutputs=q._a)(s),u._OrtReleaseBinding=s=>(u._OrtReleaseBinding=q.$a)(s),u._OrtRunWithBinding=(s,c,f,y,v)=>(u._OrtRunWithBinding=q.ab)(s,c,f,y,v),u._OrtRun=(s,c,f,y,v,C,O,B)=>(u._OrtRun=q.bb)(s,c,f,y,v,C,O,B),u._OrtEndProfiling=s=>(u._OrtEndProfiling=q.cb)(s),u._JsepOutput=(s,c,f)=>(u._JsepOutput=q.db)(s,c,f),u._JsepGetNodeName=s=>(u._JsepGetNodeName=q.eb)(s);var fr,Mt=()=>(Mt=q.fb)(),hr=u._malloc=s=>(hr=u._malloc=q.gb)(s),et=u._free=s=>(et=u._free=q.hb)(s),On=(s,c,f,y,v,C)=>(On=q.kb)(s,c,f,y,v,C),Ui=()=>(Ui=q.lb)(),Vi=(s,c,f,y,v)=>(Vi=q.mb)(s,c,f,y,v),Dn=s=>(Dn=q.nb)(s),gr=s=>(gr=q.ob)(s),Ni=()=>(Ni=q.pb)(),Wi=(s,c)=>(Wi=q.qb)(s,c),yr=s=>(yr=q.rb)(s),zn=s=>(zn=q.sb)(s),Bn=()=>(Bn=q.tb)(),Hi=u.dynCall_ii=(s,c)=>(Hi=u.dynCall_ii=q.vb)(s,c),Gi=s=>(Gi=q.wb)(s),Li=()=>(Li=q.xb)(),Fi=s=>(Fi=q.yb)(s),qi=()=>(qi=q.zb)();function ji(){0<Fe||(b?(p(u),b||ar(Pe),startWorker(u)):(ar(Lt),0<Fe||fr||(fr=!0,u.calledRun=!0,Se||(b||ar(Pe),p(u),b||ar(ze)))))}return u.___start_em_js=861437,u.___stop_em_js=861659,u.stackSave=()=>Bn(),u.stackRestore=s=>yr(s),u.stackAlloc=s=>zn(s),u.UTF8ToString=Ae,u.stringToUTF8=zt,u.lengthBytesUTF8=wn,yt=function s(){fr||ji(),fr||(yt=s)},ji(),h}),mp=Aa;globalThis.self?.name===\"em-pthread\"&&Aa()});var Ut,fp,hp,gp,Pa,Oa,yp,Da,jt=U(()=>{\"use strict\";Tr();Ut=!1?void 0:import.meta.url??(typeof document<\"u\"?document.currentScript?.src:typeof self<\"u\"?self.location?.href:void 0),fp=!1||typeof location>\"u\"?void 0:location.origin,hp=(e,t)=>{try{let r=t??Ut;return(r?new URL(e,r):new URL(e)).origin===fp}catch{return!1}},gp=async e=>{let r=await(await fetch(e,{credentials:\"same-origin\"})).blob();return URL.createObjectURL(r)},Pa=(Ta(),br(Ca)).default,Oa=async()=>{if(!Ut)throw new Error(\"Failed to load proxy worker: cannot determine the script source URL.\");if(hp(Ut))return[void 0,Pa()];let e=await gp(Ut);return[e,Pa(e)]},yp=(ka(),br(Ea)).default,Da=async(e,t,r)=>[void 0,yp]});var Ln,Fn,Rr,za,bp,wp,Ar,Ie,St=U(()=>{\"use strict\";jt();Fn=!1,Rr=!1,za=!1,bp=()=>{if(typeof SharedArrayBuffer>\"u\")return!1;try{return typeof MessageChannel<\"u\"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch{return!1}},wp=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},Ar=async e=>{if(Fn)return Promise.resolve();if(Rr)throw new Error(\"multiple calls to 'initializeWebAssembly()' detected.\");if(za)throw new Error(\"previous call to 'initializeWebAssembly()' failed.\");Rr=!0;let t=e.initTimeout,r=e.numThreads;if(!wp())throw new Error(\"WebAssembly SIMD is not supported in the current environment.\");let n=bp();r>1&&!n&&(typeof self<\"u\"&&!self.crossOriginIsolated&&console.warn(\"env.wasm.numThreads is set to \"+r+\", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info.\"),console.warn(\"WebAssembly multi-threading is not supported in the current environment. Falling back to single-threading.\"),e.numThreads=r=1);let o=e.wasmPaths,i=typeof o==\"string\"?o:void 0,a=o?.mjs,l=a?.href??a,d=o?.wasm,p=d?.href??d,m=e.wasmBinary,[u,h]=await Da(l,i,r>1),w=!1,g=[];if(t>0&&g.push(new Promise(b=>{setTimeout(()=>{w=!0,b()},t)})),g.push(new Promise((b,x)=>{let _={numThreads:r};m?_.wasmBinary=m:(p||i)&&(_.locateFile=($,S)=>p??(i??S)+$),h(_).then($=>{Rr=!1,Fn=!0,Ln=$,b(),u&&URL.revokeObjectURL(u)},$=>{Rr=!1,za=!0,x($)})})),await Promise.race(g),w)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},Ie=()=>{if(Fn&&Ln)return Ln;throw new Error(\"WebAssembly is not initialized yet.\")}});var Te,Yt,_e,Mr=U(()=>{\"use strict\";St();Te=(e,t)=>{let r=Ie(),n=r.lengthBytesUTF8(e)+1,o=r._malloc(n);return r.stringToUTF8(e,o,n),t.push(o),o},Yt=(e,t,r,n)=>{if(typeof e==\"object\"&&e!==null){if(r.has(e))throw new Error(\"Circular reference in options\");r.add(e)}Object.entries(e).forEach(([o,i])=>{let a=t?t+o:o;if(typeof i==\"object\")Yt(i,a+\".\",r,n);else if(typeof i==\"string\"||typeof i==\"number\")n(a,i.toString());else if(typeof i==\"boolean\")n(a,i?\"1\":\"0\");else throw new Error(`Can't handle extra config type: ${typeof i}`)})},_e=e=>{let t=Ie(),r=t.stackSave();try{let n=t.stackAlloc(8);t._OrtGetLastError(n,n+4);let o=t.HEAP32[n/4],i=t.HEAPU32[n/4+1],a=i?t.UTF8ToString(i):\"\";throw new Error(`${e} ERROR_CODE: ${o}, ERROR_MESSAGE: ${a}`)}finally{t.stackRestore(r)}}});var Ba,Ra=U(()=>{\"use strict\";St();Mr();Ba=e=>{let t=Ie(),r=0,n=[],o=e||{};try{if(e?.logSeverityLevel===void 0)o.logSeverityLevel=2;else if(typeof e.logSeverityLevel!=\"number\"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(e?.logVerbosityLevel===void 0)o.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!=\"number\"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);e?.terminate===void 0&&(o.terminate=!1);let i=0;return e?.tag!==void 0&&(i=Te(e.tag,n)),r=t._OrtCreateRunOptions(o.logSeverityLevel,o.logVerbosityLevel,!!o.terminate,i),r===0&&_e(\"Can't create run options.\"),e?.extra!==void 0&&Yt(e.extra,\"\",new WeakSet,(a,l)=>{let d=Te(a,n),p=Te(l,n);t._OrtAddRunConfigEntry(r,d,p)!==0&&_e(`Can't set a run config entry: ${a} - ${l}.`)}),[r,n]}catch(i){throw r!==0&&t._OrtReleaseRunOptions(r),n.forEach(a=>t._free(a)),i}}});var vp,$p,_p,xp,Ma,Ua=U(()=>{\"use strict\";St();Mr();vp=e=>{switch(e){case\"disabled\":return 0;case\"basic\":return 1;case\"extended\":return 2;case\"all\":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},$p=e=>{switch(e){case\"sequential\":return 0;case\"parallel\":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},_p=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly=\"1\"),e.executionProviders&&e.executionProviders.some(r=>(typeof r==\"string\"?r:r.name)===\"webgpu\")&&(e.enableMemPattern=!1)},xp=(e,t,r)=>{for(let n of t){let o=typeof n==\"string\"?n:n.name;switch(o){case\"webnn\":if(o=\"WEBNN\",typeof n!=\"string\"){let l=n?.deviceType;if(l){let d=Te(\"deviceType\",r),p=Te(l,r);Ie()._OrtAddSessionConfigEntry(e,d,p)!==0&&_e(`Can't set a session config entry: 'deviceType' - ${l}.`)}}break;case\"webgpu\":if(o=\"JS\",typeof n!=\"string\"){let a=n;if(a?.preferredLayout){if(a.preferredLayout!==\"NCHW\"&&a.preferredLayout!==\"NHWC\")throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${a.preferredLayout}`);let l=Te(\"preferredLayout\",r),d=Te(a.preferredLayout,r);Ie()._OrtAddSessionConfigEntry(e,l,d)!==0&&_e(`Can't set a session config entry: 'preferredLayout' - ${a.preferredLayout}.`)}}break;case\"wasm\":case\"cpu\":continue;default:throw new Error(`not supported execution provider: ${o}`)}let i=Te(o,r);Ie()._OrtAppendExecutionProvider(e,i)!==0&&_e(`Can't append execution provider: ${o}.`)}},Ma=e=>{let t=Ie(),r=0,n=[],o=e||{};_p(o);try{let i=vp(o.graphOptimizationLevel??\"all\"),a=$p(o.executionMode??\"sequential\"),l=typeof o.logId==\"string\"?Te(o.logId,n):0,d=o.logSeverityLevel??2;if(!Number.isInteger(d)||d<0||d>4)throw new Error(`log serverity level is not valid: ${d}`);let p=o.logVerbosityLevel??0;if(!Number.isInteger(p)||p<0||p>4)throw new Error(`log verbosity level is not valid: ${p}`);let m=typeof o.optimizedModelFilePath==\"string\"?Te(o.optimizedModelFilePath,n):0;if(r=t._OrtCreateSessionOptions(i,!!o.enableCpuMemArena,!!o.enableMemPattern,a,!!o.enableProfiling,0,l,d,p,m),r===0&&_e(\"Can't create session options.\"),o.executionProviders&&xp(r,o.executionProviders,n),o.enableGraphCapture!==void 0){if(typeof o.enableGraphCapture!=\"boolean\")throw new Error(`enableGraphCapture must be a boolean value: ${o.enableGraphCapture}`);let u=Te(\"enableGraphCapture\",n),h=Te(o.enableGraphCapture.toString(),n);t._OrtAddSessionConfigEntry(r,u,h)!==0&&_e(`Can't set a session config entry: 'enableGraphCapture' - ${o.enableGraphCapture}.`)}if(o.freeDimensionOverrides)for(let[u,h]of Object.entries(o.freeDimensionOverrides)){if(typeof u!=\"string\")throw new Error(`free dimension override name must be a string: ${u}`);if(typeof h!=\"number\"||!Number.isInteger(h)||h<0)throw new Error(`free dimension override value must be a non-negative integer: ${h}`);let w=Te(u,n);t._OrtAddFreeDimensionOverride(r,w,h)!==0&&_e(`Can't set a free dimension override: ${u} - ${h}.`)}return o.extra!==void 0&&Yt(o.extra,\"\",new WeakSet,(u,h)=>{let w=Te(u,n),g=Te(h,n);t._OrtAddSessionConfigEntry(r,w,g)!==0&&_e(`Can't set a session config entry: ${u} - ${h}.`)}),[r,n]}catch(i){throw r!==0&&t._OrtReleaseSessionOptions(r),n.forEach(a=>t._free(a)),i}}});var qn,ht,It,Ur,Xt,Vr,jn,Q=U(()=>{\"use strict\";qn=e=>{switch(e){case\"int8\":return 3;case\"uint8\":return 2;case\"bool\":return 9;case\"int16\":return 5;case\"uint16\":return 4;case\"int32\":return 6;case\"uint32\":return 12;case\"float16\":return 10;case\"float32\":return 1;case\"float64\":return 11;case\"string\":return 8;case\"int64\":return 7;case\"uint64\":return 13;default:throw new Error(`unsupported data type: ${e}`)}},ht=e=>{switch(e){case 3:return\"int8\";case 2:return\"uint8\";case 9:return\"bool\";case 5:return\"int16\";case 4:return\"uint16\";case 6:return\"int32\";case 12:return\"uint32\";case 10:return\"float16\";case 1:return\"float32\";case 11:return\"float64\";case 8:return\"string\";case 7:return\"int64\";case 13:return\"uint64\";default:throw new Error(`unsupported data type: ${e}`)}},It=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],Ur=e=>{switch(e){case\"float16\":return typeof Float16Array<\"u\"&&Float16Array.from?Float16Array:Uint16Array;case\"float32\":return Float32Array;case\"uint8\":return Uint8Array;case\"int8\":return Int8Array;case\"uint16\":return Uint16Array;case\"int16\":return Int16Array;case\"int32\":return Int32Array;case\"bool\":return Uint8Array;case\"float64\":return Float64Array;case\"uint32\":return Uint32Array;case\"int64\":return BigInt64Array;case\"uint64\":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},Xt=e=>{switch(e){case\"verbose\":return 0;case\"info\":return 1;case\"warning\":return 2;case\"error\":return 3;case\"fatal\":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},Vr=e=>e===\"float32\"||e===\"float16\"||e===\"int32\"||e===\"int64\"||e===\"uint32\"||e===\"uint8\"||e===\"bool\",jn=e=>{switch(e){case\"none\":return 0;case\"cpu\":return 1;case\"cpu-pinned\":return 2;case\"texture\":return 3;case\"gpu-buffer\":return 4;default:throw new Error(`unsupported data location: ${e}`)}}});var Zt,Kn=U(()=>{\"use strict\";Tr();Zt=async e=>{if(typeof e==\"string\")if(!1)try{let{readFile:t}=Mn(\"node:fs/promises\");return new Uint8Array(await t(e))}catch(t){if(t.code===\"ERR_FS_FILE_TOO_LARGE\"){let{createReadStream:r}=Mn(\"node:fs\"),n=r(e),o=[];for await(let i of n)o.push(i);return new Uint8Array(Buffer.concat(o))}throw t}else{let t=await fetch(e);if(!t.ok)throw new Error(`failed to load external data file: ${e}`);let r=t.headers.get(\"Content-Length\"),n=r?parseInt(r,10):0;if(n<1073741824)return new Uint8Array(await t.arrayBuffer());{if(!t.body)throw new Error(`failed to load external data file: ${e}, no response body.`);let o=t.body.getReader(),i;try{i=new ArrayBuffer(n)}catch(l){if(l instanceof RangeError){let d=Math.ceil(n/65536);i=new WebAssembly.Memory({initial:d,maximum:d}).buffer}else throw l}let a=0;for(;;){let{done:l,value:d}=await o.read();if(l)break;let p=d.byteLength;new Uint8Array(i,a,p).set(d),a+=p}return new Uint8Array(i,0,n)}}else return e instanceof Blob?new Uint8Array(await e.arrayBuffer()):e instanceof Uint8Array?e:new Uint8Array(e)}});var Sp,Ip,Va,Na,Wa,Cp,ve,dt=U(()=>{\"use strict\";Q();Sp=[\"V\",\"I\",\"W\",\"E\",\"F\"],Ip=(e,t)=>{console.log(`[${Sp[e]},${new Date().toISOString()}]${t}`)},Wa=(e,t)=>{Va=e,Na=t},Cp=(e,t)=>{let r=Xt(e),n=Xt(Va);r>=n&&Ip(r,typeof t==\"function\"?t():t)},ve=(...e)=>{Na&&Cp(...e)}});var Ha,Ga=U(()=>{\"use strict\";Q();Ha=(e,t)=>new(Ur(t))(e)});var Nr=U(()=>{\"use strict\"});var La,Yn,Xn,Tp,Ap,Fa,Qn,Zn,ja,Ka=U(()=>{\"use strict\";dt();Nr();La=new Map([[64,250],[128,200],[256,200],[512,200],[2048,230],[4096,200],[8192,50],[16384,50],[32768,50],[65536,50],[131072,50],[262144,50],[524288,50],[1048576,50],[2097152,30],[4194304,20],[8388608,10],[12582912,10],[16777216,10],[26214400,15],[33554432,22],[44236800,2],[58982400,6],[67108864,6],[134217728,6],[167772160,6]]),Yn=[],Xn=e=>Math.ceil(e/16)*16,Tp=e=>{for(let t=0;t<Yn.length;t++){let r=Yn[t];if(e<=r)return r}return Math.ceil(e/16)*16},Ap=1,Fa=()=>Ap++,Qn=async(e,t,r,n)=>{let o=Xn(r),i=e.device.createBuffer({size:o,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let a=e.getCommandEncoder();e.endComputePass(),a.copyBufferToBuffer(t,0,i,0,o),e.flush(),await i.mapAsync(GPUMapMode.READ);let l=i.getMappedRange();if(n){let d=n();return d.set(new Uint8Array(l,0,r)),d}else return new Uint8Array(l.slice(0,r))}finally{i.destroy()}},Zn=class{constructor(t){this.backend=t;this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersForUploadingPending=[],this.buffersPending=[],this.externalBuffers=new Map,this.capturedPendingBuffers=new Map;for(let[r]of La)Yn.push(r),this.freeBuffers.set(r,[]),this.freeUniformBuffers.set(r,[])}upload(t,r){let n=r.buffer,o=r.byteOffset,i=r.byteLength,a=Xn(i),l=this.storageCache.get(t);if(!l)throw new Error(\"gpu data for uploading does not exist\");if(l.originalSize!==i)throw new Error(`inconsistent data size. gpu data size=${l.originalSize}, data size=${i}`);let d=this.backend.device.createBuffer({mappedAtCreation:!0,size:a,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),p=d.getMappedRange();new Uint8Array(p).set(new Uint8Array(n,o,i)),d.unmap();let m=this.backend.getCommandEncoder();this.backend.endComputePass(),m.copyBufferToBuffer(d,0,l.gpuData.buffer,0,a),ve(\"verbose\",()=>`[WebGPU] GpuDataManager.upload(id=${t})`),this.buffersForUploadingPending.push(d)}memcpy(t,r){let n=this.storageCache.get(t);if(!n)throw new Error(\"source gpu data for memcpy does not exist\");let o=this.storageCache.get(r);if(!o)throw new Error(\"destination gpu data for memcpy does not exist\");if(n.originalSize!==o.originalSize)throw new Error(\"inconsistent source and destination gpu data size\");let i=Xn(n.originalSize),a=this.backend.getCommandEncoder();this.backend.endComputePass(),a.copyBufferToBuffer(n.gpuData.buffer,0,o.gpuData.buffer,0,i)}registerExternalBuffer(t,r,n){let o;if(n){if(o=this.externalBuffers.get(n),o===void 0)throw new Error(\"previous buffer is not registered\");if(t===n)return ve(\"verbose\",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${o}, buffer is the same, skip.`),o;if(this.backend.capturedCommandList.has(this.backend.currentSessionId))throw new Error(`Registering a different external buffer under graph capture mode is not supported yet.\n             Please use the previous external buffer!`);this.externalBuffers.delete(n)}else o=Fa();return this.storageCache.set(o,{gpuData:{id:o,type:0,buffer:t},originalSize:r}),this.externalBuffers.set(t,o),ve(\"verbose\",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${r}) => id=${o}, registered.`),o}unregisterExternalBuffer(t){let r=this.externalBuffers.get(t);r!==void 0&&(this.storageCache.delete(r),this.externalBuffers.delete(t),ve(\"verbose\",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${r}`))}create(t,r=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let n=Tp(t),o,i=(r&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,a=(r&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(i||a){let p=(i?this.freeBuffers:this.freeUniformBuffers).get(n);p?p.length>0?o=p.pop():o=this.backend.device.createBuffer({size:n,usage:r}):o=this.backend.device.createBuffer({size:n,usage:r})}else o=this.backend.device.createBuffer({size:n,usage:r});let l={id:Fa(),type:0,buffer:o};return this.storageCache.set(l.id,{gpuData:l,originalSize:t}),ve(\"verbose\",()=>`[WebGPU] GpuDataManager.create(size=${t}) => id=${l.id}`),l}get(t){return this.storageCache.get(t)?.gpuData}release(t){let r=this.storageCache.get(t);if(!r)throw new Error(\"releasing data does not exist\");return ve(\"verbose\",()=>`[WebGPU] GpuDataManager.release(id=${t}), gpuDataId=${r.gpuData.id}`),this.storageCache.delete(t),this.buffersPending.push(r.gpuData.buffer),r.originalSize}async download(t,r){let n=this.storageCache.get(t);if(!n)throw new Error(\"data does not exist\");await Qn(this.backend,n.gpuData.buffer,n.originalSize,r)}refreshPendingBuffers(){for(let t of this.buffersForUploadingPending)t.destroy();if(this.buffersForUploadingPending=[],this.buffersPending.length!==0)if(this.backend.sessionStatus===\"default\"){for(let t of this.buffersPending){let r=La.get(t.size);if((t.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE){let n=this.freeBuffers.get(t.size)||[];r===void 0||n.length>=r?t.destroy():n.push(t)}else if((t.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM){let n=this.freeUniformBuffers.get(t.size)||[];r===void 0||n.length>=r?t.destroy():n.push(t)}else t.destroy()}this.buffersPending=[]}else{let t=this.capturedPendingBuffers.get(this.backend.currentSessionId);t||(t=[],this.capturedPendingBuffers.set(this.backend.currentSessionId,t));for(let r of this.buffersPending)t.push(r);this.buffersPending=[]}}dispose(){this.freeBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.freeUniformBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.storageCache.forEach(t=>{t.gpuData.buffer.destroy()}),this.capturedPendingBuffers.forEach(t=>{t.forEach(r=>{r.destroy()})}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.capturedPendingBuffers=new Map}onReleaseSession(t){let r=this.capturedPendingBuffers.get(t);r&&(r.forEach(n=>{n.destroy()}),this.capturedPendingBuffers.delete(t))}},ja=(...e)=>new Zn(...e)});var Jn,te,Ce=U(()=>{\"use strict\";Jn=class{constructor(t){Object.assign(this,t)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(t=>`${this[t]}`).join(\";\")),this.key}},te=e=>new Jn(e)});var eo,tt,k,Ct,Wr,Hr,Gr,ae=U(()=>{\"use strict\";eo=class{static calcMatMulShape(t,r){return t[1]!==r[0]?void 0:[t[0],r[1]]}},tt=class{static calcShape(t,r,n=!1){let o=t.length,i=r.length;if(o===0)return r;if(i===0)return t;let a=Math.max(t.length,r.length),l=new Array(a);if(n){if(o<2||i<2)return;let d=eo.calcMatMulShape([t[o-2],t[o-1]],[r[i-2],r[i-1]]);if(d===void 0)return;[l[a-2],l[a-1]]=d}for(let d=n?3:1;d<=a;d++){let p=o-d<0?1:t[o-d],m=i-d<0?1:r[i-d];if(p!==m&&p>1&&m>1)return;let u=Math.max(p,m);if(p&&m)l[a-d]=Math.max(p,m);else{if(u>1)return;l[a-d]=0}}return l}static isValidBroadcast(t,r){let n=t.length,o=r.length;if(n>o)return!1;for(let i=1;i<=n;i++)if(t[n-i]!==1&&t[n-i]!==r[o-i])return!1;return!0}},k=class e{static size(t){return e.getSizeFromDimensionRange(t,0,t.length)}static convertShape(t,r=4){let n=t.length;if(n===0)return[];let o=new Array(n),i=n-1;for(;i>=0;){if(t[i]%r===0){o[i]=t[i]/r;break}if(r%t[i]!==0)throw new Error(\"cannot convert shape\");o[i]=1,r/=t[i],i--}for(i--;i>=0;i--)o[i]=t[i];return o}static sizeFromDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeFromDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,r,t.length)}static sizeToDimension(t,r){if(r<0||r>t.length)throw new Error(`invalid dimension of ${r} for sizeToDimension as Tensor has ${t.length} dimensions.`);return e.getSizeFromDimensionRange(t,0,r)}static getSizeFromDimensionRange(t,r,n){let o=1;for(let i=r;i<n;i++){if(t[i]<0)throw new Error(\"cannot get valid size from specified dimension range. Most likely the range contains negative values in them.\");o*=t[i]}return o}static computeStrides(t){let r=t.length;if(r===0)return[];if(r===1)return[1];let n=new Array(r);n[r-1]=1,n[r-2]=t[r-1];for(let o=r-3;o>=0;--o)n[o]=n[o+1]*t[o+1];return n}static normalizeAxis(t,r){if(t<-r&&t>=r)throw new Error(\"unsupported axis for this operation.\");return t<0?t+r:t}static normalizeAxes(t,r){return t.map(n=>this.normalizeAxis(n,r??t.length))}static sortBasedOnPerm(t,r){return r?r.map(n=>t[n]):t.slice().reverse()}static padShape(t,r){let n=t.length;return t.map((o,i)=>o+r[i]+r[i+n])}static areEqual(t,r){return t.length!==r.length?!1:t.every((n,o)=>n===r[o])}},Ct=class e{static adjustPoolAttributes(t,r,n,o,i,a){if(!t&&n.length!==r.length-2)throw new Error(\"length of specified kernel shapes should be 2 less than length of input dimensions\");if(t)for(let l=0;l<r.length-2;l++)l>=n.length?n.push(r[l+2]):n[l]=r[l+2];for(let l=0;l<n.length;l++)if(l<o.length){if(o[l]<0)throw new Error(\"strides should be greater than or equal to 1\")}else o.push(1);for(let l=0;l<n.length;l++)if(l<i.length){if(i[l]<0)throw new Error(\"dilations should be greater than or equal to 1\")}else i.push(1);for(let l=0;l<n.length*2;l++)if(l<a.length){if(a[l]<0)throw new Error(\"pad should be greater than or equal to 1\")}else a.push(0);for(let l=0;l<n.length;l++){if(n[l]<=0)throw new Error(\"kernel shapes need to be greater than 0\");if(a[l]>=n[l]||a[l+n.length]>=n[l])throw new Error(\"pads should be smaller than kernel\")}}static adjustPadsBasedOnAutoPad(t,r,n,o,i,a,l){if(l){if(i.length!==2*(t.length-2))throw new Error(\"length of pads should be twice the length of data dimensions\");if(r.length!==t.length-2)throw new Error(\"length of strides should be the length of data dimensions\");if(o.length!==t.length-2)throw new Error(\"length of kernel shapes should be the length of data dimensions\");for(let d=0;d<t.length-2;d++)e.adjustPadAndReturnShape(t[d+(a?1:2)],r[d],n[d],o[d],i,d,d+t.length-2,l)}}static computePoolOutputShape(t,r,n,o,i,a,l){if(r.length<=0)throw new Error(\"input shape must be of size greater than 0\");let d=[r[0],r[1]];return e.computeShapeHelper(t,r,d,n,o,i,a,l),d}static computeConvOutputShape(t,r,n,o,i,a,l){if(t.length<=0||r.length<=0)throw new Error(\"invalid input tensor dims or invalid filter tensor dims\");let d=[t[0],r[0]];return e.computeShapeHelper(!1,t,d,n,o,i,a,l),d}static computeShapeHelper(t,r,n,o,i,a,l,d){if(t)for(let p=0;p<r.length-2;p++)n.push(1);else for(let p=0;p<r.length-2;p++)n.push(e.adjustPadAndReturnShape(r[p+2],o[p],i[p],a[p],l,p,p+r.length-2,d))}static adjustPadAndReturnShape(t,r,n,o,i,a,l,d){let p=n*(o-1)+1;if(d&&d!==\"NOTSET\")switch(d){case\"VALID\":return i[a]=0,i[l]=0,Math.floor((t-p)/r+1);case\"SAME_LOWER\":case\"SAME_UPPER\":if(n!==1)throw new Error(\"Dilation not supported for SAME_UPPER or SAME_LOWER\");{let u=((t+r-1)/r-1)*r+o-t;return i[a]=Math.floor(d===\"SAME_LOWER\"?(u+1)/2:u/2),i[l]=u-i[a],Math.floor((t+u-o)/r+1)}default:throw new Error(\"Unsupported AutoPad type\")}else return Math.floor((t+i[a]+i[l]-p)/r+1)}},Wr=class{static getShapeOfGemmResult(t,r,n,o,i){if(t.length!==2||n.length!==2)throw new Error(\"shape need to be of size 2\");let a,l,d;r?(a=t[1],l=t[0]):(a=t[0],l=t[1]);let p=-1;if(o?(d=n[0],p=1):(d=n[1],p=0),n[p]!==l)throw new Error(\"dimension mismatch\");if(a<=0||d<=0||l<=0)throw new Error(\"invalid shape specified\");if(i&&!tt.isValidBroadcast(i,[a,d]))throw new Error(\"gemm: invalid bias shape for broadcast\");return[a,d,l]}},Hr=-34028234663852886e22,Gr=34028234663852886e22});var Tt,ro,ge,Oe,V,$e,gt,At,Xe,G,no,E,M,Lr,to,Ya,Nt,ie=U(()=>{\"use strict\";Q();ae();Tt=64,ro=(e,t)=>{if(t===3)throw new Error(\"vec3 has same alignment as vec4, use vec4 instead\");switch(e){case 10:return t>1?`vec${t}<f16>`:\"f16\";case 1:return t>1?`vec${t}<f32>`:\"f32\";case 6:return t>1?`vec${t}<i32>`:\"i32\";case 12:return t>1?`vec${t}<u32>`:\"u32\";case 7:if(t>1)throw new Error(\"currently not supported vecX of uint64 yet\");return[\"vec2<u32>\",\"i32\"];case 13:if(t>1)throw new Error(\"currently not supported vecX of uint64 yet\");return[\"vec2<u32>\",\"u32\"];case 9:if(t!==4)throw new Error(\"bool must be vec4\");return[\"u32\",\"vec4<bool>\"];default:throw new Error(`Unknown data type: ${e}`)}},ge=(e,t=1)=>{let r=ro(e,t);return typeof r==\"string\"?r:r[0]},Oe=(e,t=1)=>{let r=ro(e,t);return typeof r==\"string\"?r:r[1]},V=(...e)=>{let t=[];return e.forEach(r=>{r.length!==0&&t.push({type:12,data:r},{type:12,data:k.computeStrides(r)})}),t},$e=e=>e%4===0?4:e%2===0?2:1,gt=(e=\"f32\",t,r=\"0\")=>!t||t===1?`${e}(${r})`:`vec${t}<${e}>(${r})`,At=(e,t,r)=>e===\"f32\"?r:t===1?`f32(${r})`:`vec${t}<f32>(${r})`,Xe=(e,t)=>t===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:t===2?`(${e}.x + ${e}.y)`:t===3?`(${e}.x + ${e}.y + ${e}.z)`:e,G=(e,t,r,n)=>e.startsWith(\"uniforms.\")&&r>4?typeof t==\"string\"?n===\"f16\"?`${e}[(${t}) / 8][(${t}) % 8 / 4][(${t}) % 8 % 4]`:`${e}[(${t}) / 4][(${t}) % 4]`:n===\"f16\"?`${e}[${Math.floor(t/8)}][${Math.floor(t%8/4)}][${t%8%4}]`:`${e}[${Math.floor(t/4)}][${t%4}]`:r>1?`${e}[${t}]`:e,no=(e,t,r,n,o)=>{let i=typeof r==\"number\",a=i?r:r.length,l=[...new Array(a).keys()],d=a<2?\"u32\":a<=4?`vec${a}<u32>`:`array<u32, ${a}>`,p=ro(t,o),m=typeof p==\"string\"?p:p[1],u=typeof p==\"string\"?p:p[0],h={indices:d,value:m,storage:u,tensor:t},w=R=>typeof R==\"string\"?R:`${R}u`,g={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},b=i?\"uniforms.\":\"\",x=`${b}${e}_shape`,_=`${b}${e}_strides`,$=\"\";for(let R=0;R<a-1;R++)$+=`\n    let dim${R} = current / ${G(_,R,a)};\n    let rest${R} = current % ${G(_,R,a)};\n    indices[${R}] = dim${R};\n    current = rest${R};\n    `;$+=`indices[${a-1}] = current;`;let S=a<2?\"\":`\n  fn o2i_${e}(offset: u32) -> ${h.indices} {\n    var indices: ${h.indices};\n    var current = offset;\n    ${$}\n    return indices;\n  }`,I=R=>(g.offsetToIndices=!0,a<2?R:`o2i_${e}(${R})`),T=[];if(a>=2)for(let R=a-1;R>=0;R--)T.push(`${G(_,R,a)} * (indices[${R}])`);let A=a<2?\"\":`\n  fn i2o_${e}(indices: ${h.indices}) -> u32 {\n    return ${T.join(\"+\")};\n  }`,D=R=>(g.indicesToOffset=!0,a<2?R:`i2o_${e}(${R})`),z=(...R)=>a===0?\"0u\":`${h.indices}(${R.map(w).join(\",\")})`,H=(R,F)=>a<2?`${R}`:`${G(R,F,a)}`,W=(R,F,ce)=>a<2?`${R}=${ce};`:`${G(R,F,a)}=${ce};`,X={},Y=(R,F)=>{g.broadcastedIndicesToOffset=!0;let ce=`${F.name}broadcastedIndicesTo${e}Offset`;if(ce in X)return`${ce}(${R})`;let Re=[];for(let Se=a-1;Se>=0;Se--){let we=F.indicesGet(\"outputIndices\",Se+F.rank-a);Re.push(`${H(_,Se)} * (${we} % ${H(x,Se)})`)}return X[ce]=`fn ${ce}(outputIndices: ${F.type.indices}) -> u32 {\n             return ${Re.length>0?Re.join(\"+\"):\"0u\"};\n           }`,`${ce}(${R})`},pe=(R,F)=>(()=>{if(h.storage===h.value)return`${e}[${R}]=${F};`;if(h.storage===\"vec2<u32>\"&&h.value===\"i32\")return`${e}[${R}]=vec2<u32>(u32(${F}), select(0u, 0xFFFFFFFFu, ${F} < 0));`;if(h.storage===\"vec2<u32>\"&&h.value===\"u32\")return`${e}[${R}]=vec2<u32>(u32(${F}), 0u);`;if(h.storage===\"u32\"&&h.value===\"vec4<bool>\")return`${e}[${R}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${F}));`;throw new Error(`not supported combination of storage type ${h.storage} and value type ${h.value} yet`)})(),ue=R=>(()=>{if(h.storage===h.value)return`${e}[${R}]`;if(h.storage===\"vec2<u32>\"&&h.value===\"i32\")return`i32(${e}[${R}].x)`;if(h.storage===\"vec2<u32>\"&&h.value===\"u32\")return`u32(${e}[${R}].x)`;if(h.storage===\"u32\"&&h.value===\"vec4<bool>\")return`vec4<bool>(bool(${e}[${R}] & 0xFFu), bool(${e}[${R}] & 0xFF00u), bool(${e}[${R}] & 0xFF0000u), bool(${e}[${R}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${h.storage} and value type ${h.value} yet`)})(),le=a<2?\"\":`\n  fn get_${e}ByIndices(indices: ${h.indices}) -> ${m} {\n    return ${ue(`i2o_${e}(indices)`)};\n  }`,K=a<2?\"\":(()=>{let R=l.map(ce=>`d${ce}: u32`).join(\", \"),F=l.map(ce=>`d${ce}`).join(\", \");return`\n  fn get_${e}(${R}) -> ${m} {\n    return get_${e}ByIndices(${z(F)});\n  }`})(),de=(...R)=>{if(R.length!==a)throw new Error(`indices length must be ${a}`);let F=R.map(w).join(\",\");return a===0?ue(\"0u\"):a===1?ue(F[0]):(g.get=!0,g.getByIndices=!0,g.indicesToOffset=!0,`get_${e}(${F})`)},re=R=>a<2?ue(R):(g.getByIndices=!0,g.indicesToOffset=!0,`get_${e}ByIndices(${R})`),se=a<2?\"\":`\n  fn set_${e}ByIndices(indices: ${h.indices}, value: ${m}) {\n    ${pe(`i2o_${e}(indices)`,\"value\")}\n  }`,Z=a<2?\"\":(()=>{let R=l.map(ce=>`d${ce}: u32`).join(\", \"),F=l.map(ce=>`d${ce}`).join(\", \");return`\n  fn set_${e}(${R}, value: ${m}) {\n    set_${e}ByIndices(${z(F)}, value);\n  }`})();return{impl:()=>{let R=[],F=!1;return g.offsetToIndices&&(R.push(S),F=!0),g.indicesToOffset&&(R.push(A),F=!0),g.broadcastedIndicesToOffset&&(Object.values(X).forEach(ce=>R.push(ce)),F=!0),g.set&&(R.push(Z),F=!0),g.setByIndices&&(R.push(se),F=!0),g.get&&(R.push(K),F=!0),g.getByIndices&&(R.push(le),F=!0),!i&&F&&R.unshift(`const ${x} = ${h.indices}(${r.join(\",\")});`,`const ${_} = ${h.indices}(${k.computeStrides(r).join(\",\")});`),R.join(`\n`)},type:h,offsetToIndices:I,indicesToOffset:D,broadcastedIndicesToOffset:Y,indices:z,indicesGet:H,indicesSet:W,set:(...R)=>{if(R.length!==a+1)throw new Error(`indices length must be ${a}`);let F=R[a];if(typeof F!=\"string\")throw new Error(\"value must be string\");let ce=R.slice(0,a).map(w).join(\",\");return a===0?pe(\"0u\",F):a===1?pe(ce[0],F):(g.set=!0,g.setByIndices=!0,g.indicesToOffset=!0,`set_${e}(${ce}, ${F})`)},setByOffset:pe,setByIndices:(R,F)=>a<2?pe(R,F):(g.setByIndices=!0,g.indicesToOffset=!0,`set_${e}ByIndices(${R}, ${F});`),get:de,getByOffset:ue,getByIndices:re,usage:n,name:e,strides:_,shape:x,rank:a}},E=(e,t,r,n=1)=>no(e,t,r,\"input\",n),M=(e,t,r,n=1)=>no(e,t,r,\"output\",n),Lr=(e,t,r,n=1)=>no(e,t,r,\"internal\",n),to=class{constructor(t,r){this.normalizedDispatchGroup=t;this.limits=r;this.internalVariables=[];this.variables=[];this.uniforms=[];this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(t){return`if (global_idx >= ${typeof t==\"number\"?`${t}u`:t}) { return; }`}mainStart(t=Tt){let r=typeof t==\"number\"?t:t[0],n=typeof t==\"number\"?1:t[1],o=typeof t==\"number\"?1:t[2];if(r>this.limits.maxComputeWorkgroupSizeX||n>this.limits.maxComputeWorkgroupSizeY||o>this.limits.maxComputeWorkgroupSizeZ)throw new Error(`workgroup size [${r}, ${n}, ${o}] exceeds the maximum workgroup size [${this.limits.maxComputeWorkgroupSizeX}, ${this.limits.maxComputeWorkgroupSizeY}, ${this.limits.maxComputeWorkgroupSizeZ}].`);if(r*n*o>this.limits.maxComputeInvocationsPerWorkgroup)throw new Error(`workgroup size [${r}, ${n}, ${o}] exceeds the maximum workgroup invocations ${this.limits.maxComputeInvocationsPerWorkgroup}.`);let i=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,a=i?`@builtin(global_invocation_id) global_id : vec3<u32>,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(global_invocation_id) global_id : vec3<u32>,\n                                             @builtin(local_invocation_id) local_id : vec3<u32>,\n    @builtin(local_invocation_index) local_idx : u32,\n    @builtin(workgroup_id) workgroup_id : vec3<u32>,\n    @builtin(num_workgroups) num_workgroups : vec3<u32>`,l=i?\"let global_idx = global_id.x; let local_idx = local_id.x;\":`let global_idx = (workgroup_id.z * num_workgroups[0] * num_workgroups[1] +\n          workgroup_id.y * num_workgroups[0] + workgroup_id.x) * ${r*n*o}u + local_idx;`;return`@compute @workgroup_size(${r}, ${n}, ${o})\n  fn main(${a}) {\n    ${l}\n  `}appendVariableUniforms(t){t.rank!==0&&(t.shape.startsWith(\"uniforms.\")&&this.uniforms.push({name:t.shape.replace(\"uniforms.\",\"\"),type:\"u32\",length:t.rank}),t.strides.startsWith(\"uniforms.\")&&this.uniforms.push({name:t.strides.replace(\"uniforms.\",\"\"),type:\"u32\",length:t.rank}))}declareVariable(t,r){if(t.usage===\"internal\")throw new Error(\"cannot use internal variable with declareVariable(). use registerInternalVariables() instead.\");this.variables.push(t),this.appendVariableUniforms(t);let n=t.usage===\"input\"?\"read\":\"read_write\",o=t.type.storage;return`@group(0) @binding(${r}) var<storage, ${n}> ${t.name}: array<${o}>;`}declareVariables(...t){return t.map(r=>this.declareVariable(r,this.variableIndex++)).join(`\n`)}registerInternalVariable(t){if(t.usage!==\"internal\")throw new Error(\"cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.\");this.internalVariables.push(t),this.appendVariableUniforms(t)}registerInternalVariables(...t){return t.forEach(r=>this.registerInternalVariable(r)),this}registerUniform(t,r,n=1){return this.uniforms.push({name:t,type:r,length:n}),this}registerUniforms(t){return this.uniforms=this.uniforms.concat(t),this}uniformDeclaration(){if(this.uniforms.length===0)return\"\";let t=[];for(let{name:r,type:n,length:o}of this.uniforms)if(o&&o>4)n===\"f16\"?t.push(`@align(16) ${r}:array<mat2x4<${n}>, ${Math.ceil(o/8)}>`):t.push(`${r}:array<vec4<${n}>, ${Math.ceil(o/4)}>`);else{let i=o==null||o===1?n:`vec${o}<${n}>`;t.push(`${r}:${i}`)}return`\n      struct Uniforms { ${t.join(\", \")} };\n      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(t=>t.impl()).join(`\n`)+this.internalVariables.map(t=>t.impl()).join(`\n`)}get variablesInfo(){if(this.uniforms.length===0)return;let t=r=>[12,10,1,6][[\"u32\",\"f16\",\"f32\",\"i32\"].indexOf(r)];return this.uniforms.map(r=>[t(r.type),r.length??1])}},Ya=(e,t)=>new to(e,t),Nt=(e,t)=>{let r=e.length,n=[];for(let o=0;o<r;o++){let i=r-1-o,a=e[i]||1;(t[t.length-1-o]||1)>1&&a===1&&n.unshift(i)}return n}});var Ep,Xa,kp,Pp,Ue,Za,Qa,Et=U(()=>{\"use strict\";Q();ae();Ce();ie();Ep=e=>{if(!e||e.length!==1)throw new Error(\"Transpose requires 1 input.\")},Xa=(e,t)=>t&&t.length!==e?[...new Array(e).keys()].reverse():t,kp=(e,t)=>k.sortBasedOnPerm(e,Xa(e.length,t)),Pp=(e,t,r,n)=>{let o=[];o.push(`fn perm(i: ${n.type.indices}) -> ${r.type.indices} {\n    var a: ${r.type.indices};`);for(let i=0;i<t;++i)o.push(r.indicesSet(\"a\",e[i],`i[${i}]`));return o.push(\"return a;}\"),o.join(`\n`)},Ue=(e,t)=>{let r=e.dataType,n=e.dims.length,o=Xa(n,t),i=kp(e.dims,o),a=M(\"output\",r,i.length),l=E(\"a\",r,n),d;if(o.length===2&&o[0]===1&&o[1]===0){let p=a.type.value,m=[16,16,1];d=u=>`\n  ${u.registerUniform(\"output_size\",\"u32\").declareVariables(l,a)}\n  var<workgroup> tile : array<array<${p}, ${m[0]+1}>, ${m[0]}>;\n  ${u.mainStart(m)}\n    var x = workgroup_id.x * ${m[0]}u + local_id.x;\n    var y = workgroup_id.y * ${m[0]}u + local_id.y;\n    let width = uniforms.output_shape[0];\n    let height = uniforms.output_shape[1];\n    if (x < width && y < height) {\n      tile[local_id.y][local_id.x] = ${l.getByOffset(\"y * width + x\")};\n    }\n    workgroupBarrier();\n    x = workgroup_id.y * ${m[0]}u + local_id.x;\n    y = workgroup_id.x * ${m[0]}u + local_id.y;\n    if (x < height && y < width) {\n      ${a.setByOffset(\"y * height + x\",\"tile[local_id.x][local_id.y]\")}\n    }\n  }`}else d=p=>`\n  ${p.registerUniform(\"output_size\",\"u32\").declareVariables(l,a)}\n\n  ${Pp(o,n,l,a)}\n\n  ${p.mainStart()}\n    ${p.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\")}\n\n    let indices = ${a.offsetToIndices(\"global_idx\")};\n    let aIndices = perm(indices);\n\n    ${a.setByOffset(\"global_idx\",l.getByIndices(\"aIndices\"))}\n  }`;return{name:\"Transpose\",shaderCache:{hint:`${t}`,inputDependencies:[\"rank\"]},getRunData:p=>{let m=k.size(i);return{outputs:[{dims:i,dataType:p[0].dataType}],dispatchGroup:{x:Math.ceil(m/64)},programUniforms:[{type:12,data:m},...V(p[0].dims,i)]}},getShaderSource:d}},Za=(e,t)=>{Ep(e.inputs),e.compute(Ue(e.inputs[0],t.perm))},Qa=e=>te({perm:e.perm})});var Op,Dp,zp,Bp,Rp,Mp,Up,Vp,Np,Wp,rt,Ja,es,ts,rs,ns,os,is,as,ss,us,ds=U(()=>{\"use strict\";Q();ae();ie();Fr();Et();Op={max:\"select(bestValue, candidate, candidate > bestValue)\",min:\"select(bestValue, candidate, candidate < bestValue)\",mean:\"bestValue + candidate\",sum:\"bestValue + candidate\",prod:\"bestValue * candidate\",sumSquare:\"bestValue + candidate * candidate\",logSumExp:\"bestValue + exp(candidate)\",l1:\"bestValue + abs(candidate)\",l2:\"bestValue + candidate * candidate\",logSum:\"bestValue + candidate\"},Dp={max:\"select(bestValue, candidate, candidate > bestValue)\",min:\"select(bestValue, candidate, candidate < bestValue)\",mean:\"bestValue + candidate\",sum:\"bestValue + candidate\",prod:\"bestValue * candidate\",sumSquare:\"bestValue + candidate\",logSumExp:\"bestValue + candidate\",l1:\"bestValue + candidate\",l2:\"bestValue + candidate\",logSum:\"bestValue + candidate\"},zp={max:\"_A[offset]\",min:\"_A[offset]\",mean:\"0\",sum:\"0\",prod:\"1\",sumSquare:\"0\",logSumExp:\"0\",l1:\"0\",l2:\"0\",logSum:\"0\"},Bp={max:\"bestValue\",min:\"bestValue\",sum:\"bestValue\",prod:\"bestValue\",sumSquare:\"bestValue\",logSumExp:\"log(bestValue)\",l1:\"bestValue\",l2:\"sqrt(bestValue)\",logSum:\"log(bestValue)\"},Rp=(e,t)=>{let r=[];for(let n=t-e;n<t;++n)r.push(n);return r},Mp=(e,t)=>{let r=[],n=e.length;for(let i=0;i<n;i++)t.indexOf(i)===-1&&r.push(e[i]);let o=t.map(i=>e[i]);return[r,o]},Up=(e,t)=>{let r=e.length+t.length,n=[],o=0;for(let i=0;i<r;i++)t.indexOf(i)===-1?n.push(e[o++]):n.push(1);return n},Vp=(e,t)=>{for(let r=0;r<e.length;++r)if(e[e.length-r-1]!==t-1-r)return!1;return!0},Np=(e,t)=>{let r=[];if(!Vp(e,t)){for(let n=0;n<t;++n)e.indexOf(n)===-1&&r.push(n);e.forEach(n=>r.push(n))}return r},Wp=(e,t,r,n,o,i,a)=>{let l=r[0].dims,d=k.size(i),p=k.size(a),m=E(\"_A\",r[0].dataType,l),u=M(\"output\",o,i),h=32,w=`\n          var<workgroup> aBestValues : array<f32, ${h}>;\n       `;return{name:e,shaderCache:t,getShaderSource:b=>`\n        ${b.registerUniform(\"reduceSize\",\"u32\").declareVariables(m,u)}\n        ${w}\n        fn DIV_CEIL(a : u32, b : u32) -> u32 {\n          return ((a - 1u) / b + 1u);\n         }\n         ${b.mainStart(h)}\n\n          let outputIndex = global_idx / ${h};\n          let offset = outputIndex * uniforms.reduceSize;\n\n          var bestValue = f32(${zp[n]});\n          let Length = uniforms.reduceSize;\n          for (var k = local_idx; k < Length; k = k + ${h}) {\n           let candidate = f32(${m.getByOffset(\"offset + k\")});\n           bestValue = ${Op[n]};\n          }\n          aBestValues[local_idx] = bestValue;\n          workgroupBarrier();\n\n         var reduceSize = min(Length, ${h}u);\n         for (var currentSize = reduceSize / 2u; reduceSize > 1u;\n             currentSize = reduceSize / 2u) {\n           let interval = DIV_CEIL(reduceSize, 2u);\n           if (local_idx < currentSize) {\n            let candidate = aBestValues[local_idx + interval];\n            bestValue = ${Dp[n]};\n            aBestValues[local_idx] = bestValue;\n           }\n           reduceSize = interval;\n           workgroupBarrier();\n         }\n\n         if (local_idx == 0u) {\n          ${u.setByOffset(\"outputIndex\",`${n===\"mean\"?`${u.type.storage}(bestValue / f32(uniforms.reduceSize))`:`${u.type.storage}(${Bp[n]})`}`)};\n         }\n        }`,getRunData:()=>({outputs:[{dims:i,dataType:o}],dispatchGroup:{x:d},programUniforms:[{type:12,data:p}]})}},rt=(e,t,r,n)=>{let o=e.inputs.length===1?r:oo(e.inputs,r),i=o.axes;i.length===0&&!o.noopWithEmptyAxes&&(i=e.inputs[0].dims.map((w,g)=>g));let a=k.normalizeAxes(i,e.inputs[0].dims.length),l=a,d=e.inputs[0],p=Np(l,e.inputs[0].dims.length);p.length>0&&(d=e.compute(Ue(e.inputs[0],p),{inputs:[0],outputs:[-1]})[0],l=Rp(l.length,d.dims.length));let[m,u]=Mp(d.dims,l),h=m;o.keepDims&&(h=Up(m,a)),e.compute(Wp(t,{hint:o.cacheKey,inputDependencies:[\"type\"]},[d],n,e.inputs[0].dataType,h,u),{inputs:[d]})},Ja=(e,t)=>{rt(e,\"ReduceMeanShared\",t,\"mean\")},es=(e,t)=>{rt(e,\"ReduceL1Shared\",t,\"l1\")},ts=(e,t)=>{rt(e,\"ReduceL2Shared\",t,\"l2\")},rs=(e,t)=>{rt(e,\"ReduceLogSumExpShared\",t,\"logSumExp\")},ns=(e,t)=>{rt(e,\"ReduceMaxShared\",t,\"max\")},os=(e,t)=>{rt(e,\"ReduceMinShared\",t,\"min\")},is=(e,t)=>{rt(e,\"ReduceProdShared\",t,\"prod\")},as=(e,t)=>{rt(e,\"ReduceSumShared\",t,\"sum\")},ss=(e,t)=>{rt(e,\"ReduceSumSquareShared\",t,\"sumSquare\")},us=(e,t)=>{rt(e,\"ReduceLogSumShared\",t,\"logSum\")}});var nt,Hp,qr,oo,ot,Gp,Lp,Fp,qp,jp,Kp,Yp,Xp,Zp,Qp,it,ls,cs,ps,ms,fs,hs,gs,ys,bs,ws,Fr=U(()=>{\"use strict\";Q();ae();Ce();ie();ds();nt=e=>{if(!e||e.length===0||e.length>2)throw new Error(\"Reduce op requires 1 or 2 inputs.\");if(e.length===2&&e[1].dims.length!==1)throw new Error(\"Invalid axes input dims.\")},Hp=e=>[\"\",\"\",`var value = ${e.getByIndices(\"input_indices\")};`,\"\"],qr=(e,t,r,n,o,i,a=!1,l=!1)=>{let d=[],p=r[0].dims,m=p.length,u=k.normalizeAxes(o,m),h=!l&&u.length===0;p.forEach((x,_)=>{h||u.indexOf(_)>=0?a&&d.push(1):d.push(x)});let w=d.length,g=k.size(d);return{name:e,shaderCache:t,getShaderSource:x=>{let _=[],$=E(\"_A\",r[0].dataType,m),S=M(\"output\",i,w),I=n($,S,u),T=I[2];for(let A=0,D=0;A<m;A++)h||u.indexOf(A)>=0?(a&&D++,T=`for(var j${A}: u32 = 0; j${A} < ${p[A]}; j${A}++) {\n                  ${I[2].includes(\"last_index\")?`let last_index = j${A};`:\"\"}\n                  ${$.indicesSet(\"input_indices\",A,`j${A}`)}\n                  ${T}\n                }`):(_.push(`${$.indicesSet(\"input_indices\",A,S.indicesGet(\"output_indices\",D))};`),D++);return`\n\n        ${x.registerUniform(\"output_size\",\"u32\").declareVariables($,S)}\n\n        ${x.mainStart()}\n          ${x.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\")}\n          var input_indices: ${$.type.indices};\n          let output_indices = ${S.offsetToIndices(\"global_idx\")};\n\n          ${_.join(`\n`)}\n          ${I[0]}       // init ops for reduce max/min\n          ${I[1]}\n          ${T}\n          ${I[3]}\n          ${I.length===4?S.setByOffset(\"global_idx\",\"value\"):I.slice(4).join(`\n`)}\n        }`},getRunData:()=>({outputs:[{dims:d,dataType:i}],dispatchGroup:{x:Math.ceil(g/64)},programUniforms:[{type:12,data:g},...V(p,d)]})}},oo=(e,t)=>{let r=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(n=>r.push(Number(n))),te({axes:r,keepDims:t.keepDims,noopWithEmptyAxes:t.noopWithEmptyAxes})},ot=(e,t,r,n)=>{let o=e.inputs,i=o.length===1?r:oo(o,r);e.compute(qr(t,{hint:i.cacheKey,inputDependencies:[\"rank\"]},[o[0]],i.noopWithEmptyAxes&&i.axes.length===0?Hp:n,i.axes,o[0].dataType,i.keepDims,i.noopWithEmptyAxes),{inputs:[0]})},Gp=(e,t)=>{nt(e.inputs),ot(e,\"ReduceLogSum\",t,(n,o)=>[`var value = ${o.type.storage}(0);`,\"\",`value += ${n.getByIndices(\"input_indices\")};`,\"value = log(value);\"])},Lp=(e,t)=>{nt(e.inputs),ot(e,\"ReduceL1\",t,(n,o)=>[`var value = ${o.type.storage}(0);`,\"\",`value += abs(${n.getByIndices(\"input_indices\")});`,\"\"])},Fp=(e,t)=>{nt(e.inputs),ot(e,\"ReduceL2\",t,(n,o)=>[`var t = ${o.type.value}(0); var value = ${o.type.value}(0);`,\"\",`t = ${n.getByIndices(\"input_indices\")}; value += (t * t);`,\"value = sqrt(value);\"])},qp=(e,t)=>{nt(e.inputs),ot(e,\"ReduceLogSumExp\",t,(n,o)=>[`var value = ${o.type.storage}(0);`,\"\",`value += exp(${n.getByIndices(\"input_indices\")});`,\"value = log(value);\"])},jp=(e,t)=>{nt(e.inputs),ot(e,\"ReduceMax\",t,(n,o,i)=>{let a=[];for(let l=0;l<n.rank;l++)(i.indexOf(l)>=0||i.length===0)&&a.push(n.indicesSet(\"input_indices\",l,0));return[`${a.join(`\n`)}`,`var value = ${n.getByIndices(\"input_indices\")};`,`value = max(value, ${n.getByIndices(\"input_indices\")});`,\"\"]})},Kp=(e,t)=>{nt(e.inputs),ot(e,\"ReduceMean\",t,(n,o,i)=>{let a=1;for(let l=0;l<n.rank;l++)(i.indexOf(l)>=0||i.length===0)&&(a*=e.inputs[0].dims[l]);return[\"var sum = f32(0);\",\"\",`sum += f32(${n.getByIndices(\"input_indices\")});`,`let value = ${o.type.value}(sum / ${a});`]})},Yp=(e,t)=>{nt(e.inputs),ot(e,\"ReduceMin\",t,(n,o,i)=>{let a=[];for(let l=0;l<n.rank;l++)(i.indexOf(l)>=0||i.length===0)&&a.push(`input_indices[${l}] = 0;`);return[`${a.join(`\n`)}`,`var value = ${n.getByIndices(\"input_indices\")};`,`value = min(value, ${n.getByIndices(\"input_indices\")});`,\"\"]})},Xp=(e,t)=>{nt(e.inputs),ot(e,\"ReduceProd\",t,(n,o)=>[`var value = ${o.type.storage}(1);`,\"\",`value *= ${n.getByIndices(\"input_indices\")};`,\"\"])},Zp=(e,t)=>{nt(e.inputs),ot(e,\"ReduceSum\",t,(n,o)=>[`var value = ${o.type.storage}(0);`,\"\",`value += ${n.getByIndices(\"input_indices\")};`,\"\"])},Qp=(e,t)=>{nt(e.inputs),ot(e,\"ReduceSumSquare\",t,(n,o)=>[`var t = ${o.type.value}(0); var value = ${o.type.value}(0);`,\"\",`t = ${n.getByIndices(\"input_indices\")}; value += t * t;`,\"\"])},it=(e,t,r)=>{if(t.length===0)return r;let n=1,o=1;for(let i=0;i<t.length;i++)t.indexOf(i)===-1?n*=e[i]:o*=e[i];return o<32&&n>1024},ls=(e,t)=>{it(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Kp(e,t):Ja(e,t)},cs=(e,t)=>{it(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Lp(e,t):es(e,t)},ps=(e,t)=>{it(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Fp(e,t):ts(e,t)},ms=(e,t)=>{it(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?qp(e,t):rs(e,t)},fs=(e,t)=>{it(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?jp(e,t):ns(e,t)},hs=(e,t)=>{it(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Yp(e,t):os(e,t)},gs=(e,t)=>{it(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Xp(e,t):is(e,t)},ys=(e,t)=>{it(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Zp(e,t):as(e,t)},bs=(e,t)=>{it(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Qp(e,t):ss(e,t)},ws=(e,t)=>{it(e.inputs[0].dims,t.axes,t.noopWithEmptyAxes)?Gp(e,t):us(e,t)}});var vs,$s,_s,io,xs=U(()=>{\"use strict\";Q();Ce();Fr();vs=e=>{if(!e||e.length===0||e.length>2)throw new Error(\"ArgMinMaxOp op requires 1 or 2 inputs.\");if(e[0].dataType!==1)throw new Error(\"Invalid input type.\")},$s=(e,t)=>{vs(e.inputs);let r=(n,o,i)=>{let a=[];for(let l=0;l<n.rank;l++)(i.indexOf(l)>=0||i.length===0)&&a.push(`input_indices[${l}] = 0;`);return[`${a.join(`\n`)}`,`var value = ${n.getByIndices(\"input_indices\")};\nvar best_index : i32 = 0;`,`if (${n.getByIndices(\"input_indices\")} ${t.selectLastIndex>0?\"<=\":\"<\"} value) {\n         value = ${n.getByIndices(\"input_indices\")};\n         best_index = i32(last_index);\n       }`,\"\",o.setByOffset(\"global_idx\",\"best_index\")]};e.compute(qr(\"ArgMin\",{hint:t.cacheKey,inputDependencies:[\"rank\"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},_s=(e,t)=>{vs(e.inputs);let r=(n,o,i)=>{let a=[];for(let l=0;l<n.rank;l++)(i.indexOf(l)>=0||i.length===0)&&a.push(`input_indices[${l}] = 0;`);return[`${a.join(`\n`)}`,`var value = ${n.getByIndices(\"input_indices\")};\nvar best_index : i32 = 0;`,`if (${n.getByIndices(\"input_indices\")} ${t.selectLastIndex>0?\">=\":\">\"} value) {\n         value = ${n.getByIndices(\"input_indices\")};\n         best_index = i32(last_index);\n       }`,\"\",o.setByOffset(\"global_idx\",\"best_index\")]};e.compute(qr(\"argMax\",{hint:t.cacheKey,inputDependencies:[\"rank\"]},[e.inputs[0]],r,[t.axis],7,t.keepDims),{inputs:[0]})},io=e=>te(e)});var Jp,em,tm,rm,Wt,nm,Ss,jr=U(()=>{\"use strict\";Q();Nr();ie();Jp=(e,t)=>{let r=e[0],n=e[1],o=e[2],i=e[3],a=e[4],l=e[5];if(a&&l)throw new Error(\"Attention cannot have both past and relative_position_bias\");if(r.dims.length!==3)throw new Error('Input \"input\" must have 3 dimensions');let d=r.dims[0],p=r.dims[1],m=r.dims[2];if(o.dims.length!==1)throw new Error('Input \"bias\" is expected to have 1 dimensions');if(n.dims.length!==2)throw new Error('Input \"weights\" is expected to have 2 dimensions');if(n.dims[0]!==m)throw new Error(\"Input 1 dimension 0 should have same length as dimension 2 of input 0\");if(o.dims[0]!==n.dims[1])throw new Error('Input \"bias\" dimension 0 should have same length as dimension 1 of input \"weights\"');let u=o.dims[0]/3,h=u,w=h;if(t.qkvHiddenSizes.length>0){if(t.qkvHiddenSizes.length!==3)throw new Error(\"qkv_hidden_sizes attribute should have 3 elements\");for(let S of t.qkvHiddenSizes)if(S%t.numHeads!==0)throw new Error(\"qkv_hidden_sizes should be divisible by num_heads\");u=t.qkvHiddenSizes[0],h=t.qkvHiddenSizes[1],w=t.qkvHiddenSizes[2]}let g=p;if(u!==h)throw new Error(\"qkv_hidden_sizes first element should be same as the second\");if(o.dims[0]!==u+h+w)throw new Error('Input \"bias\" dimension 0 should have same length as sum of Q/K/V hidden sizes');let b=0;if(a){if(h!==w)throw new Error('Input \"past\" expect k_hidden_size == v_hidden_size');if(a.dims.length!==5)throw new Error('Input \"past\" must have 5 dimensions');if(a.dims[0]!==2)throw new Error('Input \"past\" first dimension must be 2');if(a.dims[1]!==d)throw new Error('Input \"past\" second dimension must be batch_size');if(a.dims[2]!==t.numHeads)throw new Error('Input \"past\" third dimension must be num_heads');if(a.dims[4]!==h/t.numHeads)throw new Error('Input \"past\" fifth dimension must be k_hidden_size / num_heads');t.pastPresentShareBuffer||(b=a.dims[3])}let x=g+b,_=-1,$=0;if(i)throw new Error(\"Mask not supported\");if(a)throw new Error(\"past is not supported\");return{batchSize:d,sequenceLength:p,pastSequenceLength:b,kvSequenceLength:g,totalSequenceLength:x,maxSequenceLength:_,inputHiddenSize:m,hiddenSize:u,vHiddenSize:w,headSize:Math.floor(u/t.numHeads),vHeadSize:Math.floor(w/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:$,scale:t.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},em=(e,t,r,n)=>{let o=$e(n),i=64,a=n/o;a<i?i=1:a/8<64&&(i=Math.ceil(a/8));let l=Math.ceil(n/o/i),d=[{type:t.dataType,data:1/n},{type:12,data:a},{type:12,data:l}],p=ge(t.dataType,o),m=Oe(1,o),u=h=>{let w=M(\"x\",t.dataType,t.dims,o),b=[{name:\"d_inv\",type:Oe(t.dataType)},{name:\"d_comp\",type:\"u32\"},{name:\"elements_per_thread\",type:\"u32\"}];return`\n  var<workgroup> thread_max: array<f32, ${i}>;\n  var<workgroup> thread_sum: array<f32, ${i}>;\n  ${h.registerUniforms(b).declareVariables(w)}\n  ${h.mainStart([i,1,1])}\n    let local_offset = local_idx * uniforms.elements_per_thread;\n    let offset = workgroup_id.x * uniforms.d_comp + local_offset;\n\n    var thread_max_vector = ${m}(-3.402823e+38f);\n    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < uniforms.d_comp; i++) {\n      thread_max_vector = max(${m}(x[offset + i]), thread_max_vector);\n    }\n    thread_max[local_idx] = ${(()=>{switch(o){case 1:return\"thread_max_vector\";case 2:return\"max(thread_max_vector.x, thread_max_vector.y)\";case 4:return\"max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))\";default:throw new Error(`Unsupported components: ${o}`)}})()};\n    workgroupBarrier();\n\n    var max_value =  f32(-3.402823e+38f);\n    for (var i = 0u; i < ${i}; i++) {\n      max_value = max(thread_max[i], max_value);\n    }\n\n    var sum_vector = ${m}(0);\n    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < uniforms.d_comp; i++) {\n      sum_vector += exp(${m}(x[offset + i]) - max_value);\n    }\n    thread_sum[local_idx] = ${(()=>{switch(o){case 1:return\"sum_vector\";case 2:return\"sum_vector.x + sum_vector.y\";case 4:return\"sum_vector.x + sum_vector.y + sum_vector.z + sum_vector.w\";default:throw new Error(`Unsupported components: ${o}`)}})()};\n    workgroupBarrier();\n\n    var sum: f32 = 0;\n    for (var i = 0u; i < ${i}; i++) {\n      sum += thread_sum[i];\n    }\n\n    if (sum == 0) {\n      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < uniforms.d_comp; i++) {\n        x[offset + i] = ${w.type.value}(uniforms.d_inv);\n      }\n    } else {\n      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < uniforms.d_comp; i++) {\n        var f32input = ${m}(x[offset + i]);\n        x[offset + i] = ${w.type.value}(exp(f32input - max_value) / sum);\n      }\n    }\n  }`};return{name:\"AttentionProbsSoftmax\",shaderCache:{hint:`${i};${p};${o}`},getShaderSource:u,getRunData:()=>({outputs:[],dispatchGroup:{x:r},programUniforms:d})}},tm=(e,t,r,n,o,i,a,l)=>{let d=l+i.kvSequenceLength,p=[i.batchSize,i.numHeads,i.sequenceLength,d],m=i.kvNumHeads===void 0&&e.outputCount>1,u=m?[i.batchSize,i.numHeads,d,i.headSize]:void 0,h=a.scale===0?1/Math.sqrt(i.headSize):a.scale,w=$e(i.headSize),g=i.headSize/w,b=12,x={x:Math.ceil(d/b),y:Math.ceil(i.sequenceLength/b),z:i.batchSize*i.numHeads},_=[{type:12,data:i.sequenceLength},{type:12,data:g},{type:12,data:d},{type:12,data:i.numHeads},{type:1,data:h},{type:12,data:l},{type:12,data:i.kvSequenceLength}],$=[\"type\",\"type\"];n&&$.push(\"type\"),o&&$.push(\"type\");let S=[{dims:p,dataType:t.dataType,gpuDataType:0}];m&&S.push({dims:u,dataType:t.dataType,gpuDataType:0});let I=T=>{let A=E(\"q\",t.dataType,t.dims,w),D=E(\"key\",r.dataType,r.dims,w),z=[A,D];if(n){let pe=E(\"past_key\",n.dataType,n.dims,w);z.push(pe)}o&&z.push(E(\"relative_position_bias\",o.dataType,o.dims));let H=M(\"output\",t.dataType,p),W=[H];m&&W.push(M(\"present_key\",t.dataType,u,w));let X=Oe(1,w),Y=[{name:\"M\",type:\"u32\"},{name:\"K\",type:\"u32\"},{name:\"N\",type:\"u32\"},{name:\"num_heads\",type:\"u32\"},{name:\"alpha\",type:\"f32\"},{name:\"past_sequence_length\",type:\"u32\"},{name:\"kv_sequence_length\",type:\"u32\"}];return`\n  const TILE_SIZE = ${b}u;\n\n  var<workgroup> tileQ: array<${A.type.storage}, ${b*b}>;\n  var<workgroup> tileK: array<${A.type.storage}, ${b*b}>;\n  ${T.registerUniforms(Y).declareVariables(...z,...W)}\n  ${T.mainStart([b,b,1])}\n    // x holds the N and y holds the M\n    let headIdx = workgroup_id.z;\n    let m = workgroup_id.y * TILE_SIZE;\n    let n = workgroup_id.x * TILE_SIZE;\n    let qOffset = uniforms.M * uniforms.K * headIdx + m * uniforms.K;\n    ${(()=>n&&m?`\n    let kOffset = uniforms.kv_sequence_length * uniforms.K * headIdx;\n    let pastKeyOffset = uniforms.past_sequence_length * uniforms.K * headIdx;`:`\n    let kOffset = uniforms.N * uniforms.K * headIdx + n * uniforms.K;`)()}\n    ${m?\"let presentKeyOffset = headIdx * uniforms.N * uniforms.K;\":\"\"}\n    var value = ${X}(0);\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (global_id.y < uniforms.M && w + local_id.x < uniforms.K) {\n        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];\n      }\n      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {\n        var idx = TILE_SIZE * local_id.y + local_id.x;\n      ${(()=>n&&m?`\n              if (n + local_id.y < uniforms.past_sequence_length) {\n                tileK[idx] = past_key[pastKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x];\n              } else {\n                tileK[idx] =\n                         key[kOffset + (n + local_id.y - uniforms.past_sequence_length) * uniforms.K + w + local_id.x];\n              }`:\"tileK[idx] = key[kOffset + local_id.y * uniforms.K + w + local_id.x];\")()}\n      ${m?\"present_key[presentKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x] = tileK[idx];\":\"\"}\n      }\n      workgroupBarrier();\n\n      for (var k: u32 = 0u; k < TILE_SIZE && w+k < uniforms.K; k++) {\n        value += ${X}(tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k]);\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = headIdx * uniforms.M * uniforms.N;\n    if (global_id.y < uniforms.M && global_id.x < uniforms.N) {\n      let outputIdx = headOffset + global_id.y * uniforms.N + global_id.x;\n      var sum: f32 = ${(()=>{switch(w){case 1:return\"value\";case 2:return\"value.x + value.y\";case 4:return\"value.x + value.y + value.z + value.w\";default:throw new Error(`Unsupported components: ${w}`)}})()};\n        output[outputIdx] = ${H.type.value} (sum * uniforms.alpha) + ${o?\"relative_position_bias[outputIdx]\":\"0.0\"};\n    }\n  }`};return{name:\"AttentionProbs\",shaderCache:{hint:`${w};${o!==void 0};${n!==void 0};${e.outputCount}`,inputDependencies:$},getRunData:()=>({outputs:S,dispatchGroup:x,programUniforms:_}),getShaderSource:I}},rm=(e,t,r,n,o,i)=>{let a=i+o.kvSequenceLength,l=o.nReps?o.nReps:1,d=o.vHiddenSize*l,p=o.kvNumHeads==null&&e.outputCount>1,m=p?[o.batchSize,o.numHeads,a,o.headSize]:void 0,u=[o.batchSize,o.sequenceLength,d],h=12,w={x:Math.ceil(o.vHeadSize/h),y:Math.ceil(o.sequenceLength/h),z:o.batchSize*o.numHeads},g=[{type:12,data:o.sequenceLength},{type:12,data:a},{type:12,data:o.vHeadSize},{type:12,data:o.numHeads},{type:12,data:d},{type:12,data:i},{type:12,data:o.kvSequenceLength}],b=n?[\"type\",\"type\",\"type\"]:[\"type\",\"type\"],x=[{dims:u,dataType:t.dataType,gpuDataType:0}];p&&x.push({dims:m,dataType:t.dataType,gpuDataType:0});let _=$=>{let S=E(\"probs\",t.dataType,t.dims),I=E(\"v\",r.dataType,r.dims),T=[S,I];n&&T.push(E(\"past_value\",n.dataType,n.dims));let D=[M(\"output\",t.dataType,u)];p&&D.push(M(\"present_value\",t.dataType,m));let z=[{name:\"M\",type:\"u32\"},{name:\"K\",type:\"u32\"},{name:\"N\",type:\"u32\"},{name:\"num_heads\",type:\"u32\"},{name:\"v_hidden_size\",type:\"u32\"},{name:\"past_sequence_length\",type:\"u32\"},{name:\"kv_sequence_length\",type:\"u32\"}];return`\n  const TILE_SIZE = ${h}u;\n  var<workgroup> tileQ: array<${S.type.value}, ${h*h}>;\n  var<workgroup> tileK: array<${S.type.value}, ${h*h}>;\n  ${$.registerUniforms(z).declareVariables(...T,...D)}\n  ${$.mainStart([h,h,1])}\n   let headIdx = workgroup_id.z;\n   let m = global_id.y;\n   let n = global_id.x;\n\n   let offsetA = headIdx * (uniforms.M * uniforms.K) + m * uniforms.K;\n   ${(()=>n&&p?`\n    let pastValueOffset = headIdx * uniforms.N * uniforms.past_sequence_length + n;\n    let vOffset = headIdx * uniforms.N * uniforms.kv_sequence_length + n;\n      `:`\n   let offsetB = headIdx * uniforms.N * uniforms.K + n;\n            `)()}\n    ${p?\"let presentValueOffset = headIdx * uniforms.N * uniforms.K + n;\":\"\"}\n   var value = ${S.type.storage}(0);\n   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (m < uniforms.M && w + local_id.x < uniforms.K) {\n        tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];\n      }\n      if (n < uniforms.N && w + local_id.y < uniforms.K) {\n        var idx = TILE_SIZE * local_id.y + local_id.x;\n        ${(()=>n&&p?`\n        if (w + local_id.y < uniforms.past_sequence_length) {\n          tileK[idx] = past_value[pastValueOffset + (w + local_id.y) * uniforms.N];\n        } else {\n          tileK[idx] = v[vOffset + (w + local_id.y - uniforms.past_sequence_length) * uniforms.N];\n        }\n      `:`\n        tileK[idx] = v[offsetB + (w + local_id.y) * uniforms.N];\n      `)()}\n        ${p?\"present_value[presentValueOffset + (w + local_id.y) * uniforms.N] = tileK[idx];\":\"\"}\n      }\n     workgroupBarrier();\n     for (var k: u32 = 0u; k < TILE_SIZE && w+k < uniforms.K; k++) {\n       value += tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * k + local_id.x];\n     }\n     workgroupBarrier();\n   }\n\n   // we need to transpose output from BNSH_v to BSND_v\n   let batchIdx = workgroup_id.z / uniforms.num_heads;\n   let currentBatchHeadNumber = workgroup_id.z % uniforms.num_heads;\n   if (m < uniforms.M && n < uniforms.N) {\n     let outputIdx = batchIdx * uniforms.M * uniforms.v_hidden_size + m * uniforms.v_hidden_size\n       + currentBatchHeadNumber * uniforms.N + n;\n     output[outputIdx] = value;\n   }\n  }`};return{name:\"AttentionScore\",shaderCache:{hint:`${n!==void 0};${e.outputCount}`,inputDependencies:b},getRunData:()=>({outputs:x,dispatchGroup:w,programUniforms:g}),getShaderSource:_}},Wt=(e,t,r,n,o,i,a,l,d,p,m)=>{let u=e.outputCount,h=p.kvNumHeads!==void 0||u>1?p.pastSequenceLength:0,w=h+p.kvSequenceLength,g=p.kvNumHeads===void 0&&u>1&&a?[t,r,a]:[t,r];d&&g.push(d);let b=e.compute(tm(e,t,r,u>1?a:void 0,d,p,m,h),{inputs:g,outputs:p.kvNumHeads===void 0&&u>1?[-1,1]:[-1]})[0];e.compute(em(e,b,p.batchSize*p.numHeads*p.sequenceLength,w),{inputs:[b],outputs:[]});let x=p.kvNumHeads===void 0&&u>1&&l?[b,n,l]:[b,n];e.compute(rm(e,b,n,u>1&&l?l:void 0,p,h),{inputs:x,outputs:p.kvNumHeads===void 0&&u>1?[0,2]:[0]})},nm=(e,t)=>{let r=[t.batchSize,t.numHeads,t.sequenceLength,t.headSize],n=t.sequenceLength,o=t.inputHiddenSize,i=t.headSize,a=12,l={x:Math.ceil(t.headSize/a),y:Math.ceil(t.sequenceLength/a),z:t.batchSize*t.numHeads},d=[e.inputs[0],e.inputs[1],e.inputs[2]],p=[{type:12,data:n},{type:12,data:o},{type:12,data:i},{type:12,data:t.numHeads},{type:12,data:t.headSize},{type:12,data:t.hiddenSize},{type:12,data:t.hiddenSize+t.hiddenSize+t.vHiddenSize}],m=u=>{let h=M(\"output_q\",d[0].dataType,r),w=M(\"output_k\",d[0].dataType,r),g=M(\"output_v\",d[0].dataType,r),b=E(\"input\",d[0].dataType,d[0].dims),x=E(\"weight\",d[1].dataType,d[1].dims),_=E(\"bias\",d[2].dataType,d[2].dims),$=b.type.storage,S=[{name:\"M\",type:\"u32\"},{name:\"K\",type:\"u32\"},{name:\"N\",type:\"u32\"},{name:\"num_heads\",type:\"u32\"},{name:\"head_size\",type:\"u32\"},{name:\"hidden_size\",type:\"u32\"},{name:\"ldb\",type:\"u32\"}];return`\n  const TILE_SIZE = ${a}u;\n  var<workgroup> tileInput: array<${$}, ${a*a}>;\n  var<workgroup> tileWeightQ: array<${$}, ${a*a}>;\n  var<workgroup> tileWeightK: array<${$}, ${a*a}>;\n  var<workgroup> tileWeightV: array<${$}, ${a*a}>;\n  ${u.registerUniforms(S).declareVariables(b,x,_,h,w,g)}\n  ${u.mainStart([a,a,1])}\n    let batchIndex = workgroup_id.z / uniforms.num_heads;\n    let headNumber = workgroup_id.z % uniforms.num_heads;\n    let m = global_id.y;\n    let n = global_id.x;\n\n    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;\n    let biasOffsetQ = headNumber * uniforms.head_size;\n    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;\n    let biasOffsetV = uniforms.hidden_size + biasOffsetK;\n\n    var valueQ = ${$}(0);\n    var valueK = ${$}(0);\n    var valueV = ${$}(0);\n    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {\n      if (m < uniforms.M && w + local_id.x < uniforms.K) {\n        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];\n      }\n      if (n < uniforms.N && w + local_id.y < uniforms.K) {\n        let offset = n + (w + local_id.y) * uniforms.ldb;\n        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];\n        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];\n        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];\n      }\n      workgroupBarrier();\n      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {\n        let inputTileOffset = TILE_SIZE * local_id.y + k;\n        let weightTileOffset = TILE_SIZE * k + local_id.x;\n        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];\n        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];\n        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];\n      }\n\n      workgroupBarrier();\n    }\n\n    let headOffset = (m * uniforms.N + n) % uniforms.head_size;\n    valueQ += bias[headOffset + biasOffsetQ];\n    valueK += bias[headOffset + biasOffsetK];\n    valueV += bias[headOffset + biasOffsetV];\n\n    let offset = workgroup_id.z * uniforms.M * uniforms.N;\n    if (m < uniforms.M && n < uniforms.N) {\n      let outputIdx = offset + m * uniforms.N + n;\n      output_q[outputIdx] = valueQ;\n      output_k[outputIdx] = valueK;\n      output_v[outputIdx] = valueV;\n    }\n  }`};return e.compute({name:\"AttentionPrepare\",shaderCache:{inputDependencies:[\"type\",\"type\",\"type\"]},getRunData:()=>({outputs:[{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:r,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:l,programUniforms:p}),getShaderSource:m},{inputs:d,outputs:[-1,-1,-1]})},Ss=(e,t)=>{let r=Jp(e.inputs,t),[n,o,i]=nm(e,r);return Wt(e,n,o,i,e.inputs[4],void 0,void 0,void 0,e.inputs[5],r,t)}});var om,im,am,Is,Cs=U(()=>{\"use strict\";Ke();Q();ae();Ce();ie();om=(e,t)=>{if(!e||e.length!==5)throw new Error(\"BatchNormalization requires 5 inputs\");let r=(n,o,i)=>{let a=o.length;if(a!==n.length)throw new Error(`${i}: num dimensions != ${a}`);o.forEach((l,d)=>{if(l!==n[d])throw new Error(`${i}: dim[${d}] do not match`)})};if(e[0].dims.length>1){let n=t.format===\"NHWC\"?t.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,t.spatial?2:void 0);r(e[1].dims,n,\"Invalid input scale\"),r(e[2].dims,n,\"Invalid input B\"),r(e[3].dims,n,\"Invalid input mean\"),r(e[4].dims,n,\"Invalid input var\")}else r(e[1].dims,[1],\"Invalid input scale\"),r(e[2].dims,[1],\"Invalid input B\"),r(e[3].dims,[1],\"Invalid input mean\"),r(e[4].dims,[1],\"Invalid input var\")},im=(e,t)=>{let{epsilon:r,spatial:n,format:o}=t,i=e[0].dims,a=n?$e(i[i.length-1]):1,l=o===\"NHWC\"&&i.length>1?a:1,d=k.size(i)/a,p=n,m=p?i.length:i,u=E(\"x\",e[0].dataType,e[0].dims,a),h=E(\"scale\",e[1].dataType,e[1].dims,l),w=E(\"bias\",e[2].dataType,e[2].dims,l),g=E(\"inputMean\",e[3].dataType,e[3].dims,l),b=E(\"inputVar\",e[4].dataType,e[4].dims,l),x=M(\"y\",e[0].dataType,m,a),_=()=>{let S=\"\";if(n)S=`let cOffset = ${i.length===1?\"0u\":o===\"NHWC\"?`outputIndices[${i.length-1}] / ${a}`:\"outputIndices[1]\"};`;else if(o===\"NCHW\")S=`\n            ${x.indicesSet(\"outputIndices\",\"0\",\"0\")}\n            let cOffset = ${x.indicesToOffset(\"outputIndices\")};`;else{S=`var cIndices = ${h.type.indices}(0);\n                       cIndices[0] = outputIndices[${i.length-1}];`;for(let I=1;I<h.rank;I++)S+=`cIndices[${I}] = outputIndices[${I}];`;S+=`let cOffset = ${h.indicesToOffset(\"cIndices\")};`}return S},$=S=>`\n  const epsilon = ${r};\n  ${S.registerUniform(\"outputSize\",\"u32\").declareVariables(u,h,w,g,b,x)}\n  ${S.mainStart()}\n  ${S.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.outputSize\")}\n    var outputIndices = ${x.offsetToIndices(`global_idx * ${a}`)};\n    ${_()}\n    let scale = ${h.getByOffset(\"cOffset\")};\n    let bias = ${w.getByOffset(\"cOffset\")};\n    let inputMean = ${g.getByOffset(\"cOffset\")};\n    let inputVar = ${b.getByOffset(\"cOffset\")};\n    let x = ${u.getByOffset(\"global_idx\")};\n    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;\n    ${x.setByOffset(\"global_idx\",\"value\")}\n  }`;return{name:\"BatchNormalization\",shaderCache:{hint:`${t.epsilon}_${t.format}_${n}_${a}`,inputDependencies:p?[\"rank\",\"type\",\"type\",\"type\",\"type\"]:void 0},getShaderSource:$,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:p?[{type:12,data:d},...V(i)]:[{type:12,data:d}]})}},am=e=>te(e),Is=(e,t)=>{let{inputs:r,outputCount:n}=e,o=am({...t,outputCount:n});if(be.webgpu.validateInputContent&&om(r,o),t.trainingMode)throw new Error(\"BatchNormalization trainingMode is not supported yet.\");e.compute(im(r,o))}});var sm,um,Ts,As=U(()=>{\"use strict\";ae();ie();sm=e=>{if(e[0].dims.length!==3)throw new Error(\"input should have 3 dimensions\");if(![320,640,1280].includes(e[0].dims[2]))throw new Error(\"number of channels should be 320, 640 or 1280\");if(e[1].dims.length!==1)throw new Error(\"bias is expected to have 1 dimensions\");if(e[0].dims[2]!==e[1].dims[0])throw new Error(\"last dimension of input and bias are not the same\")},um=e=>{let t=e[0].dims,r=e[0].dims[2],n=k.size(t)/4,o=e[0].dataType,i=E(\"input\",o,t,4),a=E(\"bias\",o,[r],4),l=E(\"residual\",o,t,4),d=M(\"output\",o,t,4);return{name:\"BiasAdd\",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(n/64)}}),getShaderSource:m=>`\n  const channels = ${r}u / 4;\n  ${m.declareVariables(i,a,l,d)}\n\n  ${m.mainStart()}\n    ${m.guardAgainstOutOfBoundsWorkgroupSizes(n)}\n    let value = ${i.getByOffset(\"global_idx\")}\n      + ${a.getByOffset(\"global_idx % channels\")} + ${l.getByOffset(\"global_idx\")};\n    ${d.setByOffset(\"global_idx\",\"value\")}\n  }`}},Ts=e=>{sm(e.inputs),e.compute(um(e.inputs))}});var dm,fe,Es,ks,Ps,Os,Ds,zs,Bs,Rs,Ms,lm,Us,Vs,Ns,Ws,Qt,Hs,Kr,Gs,Ls,Fs,qs,js,Ks,Ys,Xs,Zs,Qs,Js,eu,tu,ru,nu,ou,iu,au,ao,so,su,uu,du,cm,pm,lu,Yr=U(()=>{\"use strict\";Q();ae();Ce();ie();dm=(e,t,r,n,o,i)=>{let a=Math.ceil(t/4),l=\"\";typeof o==\"string\"?l=`${o}(a)`:l=o(\"a\");let d=E(\"inputData\",r,[a],4),p=M(\"outputData\",n,[a],4);return`\n      ${e.registerUniform(\"vec_size\",\"u32\").declareVariables(d,p)}\n\n  ${i??\"\"}\n\n  ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.vec_size\")}\n\n    let a = ${d.getByOffset(\"global_idx\")};\n    ${p.setByOffset(\"global_idx\",l)}\n  }`},fe=(e,t,r,n,o,i=e.dataType)=>({name:t,shaderCache:{hint:o,inputDependencies:[\"type\"]},getShaderSource:a=>dm(a,k.size(e.dims),e.dataType,i,r,n),getRunData:a=>({outputs:[{dims:e.dims,dataType:i}],dispatchGroup:{x:Math.ceil(k.size(a[0].dims)/64/4)},programUniforms:[{type:12,data:Math.ceil(k.size(e.dims)/4)}]})}),Es=e=>{e.compute(fe(e.inputs[0],\"Abs\",\"abs\"))},ks=e=>{e.compute(fe(e.inputs[0],\"Acos\",\"acos\"))},Ps=e=>{e.compute(fe(e.inputs[0],\"Acosh\",\"acosh\"))},Os=e=>{e.compute(fe(e.inputs[0],\"Asin\",\"asin\"))},Ds=e=>{e.compute(fe(e.inputs[0],\"Asinh\",\"asinh\"))},zs=e=>{e.compute(fe(e.inputs[0],\"Atan\",\"atan\"))},Bs=e=>{e.compute(fe(e.inputs[0],\"Atanh\",\"atanh\"))},Rs=e=>te(e),Ms=(e,t)=>{let r;switch(t.to){case 10:r=\"vec4<f16>\";break;case 1:r=\"vec4<f32>\";break;case 12:r=\"vec4<u32>\";break;case 6:r=\"vec4<i32>\";break;case 9:r=\"vec4<bool>\";break;default:throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${t.to}`)}e.compute(fe(e.inputs[0],\"Cast\",r,void 0,t.cacheKey,t.to))},lm=e=>{let t=e.length>=2&&e[1].data!==0?e[1].getFloat32Array()[0]:Hr,r=e.length>=3&&e[2].data!==0?e[2].getFloat32Array()[0]:Gr;return te({min:t,max:r})},Us=(e,t)=>{let r=e.inputs.length===1?t:lm(e.inputs),n=Oe(e.inputs[0].dataType);e.compute(fe(e.inputs[0],\"Clip\",o=>`clamp(${o}, clip_min_, clip_max_)`,`\n    const clip_min_: vec4<${n}> = vec4(${n}(${r.min}));\n    const clip_max_: vec4<${n}> = vec4(${n}(${r.max}));\n`,r.cacheKey),{inputs:[0]})},Vs=e=>{e.compute(fe(e.inputs[0],\"Ceil\",\"ceil\"))},Ns=e=>{e.compute(fe(e.inputs[0],\"Cos\",\"cos\"))},Ws=e=>{e.compute(fe(e.inputs[0],\"Cosh\",\"cosh\"))},Qt=e=>te(e),Hs=(e,t)=>{let r=Oe(e.inputs[0].dataType);e.compute(fe(e.inputs[0],\"Elu\",n=>`elu_vf32(${n})`,`\n  const elu_alpha_ = ${r}(${t.alpha});\n\n  fn elu_f32(a: ${r}) -> ${r} {\n  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);\n  }\n\n  fn elu_vf32(v: vec4<${r}>) -> vec4<${r}> {\n  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));\n  }`,t.cacheKey))},Kr=(e=\"f32\")=>`\nconst r0: ${e} = 0.3275911;\nconst r1: ${e} = 0.254829592;\nconst r2: ${e} = -0.284496736;\nconst r3: ${e} = 1.421413741;\nconst r4: ${e} = -1.453152027;\nconst r5: ${e} = 1.061405429;\n\nfn erf_vf32(v: vec4<${e}>) -> vec4<${e}> {\n  let absv = abs(v);\n  let x = 1.0 / (1.0 + r0 * absv);\n  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));\n}`,Gs=e=>{let t=Oe(e.inputs[0].dataType);e.compute(fe(e.inputs[0],\"Erf\",r=>`erf_vf32(${r})`,Kr(t)))},Ls=e=>{e.compute(fe(e.inputs[0],\"Exp\",\"exp\"))},Fs=e=>{e.compute(fe(e.inputs[0],\"Floor\",\"floor\"))},qs=e=>{let t=Oe(e.inputs[0].dataType);e.compute(fe(e.inputs[0],\"Gelu\",r=>`0.5 * ${r} * (1.0 + erf_vf32(${r} * 0.7071067811865475))`,Kr(t)))},js=(e,t)=>{let r=Oe(e.inputs[0].dataType);e.compute(fe(e.inputs[0],\"LeakyRelu\",n=>`select(leaky_relu_alpha_ * ${n}, ${n}, ${n} >= vec4<${r}>(0.0))`,`const leaky_relu_alpha_ = ${r}(${t.alpha});`,t.cacheKey))},Ks=e=>{e.compute(fe(e.inputs[0],\"Not\",t=>`!${t}`))},Ys=e=>{e.compute(fe(e.inputs[0],\"Neg\",t=>`-${t}`))},Xs=e=>{e.compute(fe(e.inputs[0],\"Reciprocal\",t=>`1.0/${t}`))},Zs=e=>{let t=Oe(e.inputs[0].dataType);e.compute(fe(e.inputs[0],\"Relu\",r=>`select(vec4<${t}>(0.0), ${r}, ${r} > vec4<${t}>(0.0))`))},Qs=e=>{e.compute(fe(e.inputs[0],\"Sigmoid\",t=>`(1.0 / (1.0 + exp(-${t})))`))},Js=e=>te(e),eu=(e,t)=>{let r=Oe(e.inputs[0].dataType);e.compute(fe(e.inputs[0],\"HardSigmoid\",n=>`max(vec4<${r}>(0.0), min(vec4<${r}>(1.0), ${t.alpha} * ${n} + vec4<${r}>(${t.beta})))`,void 0,t.cacheKey))},tu=e=>{e.compute(fe(e.inputs[0],\"Sin\",\"sin\"))},ru=e=>{e.compute(fe(e.inputs[0],\"Sinh\",\"sinh\"))},nu=e=>{e.compute(fe(e.inputs[0],\"Sqrt\",\"sqrt\"))},ou=e=>{e.compute(fe(e.inputs[0],\"Tan\",\"tan\"))},iu=e=>`sign(${e}) * (1 - exp(-2 * abs(${e}))) / (1 + exp(-2 * abs(${e})))`,au=e=>{e.compute(fe(e.inputs[0],\"Tanh\",iu))},ao=(e=\"f32\")=>`\nconst fast_gelu_a: ${e} = 0.5;\nconst fast_gelu_b: ${e} = 0.7978845608028654;\nconst fast_gelu_c: ${e} = 0.035677408136300125;\n\nfn tanh_v(v: vec4<${e}>) -> vec4<${e}> {\n  return ${iu(\"v\")};\n}\n`,so=e=>`(fast_gelu_a + fast_gelu_a * tanh_v(${e} * (fast_gelu_c * ${e} * ${e} + fast_gelu_b))) * ${e}`,su=e=>{let t=Oe(e.inputs[0].dataType);e.compute(fe(e.inputs[0],\"FastGelu\",so,ao(t),void 0,e.inputs[0].dataType))},uu=(e,t)=>{let r=Oe(e.inputs[0].dataType);return e.compute(fe(e.inputs[0],\"ThresholdedRelu\",n=>`select(vec4<${r}>(0.0), ${n}, ${n} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_ = vec4<${r}>(${t.alpha});`,t.cacheKey)),0},du=e=>{e.compute(fe(e.inputs[0],\"Log\",\"log\"))},cm=(e,t)=>`\nconst alpha = vec4<${e}>(${t});\nconst one = ${e}(1.0);\nconst zero = ${e}(0.0);\n\nfn quick_gelu_impl(x: vec4<${e}>) -> vec4<${e}> {\n  let v = x *alpha;\n  var x1 : vec4<${e}>;\n  for (var i = 0; i < 4; i = i + 1) {\n    if (v[i] >= zero) {\n      x1[i] = one / (one + exp(-v[i]));\n    } else {\n      x1[i] = one - one / (one + exp(v[i]));\n    }\n  }\n  return x * x1;\n}\n`,pm=e=>`quick_gelu_impl(${e})`,lu=(e,t)=>{let r=Oe(e.inputs[0].dataType);e.compute(fe(e.inputs[0],\"QuickGelu\",pm,cm(r,t.alpha),t.cacheKey,e.inputs[0].dataType))}});var mm,fm,pu,mu=U(()=>{\"use strict\";ae();ie();Yr();mm=e=>{if(e[0].dims.length!==3)throw new Error(\"input should have 3 dimensions\");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error(\"hidden state should be 2560, 5120 or 10240\");if(e[1].dims.length!==1)throw new Error(\"bias is expected to have 1 dimensions\");if(e[0].dims[2]!==e[1].dims[0])throw new Error(\"last dimension of input and bias are not the same\")},fm=e=>{let t=e[0].dims.slice();t[2]=t[2]/2;let r=E(\"input\",e[0].dataType,e[0].dims,4),n=E(\"bias\",e[0].dataType,[e[0].dims[2]],4),o=M(\"output\",e[0].dataType,t,4),i=k.size(t)/4,a=ge(e[0].dataType);return{name:\"BiasSplitGelu\",getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)}}),getShaderSource:d=>`\n  const M_SQRT2 = sqrt(2.0);\n  const halfChannels = ${e[0].dims[2]/4/2}u;\n\n  ${d.declareVariables(r,n,o)}\n\n  ${Kr(a)}\n\n  ${d.mainStart()}\n    ${d.guardAgainstOutOfBoundsWorkgroupSizes(i)}\n    let biasIdx = global_idx % halfChannels;\n    let batchIndex = global_idx / halfChannels;\n    let inputOffset = biasIdx + batchIndex * halfChannels * 2;\n    let valueLeft = input[inputOffset] + bias[biasIdx];\n    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];\n    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);\n\n    ${o.setByOffset(\"global_idx\",\"valueLeft * geluRight\")}\n  }`}},pu=e=>{mm(e.inputs),e.compute(fm(e.inputs))}});var hm,gm,at,fu,hu,gu,yu,bu,wu,vu,$u,_u,xu,Su=U(()=>{\"use strict\";Q();ae();ie();hm=(e,t,r,n,o,i,a,l,d,p,m,u)=>{let h,w;typeof l==\"string\"?h=w=($,S)=>`${l}((${$}),(${S}))`:typeof l==\"function\"?h=w=l:(h=l.scalar,w=l.vector);let g=M(\"outputData\",m,n.length,4),b=E(\"aData\",d,t.length,4),x=E(\"bData\",p,r.length,4),_;if(o)if(i){let $=k.size(t)===1,S=k.size(r)===1,I=t.length>0&&t[t.length-1]%4===0,T=r.length>0&&r[r.length-1]%4===0;$||S?_=g.setByOffset(\"global_idx\",w($?`${b.type.value}(${b.getByOffset(\"0\")}.x)`:b.getByOffset(\"global_idx\"),S?`${x.type.value}(${x.getByOffset(\"0\")}.x)`:x.getByOffset(\"global_idx\"))):_=`\n            let outputIndices = ${g.offsetToIndices(\"global_idx * 4u\")};\n            let offsetA = ${b.broadcastedIndicesToOffset(\"outputIndices\",g)};\n            let offsetB = ${x.broadcastedIndicesToOffset(\"outputIndices\",g)};\n            ${g.setByOffset(\"global_idx\",w(a||I?b.getByOffset(\"offsetA / 4u\"):`${b.type.value}(${b.getByOffset(\"offsetA / 4u\")}[offsetA % 4u])`,a||T?x.getByOffset(\"offsetB / 4u\"):`${x.type.value}(${x.getByOffset(\"offsetB / 4u\")}[offsetB % 4u])`))}\n          `}else _=g.setByOffset(\"global_idx\",w(b.getByOffset(\"global_idx\"),x.getByOffset(\"global_idx\")));else{if(!i)throw new Error(\"no necessary to use scalar implementation for element-wise binary op implementation.\");let $=(S,I,T=\"\")=>{let A=`aData[indexA${I}][componentA${I}]`,D=`bData[indexB${I}][componentB${I}]`;return`\n            let outputIndices${I} = ${g.offsetToIndices(`global_idx * 4u + ${I}u`)};\n            let offsetA${I} = ${b.broadcastedIndicesToOffset(`outputIndices${I}`,g)};\n            let offsetB${I} = ${x.broadcastedIndicesToOffset(`outputIndices${I}`,g)};\n            let indexA${I} = offsetA${I} / 4u;\n            let indexB${I} = offsetB${I} / 4u;\n            let componentA${I} = offsetA${I} % 4u;\n            let componentB${I} = offsetB${I} % 4u;\n            ${S}[${I}] = ${T}(${h(A,D)});\n          `};m===9?_=`\n            var data = vec4<u32>(0);\n            ${$(\"data\",0,\"u32\")}\n            ${$(\"data\",1,\"u32\")}\n            ${$(\"data\",2,\"u32\")}\n            ${$(\"data\",3,\"u32\")}\n            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:_=`\n            ${$(\"outputData[global_idx]\",0)}\n            ${$(\"outputData[global_idx]\",1)}\n            ${$(\"outputData[global_idx]\",2)}\n            ${$(\"outputData[global_idx]\",3)}\n          `}return`\n        ${e.registerUniform(\"vec_size\",\"u32\").declareVariables(b,x,g)}\n\n        ${u??\"\"}\n\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.vec_size\")}\n        ${_}\n      }`},gm=(e,t,r,n,o,i,a=r.dataType)=>{let l=!k.areEqual(r.dims,n.dims),d=r.dims,p=k.size(r.dims),m=!1,u=!1,h=[l];if(l){let w=tt.calcShape(r.dims,n.dims,!1);if(!w)throw new Error(\"Can't perform binary op on the given tensors\");d=w,p=k.size(d);let g=k.size(r.dims)===1,b=k.size(n.dims)===1,x=r.dims.length>0&&r.dims[r.dims.length-1]%4===0,_=n.dims.length>0&&n.dims[n.dims.length-1]%4===0;h.push(g),h.push(b),h.push(x),h.push(_);let $=1;for(let S=1;S<d.length;S++){let I=r.dims[r.dims.length-S]??1,T=n.dims[n.dims.length-S]??1;if(I===T)$*=I;else break}$%4===0?(u=!0,m=!0):(g||b||x||_)&&(m=!0)}else m=!0;return h.push(m),{name:e,shaderCache:{hint:t+h.map(w=>w.toString()).join(\"_\"),inputDependencies:[\"rank\",\"rank\"]},getShaderSource:w=>hm(w,r.dims,n.dims,d,m,l,u,o,r.dataType,n.dataType,a,i),getRunData:()=>({outputs:[{dims:d,dataType:a}],dispatchGroup:{x:Math.ceil(p/64/4)},programUniforms:[{type:12,data:Math.ceil(k.size(d)/4)},...V(r.dims,n.dims,d)]})}},at=(e,t,r,n,o,i)=>{e.compute(gm(t,o??\"\",e.inputs[0],e.inputs[1],r,n,i))},fu=e=>{at(e,\"Add\",(t,r)=>`${t}+${r}`)},hu=e=>{at(e,\"Div\",(t,r)=>`${t}/${r}`)},gu=e=>{at(e,\"Equal\",{scalar:(t,r)=>`u32(${t}==${r})`,vector:(t,r)=>`vec4<u32>(${t}==${r})`},void 0,void 0,9)},yu=e=>{at(e,\"Mul\",(t,r)=>`${t}*${r}`)},bu=e=>{let t=E(\"input\",e.inputs[0].dataType,e.inputs[0].dims).type.value;at(e,\"Pow\",{scalar:(n,o)=>`pow_custom(${n},${o})`,vector:(n,o)=>`pow_vector_custom(${n},${o})`},`\n    fn pow_custom(a : ${t}, b : ${t}) -> ${t} {\n      if (b == ${t}(0.0)) {\n        return ${t}(1.0);\n      } else if (a < ${t}(0.0) && f32(b) != floor(f32(b))) {\n        return ${t}(pow(f32(a), f32(b))); // NaN\n      }\n      return select(sign(a), ${t}(1.0), round(f32(abs(b) % ${t}(2.0))) != 1.0) * ${t}(${t===\"i32\"?\"round\":\"\"}(pow(f32(abs(a)), f32(b))));\n    }\n    fn pow_vector_custom(a : vec4<${t}>, b : vec4<${t}>) -> vec4<${t}> {\n      // TODO: implement vectorized pow\n      return vec4<${t}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));\n    }\n      `)},wu=e=>{at(e,\"Sub\",(t,r)=>`${t}-${r}`)},vu=e=>{at(e,\"Greater\",{scalar:(t,r)=>`u32(${t}>${r})`,vector:(t,r)=>`vec4<u32>(${t}>${r})`},void 0,void 0,9)},$u=e=>{at(e,\"Less\",{scalar:(t,r)=>`u32(${t}<${r})`,vector:(t,r)=>`vec4<u32>(${t}<${r})`},void 0,void 0,9)},_u=e=>{at(e,\"GreaterOrEqual\",{scalar:(t,r)=>`u32(${t}>=${r})`,vector:(t,r)=>`vec4<u32>(${t}>=${r})`},void 0,void 0,9)},xu=e=>{at(e,\"LessOrEqual\",{scalar:(t,r)=>`u32(${t}<=${r})`,vector:(t,r)=>`vec4<u32>(${t}<=${r})`},void 0,void 0,9)}});var bm,wm,vm,$m,Iu,Cu,Tu=U(()=>{\"use strict\";Q();ae();Ce();ie();bm=(e,t)=>{if(!e||e.length<1)throw new Error(\"too few inputs\");let r=0,n=e[r],o=n.dataType,i=n.dims.length;e.forEach((a,l)=>{if(l!==r){if(a.dataType!==o)throw new Error(\"input tensors should be one type\");if(a.dims.length!==i)throw new Error(\"input tensors should have the same shape\");a.dims.forEach((d,p)=>{if(p!==t&&d!==n.dims[p])throw new Error(\"non concat dimensions must match\")})}})},wm=(e,t)=>`\n  fn calculateInputIndex(index: u32) -> u32 {\n    let sizeInConcatAxis = array<u32, ${e}u>(${t});\n    for (var i: u32 = 0u; i < ${e}; i += 1u ) {\n      if (index < sizeInConcatAxis[i]) {\n        return i;\n      }\n    }\n    return ${e}u;\n  }`,vm=(e,t)=>{let r=e.length,n=[];for(let o=0;o<r;++o){let i=t.setByOffset(\"global_idx\",e[o].getByIndices(\"indices\"));r===1?n.push(i):o===0?n.push(`if (inputIndex == ${o}u) { ${i} }`):o===r-1?n.push(`else { ${i} }`):n.push(`else if (inputIndex == ${o}) { ${i} }`)}return n.join(`\n`)},$m=(e,t,r,n)=>{let o=k.size(r),i=new Array(e.length),a=new Array(e.length),l=0,d=[],p=[],m=[{type:12,data:o}];for(let b=0;b<e.length;++b)l+=e[b].dims[t],i[b]=l,p.push(e[b].dims.length),a[b]=E(`input${b}`,n,p[b]),d.push(\"rank\"),m.push({type:12,data:i[b]});for(let b=0;b<e.length;++b)m.push(...V(e[b].dims));m.push(...V(r));let u=M(\"output\",n,r.length),h=u.indicesGet(\"indices\",t),w=Array.from(Array(i.length).keys()).map(b=>`uniforms.sizeInConcatAxis${b}`).join(\",\"),g=b=>`\n\n  ${(()=>{b.registerUniform(\"outputSize\",\"u32\");for(let x=0;x<e.length;x++)b.registerUniform(`sizeInConcatAxis${x}`,\"u32\");return b.declareVariables(...a,u)})()}\n\n  ${wm(i.length,w)}\n\n  ${b.mainStart()}\n    ${b.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.outputSize\")}\n\n    var indices = ${u.offsetToIndices(\"global_idx\")};\n\n    let inputIndex = calculateInputIndex(${h});\n    if (inputIndex != 0u) {\n      let sizeInConcatAxis = array<u32, ${i.length}u>(${w});\n      ${h} -= sizeInConcatAxis[inputIndex - 1u];\n    }\n\n    ${vm(a,u)}\n  }`;return{name:\"Concat\",shaderCache:{hint:`${t}`,inputDependencies:d},getRunData:()=>({outputs:[{dims:r,dataType:n}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:m}),getShaderSource:g}},Iu=(e,t)=>{let r=e.inputs,n=r[0].dims,o=k.normalizeAxis(t.axis,n.length);bm(r,o);let i=n.slice();i[o]=r.reduce((l,d)=>l+(d.dims.length>o?d.dims[o]:0),0);let a=r.filter(l=>k.size(l.dims)>0);e.compute($m(a,o,i,r[0].dataType),{inputs:a})},Cu=e=>te({axis:e.axis})});var He,Ge,Le,Xr,lt=U(()=>{\"use strict\";Q();ae();He=(e,t,r=\"f32\")=>{switch(e.activation){case\"Relu\":return`value = max(value, ${t}(0.0));`;case\"Sigmoid\":return`value = (${t}(1.0) / (${t}(1.0) + exp(-value)));`;case\"Clip\":return`value = clamp(value, ${t}(${r}(uniforms.clip_min)), ${t}(${r}(uniforms.clip_max)));`;case\"HardSigmoid\":return`value = max(${t}(0.0), min(${t}(1.0), ${r}(uniforms.alpha) * value + ${r}(uniforms.beta)));`;case\"LeakyRelu\":return`value = select(${r}(uniforms.alpha) * value, value, value >= ${t}(0.0));`;case\"Tanh\":return`let e2x = exp(-2.0 * abs(value));\n              value = sign(value) * (1.0 - e2x) / (1.0 + e2x);\n        `;case\"\":return\"\";default:throw new Error(`Unsupported activation ${e.activation}`)}},Ge=(e,t)=>{e.activation===\"Clip\"?t.push({type:1,data:e.clipMax},{type:1,data:e.clipMin}):e.activation===\"HardSigmoid\"?t.push({type:1,data:e.alpha},{type:1,data:e.beta}):e.activation===\"LeakyRelu\"&&t.push({type:1,data:e.alpha})},Le=(e,t)=>{e.activation===\"Clip\"?t.push({name:\"clip_max\",type:\"f32\"},{name:\"clip_min\",type:\"f32\"}):e.activation===\"HardSigmoid\"?t.push({name:\"alpha\",type:\"f32\"},{name:\"beta\",type:\"f32\"}):e.activation===\"LeakyRelu\"&&t.push({name:\"alpha\",type:\"f32\"})},Xr=e=>{let t=e?.activation||\"\";if(t===\"HardSigmoid\"){let[r,n]=e?.activation_params||[.2,.5];return{activation:t,alpha:r,beta:n}}else if(t===\"Clip\"){let[r,n]=e?.activation_params||[Hr,Gr];return{activation:t,clipMax:n,clipMin:r}}else if(t===\"LeakyRelu\"){let[r]=e?.activation_params||[.01];return{activation:t,alpha:r}}return{activation:t}}});var Ee,Zr,Jt=U(()=>{\"use strict\";Ee=(e,t)=>{switch(e){case 1:return t;case 2:return`vec2<${t}>`;case 3:return`vec3<${t}>`;case 4:return`vec4<${t}>`;default:throw new Error(`${e}-component is not supported.`)}},Zr=e=>`\n      ${e?\"value = value + getBiasByOutputCoords(coords);\":\"\"}\n      `});var Qr,uo=U(()=>{\"use strict\";Qr=e=>`\nfn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));\n}\nfn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {\n  return dot(coords, vec4<i32>(\n    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));\n}\n`});var _m,xm,er,Au,Sm,tr,Im,Jr,rr=U(()=>{\"use strict\";Q();ae();ie();lt();Jt();_m=(e,t)=>e?`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          kStart + inputRow,\n          globalRowStart / innerElementSize + inputCol${t?\", batchIndices\":\"\"});\n        `:`\n        mm_Asub[inputRow][inputCol] = mm_readA(batch,\n          globalRow + innerRow,\n          kStart / innerElementSize + inputCol${t?\", batchIndices\":\"\"});\n        `,xm=(e,t)=>e?`\n        let ACached0 = mm_Asub[k * innerElementSize][localRow];\n        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];\n        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];\n        ${t===3?\"\":\"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];\"}\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          acc[i] = BCached0 * ACached0[i] + acc[i];\n          acc[i] = BCached1 * ACached1[i] + acc[i];\n          acc[i] = BCached2 * ACached2[i] + acc[i];\n          ${t===3?\"\":\"acc[i] = BCached3 * ACached3[i] + acc[i];\"}\n        }`:`\n        for (var i = 0; i < rowPerThread; i = i + 1) {\n          let ACached = mm_Asub[tileRow + i][k];\n          acc[i] = BCached0 * ACached.x + acc[i];\n          acc[i] = BCached1 * ACached.y + acc[i];\n          acc[i] = BCached2 * ACached.z + acc[i];\n          ${t===3?\"\":\"acc[i] = BCached3 * ACached.w + acc[i];\"}\n        }`,er=(e,t,r=\"f32\",n,o=!1,i=32,a=!1,l=32)=>{let d=t[1]*e[1],p=t[0]*e[0],m=o?d:i,u=o?i:d,h=m/t[0],w=i/t[1];if(!((o&&h===4&&e[1]===4||!o&&(h===3||h===4))&&m%t[0]===0&&i%t[1]===0&&e[0]===4))throw new Error(`If transposeA ${o} is true, innerElementSize ${h} and workPerThread[1] ${e[1]} must be 4.\n      Otherwise, innerElementSize ${h} must be 3 or 4.\n  tileAWidth ${m} must be divisible by workgroupSize[0]${t[0]}. tileInner ${i} must be divisible by workgroupSize[1] ${t[1]}. colPerThread ${e[0]} must be 4.`);return`\nvar<workgroup> mm_Asub: array<array<vec${h}<${r}>, ${m/h}>, ${u}>;\nvar<workgroup> mm_Bsub: array<array<vec4<${r}>, ${p/e[0]}>, ${i}>;\n\nconst rowPerThread = ${e[1]};\nconst colPerThread = ${e[0]};\nconst innerElementSize = ${h};\nconst tileInner = ${i};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n  let localRow = i32(localId.y);\n  let tileRow = localRow * rowPerThread;\n  let tileCol = i32(localId.x);\n\n  let globalRow =i32(globalId.y) * rowPerThread;\n  let globalCol = i32(globalId.x);\n  let batch = ${a?\"0\":\"i32(globalId.z)\"};\n  ${n?`let batchIndices = ${n.offsetToIndices(\"u32(batch)\")};`:\"\"}\n  let globalRowStart = i32(workgroupId.y) * ${d};\n\n  let num_tiles = ${a?`${Math.ceil(l/i)}`:\"(uniforms.dim_inner - 1) / tileInner + 1\"};\n  var kStart = ${a?`i32(globalId.z) * ${l}`:\"0\"};\n\n  var acc: array<vec4<${r}>, rowPerThread>;\n\n  // Loop over shared dimension.\n  let tileRowB = localRow * ${w};\n  for (var t = 0; t < num_tiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let inputRow = tileRow + innerRow;\n          let inputCol = tileCol;\n          ${_m(o,n)}\n      }\n\n      // Load one tile of B into local memory.\n      for (var innerRow = 0; innerRow < ${w}; innerRow = innerRow + 1) {\n          let inputRow = tileRowB + innerRow;\n          let inputCol = tileCol;\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${n?\", batchIndices\":\"\"});\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {\n          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];\n          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];\n          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];\n          ${h===3?\"\":\"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];\"}\n\n          ${xm(o,h)}\n      }\n\n      workgroupBarrier();\n  }\n\n  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);\n  }\n}`},Au=(e,t)=>e?`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              kStart + inputRow,\n              globalRowStart + inputCol${t?\", batchIndices\":\"\"});\n            `:`\n            mm_Asub[inputRow][inputCol] = mm_readA(batch,\n              globalRowStart + inputRow,\n              kStart + inputCol${t?\", batchIndices\":\"\"});\n            `,Sm=e=>e?\"let ACached = mm_Asub[k][tileRow + innerRow];\":\"let ACached = mm_Asub[tileRow + innerRow][k];\",tr=(e,t,r=\"f32\",n,o=!1,i=32,a=!1,l=32,d=!1)=>{let p=e[1]*t[1],m=e[0]*t[0],u=o?p:i,h=o?i:p;if(!(h%t[1]===0&&u%t[0]===0&&i%t[1]===0))throw new Error(`tileAHight ${h} must be divisible by workgroupSize[1]${t[1]}, tileAWidth ${u} must be divisible by workgroupSize[0]${t[0]}, tileInner ${i} must be divisible by workgroupSize[1]${t[1]}`);let w=h/t[1],g=u/t[0],b=i/t[1],x=d?`\n    let localRow = i32(localId.y);\n    let localCol = i32(localId.x);\n    let globalRowStart = i32(workgroupId.y) * ${p};\n    let globalColStart = i32(workgroupId.x) * ${m};\n\n    // Loop over shared dimension.\n    for (var t = 0; t < num_tiles; t = t + 1) {\n      // Load one tile of A into local memory.\n      for (var inputRow = localRow; inputRow < ${h}; inputRow = inputRow + ${t[1]}) {\n        for (var inputCol = localCol; inputCol < ${u}; inputCol = inputCol + ${t[0]}) {\n          ${Au(o,n)}\n        }\n      }\n      // Load one tile of B into local memory.\n      for (var inputRow = localRow; inputRow < ${i}; inputRow = inputRow + ${t[1]}) {\n            for (var inputCol = localCol; inputCol < ${m}; inputCol = inputCol + ${t[0]}) {\n          mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n            kStart + inputRow,\n            globalColStart + inputCol${n?\", batchIndices\":\"\"});\n        }\n      }\n      kStart = kStart + tileInner;\n      workgroupBarrier();\n\n      // Compute acc values for a single thread.\n      var BCached : array<${r}, colPerThread>;\n      for (var k = 0; k < tileInner; k = k + 1) {\n        for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n          BCached[inner] = mm_Bsub[k][localCol + inner * ${t[0]}];\n        }\n        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n          let ACached = ${o?`mm_Asub[k][localRow + innerRow * ${t[1]}];`:`mm_Asub[localRow + innerRow * ${t[1]}][k];`}\n          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n            acc[innerRow][innerCol] = acc[innerRow][innerCol] +\n                ACached * BCached[innerCol];\n          }\n        }\n      }\n      workgroupBarrier();\n    }\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      let gRow = globalRowStart + localRow + innerRow * ${t[1]};\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        let gCol = globalColStart + localCol + innerCol * ${t[0]};\n        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);\n      }\n    }\n    `:`\nlet tileRow = i32(localId.y) * rowPerThread;\nlet tileCol = i32(localId.x) * colPerThread;\n\nlet globalRow = i32(globalId.y) * rowPerThread;\nlet globalCol = i32(globalId.x) * colPerThread;\nlet globalRowStart = i32(workgroupId.y) * ${p};\n\nlet tileRowA = i32(localId.y) * ${w};\nlet tileColA = i32(localId.x) * ${g};\nlet tileRowB = i32(localId.y) * ${b};\n// Loop over shared dimension.\nfor (var t = 0; t < num_tiles; t = t + 1) {\n  // Load one tile of A into local memory.\n  for (var innerRow = 0; innerRow < ${w}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < ${g}; innerCol = innerCol + 1) {\n      let inputRow = tileRowA + innerRow;\n      let inputCol = tileColA + innerCol;\n      ${Au(o,n)}\n    }\n  }\n\n  // Load one tile of B into local memory.\n  for (var innerRow = 0; innerRow < ${b}; innerRow = innerRow + 1) {\n    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n      let inputRow = tileRowB + innerRow;\n      let inputCol = tileCol + innerCol;\n      mm_Bsub[inputRow][inputCol] = mm_readB(batch,\n        kStart + inputRow,\n        globalCol + innerCol${n?\", batchIndices\":\"\"});\n    }\n  }\n  kStart = kStart + tileInner;\n  workgroupBarrier();\n\n  // Compute acc values for a single thread.\n  var BCached : array<${r}, colPerThread>;\n  for (var k = 0; k < tileInner; k = k + 1) {\n    for (var inner = 0; inner < colPerThread; inner = inner + 1) {\n      BCached[inner] = mm_Bsub[k][tileCol + inner];\n    }\n\n    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n      ${Sm(o)}\n      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];\n      }\n    }\n  }\n\n  workgroupBarrier();\n}\n\nfor (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {\n  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {\n    mm_write(batch, globalRow + innerRow, globalCol + innerCol,\n        acc[innerRow][innerCol]);\n  }\n}\n`;return`\n  var<workgroup> mm_Asub : array<array<${r}, ${u}>, ${h}>;\n  var<workgroup> mm_Bsub : array<array<${r}, ${m}>, ${i}>;\n  const rowPerThread = ${e[1]};\n  const colPerThread = ${e[0]};\n  const tileInner = ${i};\n\n@compute @workgroup_size(${t[0]}, ${t[1]}, ${t[2]})\nfn main(@builtin(local_invocation_id) localId : vec3<u32>,\n        @builtin(global_invocation_id) globalId : vec3<u32>,\n        @builtin(workgroup_id) workgroupId : vec3<u32>) {\n    let batch = ${a?\"0\":\"i32(globalId.z)\"};\n    ${n?`let batchIndices = ${n.offsetToIndices(\"u32(batch)\")};`:\"\"}\n    let num_tiles = ${a?`${Math.ceil(l/i)}`:\"(uniforms.dim_inner - 1) / tileInner + 1\"};\n    var kStart = ${a?`i32(globalId.z) * ${l}`:\"0\"};\n\n    var acc : array<array<${r}, colPerThread>, rowPerThread>;\n    ${x}\n  }\n`},Im=(e,t,r,n,o,i=!1)=>{let[a,l,d]=o,[p,m,u,h]=n,w=Nt(a,d),g=Nt(l,d),b=ge(n[0].type.tensor),x=()=>{let S=m.rank,I=p.rank,T=`var aIndices: ${m.type.indices};`;for(let A=S-2-1,D=I-1;A>=0;A--,D--)T+=`\naIndices[${A}] = ${I>1?`batchIndices[${D}]`:\"batchIndices\"};`;return w.forEach(A=>{T+=`\naIndices[${A}] = 0;`}),T+=`\naIndices[${S-2}] = u32(row);\n                   aIndices[${S-1}] = u32(colIn);`,T},_=()=>{let S=u.rank,I=p.rank,T=`var bIndices: ${u.type.indices};`;for(let A=S-2-1,D=I-1;A>=0;A--,D--)T+=`\nbIndices[${A}] = ${I>1?`batchIndices[${D}]`:\"batchIndices\"};`;return g.forEach(A=>{T+=`\nbIndices[${A}] = 0;`}),T+=`\nbIndices[${S-2}] = u32(row);\n                   bIndices[${S-1}] = u32(colIn);`,T};return`\n    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${p.type.indices}) -> ${Ee(e,b)} {\n      var value = ${Ee(e,b)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dim_a_outer && col < uniforms.dim_inner)\n      {\n        ${x()}\n        value = ${m.getByIndices(\"aIndices\")};\n      }\n      return value;\n    }\n\n    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${p.type.indices}) -> ${Ee(e,b)} {\n      var value = ${Ee(e,b)}(0.0);\n      let col = colIn * ${e};\n      if(row < uniforms.dim_inner && col < uniforms.dim_b_outer)\n      {\n        ${_()}\n        value = ${u.getByIndices(\"bIndices\")};\n      }\n      return value;\n    }\n\n    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${Ee(e,b)}) {\n      let col = colIn * ${e};\n      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {\n        var value = valueIn;\n        let coords = vec3<i32>(batch, row, colIn);\n        ${t?`value = value + ${i?\"bias[colIn]\":`${Ee(e,b)}(bias[row])`};`:\"\"}\n        ${r}\n        ${h.setByIndices(\"vec3<u32>(coords)\",\"value\")}\n      }\n    }\n    `},Jr=(e,t,r,n,o=!1)=>{let i=e[0].dims,a=e[1].dims,l=i.slice(0,-2),d=a.slice(0,-2),p=n?n.slice(0,-2):r.slice(0,-2),m=k.size(p),u=i[i.length-2],h=i[i.length-1],w=a[a.length-1],g=h%4===0&&w%4===0,b=u<=8?[4,1,1]:[4,4,1],x=[8,8,1],_=[Math.ceil(w/x[0]/b[0]),Math.ceil(u/x[1]/b[1]),Math.ceil(m/x[2]/b[2])],$=g?4:1,S=[...l,u,h/$],I=S.length,T=[...d,h,w/$],A=T.length,D=[m,u,w/$],z=[{type:6,data:u},{type:6,data:w},{type:6,data:h}];Ge(t,z),z.push(...V(p,S,T));let H=[\"rank\",\"rank\"],W=e.length>2;W&&(z.push(...V(e[2].dims)),H.push(\"rank\")),z.push(...V(D));let X=Y=>{let pe=p.length,ue=Lr(\"batchDims\",e[0].dataType,pe,1),le=ge(e[0].dataType),K=E(\"a\",e[0].dataType,I,$),de=E(\"b\",e[1].dataType,A,$),re=M(\"result\",e[0].dataType,D.length,$),se=[K,de];if(W){let R=o?$:1;se.push(E(\"bias\",e[2].dataType,e[2].dims.length,R))}let Z=[{name:\"dim_a_outer\",type:\"i32\"},{name:\"dim_b_outer\",type:\"i32\"},{name:\"dim_inner\",type:\"i32\"}];Le(t,Z);let ne=ge(re.type.tensor),J=He(t,re.type.value,ne),ke=Im($,W,J,[ue,K,de,re],[l,d,p],o);return`\n  ${Y.registerUniforms(Z).registerInternalVariables(ue).declareVariables(...se,re)}\n  ${ke}\n  ${g?er(b,x,le,ue):tr(b,x,le,ue)}\n                   `};return{name:\"MatMul\",shaderCache:{hint:`${b};${t.activation};${g};${o}`,inputDependencies:H},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:_[0],y:_[1],z:_[2]},programUniforms:z}),getShaderSource:X}}});var Cm,Eu,ku=U(()=>{\"use strict\";Q();dt();ie();lt();Jt();uo();rr();Cm=(e,t,r,n,o=!1,i,a=4,l=4,d=4,p=\"f32\")=>{let m=W=>{switch(W){case 1:return\"resData = x[xIndex];\";case 3:return`resData = vec3<${p}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return\"resData = x[xIndex / 4];\";default:throw new Error(`innerElementSize ${W} is not supported.`)}},u=W=>{switch(W){case 1:return\"return w[row * i32(uniforms.w_shape[3]) + colIn];\";case 4:return\"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];\";default:throw new Error(`innerElementSize ${W} is not supported.`)}},h=e?`\n    let coord = vec4<i32>(batch, xRow, xCol, xCh);\n    `:`\n    let coord = vec4<i32>(batch, xCh, xRow, xCol);\n    `,w=e?`\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    `:`\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `,g=e?\"i32(uniforms.x_shape[1])\":\"i32(uniforms.x_shape[2])\",b=e?\"i32(uniforms.x_shape[2])\":\"i32(uniforms.x_shape[3])\",x=e?\"row\":\"col\",_=e?\"col\":\"row\",$=`\n    let inChannels = i32(uniforms.w_shape[2]);\n    let outWidth = ${e?\"i32(uniforms.result_shape[2])\":\"i32(uniforms.result_shape[3])\"};\n    let outRow = ${x} / outWidth;\n    let outCol = ${x} % outWidth;\n\n    let WRow = ${_} / (i32(uniforms.w_shape[1]) * inChannels);\n    let WCol = ${_} / inChannels % i32(uniforms.w_shape[1]);\n    let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];\n    let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];\n    let xCh = ${_} % inChannels;\n    var resData = ${Ee(a,p)}(0.0);\n    // The bounds checking is always needed since we use it to pad zero for\n    // the 'same' padding type.\n    if (xRow >= 0 && xRow < ${g} && xCol >= 0 && xCol < ${b}) {\n      ${h}\n      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));\n      ${m(a)}\n    }\n    return resData;`,S=e?t&&n?`\n    let col = colIn * ${a};\n    ${$}`:`\n    let col = colIn * ${a};\n    if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {\n      ${$}\n    }\n    return ${Ee(a,p)}(0.0);`:n&&r?`\n    let col = colIn * ${a};\n    ${$}`:`\n    let col = colIn * ${a};\n    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {\n      ${$}\n    }\n    return ${Ee(a,p)}(0.0);`,I=`${u(l)}`,T=Ee(d,p),A=e?Ee(a,p):Ee(l,p),D=e?Ee(l,p):Ee(a,p),z=He(i,T,p);return`\n    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${A} {\n      ${e?S:I}\n    }\n\n    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${D} {\n      ${e?I:S}\n    }\n\n    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${T}) {\n      let col = colIn * ${d};\n      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer)\n      {\n      var value = valueIn;\n      let outWidth = ${e?\"i32(uniforms.result_shape[2])\":\"i32(uniforms.result_shape[3])\"};\n      ${w}\n      ${Zr(o)}\n      ${z}\n      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);\n      }\n    }`},Eu=(e,t,r,n,o,i,a,l)=>{let d=t.format===\"NHWC\",p=d?e[0].dims[3]:e[0].dims[1],m=r[0],u=d?r[2]:r[3],h=d?r[1]:r[2],w=d?r[3]:r[1],g=d&&(p%4===0||p%3===0)&&w%4===0,b=d?w:u*h,x=d?u*h:w,_=[8,8,1],$=n<=8?[4,1,1]:[4,4,1],S=[Math.ceil(b/_[0]/$[0]),Math.ceil(x/_[1]/$[1]),Math.ceil(m/_[2]/$[2])];ve(\"verbose\",()=>`[conv2d_mm_webgpu] dispatch = ${S}`);let I=g?d&&p%4!==0?3:4:1,T=_[1]*$[1],A=_[0]*$[0],D=Math.max(_[0]*I,_[1]),z=n%T===0,H=o%A===0,W=i%D===0,X=g?[I,4,4]:[1,1,1],Y=[{type:6,data:n},{type:6,data:o},{type:6,data:i},{type:6,data:[t.pads[0],t.pads[1]]},{type:6,data:t.strides},{type:6,data:t.dilations}];Ge(t,Y),Y.push(...V(e[0].dims,e[1].dims));let pe=[\"rank\",\"rank\"];a&&(Y.push(...V(e[2].dims)),pe.push(\"rank\")),Y.push(...V(r));let ue=le=>{let K=[{name:\"dim_a_outer\",type:\"i32\"},{name:\"dim_b_outer\",type:\"i32\"},{name:\"dim_inner\",type:\"i32\"},{name:\"pad\",type:\"i32\",length:2},{name:\"stride\",type:\"i32\",length:2},{name:\"dilation\",type:\"i32\",length:2}];Le(t,K);let de=g?4:1,re=ge(e[0].dataType),se=`\n      fn setOutputAtIndex(flatIndex : i32, value : ${g?`vec4<${re}>`:re}) {\n        result[flatIndex] = ${g?`vec4<${re}>`:re}(value);\n      }\n      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${g?`vec4<${re}>`:re}) {\n        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));\n        setOutputAtIndex(flatIndex ${g?\"/ 4\":\"\"}, value);\n      }`,Z=E(\"x\",e[0].dataType,e[0].dims.length,I===3?1:I),ne=E(\"w\",e[1].dataType,e[1].dims.length,de),J=[Z,ne],ke=M(\"result\",e[0].dataType,r.length,de);if(a){let R=E(\"bias\",e[2].dataType,e[2].dims.length,de);J.push(R),se+=`\n        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${g?`vec4<${re}>`:re} {\n          return bias[coords.${d?\"w\":\"y\"}${g?\"/ 4\":\"\"}];\n        }`}return`\n        ${Qr(\"uniforms.result_strides\")}\n        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,\n        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,\n        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };\n        ${le.registerUniforms(K).declareVariables(...J,ke)}\n        ${se}\n        ${Cm(d,z,H,W,a,t,X[0],X[1],X[2],re)}\n        ${g?er($,_,re,void 0,!d,D):tr($,_,re,void 0,!d,D,!1,void 0,l)}`};return{name:\"Conv2DMatMul\",shaderCache:{hint:`${t.cacheKey};${I};${g};${z};${H};${W};${T};${A};${D}`,inputDependencies:pe},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:S[0],y:S[1],z:S[2]},programUniforms:Y}),getShaderSource:ue}}});var Tm,Pu,en,Am,Ou,Em,Du,zu,Bu=U(()=>{\"use strict\";Q();dt();ae();ie();lt();Jt();Tm=e=>{let t=1;for(let r=0;r<e.length;r++)t*=e[r];return t},Pu=e=>typeof e==\"number\"?[e,e,e]:e,en=(e,t)=>t<=1?e:e+(e-1)*(t-1),Am=(e,t,r,n=1)=>{let o=en(t,n);return Math.floor((e[0]*(r-1)-r+o)/2)},Ou=(e,t,r,n,o)=>{o==null&&(o=Am(e,t[0],n[0]));let i=[0,0,0,r];for(let a=0;a<3;a++)e[a]+2*o>=t[a]&&(i[a]=Math.trunc((e[a]-t[a]+2*o)/n[a]+1));return i},Em=(e,t,r,n,o,i,a,l,d,p)=>{let m,u,h,w;if(e===\"VALID\"&&(e=0),typeof e==\"number\"){m={top:e,bottom:e,left:e,right:e,front:e,back:e};let g=Ou([t,r,n,1],[l,d,p],1,[o,i,a],e);u=g[0],h=g[1],w=g[2]}else if(Array.isArray(e)){if(!e.every((b,x,_)=>b===_[0]))throw Error(`Unsupported padding parameter: ${e}`);m={top:e[0],bottom:e[1],left:e[2],right:e[3],front:e[4],back:e[5]};let g=Ou([t,r,n,1],[l,d,p],1,[o,i,a],e[0]);u=g[0],h=g[1],w=g[2]}else if(e===\"SAME_UPPER\"){u=Math.ceil(t/o),h=Math.ceil(r/i),w=Math.ceil(n/a);let g=(u-1)*o+l-t,b=(h-1)*i+d-r,x=(w-1)*a+p-n,_=Math.floor(g/2),$=g-_,S=Math.floor(b/2),I=b-S,T=Math.floor(x/2),A=x-T;m={top:S,bottom:I,left:T,right:A,front:_,back:$}}else throw Error(`Unknown padding parameter: ${e}`);return{padInfo:m,outDepth:u,outHeight:h,outWidth:w}},Du=(e,t,r,n,o,i=!1,a=\"channelsLast\")=>{let l,d,p,m,u;if(a===\"channelsLast\")[l,d,p,m,u]=e;else if(a===\"channelsFirst\")[l,u,d,p,m]=e;else throw new Error(`Unknown dataFormat ${a}`);let[h,,w,g,b]=t,[x,_,$]=Pu(r),[S,I,T]=Pu(n),A=en(w,S),D=en(g,I),z=en(b,T),{padInfo:H,outDepth:W,outHeight:X,outWidth:Y}=Em(o,d,p,m,x,_,$,A,D,z),pe=i?h*u:h,ue=[0,0,0,0,0];return a===\"channelsFirst\"?ue=[l,pe,W,X,Y]:a===\"channelsLast\"&&(ue=[l,W,X,Y,pe]),{batchSize:l,dataFormat:a,inDepth:d,inHeight:p,inWidth:m,inChannels:u,outDepth:W,outHeight:X,outWidth:Y,outChannels:pe,padInfo:H,strideDepth:x,strideHeight:_,strideWidth:$,filterDepth:w,filterHeight:g,filterWidth:b,effectiveFilterDepth:A,effectiveFilterHeight:D,effectiveFilterWidth:z,dilationDepth:S,dilationHeight:I,dilationWidth:T,inShape:e,outShape:ue,filterShape:t}},zu=(e,t,r,n,o,i)=>{let a=i===\"channelsLast\",l=a?e[0].dims[3]:e[0].dims[1],d=!1,p=[64,1,1],m={x:r.map(($,S)=>S)},u=[Math.ceil(Tm(m.x.map($=>r[$]))/p[0]),1,1];ve(\"verbose\",()=>`[conv3d_naive_webgpu] dispatch = ${u}`);let h=d?a&&l%4!==0?3:4:1,w=k.size(r),g=[{type:12,data:w},{type:12,data:n},{type:12,data:o},{type:12,data:t.strides},{type:12,data:t.dilations}];Ge(t,g),g.push(...V(e[0].dims,e[1].dims));let b=[\"rank\",\"rank\"],x=e.length===3;x&&(g.push(...V(e[2].dims)),b.push(\"rank\")),g.push(...V(r));let _=$=>{let S=[{name:\"output_size\",type:\"u32\"},{name:\"filter_dims\",type:\"u32\",length:n.length},{name:\"pads\",type:\"u32\",length:o.length},{name:\"strides\",type:\"u32\",length:t.strides.length},{name:\"dilations\",type:\"u32\",length:t.dilations.length}];Le(t,S);let I=d?4:1,T=ge(e[0].dataType),A=E(\"x\",e[0].dataType,e[0].dims.length,h===3?1:h),D=E(\"W\",e[1].dataType,e[1].dims.length,I),z=[A,D],H=M(\"result\",e[0].dataType,r.length,I),W=\"\";if(x){let pe=E(\"bias\",e[2].dataType,e[2].dims.length,I);z.push(pe),W+=`\n        fn getBiasByOutputCoords(coords : array<u32, 5>) -> ${d?`vec4<${T}>`:T} {\n          return bias[${a?G(\"coords\",4,5):G(\"coords\",1,5)}${d?\"/ 4\":\"\"}];\n        }`}let X=Ee(h,T),Y=He(t,X,T);return`\n            ${W}\n            fn getX(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {\n              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);\n              return ${A.getByIndices(\"aIndices\")};\n            }\n            fn getW(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {\n              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);\n              return ${D.getByIndices(\"aIndices\")};\n            }\n          ${$.registerUniforms(S).declareVariables(...z,H)}\n          ${$.mainStart()}\n          ${$.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\")}\n              let coords = ${H.offsetToIndices(\"global_idx\")};\n              let batch = ${G(\"coords\",0,A.rank)};\n              let d2 = ${a?G(\"coords\",A.rank-1,A.rank):G(\"coords\",1,A.rank)};\n              let xFRCCorner = vec3<u32>(${a?G(\"coords\",1,A.rank):G(\"coords\",2,A.rank)},\n              ${a?G(\"coords\",2,A.rank):G(\"coords\",3,A.rank)},\n              ${a?G(\"coords\",3,A.rank):G(\"coords\",4,A.rank)}) * uniforms.strides - uniforms.pads;\n              let xFCorner = xFRCCorner.x;\n              let xRCorner = xFRCCorner.y;\n              let xCCorner = xFRCCorner.z;\n              let xShapeY = ${a?G(\"uniforms.x_shape\",1,A.rank):G(\"uniforms.x_shape\",2,A.rank)};\n              let xShapeZ = ${a?G(\"uniforms.x_shape\",2,A.rank):G(\"uniforms.x_shape\",3,A.rank)};\n              let xShapeW = ${a?G(\"uniforms.x_shape\",3,A.rank):G(\"uniforms.x_shape\",4,A.rank)};\n              let xShapeU = ${a?G(\"uniforms.x_shape\",4,A.rank):G(\"uniforms.x_shape\",1,A.rank)};\n              let inputDepthNearestVec4 = (xShapeU / 4) * 4;\n              let inputDepthVec4Remainder = xShapeU % 4;\n\n              var value = 0.0;\n              for (var wF = 0u; wF < uniforms.filter_dims[0]; wF++) {\n                let xF = xFCorner + wF * uniforms.dilations[0];\n                if (xF < 0 || xF >= xShapeY) {\n                  continue;\n                }\n\n                for (var wR = 0u; wR < uniforms.filter_dims[1]; wR++) {\n                  let xR = xRCorner + wR * uniforms.dilations[1];\n                  if (xR < 0 || xR >= xShapeZ) {\n                    continue;\n                  }\n\n                  for (var wC = 0u; wC < uniforms.filter_dims[2]; wC++) {\n                    let xC = xCCorner + wC * uniforms.dilations[2];\n                    if (xC < 0 || xC >= xShapeW) {\n                      continue;\n                    }\n\n                    for (var d1 = 0u; d1 < inputDepthNearestVec4; d1 += 4) {\n                      ${a?`let xValues = vec4<f32>(\n                               getX(batch, xF, xR, xC, d1),\n                               getX(batch, xF, xR, xC, d1 + 1),\n                               getX(batch, xF, xR, xC, d1 + 2),\n                               getX(batch, xF, xR, xC, d1 + 3));\n                            `:`let xValues = vec4<f32>(\n                               getX(batch, d1, xF, xR, xC),\n                               getX(batch, d1 + 1, xF, xR, xC),\n                               getX(batch, d1 + 2, xF, xR, xC),\n                               getX(batch, d1 + 3, xF, xR, xC));\n                            `}\n                            let wValues = vec4<f32>(\n                              getW(d2, d1, wF, wR, wC),\n                              getW(d2, d1 + 1, wF, wR, wC),\n                              getW(d2, d1 + 2, wF, wR, wC),\n                              getW(d2, d1 + 3, wF, wR, wC));\n                      value += dot(xValues, wValues);\n                    }\n                    if (inputDepthVec4Remainder == 1) {\n                        ${a?`value += getX(batch, xF, xR, xC, inputDepthNearestVec4)\n                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`:`value += getX(batch, inputDepthNearestVec4, xF, xR, xC)\n                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`}\n                    } else if (inputDepthVec4Remainder == 2) {\n                      ${a?`let xValues = vec2<f32>(\n                        getX(batch, xF, xR, xC, inputDepthNearestVec4),\n                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1));\n                      `:`let xValues = vec2<f32>(\n                        getX(batch, inputDepthNearestVec4, xF, xR, xC),\n                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC));\n                    `}\n                    let wValues = vec2<f32>(\n                      getW(d2, inputDepthNearestVec4, wF, wR, wC),\n                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC));\n                      value += dot(xValues, wValues);\n                    } else if (inputDepthVec4Remainder == 3) {\n                      ${a?`let xValues = vec3<f32>(\n                        getX(batch, xF, xR, xC, inputDepthNearestVec4),\n                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),\n                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2));\n                      `:`let xValues = vec3<f32>(\n                        getX(batch, inputDepthNearestVec4, xF, xR, xC),\n                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC),\n                        getX(batch, inputDepthNearestVec4 + 2, xF, xR, xC));\n                    `}\n                    let wValues = vec3<f32>(\n                      getW(d2, inputDepthNearestVec4, wF, wR, wC),\n                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC),\n                      getW(d2, inputDepthNearestVec4 + 2, wF, wR, wC));\n                      value += dot(xValues, wValues);\n                    }\n                  }\n                }\n              }\n              ${x?\"value = value + getBiasByOutputCoords(coords)\":\"\"};\n              ${Y}\n              result[global_idx] = f32(value);\n          }`};return{name:\"Conv3DNaive\",shaderCache:{hint:`${t.cacheKey};${a};${h};${x}`,inputDependencies:b},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:u[0],y:u[1],z:u[2]},programUniforms:g}),getShaderSource:_}}});var lo,Ru,Mu=U(()=>{\"use strict\";Q();ae();ie();co();lt();lo=(e,t,r)=>{let n=e.length>2,o=n?\"value += b[output_channel];\":\"\",i=e[0].dims,a=e[1].dims,l=a[0]/t.group,d=t.format===\"NHWC\",p=tn(i,a,t.dilations,t.pads,t.strides,d),m=k.size(p),u=[{type:12,data:m},{type:12,data:t.dilations},{type:12,data:[t.strides[0],t.strides[1]]},{type:12,data:[t.pads[0],t.pads[1]]},{type:12,data:l}];Ge(t,u),u.push(...V(i,a));let h=[\"rank\",\"rank\"];n&&(u.push(...V(e[2].dims)),h.push(\"rank\")),u.push(...V(p));let w=g=>{let b=M(\"output\",e[0].dataType,p.length),x=ge(b.type.tensor),_=He(t,b.type.value,x),$=E(\"x\",e[0].dataType,i.length),S=E(\"w\",e[1].dataType,a.length),I=[$,S];n&&I.push(E(\"b\",e[2].dataType,e[2].dims.length));let T=[{name:\"output_size\",type:\"u32\"},{name:\"dilations\",type:\"u32\",length:t.dilations.length},{name:\"strides\",type:\"u32\",length:2},{name:\"pads\",type:\"u32\",length:2},{name:\"output_channels_per_group\",type:\"u32\"}];return Le(t,T),`\n  ${g.registerUniforms(T).declareVariables(...I,b)}\n\n  ${g.mainStart()}\n    ${g.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\")}\n\n    let outputIndices = ${b.offsetToIndices(\"global_idx\")};\n    let batch: u32 = outputIndices[0];\n    let output_channel: u32 = outputIndices[${d?3:1}];\n    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${d?1:2}], outputIndices[${d?2:3}]) * uniforms.strides - uniforms.pads;\n    let group_id: u32 = output_channel / uniforms.output_channels_per_group;\n\n    var value: ${b.type.value} = ${b.type.value}(0);\n    for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[1]; wInChannel++) {\n      let input_channel = group_id * uniforms.w_shape[1] + wInChannel;\n      for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[2]; wHeight++) {\n        let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];\n\n        if (xHeight < 0u || xHeight >= uniforms.x_shape[${d?1:2}]) {\n          continue;\n        }\n\n        for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[3]; wWidth++) {\n          let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];\n          if (xWidth < 0u || xWidth >= uniforms.x_shape[${d?2:3}]) {\n            continue;\n          }\n\n          let xVal = ${d?$.get(\"batch\",\"xHeight\",\"xWidth\",\"input_channel\"):$.get(\"batch\",\"input_channel\",\"xHeight\",\"xWidth\")};\n          let wVal = ${S.get(\"output_channel\",\"wInChannel\",\"wHeight\",\"wWidth\")};\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${o}\n    ${_}\n    ${b.setByOffset(\"global_idx\",\"value\")}\n  }`};return{name:\"GroupedConv\",shaderCache:{hint:t.cacheKey,inputDependencies:h},getRunData:()=>({outputs:[{dims:r?r(p):p,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(m/64)},programUniforms:u}),getShaderSource:w}},Ru=(e,t,r)=>{let n=e.length>2,o=$e(r[3]),i=$e(r[2]),a=k.size(r)/o/i,l=[e[0].dims[0],e[0].dims[1],e[0].dims[2],e[0].dims[3]/o],d=[e[1].dims[0],e[1].dims[1],e[1].dims[2],e[1].dims[3]/o],p=[r[0],r[1],r[2],r[3]/o],m=[{type:12,data:a},{type:6,data:[t.strides[0],t.strides[1]]},{type:6,data:[t.pads[0],t.pads[1]]}];Ge(t,m),m.push(...V(l,d,p));let u=(i-1)*t.strides[1]+d[1],h=w=>{let g=M(\"output\",e[0].dataType,p.length,o),b=ge(g.type.tensor),x=He(t,g.type.value,b),_=E(\"x\",e[0].dataType,l.length,o),$=E(\"w\",e[1].dataType,d.length,o),S=[_,$];n&&S.push(E(\"b\",e[2].dataType,e[2].dims,o));let I=n?\"value += b[output_channel];\":\"\",T=[{name:\"output_size\",type:\"u32\"},{name:\"strides\",type:\"i32\",length:2},{name:\"pads\",type:\"i32\",length:2}];return Le(t,T),`\n  ${w.registerUniforms(T).declareVariables(...S,g)}\n  ${w.mainStart()}\n    ${w.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\")}\n    let width0 = uniforms.output_shape[3];\n    let output_channel = global_idx % width0;\n    var index1 = global_idx / width0;\n    let width1 = uniforms.output_shape[2] / ${i}u;\n    let col = (index1 % width1) * ${i}u;\n    index1 = index1 / width1;\n    let row = index1 % uniforms.output_shape[1];\n    let batch = index1 / uniforms.output_shape[1];\n\n    let x_corner = vec2<i32>(i32(row), i32(col)) * uniforms.strides - uniforms.pads;\n\n    var x_vals: array<${_.type.value}, ${u}>;\n    var values: array<${g.type.value}, ${i}>;\n    let input_channel = output_channel;\n    // Use constant instead of uniform can give better performance for w's height/width.\n    for (var w_height: u32 = 0u; w_height < ${d[0]}; w_height++) {\n      let x_height = x_corner.x + i32(w_height);\n      if (x_height >= 0 && u32(x_height) < uniforms.x_shape[1]) {\n        for (var i = 0; i < ${u}; i++) {\n          let x_width = x_corner.y + i;\n          if (x_width >= 0 && u32(x_width) < uniforms.x_shape[2]) {\n            x_vals[i] = ${_.get(\"batch\",\"u32(x_height)\",\"u32(x_width)\",\"input_channel\")};\n          } else {\n            x_vals[i] = ${_.type.value}(0);\n          }\n        }\n        for (var w_width: u32 = 0u; w_width < ${d[1]}; w_width++) {\n          let w_val = ${$.get(\"w_height\",\"w_width\",\"0\",\"output_channel\")};\n          for (var i = 0u; i < ${i}u; i++) {\n            values[i] = fma(x_vals[i * u32(uniforms.strides[1]) + w_width], w_val, values[i]);\n          }\n        }\n      }\n    }\n\n    for (var i = 0u; i < ${i}u; i++) {\n      var value = values[i];\n      ${I}\n      ${x}\n      ${g.set(\"batch\",\"row\",\"col + i\",\"output_channel\",\"value\")};\n    }\n  }`};return{name:\"GroupedConv-Vectorize\",shaderCache:{hint:`${t.cacheKey};${o};${i};${u};${d[0]};${d[1]}`,inputDependencies:n?[\"rank\",\"rank\",\"type\"]:[\"rank\",\"rank\"]},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:m}),getShaderSource:h}}});var po,km,Uu,mo=U(()=>{\"use strict\";Q();ae();rr();ie();lt();po=(e,t,r,n,o=!1)=>{let i=e[0].dims,a=e[1].dims,l=i[i.length-2],d=a[a.length-1],p=i[i.length-1],m=$e(d),u=$e(p),h=$e(l),w=k.size(r)/m/h,g=e.length>2,b=n?n.slice(0,-2):r.slice(0,-2),_=[k.size(b),l,d],$=[{type:12,data:w},{type:12,data:l},{type:12,data:d},{type:12,data:p}];Ge(t,$),$.push(...V(b,i,a)),g&&$.push(...V(e[2].dims)),$.push(...V(_));let S=I=>{let T=Lr(\"batch_dims\",e[0].dataType,b.length),A=E(\"a\",e[0].dataType,i.length,u),D=E(\"b\",e[1].dataType,a.length,m),z=M(\"output\",e[0].dataType,_.length,m),H=ge(z.type.tensor),W=He(t,z.type.value,H),X=[A,D],Y=\"\";if(g){let Z=o?m:1;X.push(E(\"bias\",e[2].dataType,e[2].dims.length,Z)),Y=`${o?`value += bias[col / ${Z}];`:`value += ${z.type.value}(bias[row + i]);`}`}let pe=i.slice(0,-2),ue=a.slice(0,-2),le=Nt(pe,b),K=Nt(ue,b),de=[{name:\"output_size\",type:\"u32\"},{name:\"M\",type:\"u32\"},{name:\"N\",type:\"u32\"},{name:\"K\",type:\"u32\"}];Le(t,de);let re=(Z,ne)=>{let J=Z.rank,ke=Z.name;if(J===2)return`var ${ke}_indices = ${Z.type.indices}(0u, 0u);`;let R=T.rank,F=`var ${ke}_indices: ${Z.type.indices};`;for(let ce=J-2-1,Re=R-1;ce>=0;ce--,Re--)F+=`\n${ke}_indices[${ce}] = ${R>1?`batch_indices[${Re}]`:\"batch_indices\"};`;return ne.forEach(ce=>{F+=`\n${ke}_indices[${ce}] = 0;`}),F+=`${ke}_indices[${J-2}] = 0u;\n                     ${ke}_indices[${J-1}] = 0u;`,F},se=()=>{let Z=`var a_data: ${A.type.value};`;for(let ne=0;ne<u;ne++)Z+=`\n              let b_data${ne} = b[(b_offset + (k + ${ne}) * uniforms.N + col) / ${m}];`;for(let ne=0;ne<h;ne++){Z+=`a_data = a[(a_offset + (row + ${ne}) * uniforms.K + k) / ${u}];`;for(let J=0;J<u;J++)Z+=`\n            values[${ne}] = fma(${D.type.value}(a_data${u===1?\"\":`[${J}]`}), b_data${J}, values[${ne}]);\n`}return Z};return`\n  ${I.registerUniforms(de).registerInternalVariables(T).declareVariables(...X,z)}\n  ${I.mainStart()}\n    ${I.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\")}\n    let col = (global_idx % (uniforms.N / ${m})) * ${m};\n    var index1 = global_idx / (uniforms.N / ${m});\n    let stride1 = uniforms.M / ${h};\n    let row = (index1 % stride1) * ${h};\n    let batch = index1 / stride1;\n\n    ${r.length===2?\"\":`let batch_indices = ${T.offsetToIndices(\"batch\")};`}\n    ${re(A,le)}\n    let a_offset = ${A.indicesToOffset(\"a_indices\")};\n    ${re(D,K)}\n    let b_offset = ${D.indicesToOffset(\"b_indices\")};\n    var values: array<${z.type.value}, ${h}>;\n    for (var k: u32 = 0u; k < uniforms.K; k = k + ${u}) {\n      ${se()}\n    }\n    for (var i = 0u; i < ${h}u; i++) {\n      var value = values[i];\n      ${Y}\n      ${W}\n      let cur_indices = ${z.type.indices}(batch, row + i, col);\n      let offset = ${z.indicesToOffset(\"cur_indices\")};\n      ${z.setByOffset(`offset / ${m}`,\"value\")};\n    }\n  }\n  `};return{name:\"MatMulNaive\",shaderCache:{hint:`${t.activation};${m};${u};${h};${o}`,inputDependencies:g?[\"rank\",\"rank\",\"rank\"]:[\"rank\",\"rank\"]},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(w/64)},programUniforms:$}),getShaderSource:S}},km=e=>{if(!e||e.length!==2)throw new Error(\"MatMul requires 2 inputs.\");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error(\"shared dimension does not match.\")},Uu=e=>{km(e.inputs);let t=tt.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!t)throw new Error(\"Can't use matmul on the given tensors\");let r=t[t.length-1],n=e.inputs[0].dims[e.inputs[0].dims.length-1];r<8&&n<8?e.compute(po(e.inputs,{activation:\"\"},t)):e.compute(Jr(e.inputs,{activation:\"\"},t))}});var tn,fo,Pm,ho,go,Om,Dm,zm,yo,co=U(()=>{\"use strict\";ae();ku();Bu();rr();Mu();lt();mo();Et();tn=(e,t,r,n,o,i)=>{let a=e[0],l=e.slice(i?1:2,i?3:4),d=l.length,p=t[0],u=t.slice(2).map((g,b)=>g+(g-1)*(r[b]-1)),w=l.map((g,b)=>g+n[b]+n[b+d]).map((g,b)=>Math.floor((g-u[b]+o[b])/o[b]));return w.splice(0,0,a),w.splice(i?3:1,0,p),w},fo=[2,3,1,0],Pm=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error(\"Conv requires 2 or 3 inputs\");if(e[0].dims.length>5)throw new Error(\"greater than 5D is not supported\");if(e[0].dims.length!==e[1].dims.length)throw new Error(\"filter does not have same dimension as input\");let r=e[0].dims[t.format===\"NHWC\"?e[0].dims.length-1:1],n=e[1].dims[1]*t.group;if(r!==n)throw new Error(\"FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error(\"invalid bias\");let o=e[0].dims.length-2;if(t.dilations.length!==o)throw new Error(`dilations should be ${o}D`);if(t.strides.length!==o)throw new Error(`strides should be ${o}D`);if(t.pads.length!==o*2)throw new Error(`pads should be ${o*2}D`);if(t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error(\"invalid kernel shape\")},ho=(e,t)=>{let r=e.kernelShape.slice();for(let i=2;i<t[1].dims.length;++i)r[i-2]===0&&(r[i-2]=t[1].dims[i]);let n=e.pads.slice();Ct.adjustPadsBasedOnAutoPad(t[0].dims,e.strides,e.dilations,r,n,e.format===\"NHWC\",e.autoPad);let o=Object.assign({},e);return Object.assign(o,{kernelShape:r,pads:n}),o},go=e=>{let t=Xr(e),r=e.format,n=[\"NOTSET\",\"VALID\",\"SAME_UPPER\",\"SAME_LOWER\"][e.auto_pad],o=e.dilations,i=e.group,a=e.kernel_shape,l=e.pads,d=e.strides,p=e.w_is_const();return{autoPad:n,format:r,dilations:o,group:i,kernelShape:a,pads:l,strides:d,wIsConst:p,...t,cacheKey:`${e.format};${t.activation};`}},Om=(e,t,r)=>{let n=ho(r,t),o=r.format===\"NHWC\";if(r.group!==1){if(!e.adapterInfo.isArchitecture(\"ampere\")&&o&&t[1].dims[0]===r.group&&t[1].dims[1]===1&&r.dilations[0]===1&&r.dilations[1]===1){let D=tn(t[0].dims,t[1].dims,r.dilations,n.pads,r.strides,o),z=e.kernelCustomData.wT??e.compute(Ue(t[1],fo),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=z);let H=[t[0],z];t.length===3&&H.push(t[2]),e.compute(Ru(H,n,D),{inputs:H})}else e.compute(lo(t,n));return}let i=t.length===3,a=t[0].dims[o?1:2],l=t[0].dims[o?2:3],d=t[0].dims[o?3:1],p=t[1].dims[2],m=t[1].dims[3],u=tn(t[0].dims,t[1].dims,r.dilations,n.pads,r.strides,o),h=u[o?1:2],w=u[o?2:3],g=u[o?3:1],b=o&&p===a&&m===l&&r.pads[0]===0&&r.pads[1]===0;if(b||p===1&&m===1&&r.dilations[0]===1&&r.dilations[1]===1&&r.strides[0]===1&&r.strides[1]===1&&r.pads[0]===0&&r.pads[1]===0){let A=u[0],D,z,H,W=[];if(o){let pe=e.kernelCustomData.wT??e.compute(Ue(t[1],fo),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];if(r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=pe),b){let ue=a*l*d;D=t[0].reshape([1,A,ue]),z=pe.reshape([1,ue,g]),H=[1,A,g]}else D=t[0].reshape([A,a*l,d]),z=pe.reshape([1,d,g]),H=[A,h*w,g];W.push(D),W.push(z)}else D=t[0].reshape([A,d,a*l]),z=t[1].reshape([1,g,d]),H=[A,g,h*w],W.push(z),W.push(D);i&&W.push(t[2]);let X=H[2],Y=W[0].dims[W[0].dims.length-1];X<8&&Y<8?e.compute(po(W,n,u,H,o),{inputs:W}):e.compute(Jr(W,n,u,H,o),{inputs:W});return}let x=!0,_=e.kernelCustomData.wT??e.compute(Ue(t[1],fo),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=_);let $=[t[0],_];i&&$.push(t[2]);let S=o?h*w:g,I=o?g:h*w,T=p*m*d;e.compute(Eu($,n,u,S,I,T,i,x),{inputs:$})},Dm=(e,t)=>{let r=t.format===\"NHWC\",n=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&n.push(e.inputs[2]);let o=[0,t.pads[0],0,t.pads[1]],i=[1].concat(t.strides),a=[1].concat(t.dilations),l=[1].concat(t.kernelShape),d=ho({...t,pads:o,strides:i,dilations:a,kernelShape:l},n);e.compute(lo(n,d,p=>r?[p[0],p[2],p[3]]:[]))},zm=(e,t,r)=>{let n=r.format===\"NHWC\"?\"channelsLast\":\"channelsFirst\",o=ho(r,t),i=r.autoPad===\"NOTSET\"?r.pads:r.autoPad,a=Du(t[0].dims,t[1].dims,r.strides,r.dilations,i,!1,n);e.compute(zu(t,o,a.outShape,[a.filterDepth,a.filterHeight,a.filterWidth],[a.padInfo.front,a.padInfo.top,a.padInfo.left],n))},yo=(e,t)=>{Pm(e.inputs,t),e.inputs[0].dims.length===3?Dm(e,t):e.inputs[0].dims.length===5?zm(e,e.inputs,t):Om(e,e.inputs,t)}});var Bm,Vu,Nu=U(()=>{\"use strict\";Q();dt();ie();lt();Jt();uo();rr();Bm=(e,t=!1,r,n,o=4)=>{let i=_=>{switch(_){case 1:return\"return w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];\";case 4:return`\n            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);\n            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);\n            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);\n            let v0 = w[getIndexFromCoords4D(coord, vec4<i32>(uniforms.w_shape))];\n            let v1 = w[getIndexFromCoords4D(coord1, vec4<i32>(uniforms.w_shape))];\n            let v2 = w[getIndexFromCoords4D(coord2, vec4<i32>(uniforms.w_shape))];\n            let v3 = w[getIndexFromCoords4D(coord3, vec4<i32>(uniforms.w_shape))];\n            return ${n}(v0, v1, v2, v3);\n            `;default:throw new Error(`innerElementSize ${_} is not supported.`)}},a=e?`\n      let coord = vec4<i32>(batch, iXR, iXC, xCh);\n      `:`\n      let coord = vec4<i32>(batch, xCh, iXR, iXC);\n      `,l=e?`\n    let coords = vec4<i32>(\n      batch,\n      row / outWidth,\n      row % outWidth,\n      col);\n    `:`\n    let coords = vec4<i32>(\n      batch,\n      row,\n      col / outWidth,\n      col % outWidth);\n    `,d=e?\"i32(uniforms.x_shape[1])\":\"i32(uniforms.x_shape[2])\",p=e?\"i32(uniforms.x_shape[2])\":\"i32(uniforms.x_shape[3])\",m=e?\"row\":\"col\",u=e?\"col\":\"row\",h=`\n      let inChannels = ${e?\"i32(uniforms.x_shape[3])\":\"i32(uniforms.x_shape[1])\"};\n      let outWidth = ${e?\"i32(uniforms.result_shape[2])\":\"i32(uniforms.result_shape[3])\"};\n      let outRow = ${m} / outWidth;\n      let outCol = ${m} % outWidth;\n\n      let WRow = ${u} / (uniforms.filter_dims[1] * inChannels);\n      let WCol = ${u} / inChannels % uniforms.filter_dims[1];\n      let xR = f32(outRow - uniforms.pads[0] + uniforms.dilations[0] * WRow) / f32(uniforms.strides[0]);\n      let xC = f32(outCol - uniforms.pads[1] + uniforms.dilations[1] * WCol) / f32(uniforms.strides[1]);\n      if (xR < 0.0 || xR >= f32(${d}) || fract(xR) > 0.0) {\n        return ${n}(0.0);\n      }\n      if (xC < 0.0 || xC >= f32(${p}) || fract(xC) > 0.0) {\n        return ${n}(0.0);\n      }\n      let iXR = i32(xR);\n      let iXC = i32(xC);\n      let xCh = ${u} % inChannels;\n      ${a}\n      return x[getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape))/${o}];`,w=e?`\n      let col = colIn * ${o};\n      if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {\n        ${h}\n      }\n      return ${n}(0.0);`:`\n      let col = colIn * ${o};\n      if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {\n        ${h}\n      }\n      return ${n}(0.0);`,g=`\n      let col = colIn * ${o};\n      let inChannels = ${e?\"i32(uniforms.x_shape[3])\":\"i32(uniforms.x_shape[1])\"};\n      let coordX = uniforms.filter_dims[0] - 1 - row / (uniforms.filter_dims[1] * inChannels);\n      let coordY = uniforms.filter_dims[1] - 1 - (row / inChannels) % uniforms.filter_dims[1];\n      if (${e?\"row < uniforms.dim_inner && col < uniforms.dim_b_outer\":\"row < uniforms.dim_inner && col < uniforms.dim_a_outer\"}  && coordX >= 0 && coordY >= 0) {\n        let rowInner = row % inChannels;\n        let coord = vec4<i32>(coordX, coordY, col, rowInner);\n        ${i(o)}\n      }\n      return ${n}(0.0);\n      `,b=He(r,n);return`\n  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${n} {\n    ${e?w:g}\n  }\n\n  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${n} {\n    ${e?g:w}\n  }\n\n  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${n}) {\n    let col = colIn * ${o};\n    if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {\n      var value = valueInput;\n      let outWidth = ${e?\"i32(uniforms.result_shape[2])\":\"i32(uniforms.result_shape[3])\"};\n      ${l}\n      ${Zr(t)}\n      ${b}\n      result[getIndexFromCoords4D(coords, vec4<i32>(uniforms.result_shape))/${o}] = value;\n    }\n  }`},Vu=(e,t,r,n,o,i,a,l)=>{let d=t.format===\"NHWC\",p=d?e[0].dims[3]:e[0].dims[1],m=r[0],u=d?r[2]:r[3],h=d?r[1]:r[2],w=d?r[3]:r[1],g=d&&p%4===0&&p%3&&w%4===0,b=d?w:u*h,x=d?u*h:w,_=[8,8,1],$=n<=8?[4,1,1]:[4,4,1],S=[Math.ceil(b/_[0]/$[0]),Math.ceil(x/_[1]/$[1]),Math.ceil(m/_[2]/$[2])];ve(\"verbose\",()=>`[conv_backprop_mm_webgpu] dispatch = ${S}`);let I=g?4:1,T=Math.max(_[0]*I,_[1]),A=g?4:1,D=[t.kernelShape[d?1:2],t.kernelShape[d?2:3]],z=[D[0]+(t.dilations[0]<=1?0:(D[0]-1)*(t.dilations[0]-1)),D[1]+(t.dilations[1]<=1?0:(D[1]-1)*(t.dilations[1]-1))],H=[z[0]-1-Math.floor((t.pads[0]+t.pads[2])/2),z[1]-1-Math.floor((t.pads[1]+t.pads[3])/2)],W=[{type:6,data:n},{type:6,data:o},{type:6,data:i},{type:6,data:t.strides},{type:6,data:t.dilations},{type:6,data:D},{type:6,data:H}];Ge(t,W),W.push(...V(e[0].dims,e[1].dims));let X=[\"rank\",\"rank\"];a&&(W.push(...V(e[2].dims)),X.push(\"rank\")),W.push(...V(r));let Y=pe=>{let ue=E(\"x\",e[0].dataType,e[0].dims.length,A),le=E(\"w\",e[1].dataType,e[1].dims.length,1),K=M(\"result\",e[0].dataType,r.length,A),de=[ue,le],re=\"\";if(a){let ne=E(\"bias\",e[2].dataType,e[2].dims.length,A);de.push(ne),re+=`\n          fn getBiasByOutputCoords(coords : vec4<i32>) -> ${ne.type.value} {\n            return bias[coords.${d?\"w\":\"y\"}${g?\"/ 4\":\"\"}];\n          }`}let se=[{name:\"dim_a_outer\",type:\"i32\"},{name:\"dim_b_outer\",type:\"i32\"},{name:\"dim_inner\",type:\"i32\"},{name:\"strides\",type:\"i32\",length:2},{name:\"dilations\",type:\"i32\",length:2},{name:\"filter_dims\",type:\"i32\",length:D.length},{name:\"pads\",type:\"i32\",length:H.length}];Le(t,se);let Z=ge(e[0].dataType,1);if(Z!==\"f16\"&&Z!==\"f32\")throw new Error(`elemType ${Z} is not supported.`);return`\n        ${Qr(\"uniforms.result_strides\")}\n        ${pe.registerUniforms(se).declareVariables(...de,K)};\n        ${re}\n        ${Bm(d,a,t,ue.type.value,I)}\n        ${g?er($,_,Z,void 0,!d,T):tr($,_,Z,void 0,!d,T,!1,void 0,l)}`};return{name:\"Conv2DTransposeMatMul\",shaderCache:{hint:`${t.cacheKey};${$};${_};${g}`,inputDependencies:X},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:S[0],y:S[1],z:S[2]},programUniforms:W}),getShaderSource:Y}}});var Rm,bo,Wu=U(()=>{\"use strict\";Q();dt();ae();ie();Rm=(e,t,r,n,o,i=!1,a,l,d=!1)=>{let p=d?1:2,m=d?2:3,u=d?3:1,h=i?2:1,w=`\n  fn setOutputAtIndex(flatIndex : u32, value : ${i?`vec4<${a}>`:a}) {\n    result[flatIndex] = ${i?`vec4<${a}>`:a}(value);\n  }`;n&&(w+=`\n    fn getBiasByOutputCoords(coords : vec4<u32>) -> ${i?`vec4<${a}>`:a} {\n      return bias[coords.${d?\"w\":\"y\"}${i?\"/ 4\":\"\"}];\n    }`);let g=i?4:1,b=E(\"W\",t[1].dataType,t[1].dims.length,g),x=E(\"Dy\",t[0].dataType,t[0].dims.length,g),_=[x,b];n&&_.push(E(\"bias\",t[2].dataType,[r[u]].length,g));let $=M(\"result\",t[0].dataType,r.length,g),S=`{\n        let batch: u32 = ${o?\"global_id.z\":\"workgroup_id.z\"} / uniforms.result_shape[1];\n        let r = ${o?\"global_id.z\":\"workgroup_id.z\"} % uniforms.result_shape[1];\n        let c = ${o?\"global_id.y\":\"workgroup_id.y\"} * ${h};\n        let d1: u32 = ${o?\"global_id.x\":\"workgroup_id.x\"} * 4;\n\n        let dyCorner = vec2<i32>(i32(r), i32(c)) - vec2<i32>(uniforms.pads);\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        var dotProd: array<vec4<${a}>, ${h}>;\n        for (var i = 0; i < ${h}; i++) {\n          dotProd[i] = vec4<${a}>(0.0);\n        }\n        for (var wR: u32 = 0; wR < uniforms.filter_dims[0]; wR = wR + 1) {\n          var dyR = (${a}(dyCorner.x) + ${a}(wR)) / ${a}(uniforms.strides.x);\n          let wRPerm = uniforms.filter_dims[0] - 1 - wR;\n          if (dyR < 0.0 || dyR >= ${a}(uniforms.Dy_shape[1]) ||\n              fract(dyR) > 0.0 || wRPerm < 0) {\n            continue;\n          }\n          let idyR: u32 = u32(dyR);\n\n          for (var wC: u32 = 0; wC < uniforms.filter_dims[1]; wC = wC + 1) {\n            let dyC = (${a}(dyCorner.y) + ${a}(wC)) / ${a}(uniforms.strides.y);\n            let dyC2 = (${a}(dyCorner.y) + 1.0 + ${a}(wC)) / ${a}(uniforms.strides.y);\n            let wCPerm = uniforms.filter_dims[1] - 1 - wC;\n            if (wCPerm < 0) {\n              continue;\n            }\n            var bDyCVal = true;\n            var bDyCVal2 = true;\n            if (dyC < 0.0 || dyC >= ${a}(uniforms.Dy_shape[2]) ||\n                fract(dyC) > 0.0) {\n              bDyCVal = false;\n            }\n            if (dyC2 < 0.0 || dyC2 >= ${a}(uniforms.Dy_shape[2]) ||\n                fract(dyC2) > 0.0) {\n              bDyCVal2 = false;\n            }\n\n            let idyC: u32 = u32(dyC);\n            let idyC2: u32 = u32(dyC2);\n            if (bDyCVal && bDyCVal2) {\n              let d2Length = uniforms.Dy_shape[3];\n              for (var d2 :u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${b.get(\"u32(wRPerm)\",\"u32(wCPerm)\",\"d1\",\"d2\")};\n                let wValue1 = ${b.get(\"u32(wRPerm)\",\"u32(wCPerm)\",\"d1 + 1\",\"d2\")};\n                let wValue2 = ${b.get(\"u32(wRPerm)\",\"u32(wCPerm)\",\"d1 + 2\",\"d2\")};\n                let wValue3 = ${b.get(\"u32(wRPerm)\",\"u32(wCPerm)\",\"d1 + 3\",\"d2\")};\n\n                var xValue = ${x.get(\"batch\",\"idyR\",\"idyC\",\"d2\")};\n                let tmpval = vec4<${a}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n\n                xValue =  ${x.get(\"batch\",\"idyR\",\"idyC2\",\"d2\")};\n\n                dotProd[1] = dotProd[1] + vec4<${a}>(dot(xValue, wValue0),\n                                                    dot(xValue, wValue1),\n                                                    dot(xValue, wValue2),\n                                                    dot(xValue, wValue3));\n              }\n            } else if (bDyCVal) {\n              let d2Length = uniforms.Dy_shape[${u}];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${b.get(\"u32(wRPerm)\",\"u32(wCPerm)\",\"d1\",\"d2\")};\n                let wValue1 = ${b.get(\"u32(wRPerm)\",\"u32(wCPerm)\",\"d1 + 1\",\"d2\")};\n                let wValue2 = ${b.get(\"u32(wRPerm)\",\"u32(wCPerm)\",\"d1 + 2\",\"d2\")};\n                let wValue3 = ${b.get(\"u32(wRPerm)\",\"u32(wCPerm)\",\"d1 + 3\",\"d2\")};\n\n                var xValue = ${x.get(\"batch\",\"idyR\",\"idyC\",\"d2\")};\n                let tmpval = vec4<${a}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[0] = dotProd[0] + tmpval;\n              }\n            } else if (bDyCVal2) {\n              let d2Length = uniforms.Dy_shape[3];\n              for (var d2: u32 = 0; d2 < d2Length; d2 = d2 + 4) {\n                let wValue0 = ${b.get(\"u32(wRPerm)\",\"u32(wCPerm)\",\"d1\",\"d2\")};\n                let wValue1 = ${b.get(\"u32(wRPerm)\",\"u32(wCPerm)\",\"d1 + 1\",\"d2\")};\n                let wValue2 = ${b.get(\"u32(wRPerm)\",\"u32(wCPerm)\",\"d1 + 2\",\"d2\")};\n                let wValue3 = ${b.get(\"u32(wRPerm)\",\"u32(wCPerm)\",\"d1 + 3\",\"d2\")};\n\n                var xValue = ${x.get(\"batch\",\"idyR\",\"idyC2\",\"d2\")};\n                let tmpval = vec4<${a}>(dot(xValue, wValue0),\n                                      dot(xValue, wValue1),\n                                      dot(xValue, wValue2),\n                                      dot(xValue, wValue3));\n                dotProd[1] = dotProd[1] + tmpval;\n              }\n            }\n          }\n        }\n\n        for (var i: u32 = 0; i < ${h}; i = i + 1) {\n          let value = dotProd[i] + ${n?\"bias[c+i]\":`vec4<${a}>(0.0)`};\n          ${$.set(\"batch\",\"r\",\"c + i\",\"d1\",\"value\")};\n        }\n      }`,I=`\n          let outputIndices = ${$.offsetToIndices(\"global_idx\")};\n          let batch = ${$.indicesGet(\"outputIndices\",0)};\n          let d1 = ${$.indicesGet(\"outputIndices\",u)};\n          let r = ${$.indicesGet(\"outputIndices\",p)};\n          let c = ${$.indicesGet(\"outputIndices\",m)};\n          let dyCorner = vec2<i32>(i32(r), i32(c)) - uniforms.pads;\n          let dyRCorner = dyCorner.x;\n          let dyCCorner = dyCorner.y;\n          let groupId = d1 / uniforms.output_channels_per_group;\n          let wOutChannel = d1 - groupId * uniforms.output_channels_per_group;\n          // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n          // ? = to be determined. : = across all values in that axis.\n          var dotProd = ${a}(0.0);\n          for (var wR: u32 = 0; wR < uniforms.effective_filter_dims.x; wR = wR + 1) {\n            if (wR % uniforms.dilations.x != 0) {\n              continue;\n            }\n            let dyR = (${a}(dyRCorner) + ${a}(wR)) / ${a}(uniforms.strides[0]);\n            let wRPerm = uniforms.filter_dims.x - 1 - wR / uniforms.dilations.x;\n            if (dyR < 0.0 || dyR >= ${a}(uniforms.Dy_shape[${p}]) || fract(dyR) > 0.0 ||\n                wRPerm < 0) {\n              continue;\n            }\n            let idyR: u32 = u32(dyR);\n\n            for (var wC: u32 = 0; wC < uniforms.effective_filter_dims.y; wC = wC + 1) {\n              if (wC % uniforms.dilations.y != 0) {\n                continue;\n              }\n              let dyC = (${a}(dyCCorner) + ${a}(wC)) / ${a}(uniforms.strides.y);\n              let wCPerm = uniforms.filter_dims.y - 1 - wC / uniforms.dilations.y;\n              if (dyC < 0.0 || dyC >= ${a}(uniforms.Dy_shape[${m}]) ||\n                  fract(dyC) > 0.0 || wCPerm < 0) {\n                continue;\n              }\n              let idyC: u32 = u32(dyC);\n              var inputChannel = groupId * uniforms.input_channels_per_group;\n              for (var d2: u32 = 0; d2 < uniforms.input_channels_per_group; d2 = d2 + 1) {\n                let xValue = ${d?x.get(\"batch\",\"idyR\",\"idyC\",\"inputChannel\"):x.get(\"batch\",\"inputChannel\",\"idyR\",\"idyC\")};\n                let wValue = ${b.get(\"inputChannel\",\"wOutChannel\",\"u32(wRPerm)\",\"u32(wCPerm)\")};\n                dotProd = dotProd + xValue * wValue;\n                inputChannel = inputChannel + 1;\n              }\n            }\n          }\n          let value = dotProd + ${n?\"bias[d1]\":`${a}(0.0)`};\n          ${$.setByOffset(\"global_idx\",\"value\")};\n        `;return`\n  ${e.registerUniforms(l).declareVariables(..._,$)}\n  ${w}\n\n    ${e.mainStart()}\n    ${e.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\")};\n  ${i?S:I}}`},bo=(e,t,r)=>{let n=e.length>2,o=t.outputShape,i=k.size(o),a=[Math.ceil(i/64),1,1];ve(\"verbose\",()=>`[conv2d_backprop_webgpu] dispatch = ${a}`);let l=t.format===\"NHWC\",d=[\"rank\",\"rank\"],p=[t.strides[0],t.strides[1]],m=[t.kernelShape[l?1:2],t.kernelShape[l?2:3]],u=[t.dilations[0],t.dilations[1]],h=[m[0]+(t.dilations[0]<=1?0:(t.kernelShape[l?1:2]-1)*(t.dilations[0]-1)),m[1]+(t.dilations[1]<=1?0:(t.kernelShape[l?2:3]-1)*(t.dilations[1]-1))],w=[h[0]-1-Math.floor((t.pads[0]+t.pads[2])/2),h[1]-1-Math.floor(t.pads[1]+t.pads[3])/2],g=!1,b=t.group,x=e[1].dims,_=x[0]/b,$=x[1],S=[{type:12,data:i},{type:12,data:p},{type:12,data:m},{type:12,data:u},{type:12,data:h},{type:6,data:w},{type:12,data:_},{type:12,data:$},...V(e[0].dims,e[1].dims)];n&&(S.push(...V(e[2].dims)),d.push(\"rank\")),S.push(...V(o));let I=a[1]===1&&a[2]===1,T=A=>{let D=[{name:\"output_size\",type:\"u32\"},{name:\"strides\",type:\"u32\",length:p.length},{name:\"filter_dims\",type:\"u32\",length:m.length},{name:\"dilations\",type:\"u32\",length:m.length},{name:\"effective_filter_dims\",type:\"u32\",length:h.length},{name:\"pads\",type:\"i32\",length:w.length},{name:\"input_channels_per_group\",type:\"u32\"},{name:\"output_channels_per_group\",type:\"u32\"}],z=ge(e[0].dataType);return`${Rm(A,e,o,n,I,g,z,D,l)}`};return{name:\"ConvTranspose2D\",shaderCache:{hint:`${t.cacheKey};`,inputDependencies:d},getRunData:()=>({dispatchGroup:{x:a[0],y:a[1],z:a[2]},outputs:[{dims:r?r(o):o,dataType:e[0].dataType}],programUniforms:S}),getShaderSource:T}}});var Mm,Um,Vm,Hu,Gu,Nm,Wm,Hm,Gm,Lu,Fu=U(()=>{\"use strict\";Nu();Wu();lt();Et();Mm=(e,t,r,n,o,i)=>(e-1)*t+r+(n-1)*o+1-i,Um=(e,t,r,n,o)=>{let i=Math.floor(e/2);t===\"SAME_UPPER\"?(r[n]=i,r[o]=e-i):t===\"SAME_LOWER\"&&(r[n]=e-i,r[o]=i)},Vm=(e,t,r,n,o,i,a,l,d,p)=>{let m=e.length-2,u=p.length===0;if(d.length===0)for(let g=0;g<m;++g)d.push(0);let h=e[0],w=t[l?3:1]*o;for(let g=0,b=e.length-m-(l?1:0);g<m;++g,++b){let x=e[b],_=u?x*a[g]:p[g],$=Mm(x,a[g],i[g],t[b],r[g],_);Um($,n,i,g,g+m),u&&p.push(a[g]*(x-1)+d[g]+(t[b]-1)*r[g]+1-i[g]-i[g+m])}p.splice(0,0,h),p.splice(l?3:1,0,w)},Hu=(e,t)=>{let r=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((u,h)=>u*h,1)===0){r.length=0;for(let u=2;u<t[1].dims.length;++u)r.push(t[1].dims[u])}let n=e.format===\"NHWC\";r.splice(0,0,t[1].dims[0]),r.splice(n?3:1,0,t[1].dims[1]);let o=e.pads.slice(),i=e.outputShape.slice(),a=e.outputPadding.slice(),l=t[0].dims,d=e.dilations.slice();if(d.reduce((u,h)=>u+h,0)===0){let u=t[0].dims.length-2;d=new Array(u).fill(1)}let p=e.strides.slice();if(p.reduce((u,h)=>u+h,0)===0){let u=t[0].dims.length-2;p=new Array(u).fill(1)}Vm(l,r,d,e.autoPad,e.group,o,p,n,a,i);let m=Object.assign({},e);return Object.assign(m,{kernelShape:r,pads:o,outputPadding:a,outputShape:i,dilations:d,strides:p}),m},Gu=e=>{let t=Xr(e),r=e.format,n=[\"NOTSET\",\"VALID\",\"SAME_UPPER\",\"SAME_LOWER\"][typeof e.autoPad>\"u\"?0:e.autoPad],o=e.dilations,i=e.group,a=e.kernelShape,l=e.pads,d=e.strides,p=e.wIsConst(),m=e.outputPadding,u=e.outputShape;return{autoPad:n,format:r,dilations:o,group:i,kernelShape:a,outputPadding:m,outputShape:u,pads:l,strides:d,wIsConst:p,...t,cacheKey:`${e.format};${t.activation};`}},Nm=(e,t)=>{if(!e||e.length!==2&&e.length!==3)throw new Error(\"Conv requires 2 or 3 inputs\");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error(\"currently only support 2-dimensional conv\");if(e[0].dims.length!==e[1].dims.length)throw new Error(\"filter does not have same dimension as input\");let r=e[0].dims[t.format===\"NHWC\"?e[0].dims.length-1:1],n=e[1].dims[0];if(r!==n)throw new Error(\"FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\");let o=e[1].dims[1]*t.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==o))throw new Error(\"invalid bias\");let i=e[0].dims.length-2;if(t.dilations.reduce((m,u)=>m+u,0)>0&&t.dilations.length!==i)throw new Error(`dilations should be ${i}D`);if(t.strides.reduce((m,u)=>m+u,0)>0&&t.strides.length!==i)throw new Error(`strides should be ${i}D`);if(t.pads.reduce((m,u)=>m+u,0)>0&&t.pads.length!==i*2)throw new Error(`pads should be ${i*2}D`);if(t.outputPadding.length!==i&&t.outputPadding.length!==0)throw new Error(`output_padding should be ${i}D`);if(t.kernelShape.reduce((m,u)=>m+u,0)>0&&t.kernelShape.length!==0&&t.kernelShape.length!==e[1].dims.length-2)throw new Error(\"invalid kernel shape\");if(t.outputShape.length!==0&&t.outputShape.length!==e[0].dims.length-2)throw new Error(\"invalid output shape\")},Wm=[2,3,1,0],Hm=(e,t,r)=>{let n=Hu(r,t),o=r.format===\"NHWC\",i=n.outputShape,a=i[o?3:1],l=t[0].dims[o?3:1];if(n.group!==1||a===1&&l===1){e.compute(bo(t,n));return}let d=i[o?1:2],p=i[o?2:3],m=t[1].dims[2],u=t[1].dims[3],h=o?d*p:a,w=o?a:d*p,g=m*u*l,b=!0,x=e.kernelCustomData.wT??e.compute(Ue(t[1],Wm),{inputs:[1],outputs:[r.wIsConst?-2:-1]})[0];r.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=x);let _=[t[0],x],$=t.length===3;$&&(!o&&t[2].dims.length===1?_.push(t[2].reshape([t[2].dims[0],1,1])):_.push(t[2])),e.compute(Vu(_,n,i,h,w,g,$,b),{inputs:_})},Gm=(e,t)=>{let r=t.format===\"NHWC\",n=[e.inputs[0].reshape(r?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&n.push(e.inputs[2]);let o=t.kernelShape;(o.length===0||o[0]===0)&&(o=[e.inputs[1].dims[2]]);let i=t.dilations;(i.length===0||i[0]===0)&&(i=[1]);let a=t.strides;(a.length===0||a[0]===0)&&(a=[1]);let l=t.pads;l.length===0&&(l=[0,0]),l=[0,l[0],0,l[1]],a=[1].concat(a),i=[1].concat(i),o=[1].concat(o);let d=Hu({...t,pads:l,strides:a,dilations:i,kernelShape:o},n);e.compute(bo(n,d,p=>r?[p[0],p[2],p[3]]:[p[0],p[1],p[3]]))},Lu=(e,t)=>{Nm(e.inputs,t),e.inputs[0].dims.length===3?Gm(e,t):Hm(e,e.inputs,t)}});var Lm,qu,ju,Ku=U(()=>{\"use strict\";Q();ae();Ce();ie();Lm=(e,t,r,n)=>{let o=k.size(t),i=t.length,a=E(\"input\",e,i),l=M(\"output\",e,i),d=r.dataType===6?r.getInt32Array()[0]:Number(r.getBigInt64Array()[0]),p=k.normalizeAxis(d,i),m=u=>{let h=` i32(${a.indicesGet(\"inputIndices\",\"uniforms.axis\")}) `,w=G(\"uniforms.input_shape\",\"uniforms.axis\",i),g=n.reverse?h+(n.exclusive?\" + 1\":\"\"):\"0\",b=n.reverse?w:h+(n.exclusive?\"\":\" + 1\");return`\n                ${u.registerUniform(\"outputSize\",\"u32\").registerUniform(\"axis\",\"u32\").declareVariables(a,l)}\n                ${u.mainStart()}\n                  ${u.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.outputSize\")}\n                  var inputIndices = ${l.offsetToIndices(\"global_idx\")};\n                  var sum = ${l.type.value}(0);\n                  let first : i32 = ${g};\n                  let last : i32 = ${b};\n                  for (var i : i32 = first; i < last; i++) {\n                    ${a.indicesSet(\"inputIndices\",\"uniforms.axis\",\"u32(i)\")};\n                    sum = sum + ${a.getByIndices(\"inputIndices\")};\n                  }\n                  ${l.setByOffset(\"global_idx\",\"sum\")};\n                }`};return{name:\"CumSum\",shaderCache:{hint:n.cacheKey,inputDependencies:[\"rank\"]},getRunData:()=>({outputs:[{dims:t,dataType:e}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:[{type:12,data:o},{type:12,data:p},...V(t,t)]}),getShaderSource:m}},qu=(e,t)=>{let r=e.inputs[0].dims,n=e.inputs[0].dataType,o=e.inputs[1];e.compute(Lm(n,r,o,t),{inputs:[0]})},ju=e=>{let t=e.exclusive===1,r=e.reverse===1;return te({exclusive:t,reverse:r})}});var Fm,qm,jm,Yu,Xu,Zu=U(()=>{\"use strict\";Q();ae();Ce();ie();Fm=e=>{if(!e||e.length!==1)throw new Error(\"DepthToSpace requires 1 input.\");if(e[0].dims.length!==4)throw new Error(\"DepthToSpace requires 4D input.\")},qm=(e,t,r,n)=>{let o=[];o.push(`fn perm(i: ${n.type.indices}) -> ${r.type.indices} {\n    var a: ${r.type.indices};`);for(let i=0;i<t;++i)o.push(r.indicesSet(\"a\",e[i],`i[${i}]`));return o.push(\"return a;}\"),o.join(`\n`)},jm=(e,t)=>{let r,n,o,i,a,l,d=t.format===\"NHWC\",p=t.blocksize,m=t.mode===\"DCR\";d?([r,n,o,i]=e.dims,a=m?[r,n,o,p,p,i/p**2]:[r,n,o,i/p**2,p,p],l=m?[0,1,3,2,4,5]:[0,1,4,2,5,3]):([r,n,o,i]=[e.dims[0],e.dims[2],e.dims[3],e.dims[1]],a=m?[r,p,p,i/p**2,n,o]:[r,i/p**2,p,p,n,o],l=m?[0,3,4,1,5,2]:[0,1,4,2,5,3]);let u=e.reshape(a),h=u.dims.length,w=e.dataType,g=E(\"a\",w,h),b=M(\"output\",w,h),x=_=>`\n  ${_.registerUniform(\"output_size\",\"u32\").declareVariables(g,b)}\n\n  ${qm(l,h,g,b)}\n\n  ${_.mainStart()}\n    ${_.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\")}\n\n    let indices = ${b.offsetToIndices(\"global_idx\")};\n    let aIndices = perm(indices);\n\n    ${b.setByOffset(\"global_idx\",g.getByIndices(\"aIndices\"))}\n  }`;return{name:\"DepthToSpace\",shaderCache:{hint:`${e.dims};${t.blocksize};${t.mode}`,inputDependencies:[\"rank\"]},getRunData:_=>{let $=d?[r,n*p,o*p,i/p**2]:[r,i/p**2,n*p,o*p],S=k.size($),I=u.dims,T=k.sortBasedOnPerm(I,l);return{outputs:[{dims:$,dataType:_[0].dataType}],dispatchGroup:{x:Math.ceil(S/64)},programUniforms:[{type:12,data:S},...V(I,T)]}},getShaderSource:x}},Yu=(e,t)=>{Fm(e.inputs),e.compute(jm(e.inputs[0],t))},Xu=e=>te({blocksize:e.blocksize,mode:e.mode,format:e.format})});var wo,rn,Qu,Km,Ym,vo,$o,Ju,Xm,ed,td,rd=U(()=>{\"use strict\";Q();ae();Ce();ie();wo=\"[a-zA-Z]|\\\\.\\\\.\\\\.\",rn=\"(\"+wo+\")+\",Qu=\"^\"+rn+\"$\",Km=\"(\"+rn+\",)*\"+rn,Ym=\"^\"+Km+\"$\",vo=class{constructor(t=-1){this.symbolToIndices=new Map,this.inputIndex=t}addSymbol(t,r){let n=this.symbolToIndices.get(t);n===void 0?n=[r]:n.push(r),this.symbolToIndices.set(t,n)}},$o=class{constructor(t,r){this.equation=r;this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[n,o]=r.includes(\"->\")?r.split(\"->\",2):[r,\"\"];if(!n.match(RegExp(Ym)))throw new Error(\"Invalid LHS term\");if(n.split(\",\").forEach((l,d)=>{let p=t[d].dims.slice();if(!l.match(RegExp(Qu)))throw new Error(\"Invalid LHS term\");let m=this.processTerm(l,!0,p,d);this.lhs.push(m)}),o===\"\")o+=[...this.symbolToInfo.entries()].filter(([l,d])=>d.count===1||l===\"...\").map(([l])=>l).join(\"\");else if(!o.match(RegExp(rn)))throw new Error(\"Invalid RHS\");o.match(RegExp(wo,\"g\"))?.forEach(l=>{if(l===\"...\")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let d=this.symbolToInfo.get(l);if(d===void 0)throw new Error(\"Invalid RHS symbol\");this.outputDims.push(d.dimValue)}}),this.rhs=this.processTerm(o,!1,this.outputDims)}addSymbol(t,r,n){let o=this.symbolToInfo.get(t);if(o!==void 0){if(o.dimValue!==r&&o.count!==1)throw new Error(\"Dimension mismatch\");o.count++,o.inputIndices.push(n)}else o={count:1,dimValue:r,inputIndices:[n]};this.symbolToInfo.set(t,o)}processTerm(t,r,n,o=-1){let i=n.length,a=!1,l=[],d=0;if(!t.match(RegExp(Qu))&&!r&&t!==\"\")throw new Error(\"Invalid LHS term\");let p=t.match(RegExp(wo,\"g\")),m=new vo(o);return p?.forEach((u,h)=>{if(u===\"...\"){if(a)throw new Error(\"Only one ellipsis is allowed per input term\");a=!0;let w=i-p.length+1;if(w<0)throw new Error(\"Ellipsis out of bounds\");if(l=n.slice(d,d+w),this.hasEllipsis){if(this.ellipsisDims.length!==l.length||this.ellipsisDims.toString()!==l.toString())throw new Error(\"Ellipsis dimensions mismatch\")}else if(r)this.hasEllipsis=!0,this.ellipsisDims=l;else throw new Error(\"Ellipsis must be specified in the LHS\");for(let g=0;g<l.length;g++){let b=String.fromCharCode(\"0\".charCodeAt(0)+g);m.addSymbol(b,h+g),this.addSymbol(b,n[d++],o)}}else m.addSymbol(u,h+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(u,n[d++],o)}),m}},Ju=e=>e+\"_max\",Xm=(e,t,r,n)=>{let i=e.map(m=>m.length).map((m,u)=>E(`input${u}`,t,m)),a=k.size(n),l=M(\"output\",t,n.length),d=[...r.symbolToInfo.keys()].filter(m=>!r.rhs.symbolToIndices.has(m)),p=m=>{let u=[],h=\"var prod = 1.0;\",w=\"var sum = 0.0;\",g=\"sum += prod;\",b=[],x=[],_=[],$=[],S=r.symbolToInfo.size===r.rhs.symbolToIndices.size;r.symbolToInfo.forEach((T,A)=>{if(r.rhs.symbolToIndices.has(A)){let D=r.rhs.symbolToIndices.get(A)?.[0];D!==void 0&&r.lhs.forEach((z,H)=>{if(T.inputIndices.includes(H)){let W=z.symbolToIndices.get(A);if(W===void 0)throw new Error(\"Invalid symbol error\");W.forEach(X=>{u.push(`${i[H].indicesSet(`input${H}Indices`,X,l.indicesGet(\"outputIndices\",D))}`)})}})}else r.lhs.forEach((D,z)=>{if(T.inputIndices.includes(z)){let H=D.symbolToIndices.get(A);if(H===void 0)throw new Error(\"Invalid symbol error\");H.forEach(W=>{b.push(`${i[z].indicesSet(`input${z}Indices`,W,`${A}`)}`)}),$.push(`prod *= ${i[z].getByIndices(`input${z}Indices`)};`)}}),x.push(`for(var ${A}: u32 = 0; ${A} < uniforms.${Ju(A)}; ${A}++) {`),_.push(\"}\")});let I=S?[...u,`let sum = ${i.map((T,A)=>T.getByIndices(`input${A}Indices`)).join(\" * \")};`]:[...u,w,...x,...b,h,...$,g,..._];return`\n            ${m.registerUniforms(d.map(T=>({name:`${Ju(T)}`,type:\"u32\"}))).registerUniform(\"outputSize\",\"u32\").declareVariables(...i,l)}\n\n            ${m.mainStart()}\n            ${m.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.outputSize\")}\n            var outputIndices = ${l.offsetToIndices(\"global_idx\")};\n            ${i.map((T,A)=>`var input${A}Indices: ${i[A].type.indices};`).join(`\n`)}\n            ${I.join(`\n`)};\n            ${l.setByOffset(\"global_idx\",\"sum\")};\n          }`};return{name:\"Einsum\",shaderCache:{hint:r.equation,inputDependencies:e.map(()=>\"rank\")},getRunData:()=>{let m=d.filter(h=>r.symbolToInfo.has(h)).map(h=>({type:12,data:r.symbolToInfo.get(h)?.dimValue||0}));m.push({type:12,data:a});let u=e.map((h,w)=>[...V(h)]).reduce((h,w)=>h.concat(w),m);return u.push(...V(n)),{outputs:[{dims:n,dataType:t}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:u}},getShaderSource:p}},ed=(e,t)=>{let r=new $o(e.inputs,t.equation),n=r.outputDims,o=e.inputs.map((i,a)=>i.dims);e.compute(Xm(o,e.inputs[0].dataType,r,n))},td=e=>{let t=e.equation.replace(/\\s+/g,\"\");return te({equation:t})}});var Zm,nd,Qm,Jm,od,id=U(()=>{\"use strict\";Q();ae();ie();Zm=e=>{if(!e||e.length!==2)throw new Error(\"Expand requires 2 input.\");let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),n=r.length<t.length?0:r.length-t.length,o=t.length<r.length?0:t.length-r.length;for(;n<r.length&&o<t.length;++n,++o)if(r[n]!==t[o]&&r[n]!==1&&t[o]!==1)throw new Error(\"Expand requires shape to be broadcastable to input\")},nd=(e,t)=>{let r=e.length-t.length,n=[];for(let o=0;o<r;++o)n.push(e[o]);for(let o=0;o<t.length;++o)n.push(t[o]===1?e[o+r]:t[o]);return n},Qm=(e,t)=>e.length>t.length?nd(e,t):nd(t,e),Jm=e=>{let t=e[0].dims,r=Array.from(e[1].getBigInt64Array(),Number),n=Qm(t,r),o=e[0].dataType,i=o===9?4:1,a=Math.ceil(k.size(n)/i),l=p=>{let m=E(\"input\",o,t.length,i),u=M(\"output\",o,n.length,i),h;if(o===9){let w=(g,b,x=\"\")=>`\n          let outputIndices${b} = ${u.offsetToIndices(`outputOffset + ${b}u`)};\n          let offset${b} = ${m.broadcastedIndicesToOffset(`outputIndices${b}`,u)};\n          let index${b} = offset${b} / 4u;\n          let component${b} = offset${b} % 4u;\n          ${g}[${b}] = ${x}(${m.getByOffset(`index${b}`)}[component${b}]);\n        `;h=`\n        let outputOffset = global_idx * ${i};\n        var data = vec4<u32>(0);\n        ${w(\"data\",0,\"u32\")}\n        ${w(\"data\",1,\"u32\")}\n        ${w(\"data\",2,\"u32\")}\n        ${w(\"data\",3,\"u32\")}\n        ${u.setByOffset(\"global_idx\",\"data\")}\n      }`}else h=`\n        let outputIndices = ${u.offsetToIndices(\"global_idx\")};\n        let inputOffset = ${m.broadcastedIndicesToOffset(\"outputIndices\",u)};\n        ${u.setByOffset(\"global_idx\",m.getByOffset(\"inputOffset\"))}\n      }`;return`\n    ${p.registerUniform(\"vec_size\",\"u32\").declareVariables(m,u)}\n    ${p.mainStart()}\n    ${p.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.vec_size\")}\n    ${h}`},d=[{type:12,data:a},...V(t,n)];return{name:\"Expand\",shaderCache:{hint:`${n.length}`,inputDependencies:[\"rank\"]},getShaderSource:l,getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:d})}},od=e=>{Zm(e.inputs),e.compute(Jm(e.inputs),{inputs:[0]})}});var ef,ad,sd=U(()=>{\"use strict\";Q();ae();ie();Yr();ef=e=>{let t=e[0].dataType,r=k.size(e[0].dims),n=k.size(e[1].dims),o=n%4===0,i=a=>{let l=E(\"x\",t,[1],4),d=E(\"bias\",t,[1],4),p=M(\"y\",t,[1],4),m=[{name:\"output_vec_size\",type:\"u32\"},{name:\"bias_size\",type:\"u32\"}],u=w=>`\n      let bias${w}_offset: u32 = (global_idx * 4 + ${w}) % uniforms.bias_size;\n      let bias${w} = ${d.getByOffset(`bias${w}_offset / 4`)}[bias${w}_offset % 4];`,h=o?`\n      let bias = ${d.getByOffset(\"global_idx % (uniforms.bias_size / 4)\")};`:`${u(0)}${u(1)}${u(2)}${u(3)}\n      let bias = ${l.type.value}(bias0, bias1, bias2, bias3);`;return`${a.registerUniforms(m).declareVariables(l,d,p)}\n\n    ${ao(Oe(t))}\n\n    ${a.mainStart(Tt)}\n      ${a.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_vec_size\")}\n\n      let x = ${l.getByOffset(\"global_idx\")};\n      ${h}\n      let x_in = x + bias;\n      ${p.setByOffset(\"global_idx\",so(\"x_in\"))}\n    }`};return{name:\"FastGeluWithBias\",shaderCache:{hint:`${o}`,inputDependencies:[\"type\",\"type\"]},getShaderSource:i,getRunData:a=>({outputs:[{dims:a[0].dims,dataType:a[0].dataType}],programUniforms:[{type:12,data:Math.ceil(r/4)},{type:12,data:n}],dispatchGroup:{x:Math.ceil(r/Tt/4)}})}},ad=e=>{e.inputs.length<2||k.size(e.inputs[1].dims)===0?su(e):e.compute(ef(e.inputs))}});var tf,rf,ud,dd,ld=U(()=>{\"use strict\";Q();ae();Ce();ie();tf=e=>{if(!e||e.length!==2)throw new Error(\"Gather requires 2 inputs.\")},rf=(e,t)=>{let r=e[0].dims,n=e[1].dims,o=r.length,i=k.normalizeAxis(t.axis,o),a=r.slice(0);a.splice(i,1,...n);let l=r[i],d=e[0].dataType===9?4:1,p=Math.ceil(k.size(a)/d),m=[{type:12,data:p},{type:6,data:l},{type:12,data:i},...V(e[0].dims,e[1].dims,a)],u=h=>{let w=E(\"data\",e[0].dataType,e[0].dims.length,d),g=E(\"inputIndices\",e[1].dataType,e[1].dims.length),b=M(\"output\",e[0].dataType,a.length,d),x=$=>{let S=n.length,I=`var indicesIndices${$}  = ${g.type.indices}(0);`;for(let T=0;T<S;T++)I+=`${S>1?`indicesIndices${$}[${T}]`:`indicesIndices${$}`} = ${a.length>1?`outputIndices${$}[uniforms.axis + ${T}]`:`outputIndices${$}`};`;I+=`\n          var idx${$} = ${g.getByIndices(`indicesIndices${$}`)};\n          if (idx${$} < 0) {\n            idx${$} = idx${$} + uniforms.axisDimLimit;\n          }\n          var dataIndices${$} : ${w.type.indices};\n        `;for(let T=0,A=0;T<o;T++)T===i?(I+=`${o>1?`dataIndices${$}[${T}]`:`dataIndices${$}`} = u32(idx${$});`,A+=S):(I+=`${o>1?`dataIndices${$}[${T}]`:`dataIndices${$}`} = ${a.length>1?`outputIndices${$}[${A}]`:`outputIndices${$}`};`,A++);return I},_;if(e[0].dataType===9){let $=(S,I,T=\"\")=>`\n          let outputIndices${I} = ${b.offsetToIndices(`outputOffset + ${I}u`)};\n          ${x(I)};\n          let offset${I} = ${w.indicesToOffset(`dataIndices${I}`)};\n          let index${I} = offset${I} / 4u;\n          let component${I} = offset${I} % 4u;\n          ${S}[${I}] = ${T}(${w.getByOffset(`index${I}`)}[component${I}]);\n        `;_=`\n        let outputOffset = global_idx * ${d};\n        var value = vec4<u32>(0);\n        ${$(\"value\",0,\"u32\")}\n        ${$(\"value\",1,\"u32\")}\n        ${$(\"value\",2,\"u32\")}\n        ${$(\"value\",3,\"u32\")}\n        ${b.setByOffset(\"global_idx\",\"value\")}\n      `}else _=`\n      let outputIndices = ${b.offsetToIndices(\"global_idx\")};\n      ${x(\"\")};\n      let value = ${w.getByIndices(\"dataIndices\")};\n      ${b.setByOffset(\"global_idx\",\"value\")};\n      `;return`\n      ${h.registerUniform(\"outputSize\",\"u32\").registerUniform(\"axisDimLimit\",\"i32\").registerUniform(\"axis\",\"u32\").declareVariables(w,g,b)}\n      ${h.mainStart()}\n        ${h.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.outputSize\")}\n        ${_}\n      }`};return{name:\"Gather\",shaderCache:{hint:t.cacheKey,inputDependencies:[\"rank\",\"rank\"]},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:m}),getShaderSource:u}},ud=e=>te({axis:e.axis}),dd=(e,t)=>{let r=e.inputs;tf(r),e.compute(rf(e.inputs,t))}});var nf,of,cd,pd,md=U(()=>{\"use strict\";Q();ae();Ce();ie();nf=e=>{if(!e||e.length!==2)throw new Error(\"GatherElements requires 2 inputs.\");if(e[0].dims.length<1)throw new Error(\"GatherElements requires that the data input be rank >= 1.\");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and\n                     indices input tensors be of same rank.`)},of=(e,t)=>{let r=e[0].dims,n=e[0].dataType,o=r.length,i=e[1].dims,a=e[1].dataType,l=k.normalizeAxis(t.axis,o),d=r[l],p=i.slice(0),m=k.size(p),u=E(\"input\",n,o),h=E(\"indicesInput\",a,i.length),w=M(\"output\",n,p.length),g=[{type:12,data:m},{type:6,data:d},{type:12,data:l}];return g.push(...V(r,i,p)),{name:\"GatherElements\",shaderCache:{inputDependencies:[\"rank\",\"rank\"]},getRunData:()=>({outputs:[{dims:p,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(m/64)},programUniforms:g}),getShaderSource:_=>`\n      ${_.registerUniform(\"outputSize\",\"u32\").registerUniform(\"axisDimLimit\",\"i32\").registerUniform(\"axis\",\"u32\").declareVariables(u,h,w)}\n      ${_.mainStart()}\n      ${_.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.outputSize\")}\n\n      let outputIndices = ${w.offsetToIndices(\"global_idx\")};\n\n      var idx = ${h.getByOffset(\"global_idx\")};\n      if (idx < 0) {\n        idx = idx + uniforms.axisDimLimit;\n      }\n      var inputIndices = ${u.type.indices}(outputIndices);\n      ${u.indicesSet(\"inputIndices\",\"uniforms.axis\",\"u32(idx)\")};\n      let value = ${u.getByIndices(\"inputIndices\")};\n\n      ${w.setByOffset(\"global_idx\",\"value\")};\n  }`}},cd=e=>te({axis:e.axis}),pd=(e,t)=>{let r=e.inputs;nf(r),e.compute(of(e.inputs,t))}});var af,sf,fd,hd,gd=U(()=>{\"use strict\";Q();ae();ie();af=e=>{if(!e)throw new Error(\"Input is missing\");if(e.length<2||e.length>3)throw new Error(\"Invaid input number.\");if(e.length===3&&e[2].dims.length>2)throw new Error(\"Invalid input shape of C\");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error(\"Input types are mismatched\")},sf=(e,t)=>{let r=e[0].dims.slice(),n=e[1].dims.slice(),[o,i,a]=Wr.getShapeOfGemmResult(r,t.transA,n,t.transB,e.length===3?e[2].dims:void 0),l=[o,i];if(!l)throw new Error(\"Can't use gemm on the given tensors\");let d=k.size(l),p=[{type:12,data:d},{type:12,data:o},{type:12,data:i},{type:12,data:a},{type:1,data:t.alpha},{type:1,data:t.beta}],m=[\"type\",\"type\"];e.length===3&&(p.push(...V(e[2].dims)),m.push(\"rank\")),p.push(...V(l));let u=h=>{let w=\"\";t.transA&&t.transB?w=\"value += a[k * uniforms.M + m] * b[n * uniforms.K + k];\":t.transA&&!t.transB?w=\"value += a[k * uniforms.M + m] * b[k * uniforms.N + n];\":!t.transA&&t.transB?w=\"value += a[m * uniforms.K + k] * b[n * uniforms.K + k];\":!t.transA&&!t.transB&&(w=\"value += a[m * uniforms.K + k] * b[k * uniforms.N + n];\");let g=t.alpha===1?\"\":\"value *= uniforms.alpha;\",b=E(\"a\",e[0].dataType,e[0].dims),x=E(\"b\",e[1].dataType,e[1].dims),_=b.type.value,$=null,S=[b,x];e.length===3&&($=E(\"c\",e[2].dataType,e[2].dims.length),S.push($));let I=M(\"output\",e[0].dataType,l.length);S.push(I);let T=[{name:\"output_size\",type:\"u32\"},{name:\"M\",type:\"u32\"},{name:\"N\",type:\"u32\"},{name:\"K\",type:\"u32\"},{name:\"alpha\",type:\"f32\"},{name:\"beta\",type:\"f32\"}];return`\n  ${h.registerUniforms(T).declareVariables(...S)}\n\n  ${h.mainStart()}\n    ${h.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\")}\n\n    let m = global_idx / uniforms.N;\n    let n = global_idx % uniforms.N;\n\n    var value = ${_}(0);\n    for (var k: u32 = 0u; k < uniforms.K; k++) {\n      ${w}\n    }\n\n    ${g}\n    ${(()=>$!=null?`let cOffset = ${$.broadcastedIndicesToOffset(\"vec2(m, n)\",I)}; value += ${_}(uniforms.beta) * ${$.getByOffset(\"cOffset\")};`:\"\")()}\n    output[global_idx] = value;\n  }`};return{name:\"Gemm\",shaderCache:{hint:`${t.cacheKey}`,inputDependencies:m},getRunData:()=>({outputs:[{dims:l,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:p}),getShaderSource:u}},fd=e=>{let t=e.transA,r=e.transB,n=e.alpha,o=e.beta;return{transA:t,transB:r,alpha:n,beta:o,cacheKey:`${e.transA};${e.transB};${e.alpha===1}`}},hd=(e,t)=>{af(e.inputs),e.compute(sf(e.inputs,t))}});var Ve,lf,bd,yd,cf,nr,wd,_o=U(()=>{\"use strict\";Q();ae();Ce();Nr();jr();ie();Et();Ve=(e,t)=>e.length>t&&e[t].dims.length>0&&k.size(e[t].dims)>0?e[t]:void 0,lf=(e,t)=>{let r=e[0],n=Ve(e,1),o=Ve(e,2),i=Ve(e,3),a=Ve(e,4),l=Ve(e,5),d=Ve(e,6),p=Ve(e,7);if(r.dims.length!==3&&r.dims.length!==5)throw new Error(\"Input query is expected to have 3 or 5 dimensions\");let m=!1,u=r.dims[0],h=r.dims[1],w=r.dims.length===3?m?r.dims[2]/3:r.dims[2]:t.numHeads*r.dims[4],g=h,b=0,x=0,_=Math.floor(w/t.numHeads);if(d&&p){if(d.dims.length!==4)throw new Error('Input \"past_key\" is expected to have 4 dimensions');if(d.dims[0]!==u||d.dims[1]!==t.numHeads||d.dims[3]!==_)throw new Error('Input \"past_key\" shape (batch_size, num_heads, past_sequence_length, head_size)');if(p.dims[0]!==u||p.dims[1]!==t.numHeads||p.dims[3]!==_)throw new Error('Input \"past_value\" shape (batch_size, num_heads, past_sequence_length, head_size)');if(d.dims[2]!==p.dims[2])throw new Error('Input \"past_key\" and \"past_value\" shall have same dim 2 (past_sequence_length)');if(p.dims.length!==4)throw new Error('Input \"past_value\" is expected to have 4 dimensions');b=d.dims[2],x=d.dims[2]}else if(d||p)throw new Error('Input \"past_key\" and \"past_value\" shall be both present or both absent');let $;if(n){if(r.dims.length!==3)throw new Error('Input \"query\" is expected to have 3 dimensions when key is given');if(n.dims.length<3||n.dims.length>5)throw new Error('Input \"key\" is expected to have 3, 4, or 5 dimensions');if(r.dims[0]!==n.dims[0])throw new Error('Input \"query\" and \"key\" shall have same dim 0 (batch size)');if(n.dims.length===3){if(n.dims[2]!==r.dims[2])throw new Error('Input \"query\" and \"key\" shall have same dim 2 (hidden_size)');$=2,g=n.dims[1]}else if(n.dims.length===5){if(n.dims[2]!==t.numHeads||n.dims[3]!==2||n.dims[4]!==_)throw new Error('Expect \"key\" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(o)throw new Error('Expect \"value\" be none when \"key\" has packed kv format.');$=5,g=n.dims[1]}else{if(n.dims[1]!==t.numHeads||n.dims[3]!==_)throw new Error('Expect \"key\" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');$=0,g=n.dims[2]}}else{if(r.dims.length!==3&&r.dims.length!==5)throw new Error('Input \"query\" is expected to have 3 or 5 dimensions when key is empty');if(r.dims.length===5&&(r.dims[2]!==t.numHeads||r.dims[3]!==3))throw new Error('Expect \"query\" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');$=3}if(i){if(i.dims.length!==1)throw new Error('Input \"bias\" is expected to have 1 dimension');if(o&&r.dims.length===5&&r.dims[3]===2)throw new Error(\"bias is not allowed for packed kv.\")}let S=0;if(a){S=8;let z=a.dims;throw z.length===1?z[0]===u?S=1:z[0]===3*u+2&&(S=3):z.length===2&&z[0]===u&&z[1]===g&&(S=5),S===8?new Error('Input \"key_padding_mask\" shape shall be (batch_size) or (batch_size, kv_sequence_length)'):new Error(\"Mask not supported\")}let I=!1,T=w;if(o){if(o.dims.length!==3&&o.dims.length!==4)throw new Error('Input \"value\" is expected to have 3 or 4 dimensions');if(r.dims[0]!==o.dims[0])throw new Error('Input \"query\" and \"value\" shall have same dim 0 (batch_size)');if(o.dims.length===3){if(g!==o.dims[1])throw new Error('Input \"key\" and \"value\" shall have the same dim 1 (kv_sequence_length)');T=o.dims[2]}else{if(g!==o.dims[2])throw new Error('Input \"past_key\" and \"past_value\" shall have the same dim 2 (kv_sequence_length)');T=o.dims[1]*o.dims[3],I=!0}}let A=b+g,D=!1;if(a)throw new Error(\"Key padding mask is not supported\");if(l){if(l.dims.length!==4)throw new Error('Input \"relative_position_bias\" is expected to have 4 dimensions');if(l.dims[0]!==u&&l.dims[0]!==1||l.dims[1]!==t.numHeads||l.dims[2]!==h||l.dims[3]!==A)throw new Error('Input \"relative_position_bias\" shape (batch_size, 1, sequence_length, kv_sequence_length)')}return{batchSize:u,sequenceLength:h,pastSequenceLength:b,kvSequenceLength:g,totalSequenceLength:A,maxSequenceLength:x,inputHiddenSize:0,hiddenSize:w,vHiddenSize:T,headSize:_,vHeadSize:Math.floor(T/t.numHeads),numHeads:t.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:t.maskFilterValue,maskType:S,scale:t.scale,broadcastResPosBias:D,passPastInKv:I,qkvFormat:$}},bd=e=>te({...e}),yd=te({perm:[0,2,1,3]}),cf=(e,t,r,n,o,i,a)=>{let l=[n,o,i],d=k.size(l),p=[{type:12,data:d},{type:12,data:a},{type:12,data:i}],m=u=>{let h=M(\"qkv_with_bias\",t.dataType,l),w=E(\"qkv\",t.dataType,l),g=E(\"bias\",r.dataType,l),b=[{name:\"output_size\",type:\"u32\"},{name:\"bias_offset\",type:\"u32\"},{name:\"hidden_size\",type:\"u32\"}];return`\n  ${u.registerUniforms(b).declareVariables(w,g,h)}\n  ${u.mainStart()}\n    ${u.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\")}\n    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;\n\n    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];\n  }`};return e.compute({name:\"MultiHeadAttentionAddBias\",shaderCache:{inputDependencies:[\"type\",\"type\"]},getRunData:()=>({outputs:[{dims:l,dataType:t.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:p}),getShaderSource:m},{inputs:[t,r],outputs:[-1]})[0]},nr=(e,t,r,n,o,i,a,l)=>{let d=i;if(a){if(n===1)throw new Error(\"AddBiasReshape is not implemented. Please export your model with packed QKV or KV\");return d=cf(e,i,a,t,n,r*o,l),d=d.reshape([t,n,r,o]),e.compute(Ue(d,yd.perm),{inputs:[d],outputs:[-1]})[0]}else return i.dims.length===3&&(d=i.reshape([t,n,r,o])),e.compute(Ue(d,yd.perm),{inputs:[d],outputs:[-1]})[0]},wd=(e,t)=>{let r=lf(e.inputs,t),n=e.inputs[0],o=Ve(e.inputs,1),i=Ve(e.inputs,2),a=Ve(e.inputs,3),l=Ve(e.inputs,4),d=Ve(e.inputs,5),p=Ve(e.inputs,6),m=Ve(e.inputs,7);if(n.dims.length===5)throw new Error(\"Packed QKV is not implemented\");if(o?.dims.length===5)throw new Error(\"Packed KV is not implemented\");let u=o&&i&&o.dims.length===4&&i.dims.length===4,h=nr(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,n,a,0);if(u)return Wt(e,h,o,i,l,void 0,p,m,d,r,t);if(!o||!i)throw new Error(\"key and value must be provided\");let w=nr(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.headSize,o,a,r.hiddenSize),g=nr(e,r.batchSize,r.numHeads,r.kvSequenceLength,r.vHeadSize,i,a,2*r.hiddenSize);Wt(e,h,w,g,l,void 0,p,m,d,r,t)}});var vd,pf,mf,xo,$d,So=U(()=>{\"use strict\";Q();ae();ie();vd=e=>Array.from(e.getBigInt64Array(),Number),pf=e=>{if(!e||e.length!==2)throw new Error(\"Tile requires 2 inputs.\");if(e[0].dataType!==1&&e[0].dataType!==10&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error(\"Tile only support float, float16, int32, and uint32 data types\");if(e[1].dataType!==7)throw new Error(\"Tile `repeats` input should be of int64 data type\");if(e[1].dims.length!==1)throw new Error(\"Tile `repeats` input should be 1-D\");if(vd(e[1]).length!==e[0].dims.length)throw new Error(\"Tile `repeats` input should have same number of elements as rank of input data tensor\")},mf=(e,t)=>{let r=[];for(let n=0;n<e.length;++n)r.push(e[n]*t[n]);return r},xo=(e,t)=>{let r=e[0].dims,n=t??vd(e[1]),o=mf(r,n),i=k.size(o),a=e[0].dataType,l=E(\"input\",a,r.length),d=M(\"output\",a,o.length),p=m=>`\n      const inputShape = ${l.indices(...r)};\n      ${m.registerUniform(\"output_size\",\"u32\").declareVariables(l,d)}\n      ${m.mainStart()}\n      ${m.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\")}\n      let output_indices = ${d.offsetToIndices(\"global_idx\")};\n      var input_indices: ${l.type.indices};\n      for (var i = 0; i < ${r.length}; i++) {\n        let input_dim_i = ${l.indicesGet(\"uniforms.input_shape\",\"i\")};\n        let input_dim_value = ${d.indicesGet(\"output_indices\",\"i\")}  % input_dim_i;\n\n        ${l.indicesSet(\"input_indices\",\"i\",\"input_dim_value\")}\n      }\n      ${d.setByOffset(\"global_idx\",l.getByIndices(\"input_indices\"))}\n    }`;return{name:\"Tile\",shaderCache:{hint:`${n}`,inputDependencies:[\"rank\"]},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:[{type:12,data:i},...V(e[0].dims,o)]}),getShaderSource:p}},$d=e=>{pf(e.inputs),e.compute(xo(e.inputs),{inputs:[0]})}});var ff,_d,Sd,hf,xd,Id,Cd=U(()=>{\"use strict\";Q();ae();Ce();jr();ie();_o();So();Et();ff=(e,t)=>{let r=e[0],n=e[1],o=e[2],i=e[3],a=e[4];if(r.dims.length!==3&&r.dims.length!==5)throw new Error(\"Input query is expected to have 3 or 5 dimensions\");let l=!1,d=r.dims[0],p=r.dims[1],m=r.dims.length===3?l?r.dims[2]/3:r.dims[2]:t.numHeads*r.dims[4],u=p,h=0,w=0,g=Math.floor(m/t.numHeads),b=i&&i.dims.length!==0,x=a&&a.dims.length!==0,_=!0;if(b&&x){if(i.dims.length!==4)throw new Error('Input \"past_key\" is expected to have 4 dimensions');if(a.dims.length!==4)throw new Error('Input \"past_value\" is expected to have 4 dimensions');_?(h=i.dims[1],w=i.dims[1]):(h=i.dims[2],w=i.dims[2])}else if(b||x)throw new Error('Input \"past_key\" and \"past_value\" shall be both present or both absent');let $;if(n){if(r.dims.length!==3)throw new Error('Input \"query\" is expected to have 3 dimensions when key is given');if(n.dims.length<3||n.dims.length>5)throw new Error('Input \"key\" is expected to have 3, 4, or 5 dimensions');if(r.dims[0]!==n.dims[0])throw new Error('Input \"query\" and \"key\" shall have same dim 0 (batch size)');if(n.dims.length===3){if(r.dims[2]%n.dims[2]!==0)throw new Error('Dimension 2 of \"query\" should be a multiple of \"key\"');$=2,u=n.dims[1]}else if(n.dims.length===5){if(n.dims[2]!==t.numHeads||n.dims[3]!==2||n.dims[4]!==g)throw new Error('Expect \"key\" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(o)throw new Error('Expect \"value\" be none when \"key\" has packed kv format.');$=5,u=n.dims[1]}else{if(n.dims[1]!==t.numHeads||n.dims[3]!==g)throw new Error('Expect \"key\" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');$=0,u=n.dims[2]}}else{if(r.dims.length!==3&&r.dims.length!==5)throw new Error('Input \"query\" is expected to have 3 or 5 dimensions when key is empty');if(r.dims.length===5&&(r.dims[2]!==t.numHeads||r.dims[3]!==3))throw new Error('Expect \"query\" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');$=3}let S=0,I=!1,T=m;if(o){if(o.dims.length!==3&&o.dims.length!==4)throw new Error('Input \"value\" is expected to have 3 or 4 dimensions');if(r.dims[0]!==o.dims[0])throw new Error('Input \"query\" and \"value\" shall have same dim 0 (batch_size)');if(o.dims.length===3){if(u!==o.dims[1])throw new Error('Input \"key\" and \"value\" shall have the same dim 1 (kv_sequence_length)');T=o.dims[2]}else{if(u!==o.dims[2])throw new Error('Input \"past_key\" and \"past_value\" shall have the same dim 2 (kv_sequence_length)');T=o.dims[1]*o.dims[3],I=!0}}let A=h+u,D=!1;return{batchSize:d,sequenceLength:p,pastSequenceLength:h,kvSequenceLength:u,totalSequenceLength:A,maxSequenceLength:w,inputHiddenSize:0,hiddenSize:m,vHiddenSize:T,headSize:g,vHeadSize:Math.floor(T/t.kvNumHeads),numHeads:t.numHeads,kvNumHeads:t.kvNumHeads,nReps:t.numHeads/t.kvNumHeads,pastPresentShareBuffer:!1,maskType:S,scale:t.scale,broadcastResPosBias:D,passPastInKv:I,qkvFormat:$,isPastkvBSNH:_}},_d=(e,t,r,n)=>{let o=[n.batchSize,n.totalSequenceLength,n.kvNumHeads,n.headSize],i=4,a=k.size(o)/i,l=n.totalSequenceLength,d=M(\"present_kv\",r,o.length,i),p=E(\"new_kv\",e.dataType,e.dims.length,i),m=t?E(\"past_kv\",t.dataType,t.dims.length,i):void 0,u=Math.ceil(n.headSize/i),h={x:l,y:e.dims[0],z:1},w=t?[\"rank\",\"rank\"]:[\"rank\"],g=[{type:12,data:a},{type:12,data:n.pastSequenceLength},{type:12,data:n.kvSequenceLength},{type:12,data:n.totalSequenceLength}],b=[p];m?(g.push(...V(e.dims),...V(t.dims),...V(o)),b.push(m)):g.push(...V(e.dims),...V(o));let x=[{name:\"output_size\",type:\"u32\"},{name:\"past_seqlen\",type:\"u32\"},{name:\"new_seqlen\",type:\"u32\"},{name:\"present_seqlen\",type:\"u32\"}],_=`      let past_batch_stride = uniforms.past_seqlen * num_heads * H;\n        var past_head_stride = uniforms.past_seqlen * H;\n        if (is_bsnh) {\n          past_head_stride = H;\n        }\n        let in_offset = b * past_batch_stride + s * row_stride + n * past_head_stride + h;\n        present_kv[out_offset] = past_kv[in_offset];`,$=`      let new_batch_stride = uniforms.new_seqlen * num_heads * H;\n        let new_row_stride = num_heads * H;\n        let new_head_stride = H;\n        let in_offset = b * new_batch_stride + (s - past_seqlen) * new_row_stride + n * new_head_stride + h;\n        present_kv[out_offset] = new_kv[in_offset];`,S=t?`if (s < past_seqlen) {\n        ${_}\n        } else if (s < past_seqlen + uniforms.new_seqlen) {\n        ${$}\n        }`:`if (s < past_seqlen + uniforms.new_seqlen) {\n          ${$}\n        }`,I=T=>`\n\n  ${T.registerUniforms(x).declareVariables(...b,d)}\n  ${T.mainStart([u,n.kvNumHeads,1])}\n    ${T.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\")}\n    var indices = ${d.offsetToIndices(\"global_idx\")};\n    let h = local_id.x;\n    let n = local_id.y;\n    let s = workgroup_id.x;\n    let b = workgroup_id.y;\n    let num_heads = ${n.kvNumHeads}u;\n    let H = ${u}u;\n\n    let present_seqlen = uniforms.present_seqlen;\n    let present_batch_stride = present_seqlen * num_heads * H;\n    var row_stride = H;\n    let is_bsnh = ${n.isPastkvBSNH};\n\n    if (is_bsnh) {\n      row_stride = num_heads * H;\n    }\n    var present_head_stride = present_seqlen * H;\n    if (is_bsnh) {\n      present_head_stride = H;\n    }\n\n    let past_seqlen = uniforms.past_seqlen;\n\n    let out_offset = b * present_batch_stride + s * row_stride + n * present_head_stride + h;\n    ${S}\n  }`;return{name:\"ConcatPastNew\",shaderCache:{hint:`${n.kvNumHeads}${u}${!!t}`,inputDependencies:w},getRunData:()=>({outputs:[{dims:o,dataType:r}],dispatchGroup:h,programUniforms:g}),getShaderSource:I}},Sd=e=>te({...e}),hf=te({perm:[0,2,1,3]}),xd=(e,t,r,n,o)=>{let i=t,a=n.kvNumHeads,l=n.nReps;return t.dims.length===3&&n.kvSequenceLength!==0&&(i=t.reshape([n.batchSize,n.kvSequenceLength,a,n.headSize])),r?i=e.compute(_d(i,r,i.dataType,n),{inputs:[i,r],outputs:[n.isPastkvBSNH?o:-1]})[0]:i=e.compute(_d(i,void 0,i.dataType,n),{inputs:[i],outputs:[n.isPastkvBSNH?o:-1]})[0],l!==1&&(i=e.compute(xo([i],[1,1,1,l]),{inputs:[i],outputs:[-1]})[0],i=i.reshape([n.batchSize,n.totalSequenceLength,a*l,n.headSize])),e.compute(Ue(i,hf.perm),{inputs:[i],outputs:[-1]})[0]},Id=(e,t)=>{let r=ff(e.inputs,t);if(e.inputs[0].dims.length===5)throw new Error(\"Packed QKV is not implemented\");if(e.inputs[1]?.dims.length===5)throw new Error(\"Packed KV is not implemented\");let n=nr(e,r.batchSize,r.numHeads,r.sequenceLength,r.headSize,e.inputs[0],void 0,0),o=e.inputs[3]&&e.inputs[3].dims.length!==0?e.inputs[3]:void 0,i=e.inputs[4]&&e.inputs[4].dims.length!==0?e.inputs[4]:void 0,a=xd(e,e.inputs[1],o,r,1),l=xd(e,e.inputs[2],i,r,2);Wt(e,n,a,l,void 0,void 0,void 0,void 0,void 0,r,t)}});var gf,yf,bf,Td,Ad=U(()=>{\"use strict\";Q();ae();ie();gf=(e,t)=>{let r=e[0].dims,n=r,o=2,i=k.sizeToDimension(r,o),a=k.sizeFromDimension(r,o),l=$e(a),d=a/l,p=[r[0],r[1],d],m=[\"rank\",\"type\",\"type\"],u=[{type:12,data:a},{type:12,data:d}];u.push(...V(p,p));let h=w=>{let g=E(\"x\",e[0].dataType,p.length,l),b=E(\"scale\",e[1].dataType,e[1].dims),x=E(\"bias\",e[2].dataType,e[2].dims),_=M(\"output\",e[0].dataType,p.length,l),$=[g,b,x,_],S=g.type.value,I=l===1?\"f32\":`vec${l}<f32>`,T=64,A=[{name:\"normSize\",type:\"u32\"},{name:\"normPackedSize\",type:\"u32\"}];return`\n  var<workgroup> meanShared : f32;\n  var<workgroup> squaredNormShared : f32;\n  var<workgroup> workgroupShared : array<${I}, ${T}>;\n  const workgroupSize = ${T}u;\n  ${w.registerUniforms(A).declareVariables(...$)}\n  ${w.mainStart(T)}\n    let norm = global_idx / workgroupSize;\n    let batch = norm / uniforms.x_shape[1];\n    let channel = norm % uniforms.x_shape[1];\n    let localIndex = local_id.x;\n\n    // initialize workgroup memory\n    var initial = ${I}(0);\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      initial = initial + ${I}(${g.get(\"batch\",\"channel\",\"h\")});\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the mean of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      meanShared = ${Xe(\"workgroupShared[0]\",l)} / f32(uniforms.normSize);\n    }\n    workgroupBarrier();\n\n    // reinitialize workgroup memory.\n    initial = ${I}(0);\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      let deviation =  ${I}(${g.get(\"batch\",\"channel\",\"h\")}) - ${I}(meanShared);\n      initial = initial + deviation * deviation;\n    }\n    workgroupShared[localIndex] = initial;\n    workgroupBarrier();\n\n    // Calculate the sum of square of deviation of current channel data.\n    for (var currSize = workgroupSize >> 1;  currSize > 0; currSize = currSize >> 1) {\n      if (localIndex < currSize) {\n        workgroupShared[localIndex] = workgroupShared[localIndex] + workgroupShared[localIndex + currSize];\n      }\n      workgroupBarrier();\n    }\n    if (localIndex == 0) {\n      squaredNormShared = ${Xe(\"workgroupShared[0]\",l)};\n    }\n    workgroupBarrier();\n\n    let invStdDev = inverseSqrt(squaredNormShared / f32(uniforms.normSize) + f32(${t.epsilon}));\n    let channelScale = invStdDev * f32(${b.getByOffset(\"channel\")});\n    let channelShift = f32(${x.getByOffset(\"channel\")}) - meanShared * channelScale;\n    for (var h = localIndex; h < uniforms.normPackedSize; h += workgroupSize) {\n      let value = ${g.get(\"batch\",\"channel\",\"h\")} * ${S}(${I}(channelScale)) + ${S}(${I}(channelShift));\n      ${_.set(\"batch\",\"channel\",\"h\",\"value\")};\n    }\n  }`};return{name:\"InstanceNormalization\",shaderCache:{hint:`${t.epsilon};${l}`,inputDependencies:m},getRunData:()=>({outputs:[{dims:n,dataType:e[0].dataType}],dispatchGroup:{x:i},programUniforms:u}),getShaderSource:h}},yf=(e,t,r,n,o,i,a,l)=>{let d=$e(a),p=64,m=d===1?\"vec2f\":`mat2x${d}f`,u=d===1?\"f32\":`vec${d}f`,h=(A,D)=>`${m}(${A}, ${D})`,w=o*a/d,g=Math.ceil(i/p),b=[\"type\"],x=[{type:12,data:g},{type:12,data:i},{type:12,data:Math.floor(a/d)},{type:12,data:Math.floor(i*a/d)}],_=A=>{let D=E(\"input\",t.dataType,t.dims,d);return`\n  ${A.declareVariables(D)}\n  @group(0) @binding(1) var<storage, read_write> output : array<${m}>;\n  struct Uniforms {wg_size:u32, H:u32, C:u32, image_size:u32};\n  @group(0) @binding(2) var<uniform> uniforms: Uniforms;\n\n  ${A.mainStart(p)}\n    let currentImageNumber = global_idx / ${p} / uniforms.C;\n    let currentChannelNumber = (global_idx / ${p}) % uniforms.C;\n    let wgOffset = local_id.x * uniforms.wg_size;\n    if (wgOffset >= uniforms.H) {\n        return;\n    }\n    let wgMax = min(wgOffset + uniforms.wg_size, uniforms.H);\n\n    let offset = currentImageNumber * uniforms.image_size + currentChannelNumber;\n    var sum = ${gt(\"f32\",d)};\n    var squaredSum = ${gt(\"f32\",d)};\n    for (var i: u32 = wgOffset; i < wgMax; i++) {\n        let value = ${u}(input[offset + i * uniforms.C]);\n        sum += value;\n        squaredSum += value * value;\n    }\n    output[global_idx] = ${h(\"sum\",\"squaredSum\")};\n  }`},$=e.compute({name:\"InstanceNormComputeMean\",shaderCache:{hint:`${d}`,inputDependencies:b},getRunData:()=>({outputs:[{dims:[o,a,p,2],dataType:1}],dispatchGroup:{x:o*a/d},programUniforms:x}),getShaderSource:_},{inputs:[t],outputs:[-1]})[0],S=[{type:12,data:w},{type:12,data:i},{type:12,data:Math.floor(a/d)},{type:12,data:Math.floor(p*a/d)}],I=[\"type\",\"type\",\"type\"],T=A=>{let D=E(\"scale\",r.dataType,r.dims,d),z=E(\"bias\",n.dataType,n.dims,d);return`\n  @group(0) @binding(0) var<storage, read> input : array<${m}>;\n  @group(0) @binding(1) var<storage, read> scale : array<${D.type.storage}>;\n  @group(0) @binding(2) var<storage, read> bias : array<${z.type.storage}>;\n  @group(0) @binding(3) var<storage, read_write> output : array<${m}>;\n  struct Uniforms {units_of_work : u32, H: u32, C : u32, image_size : u32};\n  @group(0) @binding(4) var<uniform> uniforms: Uniforms;\n\n  ${A.mainStart()}\n    ${A.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.units_of_work\")}\n    let currentImageNumber = global_idx / uniforms.C;\n    let currentChannelNumber = global_idx % uniforms.C;\n\n    let offset = currentImageNumber * uniforms.image_size;\n    var sum = ${gt(\"f32\",d)};\n    var squaredSum = ${gt(\"f32\",d)};\n    for (var i: u32 = 0; i < min(${p}, uniforms.H); i++) {\n        let value = input[offset + i + currentChannelNumber * ${p}];\n        sum += value[0];\n        squaredSum += value[1];\n    }\n    sum = sum / f32(uniforms.H);\n    squaredSum = squaredSum / f32(uniforms.H);\n    let invStdDev = inverseSqrt(squaredSum - sum * sum + f32(${l}));\n    let channelScale = invStdDev * ${u}(scale[currentChannelNumber]);\n    let channelShift = ${u}(bias[currentChannelNumber]) - sum * channelScale;\n\n    output[global_idx] = ${h(\"channelScale\",\"channelShift\")};\n  }`};return e.compute({name:\"InstanceNormComputeChannelScaleShift\",shaderCache:{hint:`${d};${l}`,inputDependencies:I},getRunData:()=>({outputs:[{dims:[o,a,2],dataType:1}],dispatchGroup:{x:Math.ceil(w/64)},programUniforms:S}),getShaderSource:T},{inputs:[$,r,n],outputs:[-1]})[0]},bf=(e,t,r)=>{let n=t[0].dims,o=n,i=n[0],a=n[n.length-1],l=k.sizeFromDimension(n,1)/a,d=$e(a),p=k.size(o)/d,m=[{type:12,data:l},{type:12,data:Math.floor(a/d)}],u=[\"type\",\"type\"],h=yf(e,t[0],t[1],t[2],i,l,a,r.epsilon),w=g=>{let b=ge(t[0].dataType),x=d===1?\"vec2f\":`mat2x${d}f`,_=d===1?b:`vec${d}<${b}>`,$=E(\"input\",t[0].dataType,t[0].dims,d),S=M(\"output\",t[0].dataType,o,d);return`\n  @group(0) @binding(0) var<storage, read> input : array<${$.type.storage}>;\n  @group(0) @binding(1) var<storage, read> scaleInput : array<${x}>;\n  @group(0) @binding(2) var<storage, read_write> output : array<${S.type.storage}>;\n  struct Uniforms {H: u32, C : u32};\n  @group(0) @binding(3) var<uniform> uniforms: Uniforms;\n\n  ${g.mainStart()}\n    let currentImageNumber = global_idx / (uniforms.C * uniforms.H);\n    let currentChannelNumber = global_idx % uniforms.C;\n\n    let scaleOffset = currentImageNumber * uniforms.C + currentChannelNumber;\n    let scale = scaleInput[scaleOffset];\n    output[global_idx] = fma(input[global_idx], ${_}(scale[0]), ${_}(scale[1]));\n  }`};e.compute({name:\"InstanceNormalizationNHWC\",shaderCache:{hint:`${d}`,inputDependencies:u},getRunData:()=>({outputs:[{dims:o,dataType:t[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:m}),getShaderSource:w},{inputs:[t[0],h]})},Td=(e,t)=>{t.format===\"NHWC\"?bf(e,e.inputs,t):e.compute(gf(e.inputs,t))}});var wf,vf,Ed,kd=U(()=>{\"use strict\";Q();ae();ie();wf=e=>{if(!e||e.length<2)throw new Error(\"layerNorm requires at least 2 inputs.\")},vf=(e,t,r)=>{let n=t.simplified,o=e[0].dims,i=e[1],a=!n&&e[2],l=o,d=k.normalizeAxis(t.axis,o.length),p=k.sizeToDimension(o,d),m=k.sizeFromDimension(o,d),u=k.size(i.dims),h=a?k.size(a.dims):0;if(u!==m||a&&h!==m)throw new Error(`Size of X.shape()[axis:] == ${m}.\n       Size of scale and bias (if provided) must match this.\n       Got scale size of ${u} and bias size of ${h}`);let w=[];for(let T=0;T<o.length;++T)T<d?w.push(o[T]):w.push(1);let g=$e(m),b=[\"type\",\"type\"],x=[{type:12,data:p},{type:1,data:m},{type:12,data:Math.floor(m/g)},{type:1,data:t.epsilon}];a&&b.push(\"type\");let _=r>1,$=r>2,S=T=>{let A=ge(e[0].dataType),D=[E(\"x\",e[0].dataType,e[0].dims,g),E(\"scale\",i.dataType,i.dims,g)];a&&D.push(E(\"bias\",a.dataType,a.dims,g)),D.push(M(\"output\",e[0].dataType,l,g)),_&&D.push(M(\"mean_data_output\",1,w)),$&&D.push(M(\"inv_std_output\",1,w));let z=[{name:\"norm_count\",type:\"u32\"},{name:\"norm_size\",type:\"f32\"},{name:\"norm_size_vectorized\",type:\"u32\"},{name:\"epsilon\",type:\"f32\"}];return`\n  ${T.registerUniforms(z).declareVariables(...D)}\n  ${T.mainStart()}\n    ${T.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.norm_count\")}\n    let offset = global_idx * uniforms.norm_size_vectorized;\n    var mean_vector = ${gt(\"f32\",g)};\n    var mean_square_vector = ${gt(\"f32\",g)};\n\n    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {\n      let value = ${At(A,g,\"x[h + offset]\")};\n      mean_vector += value;\n      mean_square_vector += value * value;\n    }\n    let mean = ${Xe(\"mean_vector\",g)} / uniforms.norm_size;\n    let inv_std_dev = inverseSqrt(${Xe(\"mean_square_vector\",g)} / uniforms.norm_size ${n?\"\":\"- mean * mean\"} + uniforms.epsilon);\n\n    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {\n      let f32input = ${At(A,g,\"x[j + offset]\")};\n      let f32scale = ${At(A,g,\"scale[j]\")};\n      output[j + offset] = ${D[0].type.value}((f32input ${n?\"\":\"- mean\"}) * inv_std_dev * f32scale\n        ${a?`+ ${At(A,g,\"bias[j]\")}`:\"\"}\n      );\n    }\n\n    ${_?\"mean_data_output[global_idx] = mean\":\"\"};\n    ${$?\"inv_std_output[global_idx] = inv_std_dev\":\"\"};\n  }`},I=[{dims:l,dataType:e[0].dataType}];return _&&I.push({dims:w,dataType:1}),$&&I.push({dims:w,dataType:1}),{name:\"LayerNormalization\",shaderCache:{hint:`${g};${r};${n}`,inputDependencies:b},getRunData:()=>({outputs:I,dispatchGroup:{x:Math.ceil(p/64)},programUniforms:x}),getShaderSource:S}},Ed=(e,t)=>{wf(e.inputs),e.compute(vf(e.inputs,t,e.outputCount))}});var $f,_f,Pd,Od,Dd=U(()=>{\"use strict\";Q();ae();Ce();ie();$f=(e,t)=>{if(e.length<3||e.length>4)throw new Error(\"MatMulNBits requires 3 or 4 inputs\");let r=e[0],n=r.dims.length;if(r.dims[n-1]!==t.k)throw new Error(\"The last dim of input shape does not match the k value\");let o=Math.floor((t.k+t.blockSize-1)/t.blockSize),i=t.blockSize/8*t.bits,a=e[1];if(!k.areEqual(a.dims,[t.n,o,i]))throw new Error(\"The second inputs must be 3D tensor with shape N X nBlocksPerCol X blobSize\");let d=e[2].dims;if(k.size(d)!==t.n*o)throw new Error(\"scales input size error.\");if(e.length===4){let m=e[3].dims,u=t.bits>4?t.n*o:t.n*Math.floor((o+1)/2);if(k.size(m)!==u)throw new Error(\"zeroPoints input size error.\")}},_f=(e,t,r,n)=>{let o=e[0].dims,i=o.length,a=Math.floor((t.k+t.blockSize-1)/t.blockSize),l=o[i-2],d=t.k,p=t.n,m=o.slice(0,i-2),u=k.size(m),w=t.blockSize/8*t.bits/4,g=e[0].dataType,b=$e(l),x=$e(t.k),_=$e(w),$=It(g),S=l*a*$,I=Math.floor(n/S),T=a<=r[0]&&I>0,A=!T||I>=4?$e(p):I>=2&&$e(p)>=2?2:1,D=m.concat([l,p]),z=k.size(D)/A/b,H=T?[]:[{type:12,data:z},{type:12,data:t.blockSize}],W=[u,l,d/x],X=k.convertShape(e[1].dims).slice();X.splice(-1,1,w/_),H.push(...V(W)),H.push(...V(X)),H.push(...V(e[2].dims)),e.length===4&&H.push(...V(k.convertShape(e[3].dims)));let Y=[u,l,p/A];H.push(...V(Y));let pe=ue=>{let le=W.length,K=E(\"a\",e[0].dataType,le,x),de=E(\"b\",12,X.length,_),re=E(\"scales\",e[2].dataType,e[2].dims.length),se=[K,de,re],Z=e.length===4?E(\"zero_points\",12,e[3].dims.length):void 0;Z&&se.push(Z);let ne=Y.length,J=M(\"output\",e[0].dataType,ne,A),ke=[{name:\"output_size\",type:\"u32\"},{name:\"block_size\",type:\"u32\"}],R=ge(e[0].dataType),F=(()=>{switch(x){case 1:return`array<${R}, 8>`;case 2:return`mat4x2<${R}>`;case 4:return`mat2x4<${R}>`;default:throw new Error(`${x}-component is not supported.`)}})(),ce=`\n        for (var word: u32 = 0; word < ${w}; word += ${_}) {\n          ${de.indicesSet(\"b_indices\",\"2\",\"word\")};\n          let b_data = ${de.getByIndices(\"b_indices\")};\n          for (var i: u32 = 0; i < ${_}; i++) {\n            let b_value: u32 = ${_===1?\"b_data\":\"b_data[word + i]\"};\n            let b_mask: u32 = 0x0F0F0F0Fu;\n            let b_value_lower: vec4<u32> = unpack4xU8(b_value & b_mask);\n            let b_value_upper: vec4<u32> = unpack4xU8((b_value >> 4) & b_mask);\n            let b_quantized_values = ${F}(${Array.from({length:4},(Se,we)=>`${R}(b_value_lower[${we}]), ${R}(b_value_upper[${we}])`).join(\", \")});\n            let b_dequantized_values = ${(()=>x===1?`${F}(${Array.from({length:8},(Se,we)=>`(b_quantized_values[${we}] - zero_point) * scale`).join(\", \")});`:`(b_quantized_values - ${F}(${Array(8).fill(\"zero_point\").join(\",\")})) * scale;`)()};\n            // Number of B elements per 32-bit word is 32/bits = 32/4 = 8\n            for (var m: u32 = 0; m < ${T?l:b}u; m++) {\n              ${K.indicesSet(\"a_indices\",le-2,T?\"m\":`row * ${b} + m`)};\n              ${K.indicesSet(\"a_indices\",le-1,\"word_offset\")};\n              var input_offset = ${K.indicesToOffset(\"a_indices\")};\n              var a_data: ${F};\n              for (var j: u32 = 0; j < ${8/x}; j++) {\n                a_data[j] = ${K.getByOffset(\"input_offset\")};\n                input_offset++;\n              }\n              ${T?\"workgroup_shared[workgroup_shared_offset + m]\":\"output_values[m]\"}${A>1?\"[c]\":\"\"} += ${Array.from({length:8/x},(Se,we)=>`${x===1?`a_data[${we}] * b_dequantized_values[${we}]`:`dot(a_data[${we}], b_dequantized_values[${we}])`}`).join(\" + \")};\n            }\n            word_offset += ${8/x};\n          }\n        }`,Re=Z?`\n          zero_point_offset += 4;\n          if (zero_point_offset == 32) {\n            zero_point_offset = 0;\n            zero_point_index++;\n            zero_point_word = ${Z.getByOffset(\"zero_point_index\")};\n          }`:\"\";return T?`\n        var<workgroup> workgroup_shared: array<${J.type.value}, ${l*a}>;\n        ${ue.declareVariables(...se,J)}\n        ${ue.mainStart([a,1,1])}\n          var a_indices: ${K.type.indices};\n          var block = local_id.x;\n          var col = workgroup_id.y;\n          var batch = workgroup_id.z;\n          ${K.indicesSet(\"a_indices\",\"0\",\"batch\")};\n          // Two zero points are packed into one byte when uniforms.bits is 4.\n          for (var c: u32 = 0; c < ${A}; c++) {\n            let col_times_components_plus_c = col * ${A} + c;\n              ${Z?`\n            var zero_point_bytes_per_col: u32 = (${a} + 1) / 2;\n            var zero_point_byte_count: u32 = col_times_components_plus_c * zero_point_bytes_per_col + (block >> 0x1u);\n            var zero_point_word_index: u32 = zero_point_byte_count >> 0x2u;\n            var zero_point_byte_offset: u32 = zero_point_byte_count & 0x3u;\n            var zero_point_nibble_offset: u32 = block & 0x1u;\n            var zero_point_bits_offset: u32 = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);\n            var zero_point_word: u32 = ${Z.getByOffset(\"zero_point_word_index\")} >> zero_point_bits_offset;`:\"\"}\n            var b_indices: ${de.type.indices};\n            ${de.indicesSet(\"b_indices\",\"0\",\"col_times_components_plus_c\")};\n            // The scale and zero points are computed per block.\n            var scales_index = col_times_components_plus_c * ${a} + block;\n            let scale = ${re.getByOffset(\"scales_index\")};\n            // The default zero point is 8 for unsigned 4-bit quantization.\n            let zero_point = ${R}(${Z?\"(zero_point_word) & 0xFu\":8});\n            ${de.indicesSet(\"b_indices\",\"1\",\"block\")};\n            var word_offset: u32 = block * ${t.blockSize/x};\n            var workgroup_shared_offset: u32 = block * ${l};\n            ${ce}\n          }\n          workgroupBarrier();\n          var output_indices: ${J.type.indices};\n          var elements_per_thread: u32 = ${Math.ceil(l/a)};\n          ${J.indicesSet(\"output_indices\",\"0\",\"batch\")};\n          ${J.indicesSet(\"output_indices\",ne-1,\"col\")};\n          ${J.indicesSet(\"output_indices\",ne-2,\"local_id.x * elements_per_thread\")};\n          var output_offset = ${J.indicesToOffset(\"output_indices\")};\n          for (var m: u32 = 0u; m < elements_per_thread; m++) {\n            var row = m + local_id.x * elements_per_thread;\n            if (row < ${l}) {\n              var output_value: ${J.type.value} = ${J.type.value}(0);\n              var workgroup_shared_offset: u32 = row;\n              for (var b: u32 = 0u; b < ${a}u; b++) {\n                output_value += workgroup_shared[workgroup_shared_offset];\n                workgroup_shared_offset += ${l};\n              }\n              ${J.setByOffset(\"output_offset\",\"output_value\")};\n              output_offset += ${p/A};\n            }\n          }\n        }`:`\n        ${ue.registerUniforms(ke).declareVariables(...se,J)}\n        ${ue.mainStart()}\n          ${ue.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\")}\n          var output_values: array<${J.type.value}, ${b}>;\n          var output_indices = ${J.offsetToIndices(\"global_idx\")};\n          var col = ${J.indicesGet(\"output_indices\",ne-1)};\n          var row = ${J.indicesGet(\"output_indices\",ne-2)};\n          var a_indices: ${K.type.indices} = output_indices;\n          // Two zero points are packed into one byte because uniforms.bits <= 4.\n          // zero_point_offset is either 0 or 4. It is bit offset within one byte.\n          // TODO support zero_point_offset for bits > 4\n          ${Z?`\n          var zero_point_abs_offset = col * ${A} * ((${a} + 1) / 2);\n          var zero_point_index: u32 = zero_point_abs_offset / 4;\n          var zero_point_word: u32 = ${Z.getByOffset(\"zero_point_index\")};\n          var zero_point_offset: u32 = (zero_point_abs_offset % 4) * 8;`:\"\"}\n          var scale_index = col * ${a*A};\n          var b_indices: ${de.type.indices};\n          for (var c: u32 = 0; c < ${A}; c++) {\n            ${de.indicesSet(\"b_indices\",\"0\",`col * ${A} + c`)};\n            var block_offset: u32 = 0;\n            for (var block: u32 = 0; block < ${a}; block++) {\n              // The scale and zero points are computed per block.\n              let scale = ${re.getByOffset(\"scale_index\")};\n              // The default zero point is 8 for unsigned 4-bit quantization.\n              let zero_point = ${R}(${Z?\"extractBits(zero_point_word, zero_point_offset, 4)\":8});\n              ${de.indicesSet(\"b_indices\",\"1\",\"block\")};\n              var word_offset: u32 = block_offset;\n              ${ce}\n              scale_index++;\n              ${Re}\n              block_offset += uniforms.block_size / ${x};\n            }\n            // Drop the trailing 4 bits if the zero_poit_offset is not a byte boundary to align with the next byte.\n            ${Z?`if (zero_point_offset % 8 > 0) {\n                ${Re}\n              }`:\"\"}\n            }\n            for (var k: u32 = 0u; k < ${b}u; k++) {\n              ${J.indicesSet(\"output_indices\",ne-2,`${b} * row + k`)};\n              ${J.setByIndices(\"output_indices\",\"output_values[k]\")}\n            }\n        }`};return{name:T?\"BlockwiseMatMulNBits\":\"MatMulNBits\",shaderCache:{hint:`${t.cacheKey};${l};${g};${e.length}`,inputDependencies:Array(e.length).fill(\"rank\")},getRunData:()=>({outputs:[{dims:D,dataType:g}],name:T?\"BlockwiseMatMulNBits\":\"MatMulNBits\",dispatchGroup:T?{x:1,y:Math.ceil(p/A),z:u}:{x:Math.ceil(z/64)},programUniforms:H}),getShaderSource:pe}},Pd=(e,t)=>{$f(e.inputs,t);let r=e.getMaxComputeWorkgroupSizes(),n=e.getMaxComputeWorkgroupStoragesize();e.compute(_f(e.inputs,t,r,n))},Od=e=>te(e)});var xf,Sf,If,Cf,Tf,Af,Ef,kf,zd,Bd=U(()=>{\"use strict\";Q();ae();ie();xf=e=>{if(!e||e.length<1)throw new Error(\"Too few inputs\");if(e[0].dataType!==1&&e[0].dataType!==10)throw new Error(\"Input type must be float or float16.\");if(e.length>=2){let t=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(t=e[3].dims[0]*2===e[1].dims[0]),!t)throw new Error(\"The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].\")}},Sf=(e,t,r)=>{let n=\"\";for(let o=t-1;o>=0;--o)n+=`\n            k = i32(${e.indicesGet(\"indices\",o)}) - ${G(\"uniforms.pads\",o,r)};\n            if (k < 0) {\n              break;\n            }\n            if (k >= i32(${G(\"uniforms.x_shape\",o,t)})) {\n              break;\n            }\n            offset += k * i32(${G(\"uniforms.x_strides\",o,t)});\n        `;return`\n          value = ${e.type.value}(uniforms.constant_value);\n          for (var i = 0; i < 1; i++) {\n            var offset = 0;\n            var k = 0;\n            ${n}\n            value = x[offset];\n          }\n      `},If=(e,t,r)=>{let n=\"\";for(let o=t-1;o>=0;--o)n+=`\n                k = i32(${e.indicesGet(\"indices\",o)}) - ${G(\"uniforms.pads\",o,r)};\n                if (k < 0) {\n                  k = -k;\n                }\n                {\n                  let _2n_1 = 2 * (i32(${G(\"uniforms.x_shape\",o,t)}) - 1);\n                  k = k % _2n_1;\n                  if(k >= i32(${G(\"uniforms.x_shape\",o,t)})) {\n                    k = _2n_1 - k;\n                  }\n                }\n                offset += k * i32(${G(\"uniforms.x_strides\",o,t)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${n}\n              value = x[offset];\n          `},Cf=(e,t,r)=>{let n=\"\";for(let o=t-1;o>=0;--o)n+=`\n                k = i32(${e.indicesGet(\"indices\",o)}) - ${G(\"uniforms.pads\",o,r)};\n                if (k < 0) {\n                  k = 0;\n                }\n                if (k >= i32(${G(\"uniforms.x_shape\",o,t)})) {\n                  k = i32(${G(\"uniforms.x_shape\",o,t)}) - 1;\n                }\n                offset += k * i32(${G(\"uniforms.x_strides\",o,t)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${n}\n              value = x[offset];\n          `},Tf=(e,t,r)=>{let n=\"\";for(let o=t-1;o>=0;--o)n+=`\n                k = i32(${e.indicesGet(\"indices\",o)}) - ${G(\"uniforms.pads\",o,r)};\n                if (k < 0)  {\n                  k += i32(${G(\"uniforms.x_shape\",o,t)}]);\n                }\n                if (k >= i32(${G(\"uniforms.x_shape\",o,t)})) {\n                  k -= i32(${G(\"uniforms.x_shape\",o,t)});\n                }\n                offset += k * i32(${G(\"uniforms.x_strides\",o,t)});\n            `;return`\n              var offset = 0;\n              var k = 0;\n              ${n}\n              value = x[offset];\n          `},Af=(e,t,r)=>{switch(r.mode){case 0:return Sf(e,t,r.pads.length);case 1:return If(e,t,r.pads.length);case 2:return Cf(e,t,r.pads.length);case 3:return Tf(e,t,r.pads.length);default:throw new Error(\"Invalid mode\")}},Ef=(e,t)=>{let r=k.padShape(e[0].dims.slice(),t.pads),n=e[0].dims,o=k.size(r),i=[{type:12,data:o},{type:6,data:t.pads}];t.mode===0&&i.push({type:e[0].dataType,data:t.value}),i.push(...V(e[0].dims,r));let a=[\"rank\"],l=d=>{let p=M(\"output\",e[0].dataType,r.length),m=E(\"x\",e[0].dataType,n.length),u=m.type.value,h=Af(p,n.length,t),w=[{name:\"output_size\",type:\"u32\"},{name:\"pads\",type:\"i32\",length:t.pads.length}];return t.mode===0&&w.push({name:\"constant_value\",type:u}),`\n            ${d.registerUniforms(w).declareVariables(m,p)}\n            ${d.mainStart()}\n            ${d.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\")}\n\n            let indices = ${p.offsetToIndices(\"global_idx\")};\n\n            var value = ${u}(0);\n            ${h}\n            output[global_idx] = value;\n        }`};return{name:\"Pad\",shaderCache:{hint:`${t.mode}`,inputDependencies:a},getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(k.size(r)/64)},programUniforms:i}),getShaderSource:l}},kf=(e,t)=>{if(e.length>1){let r=e[1].getBigInt64Array(),n=e.length>=3&&e[2].data?e[2].getFloat32Array()[0]:0,o=e[0].dims.length,i=new Int32Array(2*o).fill(0);if(e.length>=4){let l=e[3].getBigInt64Array();for(let d=0;d<l.length;d++)i[Number(l[d])]=Number(r[d]),i[Number(l[d])+o]=Number(r[d+l.length])}else r.forEach((l,d)=>i[Number(d)]=Number(l));let a=[];return i.forEach(l=>a.push(l)),{mode:t.mode,value:n,pads:a}}else return t},zd=(e,t)=>{xf(e.inputs);let r=kf(e.inputs,t);e.compute(Ef(e.inputs,r),{inputs:[0]})}});var nn,Rd,Md,Ud,Vd,Pf,Of,Nd,Wd,Hd,Gd,Ld,Fd,qd,jd,Kd,Yd,Xd,Zd,Qd=U(()=>{\"use strict\";Ke();Q();ae();ie();nn=e=>{if(be.webgpu.validateInputContent&&(!e||e.length!==1))throw new Error(\"Pool ops requires 1 input.\")},Rd=(e,t,r)=>{let n=t.format===\"NHWC\",o=e.dims.slice();n&&o.splice(1,0,o.pop());let i=Object.hasOwnProperty.call(t,\"dilations\"),a=t.kernelShape.slice(),l=t.strides.slice(),d=i?t.dilations.slice():[],p=t.pads.slice();Ct.adjustPoolAttributes(r,o,a,l,d,p);let m=Ct.computePoolOutputShape(r,o,l,d,a,p,t.autoPad),u=Object.assign({},t);i?Object.assign(u,{kernelShape:a,strides:l,pads:p,dilations:d,cacheKey:t.cacheKey}):Object.assign(u,{kernelShape:a,strides:l,pads:p,cacheKey:t.cacheKey});let h=m.slice();return h.push(h.splice(1,1)[0]),[u,n?h:m]},Md=(e,t)=>{let r=t.format===\"NHWC\",n=k.size(e),o=k.size(t.kernelShape),i=[{type:12,data:n},{type:12,data:o}],a=[{name:\"outputSize\",type:\"u32\"},{name:\"kernelSize\",type:\"u32\"}];if(t.kernelShape.length<=2){let l=t.kernelShape[t.kernelShape.length-1],d=t.strides[t.strides.length-1],p=t.pads[t.pads.length/2-1],m=t.pads[t.pads.length-1],u=!!(p+m);i.push({type:12,data:l},{type:12,data:d},{type:12,data:p},{type:12,data:m}),a.push({name:\"kw\",type:\"u32\"},{name:\"sw\",type:\"u32\"},{name:\"pwStart\",type:\"u32\"},{name:\"pwEnd\",type:\"u32\"});let h=!1;if(t.kernelShape.length===2){let w=t.kernelShape[t.kernelShape.length-2],g=t.strides[t.strides.length-2],b=t.pads[t.pads.length/2-2],x=t.pads[t.pads.length-2];h=!!(b+x),i.push({type:12,data:w},{type:12,data:g},{type:12,data:b},{type:12,data:x}),a.push({name:\"kh\",type:\"u32\"},{name:\"sh\",type:\"u32\"},{name:\"phStart\",type:\"u32\"},{name:\"phEnd\",type:\"u32\"})}return[i,a,!0,u,h]}else{if(r)throw new Error(\"Pooling with kernelShape.length > 2 is not supported for NHWC format.\");let l=k.computeStrides(t.kernelShape);i.push({type:12,data:l},{type:12,data:t.pads},{type:12,data:t.strides}),a.push({name:\"kernelStrides\",type:\"u32\",length:l.length},{name:\"pads\",type:\"u32\",length:t.pads.length},{name:\"strides\",type:\"u32\",length:t.strides.length});let d=t.pads.reduce((p,m)=>p+m);return[i,a,!!d,!1,!1]}},Ud=(e,t,r,n,o,i,a,l,d,p,m,u)=>{let h=o.format===\"NHWC\",w=t.type.value,g=M(\"output\",t.type.tensor,n);if(o.kernelShape.length<=2){let b=\"\",x=\"\",_=\"\",$=r-(h?2:1);if(m?b=`\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${$}] = indices[${$}] * uniforms.sw - uniforms.pwStart + i;\n                  if (xIndices[${$}] < 0 || xIndices[${$}]\n                      >= uniforms.x_shape[${$}]) {\n                    pad++;\n                    continue;\n                  }\n                  let x_val = x[${t.indicesToOffset(\"xIndices\")}];\n                  ${i}\n                }`:b=`\n                for (var i: u32 = 0u; i < uniforms.kw; i++) {\n                  xIndices[${$}] = indices[${$}] * uniforms.sw - uniforms.pwStart + i;\n                  let x_val = x[${t.indicesToOffset(\"xIndices\")}];\n                  ${i}\n                }`,o.kernelShape.length===2){let I=r-(h?3:2);u?x=`\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${I}] = indices[${I}] * uniforms.sh - uniforms.phStart + j;\n                  if (xIndices[${I}] < 0 || xIndices[${I}] >= uniforms.x_shape[${I}]) {\n                    pad += i32(uniforms.kw);\n                    continue;\n                  }\n              `:x=`\n                for (var j: u32 = 0u; j < uniforms.kh; j++) {\n                  xIndices[${I}] = indices[${I}] * uniforms.sh - uniforms.phStart + j;\n                `,_=`\n              }\n            `}return`\n            ${e.registerUniforms(d).declareVariables(t,g)}\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.outputSize\")}\n\n              let indices = ${g.offsetToIndices(\"global_idx\")};\n              var xIndices = ${g.offsetToIndices(\"global_idx\")};\n\n              var value = ${w}(${l});\n              var pad = 0;\n              ${x}\n              ${b}\n              ${_}\n              ${a}\n\n              output[global_idx] = value;\n            }`}else{if(h)throw new Error(\"Pooling with kernelShape.length > 2 is not supported for NHWC format.\");let b=o.kernelShape.length,x=o.pads.length,_=\"\";return p?_=`\n                if (xIndices[j] >= uniforms.x_shape[j]) {\n                  pad++;\n                  isPad = true;\n                  break;\n                }\n              }\n              if (!isPad) {\n                let x_val = x[${t.indicesToOffset(\"xIndices\")}];\n                ${i}\n              }`:_=`\n              }\n              let x_val = x[${t.indicesToOffset(\"xIndices\")}];\n              ${i}\n            `,`\n            ${e.registerUniforms(d).declareVariables(t,g)}\n\n            ${e.mainStart()}\n              ${e.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.outputSize\")}\n              let indices = ${g.offsetToIndices(\"global_idx\")};\n              var xIndices = ${g.offsetToIndices(\"global_idx\")};\n\n              var offsets: array<u32, ${b}>;\n\n              var value = ${w}(${l});\n              var pad = 0;\n              var isPad = false;\n\n              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {\n                var offset = i;\n                for (var j = 0u; j < ${b-1}u; j++) {\n                  offsets[j] = offset / ${G(\"uniforms.kernelStrides\",\"j\",b)};\n                  offset -= offsets[j] * ${G(\"uniforms.kernelStrides\",\"j\",b)};\n                }\n                offsets[${b-1}] = offset;\n\n                isPad = false;\n                for (var j = ${r-b}u; j < ${r}u; j++) {\n                  xIndices[j] = indices[j] * ${G(\"uniforms.strides\",`j - ${r-b}u`,b)}\n                    + offsets[j - ${r-b}u] - ${G(\"uniforms.pads\",\"j - 2u\",x)};\n                  ${_}\n              }\n              ${a}\n\n              output[global_idx] = value;\n            }`}},Vd=e=>`${e.format};${e.ceilMode};${e.autoPad};${e.kernelShape.length}`,Pf=e=>`${Vd(e)};${e.countIncludePad}`,Of=e=>`${Vd(e)};${e.storageOrder};${e.dilations}`,Nd=e=>({format:e.format,autoPad:[\"NOTSET\",\"VALID\",\"SAME_UPPER\",\"SAME_LOWER\"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),Wd=(e,t,r,n)=>{let[o,i]=Rd(t,n,r),a=E(\"x\",t.dataType,t.dims.length),l=a.type.value,d=\"value += x_val;\",p=\"\";o.countIncludePad?p+=`value /= ${l}(uniforms.kernelSize);`:p+=`value /= ${l}(i32(uniforms.kernelSize) - pad);`;let[m,u,h,w,g]=Md(i,o);m.push(...V(t.dims,i));let b=[\"rank\"];return{name:e,shaderCache:{hint:`${n.cacheKey};${h};${w};${g}`,inputDependencies:b},getRunData:()=>({outputs:[{dims:i,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(k.size(i)/64)},programUniforms:m}),getShaderSource:x=>Ud(x,a,t.dims.length,i.length,o,d,p,0,u,h,w,g)}},Hd=e=>{let t=e.count_include_pad!==0,r=Nd(e);if(r.ceilMode!==0)throw new Error(\"using ceil() in shape computation is not yet supported for AveragePool\");let n={countIncludePad:t,...r,cacheKey:\"\"};return{...n,cacheKey:Pf(n)}},Gd=(e,t)=>{nn(e.inputs),e.compute(Wd(\"AveragePool\",e.inputs[0],!1,t))},Ld={autoPad:\"\",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[]},Fd=e=>{let t=e.format;return{format:t,...Ld,cacheKey:t}},qd=(e,t)=>{nn(e.inputs),e.compute(Wd(\"GlobalAveragePool\",e.inputs[0],!0,t))},jd=(e,t,r,n)=>{let[o,i]=Rd(t,n,r),a=`\n      value = max(x_val, value);\n    `,l=\"\",d=E(\"x\",t.dataType,t.dims.length),p=[\"rank\"],[m,u,h,w,g]=Md(i,o);return m.push(...V(t.dims,i)),{name:e,shaderCache:{hint:`${n.cacheKey};${h};${w};${g}`,inputDependencies:p},getRunData:()=>({outputs:[{dims:i,dataType:t.dataType}],dispatchGroup:{x:Math.ceil(k.size(i)/64)},programUniforms:m}),getShaderSource:b=>Ud(b,d,t.dims.length,i.length,o,a,l,t.dataType===10?-65504:-1e5,u,h,w,g)}},Kd=(e,t)=>{nn(e.inputs),e.compute(jd(\"MaxPool\",e.inputs[0],!1,t))},Yd=e=>{let t=e.storage_order,r=e.dilations,n=Nd(e);if(t!==0)throw new Error(\"column major storage order is not yet supported for MaxPool\");if(n.ceilMode!==0)throw new Error(\"using ceil() in shape computation is not yet supported for MaxPool\");let o={storageOrder:t,dilations:r,...n,cacheKey:\"\"};return{...o,cacheKey:Of(o)}},Xd=e=>{let t=e.format;return{format:t,...Ld,cacheKey:t}},Zd=(e,t)=>{nn(e.inputs),e.compute(jd(\"GlobalMaxPool\",e.inputs[0],!0,t))}});var zf,Bf,Jd,el=U(()=>{\"use strict\";Ke();Q();ie();zf=(e,t,r)=>{let n=e===t,o=e<t&&r<0,i=e>t&&r>0;if(n||o||i)throw new Error(\"Range these inputs' contents are invalid.\")},Bf=(e,t,r,n)=>{let o=Math.abs(Math.ceil((t-e)/r)),i=[o],a=o,l=[{type:12,data:a},{type:n,data:e},{type:n,data:r},...V(i)],d=p=>{let m=M(\"output\",n,i.length),u=m.type.value,h=[{name:\"outputSize\",type:\"u32\"},{name:\"start\",type:u},{name:\"delta\",type:u}];return`\n        ${p.registerUniforms(h).declareVariables(m)}\n        ${p.mainStart()}\n        ${p.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.outputSize\")}\n        output[global_idx] = uniforms.start + ${u}(global_idx) * uniforms.delta;\n      }`};return{name:\"Range\",shaderCache:{hint:`${n}`},getShaderSource:d,getRunData:()=>({outputs:[{dims:i,dataType:n}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:l})}},Jd=e=>{let t=0,r=0,n=0;e.inputs[0].dataType===6?(t=e.inputs[0].getInt32Array()[0],r=e.inputs[1].getInt32Array()[0],n=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(t=e.inputs[0].getFloat32Array()[0],r=e.inputs[1].getFloat32Array()[0],n=e.inputs[2].getFloat32Array()[0]),be.webgpu.validateInputContent&&zf(t,r,n),e.compute(Bf(t,r,n,e.inputs[0].dataType),{inputs:[]})}});var Rf,Mf,Uf,Vf,Nf,Wf,Hf,Gf,Lf,Ff,qf,tl,jf,Kf,Yf,Xf,Zf,rl,nl,ol=U(()=>{\"use strict\";Q();ae();Ce();ie();Rf=(e,t)=>{if(e.every(r=>r>0||(()=>{throw new Error(\"Resize requires scales input values to be positive\")})),e.length>0){if(t.mode===\"linear\"){if(!(e.length===2||e.length===3||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1||e.length===5&&e[0]===1&&e[1]===1))throw new Error(`For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and\n            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1`)}else if(t.mode===\"cubic\"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error(\"Resize requires scales input size to be 2 or 4 for cubic mode\")}},Mf=(e,t,r)=>{t.every(o=>o>=0&&o<r||(()=>{throw new Error(\"Resize requires axes input values to be positive and less than rank\")}));let n=new Array(r).fill(1);return t.forEach((o,i)=>n[o]=e[i]),n},Uf=(e,t,r,n,o,i)=>{let[a,l,d]=r>10?[1,2,3]:[-1,e.length>1?1:-1,-1],p=e[0].dims.length;if(a>0&&e.length>a&&e[a].dims.length>0)e[a].getFloat32Array().forEach(m=>i.push(m));else if(t.coordinateTransformMode===\"tf_crop_and_resize\")throw new Error(\"Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize\");if(l>0&&e.length>l&&e[l].dims.length>0){if(e[l].getFloat32Array().forEach(m=>n.push(m)),n.length!==0&&n.length!==p&&r>=18&&n.length!==t.axes.length)throw new Error(\"Resize requires scales input size to be same as input rank or axes size for opset 18 and up\");Rf(n,t),t.axes.length>0&&Mf(n,t.axes,p).forEach((m,u)=>n[u]=m)}if(d>0&&e.length>d&&(e[d].getBigInt64Array().forEach(m=>o.push(Number(m))),o.length!==p||r>=18&&o.length===t.axes.length))throw new Error(\"Resize requires sizes input size to be same as input rank or axes size for opset 18 and up\");if(t.axes.length>0){if(n.length!==t.axes.length)throw new Error('Resize requires \"scales\" input size to be of axes rank when axes attributes is specified');if(o.length!==t.axes.length)throw new Error('Resize requires \"sizes\" input size to be of rank axes rank when axes attributes is specified')}if(typeof n<\"u\"&&typeof o<\"u\"&&n.length>0&&o.length>p)throw new Error(\"Resize requires only of scales or sizes to be specified\")},Vf=(e,t)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,\n     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${t} { `+(()=>{switch(e){case\"asymmetric\":return`return ${t}(xResized) / ${t}(xScale);`;case\"pytorch_half_pixel\":return`if (lengthResized > 1) {\n                    return (${t}(xResized) + 0.5) / ${t}(xScale) - 0.5;\n                  } else {\n                    return 0.0;\n                  }`;case\"tf_half_pixel_for_nn\":return`return (${t}(xResized) + 0.5) / ${t}(xScale);`;case\"align_corners\":return`if (lengthResized == 1) {\n                    return 0.0;\n                  } else {\n                    // The whole part and the fractional part are calculated separately due to inaccuracy of floating\n                    // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an\n                    // offset-by-one error later in floor().\n                    let whole = ${t}(xResized * (lengthOriginal - 1) / (lengthResized - 1));\n                    let fract =\n                        ${t}(xResized * (lengthOriginal - 1) % (lengthResized - 1)) / ${t}(lengthResized - 1);\n                    return whole + fract;\n                  }`;case\"tf_crop_and_resize\":return`if (lengthResized > 1) {\n                    return ${t}(roiStart) * ${t}(lengthOriginal - 1) +\n                        (${t}(xResized) * ${t}(roiEnd - roiStart) * ${t}(lengthOriginal - 1)) /\n                        ${t}(lengthResized - 1);\n                  } else {\n                    return 0.5 * ${t}(roiStart + roiEnd) * ${t}(lengthOriginal - 1);\n                  }`;case\"half_pixel_symmetric\":return`const outputWidth = ${t}xScale * ${t}(lengthResized);\n                  const adjustment = ${t}(lengthResized) / outputWidth;\n                  const center = ${t}(lengthOriginal) / 2;\n                  const offset = center * (1 - adjustment);\n                  return offset + ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;case\"half_pixel\":return`return ((${t}(xResized) + 0.5) / ${t}(xScale)) - 0.5;`;default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+\"}\",Nf=(e,t,r)=>`fn getNearestPixelFromOriginal(xOriginal: ${r}, isDownSample: bool) -> ${r} {`+(()=>{switch(e){case\"round_prefer_ceil\":return\"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }\";case\"floor\":return\"return floor(xOriginal);\";case\"ceil\":return\"return ceil(xOriginal);\";case\"round_prefer_floor\":return\"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }\";case\"simple\":default:if(t<11)return\"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }\";throw new Error(`Nearest mode ${e} is not supported`)}})()+\"}\",Wf=(e,t,r)=>{let n=new Array(r).fill(0).concat(new Array(r).fill(1)),o=e.length===0?n:e.slice();return t.length>0?(t.forEach((i,a)=>{n[i]=o[a],n[a+r]=o[t.length+a]}),n):o},Hf=(e,t,r,n)=>{let o=[];if(r.length>0)if(n.length>0){if(e.forEach(i=>o.push(i)),Math.max(...n)>e.length)throw new Error(\"axes is out of bound\");n.forEach((i,a)=>o[i]=r[a])}else r.forEach(i=>o.push(i));else{if(t.length===0)throw new Error(\"Resize requires either scales or sizes.\");o=e.map((i,a)=>Math.round(i*t[a]))}return o},Gf=(e,t,r)=>{let n=(()=>{switch(r.keepAspectRatioPolicy){case\"not_larger\":return r.axes.length>0?Math.min(...r.axes.map(i=>t[i]),Number.MAX_VALUE):Math.min(...t,Number.MAX_VALUE);case\"not_smaller\":return r.axes.length>0?Math.max(...r.axes.map(i=>t[i]),Number.MIN_VALUE):Math.max(...t,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${r.keepAspectRatioPolicy} is not supported`)}})();t.fill(1,0,t.length);let o=e.slice();return r.axes.length>0?(r.axes.forEach(i=>t[i]=n),r.axes.forEach(i=>o[i]=Math.round(e[i]*t[i]))):(t.fill(n,0,t.length),o.forEach((i,a)=>o[a]=Math.round(i*t[a]))),o},Lf=(e,t,r,n,o)=>`\n    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${e.type.indices}) -> array<${e.type.value}, ${r.length}> {\n      var original_indices: array<${e.type.value}, ${r.length}>;\n      for (var i:u32 = 0; i < ${r.length}; i++) {\n        var output_index = ${e.indicesGet(\"output_indices\",\"i\")};\n        var scale = ${G(\"uniforms.scales\",\"i\",n)};\n        var roi_low = ${G(\"uniforms.roi\",\"i\",o)};\n        var roi_hi = ${G(\"uniforms.roi\",`i + ${t.length}`,o)};\n        if (scale == 1.0) {\n          original_indices[i] = ${e.type.value}(output_index);\n        } else {\n          var input_shape_i = ${G(\"uniforms.input_shape\",\"i\",t.length)};\n          var output_shape_i = ${G(\"uniforms.output_shape\",\"i\",r.length)};\n          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                           input_shape_i, roi_low, roi_hi);\n        }\n      }\n      return original_indices;\n    }`,Ff=(e,t,r,n,o,i,a)=>`\n    fn calculateInputIndicesFromOutputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {\n      var input_indices: ${e.type.indices};\n      for (var i:u32 = 0; i < ${n.length}; i++) {\n        var output_index = ${t.indicesGet(\"output_indices\",\"i\")};\n        var input_index: u32;\n        var scale = ${G(\"uniforms.scales\",\"i\",o)};\n        if (scale == 1.0) {\n          input_index = output_index;\n        } else {\n          var roi_low = ${G(\"uniforms.roi\",\"i\",i)};\n          var roi_hi = ${G(\"uniforms.roi\",`i + ${r.length}`,i)};\n          var input_shape_i = ${G(\"uniforms.input_shape\",\"i\",r.length)};\n          var output_shape_i = ${G(\"uniforms.output_shape\",\"i\",n.length)};\n          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,\n                                                                        input_shape_i, roi_low, roi_hi);\n          if (!${a} || (original_idx >= 0 && original_idx < ${t.type.value}(input_shape_i))) {\n            if (original_idx < 0) {\n              input_index = 0;\n            } else if (original_idx > ${t.type.value}(input_shape_i - 1)) {\n              input_index = input_shape_i - 1;\n            } else {\n              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));\n            }\n          } else {\n            input_index = u32(original_idx);\n          }\n        }\n        ${e.indicesSet(\"input_indices\",\"i\",\" input_index\")}\n      }\n      return input_indices;\n    }`,qf=(e,t)=>`\n    fn checkInputIndices(input_indices: ${e.type.indices}) -> bool {\n      for (var i:u32 = 0; i < ${t.length}; i++) {\n        var input_index = ${e.indicesGet(\"input_indices\",\"i\")};\n        if (input_index < 0 || input_index >= ${G(\"uniforms.input_shape\",\"i\",t.length)}) {\n          return false;\n        }\n      }\n      return true;\n    }`,tl=(e,t,r,n)=>e.rank>n?`\n    ${e.indicesSet(\"input_indices\",t,\"channel\")};\n    ${e.indicesSet(\"input_indices\",r,\"batch\")};\n`:\"\",jf=(e,t,r,n,o)=>{let[a,l,d,p]=r.length===2?[-1,0,1,-1]:[0,2,3,1],m=e.type.value;return`\n    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${m} {\n      var input_indices: ${e.type.indices};\n      ${e.indicesSet(\"input_indices\",l,`max(0, min(row, ${r[l]} - 1))`)};\n      ${e.indicesSet(\"input_indices\",d,`max(0, min(col, ${r[d]} - 1))`)};\n      ${tl(e,p,a,2)}\n      return ${e.getByIndices(\"input_indices\")};\n    }\n\n    fn bilinearInterpolation(output_indices: ${t.type.indices}) -> ${m} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var row:${m} = originalIndices[${l}];\n      var col:${m} = originalIndices[${d}];\n      ${n?`if (row < 0 || row > (${r[l]} - 1) || col < 0 || col > (${r[d]} - 1)) {\n        return ${o};\n      }`:\"\"};\n      row = max(0, min(row, ${r[l]} - 1));\n      col = max(0, min(col, ${r[d]} - 1));\n      var row1: u32 = u32(row);\n      var col1: u32 = u32(col);\n      var row2: u32 = u32(row + 1);\n      var col2: u32 = u32(col + 1);\n      var channel: u32 = ${r.length>2?`u32(originalIndices[${p}])`:\"0\"};\n      var batch: u32 =  ${r.length>2?`u32(originalIndices[${a}])`:\"0\"};\n      var x11: ${m} = getInputValue(batch, channel, row1, col1);\n      var x12: ${m} = getInputValue(batch, channel, row1, col2);\n      var x21: ${m} = getInputValue(batch, channel, row2, col1);\n      var x22: ${m} = getInputValue(batch, channel, row2, col2);\n      var dx1: ${m} = abs(row - ${m}(row1));\n      var dx2: ${m} = abs(${m}(row2) - row);\n      var dy1: ${m} = abs(col - ${m}(col1));\n      var dy2: ${m} = abs(${m}(col2) - col);\n      if (row1 == row2) {\n        dx1 = 0.5;\n        dx2 = 0.5;\n      }\n      if (col1 == col2) {\n        dy1 = 0.5;\n        dy2 = 0.5;\n      }\n      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);\n    }`},Kf=(e,t,r,n,o,i,a,l,d,p)=>{let m=r.length===2,u=!0,[h,w]=m?[0,1]:u?[2,3]:[1,2],g=e.type.value,b=x=>{let _=x===h?\"row\":\"col\";return`\n      fn ${_}CubicInterpolation(input_indices: ${e.type.indices}, output_indices: ${t.type.indices}) -> ${g} {\n        var output_index = ${t.indicesGet(\"output_indices\",x)};\n        var originalIdx: ${g} = getOriginalCoordinateFromResizedCoordinate(output_index, ${o[x]},\n        ${n[x]}, ${r[x]}, ${i[x]}, ${i[x]} + ${r.length});\n        var fractOriginalIdx: ${g} = originalIdx - floor(originalIdx);\n        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);\n\n        if (${l} && (originalIdx < 0 || originalIdx > (${r[x]} - 1))) {\n          return ${d};\n        }\n        var data: array<${g}, 4> = array<${g}, 4>(0.0, 0.0, 0.0, 0.0);\n        for (var i: i32 = -1; i < 3; i++) {\n          var ${_}: ${g} = originalIdx + ${g}(i);\n          if (${_} < 0 || ${_} >= ${r[x]}) {\n            ${(()=>p?`coefs[i + 1] = 0.0;\n                        continue;`:l?`return ${d};`:`${_} = max(0, min(${_}, ${r[x]} - 1));`)()};\n          }\n        var input_indices_copy: ${e.type.indices} = input_indices;\n          ${e.indicesSet(\"input_indices_copy\",x,`u32(${_})`)};\n          data[i + 1] = ${x===h?e.getByIndices(\"input_indices_copy\"):\"rowCubicInterpolation(input_indices_copy, output_indices)\"};\n        }\n        return cubicInterpolation1D(data, coefs);\n      }`};return`\n    ${b(h)};\n    ${b(w)};\n  fn getCubicInterpolationCoefs(s: ${g}) -> array<${g}, 4> {\n    var absS = abs(s);\n    var coeffs: array<${g}, 4> = array<${g}, 4>(0.0, 0.0, 0.0, 0.0);\n    var oneMinusAbsS: ${g} = 1.0 - absS;\n    var twoMinusAbsS: ${g} = 2.0 - absS;\n    var onePlusAbsS: ${g} = 1.0 + absS;\n    coeffs[0] = ((${a} * onePlusAbsS - 5 * ${a}) * onePlusAbsS + 8 * ${a}) * onePlusAbsS - 4 * ${a};\n    coeffs[1] = ((${a} + 2) * absS - (${a} + 3)) * absS * absS + 1;\n    coeffs[2] = ((${a} + 2) * oneMinusAbsS - (${a} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;\n    coeffs[3] = ((${a} * twoMinusAbsS - 5 * ${a}) * twoMinusAbsS + 8 * ${a}) * twoMinusAbsS - 4 * ${a};\n    return coeffs;\n  }\n\n  fn cubicInterpolation1D(x: array<${g}, 4>, coefs: array<${g}, 4>) -> ${g} {\n    var coefsSum: ${g} = coefs[0] + coefs[1] + coefs[2] + coefs[3];\n    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;\n  }\n\n  fn bicubicInterpolation(output_indices: ${t.type.indices}) -> ${g} {\n    var input_indices: ${e.type.indices} = output_indices;\n    return colCubicInterpolation(input_indices, output_indices);\n  }\n    `},Yf=(e,t,r,n,o)=>{let[a,l,d,p,m]=r.length===3?[-1,0,1,2,-1]:[0,2,3,4,1],u=e.type.value;return`\n    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${u} {\n      var input_indices: ${e.type.indices};\n      ${e.indicesSet(\"input_indices\",l,`max(0, min(depth, ${r[l]} - 1))`)};\n      ${e.indicesSet(\"input_indices\",d,`max(0, min(height, ${r[d]} - 1))`)};\n      ${e.indicesSet(\"input_indices\",p,`max(0, min(width, ${r[p]} - 1))`)};\n      ${tl(e,m,a,3)}\n      return ${e.getByIndices(\"input_indices\")};\n    }\n\n    fn trilinearInterpolation(output_indices: ${t.type.indices}) -> ${u} {\n      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);\n      var depth:${u} = originalIndices[${l}];\n      var height:${u} = originalIndices[${d}];\n      var width:${u} = originalIndices[${p}];\n      ${n?`if (depth < 0 || depth > (${r[l]} - 1) || height < 0 || height > (${r[d]} - 1) || width < 0 || (width > ${r[p]} - 1)) {\n      return ${o};\n        }`:\"\"};\n\n    depth = max(0, min(depth, ${r[l]} - 1));\n      height = max(0, min(height, ${r[d]} - 1));\n      width = max(0, min(width, ${r[p]} - 1));\n      var depth1: u32 = u32(depth);\n      var height1: u32 = u32(height);\n      var width1: u32 = u32(width);\n      var depth2: u32 = u32(depth + 1);\n      var height2: u32 = u32(height + 1);\n      var width2: u32 = u32(width + 1);\n      var channel: u32 = ${r.length>3?`u32(originalIndices[${m}])`:\"0\"};\n      var batch: u32 =  ${r.length>3?`u32(originalIndices[${a}])`:\"0\"};\n\n      var x111: ${u} = getInputValue(batch, channel, depth1, height1, width1);\n      var x112: ${u} = getInputValue(batch, channel, depth1, height1, width2);\n      var x121: ${u} = getInputValue(batch, channel, depth1, height2, width1);\n      var x122: ${u} = getInputValue(batch, channel, depth1, height2, width2);\n      var x211: ${u} = getInputValue(batch, channel, depth2, height1, width1);\n      var x212: ${u} = getInputValue(batch, channel, depth2, height1, width2);\n      var x221: ${u} = getInputValue(batch, channel, depth2, height2, width1);\n      var x222: ${u} = getInputValue(batch, channel, depth2, height2, width2);\n      var dx1: ${u} = abs(depth - ${u}(depth1));\n      var dx2: ${u} = abs(${u}(depth2) - depth);\n      var dy1: ${u} = abs(height - ${u}(height1));\n      var dy2: ${u} = abs(${u}(height2) - height);\n      var dz1: ${u} = abs(width - ${u}(width1));\n      var dz2: ${u} = abs(${u}(width2) - width);\n      if (depth1 == depth2) {\n        dx1 = 0.5;\n        dx2 = 0.5;\n      }\n      if (height1 == height2) {\n        dy1 = 0.5;\n        dy2 = 0.5;\n      }\n      if (width1 == width2) {\n        dz1 = 0.5;\n        dz2 = 0.5;\n      }\n      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +\n              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);\n    }`},Xf=(e,t,r,n,o,i)=>{let a=e.dims,l=Wf(i,t.axes,a.length),d=Hf(a,n,o,t.axes),p=n.slice();n.length===0&&(p=a.map(($,S)=>$===0?1:d[S]/$),t.keepAspectRatioPolicy!==\"stretch\"&&(d=Gf(a,p,t)));let m=M(\"output\",e.dataType,d.length),u=E(\"input\",e.dataType,a.length),h=k.size(d),w=a.length===d.length&&a.every(($,S)=>$===d[S]),g=t.coordinateTransformMode===\"tf_crop_and_resize\",b=t.extrapolationValue,x=u.type.value,_=$=>`\n      ${w?\"\":`\n      ${Vf(t.coordinateTransformMode,x)};\n      ${(()=>{switch(t.mode){case\"nearest\":return`\n              ${qf(u,a)};\n              ${Nf(t.nearestMode,r,x)};\n              ${Ff(u,m,a,d,p.length,l.length,g)};\n              `;case\"linear\":return`\n              ${Lf(m,a,d,p.length,l.length)};\n              ${(()=>{if(a.length===2||a.length===4)return`${jf(u,m,a,g,b)}`;if(a.length===3||a.length===5)return`${Yf(u,m,a,g,b)}`;throw Error(\"Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.\")})()};\n            `;case\"cubic\":return`\n            ${(()=>{if(a.length===2||a.length===4)return`${Kf(u,m,a,d,p,l,t.cubicCoeffA,g,t.extrapolationValue,t.excludeOutside)}`;throw Error(\"Cubic mode only supports input dims 2 and 4 are supported in linear mode.\")})()};\n            `;default:throw Error(\"Invalid resize mode\")}})()};\n      `}\n      ${$.registerUniform(\"output_size\",\"u32\").registerUniform(\"scales\",\"f32\",p.length).registerUniform(\"roi\",\"f32\",l.length).declareVariables(u,m)}\n      ${$.mainStart()}\n        ${$.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.output_size\")}\n        ${w?\"output[global_idx] = input[global_idx];\":`\n        let output_indices = ${m.offsetToIndices(\"global_idx\")};\n        var input_indices: ${u.type.indices};\n        ${(()=>{switch(t.mode){case\"nearest\":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);\n                if (checkInputIndices(input_indices)) {\n                  output[global_idx] = ${u.getByIndices(\"input_indices\")};\n                } else {\n                  output[global_idx] = ${t.extrapolationValue};\n                }`;case\"linear\":return`output[global_idx] = ${a.length===2||a.length===4?\"bilinearInterpolation\":\"trilinearInterpolation\"}(output_indices);`;case\"cubic\":return\"output[global_idx] = bicubicInterpolation(output_indices);\";default:throw Error(`Unsupported resize mode: ${t.mode}`)}})()};\n`}\n      }`;return{name:\"Resize\",shaderCache:{hint:`${t.cacheKey}|${r}|${p.length>0?p:\"\"}|${o.length>0?o:\"\"}|${l.length>0?l:\"\"}|${w}|${a}`,inputDependencies:[\"rank\"]},getShaderSource:_,getRunData:()=>({outputs:[{dims:d,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(h/64)},programUniforms:[{type:12,data:h},{type:1,data:p},{type:1,data:l},...V(a,d)]})}},Zf=e=>{let t=e.customDataBuffer;return new Uint32Array(t,t.byteOffset,1)[0]},rl=(e,t)=>{let r=[],n=[],o=[],i=Zf(e);if(t.antialias!==0)throw Error(\"Only default value (0) for Antialias attribute is supported\");Uf(e.inputs,t,i,r,n,o),e.compute(Xf(e.inputs[0],t,i,r,n,o),{inputs:[0]})},nl=e=>{let t=e.antialias,r=e.axes,n=e.coordinateTransformMode,o=e.cubicCoeffA,i=e.excludeOutside!==0,a=e.extrapolationValue,l=e.keepAspectRatioPolicy,d=e.mode,p=e.nearestMode===\"\"?\"simple\":e.nearestMode;return te({antialias:t,axes:r,coordinateTransformMode:n,cubicCoeffA:o,excludeOutside:i,extrapolationValue:a,keepAspectRatioPolicy:l,mode:d,nearestMode:p})}});var Qf,Jf,il,al=U(()=>{\"use strict\";Q();ae();Ce();ie();Qf=(e,t)=>{let[r,n,o,i]=e,{numHeads:a,rotaryEmbeddingDim:l}=t;if(r.dims.length!==3&&r.dims.length!==4)throw new Error(`Input 'x' is expected to have 3 or 4 dimensions, got ${r.dims.length}`);if(!k.areEqual(n.dims,[])&&!k.areEqual(n.dims,[1])&&n.dims.length!==2)throw new Error(`Input 'position_ids' is expected to have 0, 1, or 2 dimensions, got ${n.dims.length}`);if(o.dims.length!==2)throw new Error(`Input 'cos_cache' is expected to have 2 dimensions, got ${o.dims.length}`);if(i.dims.length!==2)throw new Error(`Input 'sin_cache' is expected to have 2 dimensions, got ${i.dims.length}`);if(!k.areEqual(o.dims,i.dims))throw new Error(\"Inputs 'cos_cache' and 'sin_cache' are expected to have the same shape\");if(l>0&&a===0)throw new Error(\"num_heads must be provided if rotary_embedding_dim is specified\");let d=r.dims[0],p=r.dims[r.dims.length-2],m=o.dims[0],u=k.sizeFromDimension(r.dims,1)/p,h=l===0?o.dims[1]*2:u/a;if(l>h)throw new Error(\"rotary_embedding_dim must be less than or equal to head_size\");if(n.dims.length===2){if(d!==n.dims[0])throw new Error(`Input 'position_ids' dimension 0 should be of size batch_size, got ${n.dims[0]}`);if(p!==n.dims[1])throw new Error(`Input 'position_ids' dimension 1 should be of size sequence_length, got ${n.dims[1]}`)}if(h/2!==o.dims[1]&&l/2!==o.dims[1])throw new Error(`Input 'cos_cache' dimension 1 should be same as head_size / 2 or rotary_embedding_dim / 2, got ${o.dims[1]}`);if(p>m)throw new Error(\"Updating cos_cache and sin_cache in RotaryEmbedding is not currently supported\")},Jf=(e,t)=>{let{interleaved:r,numHeads:n,rotaryEmbeddingDim:o,scale:i}=t,a=e[0].dims[0],l=k.sizeFromDimension(e[0].dims,1),d=e[0].dims[e[0].dims.length-2],p=l/d,m=e[2].dims[1],u=o===0?m*2:p/n,h=new Array(a,d,p/u,u-m),w=k.computeStrides(h),g=[{type:1,data:i},{type:12,data:h},{type:12,data:w},...e[0].dims.length===3?new Array({type:12,data:[l,p,u,1]}):[],...e[0].dims.length===4?new Array({type:12,data:[l,u,d*u,1]}):[],...V(e[0].dims,e[1].dims,e[2].dims,e[3].dims,e[0].dims)],b=x=>{let _=E(\"input\",e[0].dataType,e[0].dims.length),$=E(\"position_ids\",e[1].dataType,e[1].dims.length),S=E(\"cos_cache\",e[2].dataType,e[2].dims.length),I=E(\"sin_cache\",e[3].dataType,e[3].dims.length),T=M(\"output\",e[0].dataType,e[0].dims.length);return x.registerUniforms([{name:\"scale\",type:\"f32\"},{name:\"global_shape\",type:\"u32\",length:h.length},{name:\"global_strides\",type:\"u32\",length:w.length},{name:\"input_output_strides\",type:\"u32\",length:w.length}]),`\n        ${x.declareVariables(_,$,S,I,T)}\n\n        ${x.mainStart(Tt)}\n          let half_rotary_emb_dim = uniforms.${S.name}_shape[1];\n          let bsnh = global_idx / uniforms.global_strides % uniforms.global_shape;\n          let size = uniforms.global_shape[0] * uniforms.global_strides[0];\n          ${x.guardAgainstOutOfBoundsWorkgroupSizes(\"size\")}\n\n          if (bsnh[3] < half_rotary_emb_dim) {\n            let position_ids_idx =\n                ${$.broadcastedIndicesToOffset(\"bsnh.xy\",M(\"\",$.type.tensor,2))};\n            let position_id =\n                u32(${$.getByOffset(\"position_ids_idx\")}) + select(0, bsnh[1], position_ids_idx == 0);\n            let i = dot(bsnh, uniforms.input_output_strides) + select(0, bsnh[3], ${r});\n            let j = i + select(half_rotary_emb_dim, 1, ${r});\n            let re = ${_.getByOffset(\"i\")} * ${S.get(\"position_id\",\"bsnh[3]\")} -\n                ${_.getByOffset(\"j\")} * ${I.get(\"position_id\",\"bsnh[3]\")};\n            ${T.setByOffset(\"i\",\"re\")}\n            let im = ${_.getByOffset(\"i\")} * ${I.get(\"position_id\",\"bsnh[3]\")} +\n                ${_.getByOffset(\"j\")} * ${S.get(\"position_id\",\"bsnh[3]\")};\n            ${T.setByOffset(\"j\",\"im\")}\n          } else {\n            let k = dot(bsnh, uniforms.input_output_strides) + half_rotary_emb_dim;\n            ${T.setByOffset(\"k\",_.getByOffset(\"k\"))}\n          }\n        }`};return{name:\"RotaryEmbedding\",shaderCache:{hint:te({interleaved:r}).cacheKey,inputDependencies:[\"rank\",\"rank\",\"rank\",\"rank\"]},getShaderSource:b,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(k.size(h)/Tt)},programUniforms:g})}},il=(e,t)=>{Qf(e.inputs,t),e.compute(Jf(e.inputs,t))}});var eh,th,sl,ul=U(()=>{\"use strict\";Q();ae();ie();eh=e=>{if(!e||e.length<3)throw new Error(\"layerNorm requires at least 3 inputs.\");let t=e[0],r=e[1],n=e[2];if(t.dataType!==r.dataType||t.dataType!==n.dataType)throw new Error(\"All inputs must have the same data type\");if(t.dims.length!==3&&t.dims.length!==2)throw new Error(\"Input must be 2D or 3D\");if(r.dims.length!==3&&r.dims.length!==2)throw new Error(\"Skip must be 2D or 3D\");let o=t.dims[t.dims.length-1],i=t.dims[t.dims.length-2];if(r.dims[r.dims.length-1]!==o)throw new Error(\"Skip must have the same hidden size as input\");if(r.dims[r.dims.length-2]!==i)throw new Error(\"Skip must have the same sequence length as input\");if(n.dims.length!==1)throw new Error(\"Gamma must be 1D\");if(n.dims[n.dims.length-1]!==o)throw new Error(\"Gamma must have the same hidden size as input\");if(e.length>3){let a=e[3];if(a.dims.length!==1)throw new Error(\"Beta must be 1D\");if(a.dims[a.dims.length-1]!==o)throw new Error(\"Beta must have the same hidden size as input\")}if(e.length>4){let a=e[4];if(a.dims.length!==1)throw new Error(\"Bias must be 1D\");if(a.dims[a.dims.length-1]!==o)throw new Error(\"Bias must have the same hidden size as input\")}},th=(e,t,r,n)=>{let o=t.simplified,i=e[0].dims,a=k.size(i),l=i,d=a,p=i.slice(-1)[0],m=n?i.slice(0,-1).concat(1):[],u=!o&&e.length>3,h=e.length>4,w=n&&r>1,g=n&&r>2,b=r>3,x=64,_=$e(p),$=[{type:12,data:d},{type:12,data:_},{type:12,data:p},{type:1,data:t.epsilon}],S=T=>{let A=[{name:\"output_size\",type:\"u32\"},{name:\"components\",type:\"u32\"},{name:\"hidden_size\",type:\"u32\"},{name:\"epsilon\",type:\"f32\"}],D=[E(\"x\",e[0].dataType,e[0].dims,_),E(\"skip\",e[1].dataType,e[1].dims,_),E(\"gamma\",e[2].dataType,e[2].dims,_)];u&&D.push(E(\"beta\",e[3].dataType,e[3].dims,_)),h&&D.push(E(\"bias\",e[4].dataType,e[4].dims,_)),D.push(M(\"output\",e[0].dataType,l,_)),w&&D.push(M(\"mean_output\",1,m)),g&&D.push(M(\"inv_std_output\",1,m)),b&&D.push(M(\"input_skip_bias_sum\",e[0].dataType,l,_));let z=ge(e[0].dataType),H=ge(1,_);return`\n\n      ${T.registerUniforms(A).declareVariables(...D)}\n      var<workgroup> sum_shared : array<${H}, ${x}>;\n      var<workgroup> sum_squared_shared : array<${H}, ${x}>;\n\n      ${T.mainStart([x,1,1])}\n        let ix = local_id.x;\n        let iy = global_id.x / ${x};\n\n        let hidden_size_vectorized: u32 = uniforms.hidden_size / uniforms.components;\n        var stride = hidden_size_vectorized / ${x};\n        let offset = ix * stride + iy * hidden_size_vectorized;\n        let offset1d = stride * ix;\n        if (ix == ${x-1}) {\n          stride = hidden_size_vectorized - stride * ix;\n        }\n        for (var i: u32 = 0; i < stride; i++) {\n          let skip_value = skip[offset + i];\n          let bias_value = ${h?\"bias[offset1d + i]\":z+\"(0.0)\"};\n          let input_value = x[offset + i];\n          let value = input_value + skip_value + bias_value;\n          ${b?\"input_skip_bias_sum[offset + i] = value;\":\"\"}\n          output[offset + i] = value;\n          let f32_value = ${At(z,_,\"value\")};\n          sum_shared[ix] += f32_value;\n          sum_squared_shared[ix] += f32_value * f32_value;\n        }\n        workgroupBarrier();\n\n        var reduce_size : u32 = ${x};\n        for (var curr_size = reduce_size >> 1;  curr_size > 0; curr_size = reduce_size >> 1) {\n          reduce_size = curr_size + (reduce_size & 1);\n          if (ix < curr_size) {\n            sum_shared[ix] += sum_shared[ix + reduce_size];\n            sum_squared_shared[ix] += sum_squared_shared[ix + reduce_size];\n          }\n          workgroupBarrier();\n        }\n\n        let sum = sum_shared[0];\n        let square_sum = sum_squared_shared[0];\n        let mean = ${Xe(\"sum\",_)} / f32(uniforms.hidden_size);\n        let inv_std_dev = inverseSqrt(${Xe(\"square_sum\",_)} / f32(uniforms.hidden_size) ${o?\"\":\"- mean * mean\"} + uniforms.epsilon);\n        ${w?\"mean_output[global_idx] = mean;\":\"\"}\n        ${g?\"inv_std_output[global_idx] = inv_std_dev;\":\"\"}\n\n        for (var i: u32 = 0; i < stride; i++) {\n          output[offset + i] = (output[offset + i] ${o?\"\":`- ${z}(mean)`}) *\n            ${z}(inv_std_dev) * gamma[offset1d + i]\n            ${u?\"+ beta[offset1d + i]\":\"\"};\n        }\n      }`},I=[{dims:l,dataType:e[0].dataType}];return r>1&&I.push({dims:m,dataType:1}),r>2&&I.push({dims:m,dataType:1}),r>3&&I.push({dims:i,dataType:e[0].dataType}),{name:\"SkipLayerNormalization\",shaderCache:{hint:`${_};${w};${g};${b}`,inputDependencies:e.map((T,A)=>\"type\")},getShaderSource:S,getRunData:()=>({outputs:I,dispatchGroup:{x:Math.ceil(d/p)},programUniforms:$})}},sl=(e,t)=>{eh(e.inputs);let n=[0];e.outputCount>1&&n.push(-3),e.outputCount>2&&n.push(-3),e.outputCount>3&&n.push(3),e.compute(th(e.inputs,t,e.outputCount,!1),{outputs:n})}});var rh,on,nh,dl,oh,ih,ll,cl,pl=U(()=>{\"use strict\";Q();ae();Ce();ie();rh=(e,t)=>{if(!e||e.length<1)throw new Error(\"too few inputs\");if(t.axes.length!==0){if(t.axes.length!==t.starts.length||t.axes.length!==t.ends.length)throw new Error(\"axes, starts and ends must have the same length\")}else if(t.starts.length!==t.ends.length)throw new Error(\"starts and ends must have the same length\");e.slice(1).forEach((r,n)=>{if(e[n+1].dataType!==6&&e[n+1].dataType!==7)throw new Error(`Input ${n} must be an array of int32 or int64`)})},on=(e,t)=>{let r=[];if(e.length>t)if(e[t].dataType===7)e[t].getBigInt64Array().forEach(n=>r.push(Number(n)));else if(e[t].dataType===6)e[t].getInt32Array().forEach(n=>r.push(Number(n)));else throw new Error(`Input ${t} must be an array of int32 or int64`);return r},nh=(e,t)=>{if(e.length>1){let r=on(e,1),n=on(e,2),o=on(e,3);return o.length===0&&(o=[...Array(e[0].dims.length).keys()]),te({starts:r,ends:n,axes:o})}else return t},dl=(e,t,r,n,o)=>{let i=e;return e<0&&(i+=r[n[t]]),o[t]<0?Math.max(0,Math.min(i,r[n[t]]-1)):Math.max(0,Math.min(i,r[n[t]]))},oh=(e,t,r)=>`fn calculateInputIndices(output_indices: ${t.type.indices}) -> ${e.type.indices} {\n          var input_indices: ${e.type.indices};\n          var carry = 0u;\n          for (var i = ${r.length}; i >= 0; i--) {\n            let input_shape_i = ${G(\"uniforms.input_shape\",\"i\",r.length)};\n            let steps_i = ${G(\"uniforms.steps\",\"i\",r.length)};\n            let signs_i = ${G(\"uniforms.signs\",\"i\",r.length)};\n            let starts_i = ${G(\"uniforms.starts\",\"i\",r.length)};\n            var output_index = ${t.indicesGet(\"output_indices\",\"i\")};\n            var input_index = output_index * steps_i + starts_i + carry;\n            carry = input_index / input_shape_i;\n            input_index = input_index % input_shape_i;\n            if (signs_i < 0) {\n              input_index = input_shape_i - input_index - 1u + starts_i;\n            }\n            ${e.indicesSet(\"input_indices\",\"i\",\"input_index\")};\n          }\n          return input_indices;\n      }`,ih=(e,t)=>{let r=e[0].dims,n=k.size(r),o=t.axes.length>0?k.normalizeAxes(t.axes,r.length):[...Array(r.length).keys()],i=on(e,4);i.forEach(_=>_!==0||(()=>{throw new Error(\"step cannot be 0\")})),i.length===0&&(i=Array(o.length).fill(1));let a=t.starts.map((_,$)=>dl(_,$,r,o,i)),l=t.ends.map((_,$)=>dl(_,$,r,o,i));if(o.length!==a.length||o.length!==l.length)throw new Error(\"start, ends and axes should have the same number of elements\");if(o.length!==r.length)for(let _=0;_<r.length;++_)o.includes(_)||(a.splice(_,0,0),l.splice(_,0,r[_]),i.splice(_,0,1));let d=i.map(_=>Math.sign(_));i.forEach((_,$,S)=>{if(_<0){let I=(l[$]-a[$])/_,T=a[$],A=T+I*i[$];a[$]=A,l[$]=T,S[$]=-_}});let p=r.slice(0);o.forEach((_,$)=>{p[_]=Math.ceil((l[_]-a[_])/i[_])});let m={dims:p,dataType:e[0].dataType},u=M(\"output\",e[0].dataType,p.length),h=E(\"input\",e[0].dataType,e[0].dims.length),w=k.size(p),g=[{name:\"outputSize\",type:\"u32\"},{name:\"starts\",type:\"u32\",length:a.length},{name:\"signs\",type:\"i32\",length:d.length},{name:\"steps\",type:\"u32\",length:i.length}],b=[{type:12,data:w},{type:12,data:a},{type:6,data:d},{type:12,data:i},...V(e[0].dims,p)],x=_=>`\n      ${_.registerUniforms(g).declareVariables(h,u)}\n        ${oh(h,u,r)}\n        ${_.mainStart()}\n          ${_.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.outputSize\")}\n          let output_indices = ${u.offsetToIndices(\"global_idx\")};\n          let input_indices = calculateInputIndices(output_indices);\n          ${u.setByOffset(\"global_idx\",h.getByIndices(\"input_indices\"))}\n      }`;return{name:\"Slice\",shaderCache:{hint:`${d.length}_${a.length}_${i.length}`,inputDependencies:[\"rank\"]},getShaderSource:x,getRunData:()=>({outputs:[m],dispatchGroup:{x:Math.ceil(n/64)},programUniforms:b})}},ll=(e,t)=>{rh(e.inputs,t);let r=nh(e.inputs,t);e.compute(ih(e.inputs,r),{inputs:[0]})},cl=e=>{let t=e.starts,r=e.ends,n=e.axes;return te({starts:t,ends:r,axes:n})}});var ah,sh,ml,fl,hl=U(()=>{\"use strict\";Q();ae();Ce();ie();ah=e=>{if(!e||e.length!==1)throw new Error(\"Softmax op requires 1 input.\")},sh=(e,t)=>{let r=e.dims,n=k.size(r),o=64,i=t.axis;if(i<0&&(i=r.length+i),i<r.length-1)throw new Error(\"softmax only supports last axis for now.\");let a=r[i],l=n/a,d=$e(a),p=a/d,m=(x,_)=>_===4?`max(max(${x}.x, ${x}.y), max(${x}.z, ${x}.w))`:_===2?`max(${x}.x, ${x}.y)`:_===3?`max(max(${x}.x, ${x}.y), ${x}.z)`:x,u=E(\"x\",e.dataType,e.dims,d),h=M(\"result\",e.dataType,e.dims,d),w=u.type.value,g=ge(e.dataType)===\"f32\"?`var threadMax = ${w}(-3.402823e+38f);`:`var threadMax = ${w}(-65504.0h);`,b=x=>`\n      var<workgroup> rowMaxShared : ${w};\n      var<workgroup> rowSumShared : ${w};\n      var<workgroup> threadShared : array<${w}, ${o}>;\n\n      fn getValue(row: i32, col: i32, row_stride: i32) -> ${w} {\n        let index = row * row_stride + col;\n        return x[index];\n      }\n\n      fn setValue(row: i32, col: i32, row_stride: i32, value: ${w}) {\n        let index = row * row_stride + col;\n        result[index] = value;\n      }\n      ${x.registerUniform(\"packedCols\",\"i32\").declareVariables(u,h)}\n      ${x.mainStart()}\n        let gindex = i32(global_idx);\n        let lindex = i32(local_idx);\n        const wg = ${o};\n        let row = gindex / wg;\n        let cols = uniforms.packedCols;\n        let row_stride : i32 = uniforms.packedCols;\n\n        // find the rows max\n        ${g}\n        for (var col = lindex; col < cols; col += wg) {\n          let value = getValue(row, col, row_stride);\n          threadMax = max(threadMax, value);\n        }\n        if (lindex < cols) {\n          threadShared[lindex] = threadMax;\n        }\n        workgroupBarrier();\n\n        var reduceSize = min(cols, wg);\n        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {\n          reduceSize = currSize + (reduceSize & 1);\n          if (lindex < currSize) {\n            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowMaxShared = ${w}(${m(\"threadShared[0]\",d)});\n        }\n        workgroupBarrier();\n\n        // find the rows sum\n        var threadSum = ${w}(0.0);\n        for (var col = lindex; col < cols; col += wg) {\n          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);\n          threadSum += subExp;\n        }\n        threadShared[lindex] = threadSum;\n        workgroupBarrier();\n\n        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {\n          if (lindex < currSize) {\n            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];\n          }\n          workgroupBarrier();\n        }\n        if (lindex == 0) {\n          rowSumShared = ${w}(${Xe(\"threadShared[0]\",d)});\n        }\n        workgroupBarrier();\n\n        // calculate final value for each element in the row\n        for (var col = lindex; col < cols; col += wg) {\n          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;\n          setValue(row, col, row_stride, value);\n        }\n      }`;return{name:\"Softmax\",shaderCache:{hint:`${d}`,inputDependencies:[\"type\"]},getRunData:()=>({outputs:[{dims:r,dataType:e.dataType}],dispatchGroup:{x:l},programUniforms:[{type:6,data:p}]}),getShaderSource:b}},ml=(e,t)=>{ah(e.inputs),e.compute(sh(e.inputs[0],t))},fl=e=>te({axis:e.axis})});var uh,dh,lh,ch,ph,gl,yl,bl=U(()=>{\"use strict\";Q();ae();Ce();ie();uh=e=>{if(!e||e.length<1)throw new Error(\"too few inputs\")},dh=(e,t)=>{let r=[],n=t.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(o=>r.push(Number(o))),n=r.length),te({numOutputs:n,axis:t.axis,splitSizes:r})},lh=e=>`\nfn calculateOutputIndex(index: u32) -> u32 {\n    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {\n    if (index < ${G(\"uniforms.size_in_split_axis\",\"i\",e)}) {\n        return i;\n    }\n    }\n    return ${e}u;\n}`,ch=e=>{let t=e.length,r=[];for(let n=0;n<t;++n){let o=e[n].setByIndices(\"indices\",\"input[global_idx]\");t===1?r.push(o):n===0?r.push(`if (output_number == ${n}u) { ${o} }`):n===t-1?r.push(`else { ${o} }`):r.push(`else if (output_number == ${n}) { ${o} }`)}return`\n      fn writeBufferData(output_number: u32, indices: ${e[0].type.indices}, global_idx: u32) {\n        ${r.join(`\n`)}\n      }`},ph=(e,t)=>{let r=e[0].dims,n=k.size(r),o=e[0].dataType,i=k.normalizeAxis(t.axis,r.length),a=new Array(t.numOutputs),l=E(\"input\",o,r.length),d=new Array(t.numOutputs),p=[],m=[],u=0,h=[{type:12,data:n}];for(let g=0;g<t.numOutputs;g++){u+=t.splitSizes[g],d[g]=u;let b=r.slice();b[t.axis]=t.splitSizes[g],m.push(b),a[g]=M(`output${g}`,o,b.length),p.push({dims:m[g],dataType:e[0].dataType})}h.push({type:12,data:d},...V(r,...m));let w=g=>`\n  ${g.registerUniform(\"input_size\",\"u32\").registerUniform(\"size_in_split_axis\",\"u32\",d.length).declareVariables(l,...a)}\n  ${lh(d.length)}\n  ${ch(a)}\n\n  ${g.mainStart()}\n    ${g.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.input_size\")}\n\n    var indices = ${l.offsetToIndices(\"global_idx\")};\n    var index = ${l.indicesGet(\"indices\",i)};\n    let output_number = calculateOutputIndex(index);\n    if (output_number != 0) {\n      index -= ${G(\"uniforms.size_in_split_axis\",\"output_number - 1u\",d.length)};\n      ${l.indicesSet(\"indices\",i,\"index\")};\n    }\n    writeBufferData(output_number, indices, global_idx);\n  }`;return{name:\"Split\",shaderCache:{hint:t.cacheKey,inputDependencies:[\"rank\"]},getShaderSource:w,getRunData:()=>({outputs:p,dispatchGroup:{x:Math.ceil(n/64)},programUniforms:h})}},gl=(e,t)=>{uh(e.inputs);let r=e.inputs.length===1?t:dh(e.inputs,t);e.compute(ph(e.inputs,r),{inputs:[0]})},yl=e=>{let t=e.axis,r=e.splitSizes,n=e.numOutputs<0?r.length:e.numOutputs;if(n!==r.length)throw new Error(\"numOutputs and splitSizes lengh must be equal\");return te({axis:t,numOutputs:n,splitSizes:r})}});var mh,fh,wl,vl=U(()=>{\"use strict\";Q();ae();ie();mh=(e,t,r,n,o)=>{let i=M(\"output_data\",o,r.length,4),a=E(\"a_data\",t[1].dataType,t[1].dims.length,4),l=E(\"b_data\",t[2].dataType,t[2].dims.length,4),d=E(\"c_data\",t[0].dataType,t[0].dims.length,4),p,m=(u,h,w)=>`select(${h}, ${u}, ${w})`;if(!n)p=i.setByOffset(\"global_idx\",m(a.getByOffset(\"global_idx\"),l.getByOffset(\"global_idx\"),d.getByOffset(\"global_idx\")));else{let u=(h,w,g=\"\")=>{let b=`a_data[index_a${w}][component_a${w}]`,x=`b_data[index_b${w}][component_b${w}]`,_=`bool(c_data[index_c${w}] & (0xffu << (component_c${w} * 8)))`;return`\n            let output_indices${w} = ${i.offsetToIndices(`global_idx * 4u + ${w}u`)};\n            let offset_a${w} = ${a.broadcastedIndicesToOffset(`output_indices${w}`,i)};\n            let offset_b${w} = ${l.broadcastedIndicesToOffset(`output_indices${w}`,i)};\n            let offset_c${w} = ${d.broadcastedIndicesToOffset(`output_indices${w}`,i)};\n            let index_a${w} = offset_a${w} / 4u;\n            let index_b${w} = offset_b${w} / 4u;\n            let index_c${w} = offset_c${w} / 4u;\n            let component_a${w} = offset_a${w} % 4u;\n            let component_b${w} = offset_b${w} % 4u;\n            let component_c${w} = offset_c${w} % 4u;\n            ${h}[${w}] = ${g}(${m(b,x,_)});\n          `};o===9?p=`\n            var data = vec4<u32>(0);\n            ${u(\"data\",0,\"u32\")}\n            ${u(\"data\",1,\"u32\")}\n            ${u(\"data\",2,\"u32\")}\n            ${u(\"data\",3,\"u32\")}\n            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:p=`\n            ${u(\"output_data[global_idx]\",0)}\n            ${u(\"output_data[global_idx]\",1)}\n            ${u(\"output_data[global_idx]\",2)}\n            ${u(\"output_data[global_idx]\",3)}\n          `}return`\n        ${e.registerUniform(\"vec_size\",\"u32\").declareVariables(d,a,l,i)}\n        ${e.mainStart()}\n        ${e.guardAgainstOutOfBoundsWorkgroupSizes(\"uniforms.vec_size\")}\n        ${p}\n      }`},fh=e=>{let t=e[1].dims,r=e[2].dims,n=e[0].dims,o=e[1].dataType,i=!(k.areEqual(t,r)&&k.areEqual(r,n)),a=t,l=k.size(t);if(i){let p=tt.calcShape(tt.calcShape(t,r,!1),n,!1);if(!p)throw new Error(\"Can't perform where op on the given tensors\");a=p,l=k.size(a)}let d=Math.ceil(l/4);return{name:\"Where\",shaderCache:{inputDependencies:[\"rank\",\"rank\",\"rank\"]},getShaderSource:p=>mh(p,e,a,i,o),getRunData:()=>({outputs:[{dims:a,dataType:o}],dispatchGroup:{x:Math.ceil(l/64/4)},programUniforms:[{type:12,data:d},...V(n,t,r,a)]})}},wl=e=>{e.compute(fh(e.inputs))}});var $l,_l=U(()=>{\"use strict\";xs();jr();Cs();As();mu();Su();Tu();co();Fu();Ku();Zu();rd();id();sd();ld();md();gd();Cd();Ad();kd();mo();Dd();_o();Bd();Qd();el();Fr();ol();al();ul();pl();hl();bl();So();Et();Yr();vl();$l=new Map([[\"Abs\",[Es]],[\"Acos\",[ks]],[\"Acosh\",[Ps]],[\"Add\",[fu]],[\"ArgMax\",[_s,io]],[\"ArgMin\",[$s,io]],[\"Asin\",[Os]],[\"Asinh\",[Ds]],[\"Atan\",[zs]],[\"Atanh\",[Bs]],[\"Attention\",[Ss]],[\"AveragePool\",[Gd,Hd]],[\"BatchNormalization\",[Is]],[\"BiasAdd\",[Ts]],[\"BiasSplitGelu\",[pu]],[\"Cast\",[Ms,Rs]],[\"Ceil\",[Vs]],[\"Clip\",[Us]],[\"Concat\",[Iu,Cu]],[\"Conv\",[yo,go]],[\"ConvTranspose\",[Lu,Gu]],[\"Cos\",[Ns]],[\"Cosh\",[Ws]],[\"CumSum\",[qu,ju]],[\"DepthToSpace\",[Yu,Xu]],[\"Div\",[hu]],[\"Einsum\",[ed,td]],[\"Elu\",[Hs,Qt]],[\"Equal\",[gu]],[\"Erf\",[Gs]],[\"Exp\",[Ls]],[\"Expand\",[od]],[\"FastGelu\",[ad]],[\"Floor\",[Fs]],[\"FusedConv\",[yo,go]],[\"Gather\",[dd,ud]],[\"GatherElements\",[pd,cd]],[\"Gelu\",[qs]],[\"Gemm\",[hd,fd]],[\"GlobalAveragePool\",[qd,Fd]],[\"GlobalMaxPool\",[Zd,Xd]],[\"Greater\",[vu]],[\"GreaterOrEqual\",[_u]],[\"GroupQueryAttention\",[Id,Sd]],[\"HardSigmoid\",[eu,Js]],[\"InstanceNormalization\",[Td]],[\"LayerNormalization\",[Ed]],[\"LeakyRelu\",[js,Qt]],[\"Less\",[$u]],[\"LessOrEqual\",[xu]],[\"Log\",[du]],[\"MatMul\",[Uu]],[\"MatMulNBits\",[Pd,Od]],[\"MaxPool\",[Kd,Yd]],[\"Mul\",[yu]],[\"MultiHeadAttention\",[wd,bd]],[\"Neg\",[Ys]],[\"Not\",[Ks]],[\"Pad\",[zd]],[\"Pow\",[bu]],[\"QuickGelu\",[lu,Qt]],[\"Range\",[Jd]],[\"Reciprocal\",[Xs]],[\"ReduceMin\",[hs]],[\"ReduceMean\",[ls]],[\"ReduceMax\",[fs]],[\"ReduceSum\",[ys]],[\"ReduceProd\",[gs]],[\"ReduceL1\",[cs]],[\"ReduceL2\",[ps]],[\"ReduceLogSum\",[ws]],[\"ReduceLogSumExp\",[ms]],[\"ReduceSumSquare\",[bs]],[\"Relu\",[Zs]],[\"Resize\",[rl,nl]],[\"RotaryEmbedding\",[il]],[\"Sigmoid\",[Qs]],[\"Sin\",[tu]],[\"Sinh\",[ru]],[\"Slice\",[ll,cl]],[\"SkipLayerNormalization\",[sl]],[\"Split\",[gl,yl]],[\"Sqrt\",[nu]],[\"Softmax\",[ml,fl]],[\"Sub\",[wu]],[\"Tan\",[ou]],[\"Tanh\",[au]],[\"ThresholdedRelu\",[uu,Qt]],[\"Tile\",[$d]],[\"Transpose\",[Za,Qa]],[\"Where\",[wl]]])});var an,xl=U(()=>{\"use strict\";Ke();dt();ie();an=class{constructor(t){this.backend=t;this.repo=new Map,this.attributesBound=!1}getArtifact(t){return this.repo.get(t)}setArtifact(t,r){this.repo.set(t,r)}run(t,r,n,o,i){We(t.programInfo.name);let a=this.backend.device,l=this.backend.getComputePassEncoder();this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2);let d=[];for(let m of r)d.push({binding:d.length,resource:{buffer:m.buffer}});for(let m of n)d.push({binding:d.length,resource:{buffer:m.buffer}});i&&d.push({binding:d.length,resource:i});let p=a.createBindGroup({layout:t.computePipeline.getBindGroupLayout(0),entries:d,label:t.programInfo.name});if(this.backend.sessionStatus===\"capturing\"){let m={kernelId:this.backend.currentKernelId,computePipeline:t.computePipeline,bindGroup:p,dispatchGroup:o};this.backend.capturedCommandList.get(this.backend.currentSessionId).push(m)}l.setPipeline(t.computePipeline),l.setBindGroup(0,p),l.dispatchWorkgroups(...o),this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2+1),this.backend.pendingDispatchNumber++,(this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber||this.backend.queryType===\"at-passes\")&&this.backend.endComputePass(),this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber&&this.backend.flush(),Me(t.programInfo.name)}dispose(){}build(t,r){We(t.name);let n=this.backend.device,o=[];n.features.has(\"shader-f16\")&&o.push(\"enable f16;\");let i=Ya(r,this.backend.device.limits),a=t.getShaderSource(i),l=`${o.join(`\n`)}\n${i.additionalImplementations}\n${a}`,d=n.createShaderModule({code:l,label:t.name});ve(\"verbose\",()=>`[WebGPU] ${t.name} shader code: ${l}`);let p=n.createComputePipeline({compute:{module:d,entryPoint:\"main\"},layout:\"auto\",label:t.name});return Me(t.name),{programInfo:t,computePipeline:p,uniformVariablesInfo:i.variablesInfo}}normalizeDispatchGroupSize(t){let r=typeof t==\"number\"?t:t.x,n=typeof t==\"number\"?1:t.y||1,o=typeof t==\"number\"?1:t.z||1,i=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(r<=i&&n<=i&&o<=i)return[r,n,o];let a=r*n*o,l=Math.ceil(Math.sqrt(a));if(l>i){if(l=Math.ceil(Math.cbrt(a)),l>i)throw new Error(\"Total dispatch size exceeds WebGPU maximum.\");return[l,l,l]}else return[l,l,1]}}});var hh,gh,Io,sn,Sl=U(()=>{\"use strict\";Ke();Q();dt();Ga();Ka();_l();xl();hh=(e,t)=>{if(t.length!==e.length)throw new Error(`inputDependencies length ${t.length} is not equal to inputTensors length ${e.length}.`);let r=[];for(let n=0;n<e.length;++n){let o=e[n].dataType;switch(t[n]){case\"none\":{r.push(\"\");break}case\"type\":{r.push(`${o}`);break}case\"rank\":{let i=e[n].dims.length;r.push(`${o};${i}`);break}case\"dims\":{let i=e[n].dims.join(\",\");r.push(`${o};${i}`);break}default:throw new Error(`unsupported input dependency: ${t[n]}`)}}return r.join(\"|\")},gh=(e,t,r)=>{let n=e.name;return e.shaderCache?.hint&&(n+=\"[\"+e.shaderCache.hint+\"]\"),n+=\":\"+r+`:${hh(t,e.shaderCache?.inputDependencies??new Array(t.length).fill(\"dims\"))}`,n},Io=class{constructor(t){t&&(this.architecture=t.architecture,this.vendor=t.vendor)}isArchitecture(t){return this.architecture===t}isVendor(t){return this.vendor===t}},sn=class{constructor(){this.currentSessionId=null;this.currentKernelId=null;this.commandEncoder=null;this.computePassEncoder=null;this.maxDispatchNumber=16;this.pendingDispatchNumber=0;this.pendingKernels=[];this.pendingQueries=new Map;this.sessionStatus=\"default\";this.capturedCommandList=new Map;this.capturedPendingKernels=new Map;this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error(\"currentKernelCustomData(): currentKernelId is null. (should not happen)\");let t=this.kernelCustomData.get(this.currentKernelId);return t||(t={},this.kernelCustomData.set(this.currentKernelId,t)),t}async initialize(t,r){this.env=t;let n=[],o={requiredLimits:{maxComputeWorkgroupStorageSize:r.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:r.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:r.limits.maxStorageBufferBindingSize,maxBufferSize:r.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:r.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:r.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:r.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:r.limits.maxComputeWorkgroupSizeZ},requiredFeatures:n};r.features.has(\"chromium-experimental-timestamp-query-inside-passes\")?n.push(\"chromium-experimental-timestamp-query-inside-passes\"):r.features.has(\"timestamp-query\")&&n.push(\"timestamp-query\"),r.features.has(\"shader-f16\")&&n.push(\"shader-f16\"),this.device=await r.requestDevice(o),this.adapterInfo=new Io(r.info||await r.requestAdapterInfo()),this.gpuDataManager=ja(this),this.programManager=new an(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,Wa(t.logLevel,!!t.debug),this.device.onuncapturederror=i=>{i.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${i.error.message}`)},Object.defineProperty(this.env.webgpu,\"device\",{value:this.device,writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(this.env.webgpu,\"adapter\",{value:r,writable:!1,enumerable:!0,configurable:!1}),this.setQueryType()}dispose(){typeof this.querySet<\"u\"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let t=this.getCommandEncoder(),r={};this.queryType===\"at-passes\"&&(r.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:this.pendingDispatchNumber*2,endOfPassWriteIndex:this.pendingDispatchNumber*2+1}),this.computePassEncoder=t.beginComputePass(r)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){if(!this.commandEncoder)return;We(),this.endComputePass();let t;this.queryType!==\"none\"&&(this.commandEncoder.resolveQuerySet(this.querySet,0,this.pendingDispatchNumber*2,this.queryResolveBuffer,0),t=this.device.createBuffer({size:this.pendingDispatchNumber*2*8,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),this.pendingQueries.set(t,this.pendingKernels),this.pendingKernels=[],this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,t,0,this.pendingDispatchNumber*2*8)),this.device.queue.submit([this.commandEncoder.finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0,this.queryType!==\"none\"&&t.mapAsync(GPUMapMode.READ).then(()=>{let r=new BigUint64Array(t.getMappedRange()),n=this.pendingQueries.get(t);for(let o=0;o<r.length/2;o++){let i=n[o],a=i.kernelId,l=this.kernels.get(a),d=l.kernelType,p=l.kernelName,m=i.programName,u=i.inputTensorViews,h=i.outputTensorViews,w=r[o*2],g=r[o*2+1];typeof this.queryTimeBase>\"u\"&&(this.queryTimeBase=w);let b=Number(w-this.queryTimeBase),x=Number(g-this.queryTimeBase);if(!Number.isSafeInteger(b)||!Number.isSafeInteger(x))throw new RangeError(\"incorrect timestamp range\");if(this.env.webgpu.profiling?.ondata)this.env.webgpu.profiling.ondata({version:1,inputsMetadata:u.map(_=>({dims:_.dims,dataType:ht(_.dataType)})),outputsMetadata:h.map(_=>({dims:_.dims,dataType:ht(_.dataType)})),kernelId:a,kernelType:d,kernelName:p,programName:m,startTime:b,endTime:x});else{let _=\"\";u.forEach((S,I)=>{_+=`input[${I}]: [${S.dims}] | ${ht(S.dataType)}, `});let $=\"\";h.forEach((S,I)=>{$+=`output[${I}]: [${S.dims}] | ${ht(S.dataType)}, `}),console.log(`[profiling] kernel \"${a}|${d}|${p}|${m}\" ${_}${$}execution time: ${x-b} ns`)}Sr(\"GPU\",`${m}::${w}::${g}`)}t.unmap(),this.pendingQueries.delete(t)}),Me()}run(t,r,n,o,i,a){We(t.name);let l=[];for(let S=0;S<r.length;++S){let I=r[S].data;if(I===0)continue;let T=this.gpuDataManager.get(I);if(!T)throw new Error(`no GPU data for input: ${I}`);l.push(T)}let{outputs:d,dispatchGroup:p,programUniforms:m}=t.getRunData(r),u=n.length===0?d.map((S,I)=>I):n;if(u.length!==d.length)throw new Error(`Output size ${u.length} must be equal to ${d.length}.`);let h=[],w=[];for(let S=0;S<d.length;++S){if(!Number.isInteger(u[S])||u[S]<-3||u[S]>=a)throw new Error(`Invalid output index: ${u[S]}`);if(u[S]===-3)continue;let I=u[S]===-1,T=u[S]===-2,A=I||T?i(d[S].dataType,d[S].dims):o(u[S],d[S].dataType,d[S].dims);if(h.push(A),A.data===0)continue;let D=this.gpuDataManager.get(A.data);if(!D)throw new Error(`no GPU data for output: ${A.data}`);if(I&&this.temporaryData.push(D),T){let z=this.kernelPersistentData.get(this.currentKernelId);z||(z=[],this.kernelPersistentData.set(this.currentKernelId,z)),z.push(D)}w.push(D)}if(l.length!==r.length||w.length!==h.length){if(w.length===0)return Me(t.name),h;throw new Error(`Program ${t.name} has zero-sized tensor(s) in inputs or outputs. This is not supported now.`)}let g;if(m){let S=0,I=[];m.forEach(z=>{let H=typeof z.data==\"number\"?[z.data]:z.data;if(H.length===0)return;let W=z.type===10?2:4,X,Y;z.type===10?(Y=H.length>4?16:H.length>2?8:H.length*W,X=H.length>4?16:W*H.length):(Y=H.length<=2?H.length*W:16,X=16),S=Math.ceil(S/Y)*Y,I.push(S);let pe=z.type===10?8:4;S+=H.length>4?Math.ceil(H.length/pe)*X:H.length*W});let T=16;S=Math.ceil(S/T)*T;let A=new ArrayBuffer(S);m.forEach((z,H)=>{let W=I[H],X=typeof z.data==\"number\"?[z.data]:z.data;if(z.type===6)new Int32Array(A,W,X.length).set(X);else if(z.type===12)new Uint32Array(A,W,X.length).set(X);else if(z.type===10)new Uint16Array(A,W,X.length).set(X);else if(z.type===1)new Float32Array(A,W,X.length).set(X);else throw new Error(`Unsupported uniform type: ${ht(z.type)}`)});let D=this.gpuDataManager.create(S,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(D.buffer,0,A,0,S),this.gpuDataManager.release(D.id),g={offset:0,size:S,buffer:D.buffer}}let b=this.programManager.normalizeDispatchGroupSize(p),x=b[1]===1&&b[2]===1,_=gh(t,r,x),$=this.programManager.getArtifact(_);if($||($=this.programManager.build(t,b),this.programManager.setArtifact(_,$),ve(\"info\",()=>`[artifact] key: ${_}, programName: ${t.name}`)),m&&$.uniformVariablesInfo){if(m.length!==$.uniformVariablesInfo.length)throw new Error(`Uniform variables count mismatch: expect ${$.uniformVariablesInfo.length}, got ${m.length} in program \"${$.programInfo.name}\".`);for(let S=0;S<m.length;S++){let I=m[S],T=I.type,A=typeof I.data==\"number\"?1:I.data.length,[D,z]=$.uniformVariablesInfo[S];if(T!==D||A!==z)throw new Error(`Uniform variable ${S} mismatch: expect type ${D} with size ${z}, got type ${T} with size ${A} in program \"${$.programInfo.name}\".`)}}if(ve(\"info\",()=>`[ProgramManager] run \"${t.name}\" (key=${_}) with ${b[0]}x${b[1]}x${b[2]}`),this.queryType!==\"none\"||this.sessionStatus===\"capturing\"){let S={kernelId:this.currentKernelId,programName:$.programInfo.name,inputTensorViews:r,outputTensorViews:h};this.pendingKernels.push(S),this.sessionStatus===\"capturing\"&&this.capturedPendingKernels.get(this.currentSessionId).push(S)}return this.programManager.run($,l,w,b,g),Me(t.name),h}upload(t,r){this.gpuDataManager.upload(t,r)}memcpy(t,r){this.gpuDataManager.memcpy(t,r)}async download(t,r){await this.gpuDataManager.download(t,r)}alloc(t){return this.gpuDataManager.create(t).id}free(t){return this.gpuDataManager.release(t)}createKernel(t,r,n,o){let i=$l.get(t);if(!i)throw new Error(`kernel not implemented: ${t}`);let a={kernelType:t,kernelName:o,kernelEntry:i[0],attributes:[i[1],n]};this.kernels.set(r,a)}releaseKernel(t){let r=this.kernelPersistentData.get(t);if(r){for(let n of r)this.gpuDataManager.release(n.id);this.kernelPersistentData.delete(t)}this.kernelCustomData.delete(t),this.kernels.delete(t)}computeKernel(t,r,n){let o=this.kernels.get(t);if(!o)throw new Error(`kernel not created: ${t}`);let i=o.kernelType,a=o.kernelName,l=o.kernelEntry,d=o.attributes;if(this.currentKernelId!==null)throw new Error(`kernel \"[${i}] ${a}\" is not allowed to be called recursively`);this.currentKernelId=t,d[0]&&(d[1]=d[0](d[1]),d[0]=void 0),ve(\"info\",()=>`[WebGPU] Start to run kernel \"[${i}] ${a}\"...`);let p=this.env.debug;this.temporaryData=[];try{return p&&this.device.pushErrorScope(\"validation\"),l(r,d[1]),0}catch(m){return n.push(Promise.resolve(`[WebGPU] Kernel \"[${i}] ${a}\" failed. ${m}`)),1}finally{p&&n.push(this.device.popErrorScope().then(m=>m?`GPU validation error for kernel \"[${i}] ${a}\": ${m.message}`:null));for(let m of this.temporaryData)this.gpuDataManager.release(m.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(t,r,n,o){let i=this.sessionExternalDataMapping.get(t);i||(i=new Map,this.sessionExternalDataMapping.set(t,i));let a=i.get(r),l=this.gpuDataManager.registerExternalBuffer(n,o,a?.[1]);return i.set(r,[l,n]),l}unregisterBuffers(t){let r=this.sessionExternalDataMapping.get(t);r&&(r.forEach(n=>this.gpuDataManager.unregisterExternalBuffer(n[1])),this.sessionExternalDataMapping.delete(t))}getBuffer(t){let r=this.gpuDataManager.get(t);if(!r)throw new Error(`no GPU data for buffer: ${t}`);return r.buffer}createDownloader(t,r,n){return async()=>{let o=await Qn(this,t,r);return Ha(o.buffer,n)}}writeTimestamp(t){this.queryType===\"inside-passes\"&&this.computePassEncoder.writeTimestamp(this.querySet,t)}setQueryType(){this.queryType=\"none\",(this.env.webgpu.profiling?.mode===\"default\"||(typeof this.env.trace>\"u\"?this.env.wasm.trace:this.env.trace))&&(this.device.features.has(\"chromium-experimental-timestamp-query-inside-passes\")?this.queryType=\"inside-passes\":this.device.features.has(\"timestamp-query\")&&(this.queryType=\"at-passes\"),this.queryType!==\"none\"&&typeof this.querySet>\"u\"&&(this.querySet=this.device.createQuerySet({type:\"timestamp\",count:this.maxDispatchNumber*2}),this.queryResolveBuffer=this.device.createBuffer({size:this.maxDispatchNumber*2*8,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE})))}captureBegin(){ve(\"info\",\"captureBegin\"),this.capturedCommandList.get(this.currentSessionId)||this.capturedCommandList.set(this.currentSessionId,[]),this.capturedPendingKernels.get(this.currentSessionId)||this.capturedPendingKernels.set(this.currentSessionId,[]),this.flush(),this.sessionStatus=\"capturing\"}captureEnd(){ve(\"info\",\"captureEnd\"),this.flush(),this.sessionStatus=\"default\"}replay(){ve(\"info\",\"replay\"),this.sessionStatus=\"replaying\";let t=this.capturedCommandList.get(this.currentSessionId),r=this.capturedPendingKernels.get(this.currentSessionId),n=t.length;this.pendingKernels=[];for(let o=0;o<n;o++){let i=this.getComputePassEncoder(),a=t[o];this.writeTimestamp(this.pendingDispatchNumber*2),i.setPipeline(a.computePipeline),i.setBindGroup(0,a.bindGroup),i.dispatchWorkgroups(...a.dispatchGroup),this.writeTimestamp(this.pendingDispatchNumber*2+1),this.pendingDispatchNumber++,this.queryType!==\"none\"&&this.pendingKernels.push(r[o]),(this.pendingDispatchNumber>=this.maxDispatchNumber||this.queryType===\"at-passes\")&&this.endComputePass(),this.pendingDispatchNumber>=this.maxDispatchNumber&&this.flush()}this.flush(),this.sessionStatus=\"default\"}onReleaseSession(t){this.unregisterBuffers(t),this.capturedCommandList.has(t)&&this.capturedCommandList.delete(t),this.capturedPendingKernels.has(t)&&this.capturedPendingKernels.delete(t),this.gpuDataManager.onReleaseSession(t)}onRunStart(t){this.currentSessionId=t,this.setQueryType()}}});var Il={};Ft(Il,{init:()=>yh});var or,Co,yh,Cl=U(()=>{\"use strict\";Q();Sl();dt();ae();or=class e{constructor(t,r,n,o){this.module=t;this.dataType=r;this.data=n;this.dims=o}getFloat32Array(){if(this.dataType!==1)throw new Error(\"Invalid data type\");let t=k.size(this.dims);return t===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,t)}getBigInt64Array(){if(this.dataType!==7)throw new Error(\"Invalid data type\");let t=k.size(this.dims);return t===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,t)}getInt32Array(){if(this.dataType!==6)throw new Error(\"Invalid data type\");let t=k.size(this.dims);return t===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,t)}reshape(t){if(k.size(t)!==k.size(this.dims))throw new Error(\"Invalid new shape\");return new e(this.module,this.dataType,this.data,t)}},Co=class{constructor(t,r,n){this.module=t;this.backend=r;this.customDataOffset=0;this.customDataSize=0;this.adapterInfo=r.adapterInfo;let o=t.HEAPU32,i=n>>>2;this.opKernelContext=o[i++];let a=o[i++];this.outputCount=o[i++],this.customDataOffset=o[i++],this.customDataSize=o[i++];let l=[];for(let d=0;d<a;d++){let p=o[i++],m=o[i++],u=o[i++],h=[];for(let w=0;w<u;w++)h.push(o[i++]);l.push(new or(t,p,m,h))}this.inputs=l}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}getMaxComputeWorkgroupSizes(){return[this.backend.device.limits.maxComputeWorkgroupSizeX,this.backend.device.limits.maxComputeWorkgroupSizeY,this.backend.device.limits.maxComputeWorkgroupSizeZ]}getMaxComputeWorkgroupStoragesize(){return this.backend.device.limits.maxComputeWorkgroupStorageSize}compute(t,r){let n=r?.inputs?.map(l=>typeof l==\"number\"?this.inputs[l]:l)??this.inputs,o=r?.outputs??[],i=(l,d,p)=>new or(this.module,d,this.output(l,p),p),a=(l,d)=>{let p=It(l);if(!p)throw new Error(`Unsupported data type: ${l}`);let m=p*k.size(d),u=m>0?this.backend.gpuDataManager.create(m).id:0;return new or(this.module,l,u,d)};return this.backend.run(t,n,o,i,a,this.outputCount)}output(t,r){let n=this.module.stackSave();try{let o=this.module.stackAlloc((1+r.length)*4),i=o>>2;this.module.HEAPU32[i++]=r.length;for(let a=0;a<r.length;a++)this.module.HEAPU32[i++]=r[a];return this.module._JsepOutput(this.opKernelContext,t,o)}catch(o){throw new Error(`Failed to generate kernel's output[${t}] with dims [${r}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${o}`)}finally{this.module.stackRestore(n)}}},yh=async(e,t,r,n)=>{let o=t.jsepInit;if(!o)throw new Error(\"Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.\");if(e===\"webgpu\"){let i=new sn;await i.initialize(r,n),o(\"webgpu\",[i,a=>i.alloc(a),a=>i.free(a),(a,l,d,p=!1)=>{if(p)ve(\"verbose\",()=>`[WebGPU] jsepCopyGpuToGpu: src=${a}, dst=${l}, size=${d}`),i.memcpy(a,l);else{ve(\"verbose\",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${a}, gpuDataId=${l}, size=${d}`);let m=t.HEAPU8.subarray(a>>>0,(a>>>0)+d);i.upload(l,m)}},async(a,l,d)=>{ve(\"verbose\",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${a}, dataOffset=${l}, size=${d}`),await i.download(a,()=>t.HEAPU8.subarray(l>>>0,(l>>>0)+d))},(a,l,d)=>i.createKernel(a,l,d,t.UTF8ToString(t._JsepGetNodeName(l))),a=>i.releaseKernel(a),(a,l,d,p)=>{ve(\"verbose\",()=>`[WebGPU] jsepRun: sessionHandle=${d}, kernel=${a}, contextDataOffset=${l}`);let m=new Co(t,i,l);return i.computeKernel(a,m,p)},()=>i.captureBegin(),()=>i.captureEnd(),()=>i.replay()])}else o(\"webnn\")}});var bh,Er,kr,kt,wh,Kt,Pr,Or,Tl,Dr,zr,Br,Hn=U(()=>{\"use strict\";Ra();Ua();Q();St();Mr();Kn();bh=(e,t)=>{Ie()._OrtInit(e,t)!==0&&_e(\"Can't initialize onnxruntime.\")},Er=async e=>{bh(e.wasm.numThreads,Xt(e.logLevel))},kr=async(e,t)=>{{let r=(Cl(),br(Il)).init;if(t===\"webgpu\"){if(typeof navigator>\"u\"||!navigator.gpu)throw new Error(\"WebGPU is not supported in current environment\");let n=e.webgpu.adapter;if(n){if(typeof n.limits!=\"object\"||typeof n.features!=\"object\"||typeof n.requestDevice!=\"function\")throw new Error(\"Invalid GPU adapter set in `env.webgpu.adapter`. It must be a GPUAdapter object.\")}else{let o=e.webgpu.powerPreference;if(o!==void 0&&o!==\"low-power\"&&o!==\"high-performance\")throw new Error(`Invalid powerPreference setting: \"${o}\"`);let i=e.webgpu.forceFallbackAdapter;if(i!==void 0&&typeof i!=\"boolean\")throw new Error(`Invalid forceFallbackAdapter setting: \"${i}\"`);if(n=await navigator.gpu.requestAdapter({powerPreference:o,forceFallbackAdapter:i}),!n)throw new Error('Failed to get GPU adapter. You may need to enable flag \"--enable-unsafe-webgpu\" if you are using Chrome.')}await r(\"webgpu\",Ie(),e,n)}if(t===\"webnn\"){if(typeof navigator>\"u\"||!navigator.ml)throw new Error(\"WebNN is not supported in current environment\");await r(\"webnn\",Ie(),e)}}},kt=new Map,wh=e=>{let t=Ie(),r=t.stackSave();try{let n=t.stackAlloc(8);return t._OrtGetInputOutputCount(e,n,n+4)!==0&&_e(\"Can't get session input/output count.\"),[t.HEAP32[n/4],t.HEAP32[n/4+1]]}finally{t.stackRestore(r)}},Kt=e=>{let t=Ie(),r=t._malloc(e.byteLength);if(r===0)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},Pr=async(e,t)=>{let r,n,o=Ie();Array.isArray(e)?[r,n]=e:e.buffer===o.HEAPU8.buffer?[r,n]=[e.byteOffset,e.byteLength]:[r,n]=Kt(e);let i=0,a=0,l=0,d=[],p=[],m=[];try{if([a,d]=Ma(t),t?.externalData&&o.mountExternalData){let $=[];for(let S of t.externalData){let I=typeof S==\"string\"?S:S.path;$.push(Zt(typeof S==\"string\"?S:S.data).then(T=>{o.mountExternalData(I,T)}))}await Promise.all($)}for(let $ of t?.executionProviders??[])if((typeof $==\"string\"?$:$.name)===\"webnn\"){if(o.currentContext)throw new Error(\"WebNN execution provider is already set.\");if(typeof $!=\"string\"){let I=$,T=I?.context,A=I?.gpuDevice,D=I?.deviceType,z=I?.numThreads,H=I?.powerPreference;T?o.currentContext=T:A?o.currentContext=await navigator.ml.createContext(A):o.currentContext=await navigator.ml.createContext({deviceType:D,numThreads:z,powerPreference:H})}else o.currentContext=await navigator.ml.createContext();break}i=await o._OrtCreateSession(r,n,a),i===0&&_e(\"Can't create a session.\"),o.currentContext&&(o.currentContext=void 0);let[u,h]=wh(i),w=!!t?.enableGraphCapture,g=[],b=[],x=[];for(let $=0;$<u;$++){let S=o._OrtGetInputName(i,$);S===0&&_e(\"Can't get an input name.\"),p.push(S),g.push(o.UTF8ToString(S))}for(let $=0;$<h;$++){let S=o._OrtGetOutputName(i,$);S===0&&_e(\"Can't get an output name.\"),m.push(S);let I=o.UTF8ToString(S);b.push(I);{if(w&&t?.preferredOutputLocation===void 0){x.push(\"gpu-buffer\");continue}let T=typeof t?.preferredOutputLocation==\"string\"?t.preferredOutputLocation:t?.preferredOutputLocation?.[I]??\"cpu\";if(T!==\"cpu\"&&T!==\"cpu-pinned\"&&T!==\"gpu-buffer\")throw new Error(`Not supported preferred output location: ${T}.`);if(w&&T!==\"gpu-buffer\")throw new Error(`Not supported preferred output location: ${T}. Only 'gpu-buffer' location is supported when enableGraphCapture is true.`);x.push(T)}}let _=null;return x.some($=>$===\"gpu-buffer\")&&(l=o._OrtCreateBinding(i),l===0&&_e(\"Can't create IO binding.\"),_={handle:l,outputPreferredLocations:x,outputPreferredLocationsEncoded:x.map($=>jn($))}),kt.set(i,[i,p,m,_,w,!1]),[i,g,b]}catch(u){throw p.forEach(h=>o._OrtFree(h)),m.forEach(h=>o._OrtFree(h)),l!==0&&o._OrtReleaseBinding(l),i!==0&&o._OrtReleaseSession(i),u}finally{o._free(r),a!==0&&o._OrtReleaseSessionOptions(a),d.forEach(u=>o._free(u)),o.unmountExternalData?.()}},Or=e=>{let t=Ie(),r=kt.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);let[n,o,i,a,l]=r;a&&(l&&t._OrtClearBoundOutputs(a.handle),t._OrtReleaseBinding(a.handle)),t.jsepOnReleaseSession?.(e),o.forEach(d=>t._OrtFree(d)),i.forEach(d=>t._OrtFree(d)),t._OrtReleaseSession(n),kt.delete(e)},Tl=(e,t,r,n,o,i=!1)=>{if(!e){t.push(0);return}let a=Ie(),l=e[0],d=e[1],p=e[3],m,u;if(l===\"string\"&&p===\"gpu-buffer\")throw new Error(\"String tensor is not supported on GPU.\");if(i&&p!==\"gpu-buffer\")throw new Error(`External buffer must be provided for input/output index ${o} when enableGraphCapture is true.`);if(p===\"gpu-buffer\"){let g=e[2].gpuBuffer,b=It(qn(l));u=d.reduce((_,$)=>_*$,1)*b;let x=a.jsepRegisterBuffer;if(!x)throw new Error('Tensor location \"gpu-buffer\" is not supported without using WebGPU.');m=x(n,o,g,u)}else{let g=e[2];if(Array.isArray(g)){u=4*g.length,m=a._malloc(u),r.push(m);let b=m/4;for(let x=0;x<g.length;x++){if(typeof g[x]!=\"string\")throw new TypeError(`tensor data at index ${x} is not a string`);a.HEAPU32[b++]=Te(g[x],r)}}else u=g.byteLength,m=a._malloc(u),r.push(m),a.HEAPU8.set(new Uint8Array(g.buffer,g.byteOffset,u),m)}let h=a.stackSave(),w=a.stackAlloc(4*d.length);try{let g=w/4;d.forEach(x=>a.HEAP32[g++]=x);let b=a._OrtCreateTensor(qn(l),m,u,w,d.length,jn(p));b===0&&_e(`Can't create tensor for input/output. session=${n}, index=${o}.`),t.push(b)}finally{a.stackRestore(h)}},Dr=async(e,t,r,n,o,i)=>{let a=Ie(),l=kt.get(e);if(!l)throw new Error(`cannot run inference. invalid session id: ${e}`);let d=l[0],p=l[1],m=l[2],u=l[3],h=l[4],w=l[5],g=t.length,b=n.length,x=0,_=[],$=[],S=[],I=[],T=a.stackSave(),A=a.stackAlloc(g*4),D=a.stackAlloc(g*4),z=a.stackAlloc(b*4),H=a.stackAlloc(b*4);try{[x,_]=Ba(i);for(let K=0;K<g;K++)Tl(r[K],$,I,e,t[K],h);for(let K=0;K<b;K++)Tl(o[K],S,I,e,g+n[K],h);let W=A/4,X=D/4,Y=z/4,pe=H/4;for(let K=0;K<g;K++)a.HEAPU32[W++]=$[K],a.HEAPU32[X++]=p[t[K]];for(let K=0;K<b;K++)a.HEAPU32[Y++]=S[K],a.HEAPU32[pe++]=m[n[K]];if(u&&!w){let{handle:K,outputPreferredLocations:de,outputPreferredLocationsEncoded:re}=u;if(p.length!==g)throw new Error(`input count from feeds (${g}) is expected to be always equal to model's input count (${p.length}).`);for(let se=0;se<g;se++){let Z=t[se];await a._OrtBindInput(K,p[Z],$[se])!==0&&_e(`Can't bind input[${se}] for session=${e}.`)}for(let se=0;se<b;se++){let Z=n[se];o[se]?.[3]?a._OrtBindOutput(K,m[Z],S[se],0)!==0&&_e(`Can't bind pre-allocated output[${se}] for session=${e}.`):a._OrtBindOutput(K,m[Z],0,re[Z])!==0&&_e(`Can't bind output[${se}] to ${de[se]} for session=${e}.`)}kt.set(e,[d,p,m,u,h,!0])}a.jsepOnRunStart?.(d);let ue;u?ue=await a._OrtRunWithBinding(d,u.handle,b,z,x):ue=await a._OrtRun(d,D,A,g,H,b,z,x),ue!==0&&_e(\"failed to call OrtRun().\");let le=[];for(let K=0;K<b;K++){let de=a.HEAPU32[z/4+K];if(de===S[K]){le.push(o[K]);continue}let re=a.stackSave(),se=a.stackAlloc(4*4),Z=!1,ne,J=0;try{a._OrtGetTensorData(de,se,se+4,se+8,se+12)!==0&&_e(`Can't access output tensor data on index ${K}.`);let R=se/4,F=a.HEAPU32[R++];J=a.HEAPU32[R++];let ce=a.HEAPU32[R++],Re=a.HEAPU32[R++],Se=[];for(let Pe=0;Pe<Re;Pe++)Se.push(a.HEAPU32[ce/4+Pe]);a._OrtFree(ce);let we=Se.reduce((Pe,ze)=>Pe*ze,1);ne=ht(F);let Lt=u?.outputPreferredLocations[n[K]];if(ne===\"string\"){if(Lt===\"gpu-buffer\")throw new Error(\"String tensor is not supported on GPU.\");let Pe=[],ze=J/4;for(let Fe=0;Fe<we;Fe++){let Ot=a.HEAPU32[ze++],yt=Fe===we-1?void 0:a.HEAPU32[ze]-Ot;Pe.push(a.UTF8ToString(Ot,yt))}le.push([ne,Se,Pe,\"cpu\"])}else if(Lt===\"gpu-buffer\"&&we>0){let Pe=a.jsepGetBuffer;if(!Pe)throw new Error('preferredLocation \"gpu-buffer\" is not supported without using WebGPU.');let ze=Pe(J),Fe=It(F);if(Fe===void 0||!Vr(ne))throw new Error(`Unsupported data type: ${ne}`);Z=!0,le.push([ne,Se,{gpuBuffer:ze,download:a.jsepCreateDownloader(ze,we*Fe,ne),dispose:()=>{a._OrtReleaseTensor(de)}},\"gpu-buffer\"])}else{let Pe=Ur(ne),ze=new Pe(we);new Uint8Array(ze.buffer,ze.byteOffset,ze.byteLength).set(a.HEAPU8.subarray(J,J+ze.byteLength)),le.push([ne,Se,ze,\"cpu\"])}}finally{a.stackRestore(re),ne===\"string\"&&J&&a._free(J),Z||a._OrtReleaseTensor(de)}}return u&&!h&&(a._OrtClearBoundOutputs(u.handle),kt.set(e,[d,p,m,u,h,!1])),le}finally{a.stackRestore(T),$.forEach(W=>a._OrtReleaseTensor(W)),S.forEach(W=>a._OrtReleaseTensor(W)),I.forEach(W=>a._free(W)),x!==0&&a._OrtReleaseRunOptions(x),_.forEach(W=>a._free(W))}},zr=e=>{let t=Ie(),r=kt.get(e);if(!r)throw new Error(\"invalid session id\");let n=r[0],o=t._OrtEndProfiling(n);o===0&&_e(\"Can't get an profile file name.\"),t._OrtFree(o)},Br=e=>{let t=[];for(let r of e){let n=r[2];!Array.isArray(n)&&\"buffer\"in n&&t.push(n.buffer)}return t}});var Pt,Ye,ir,dn,ln,un,To,Ao,Ht,Gt,$h,Al,El,kl,Pl,Ol,Dl,zl,Eo=U(()=>{\"use strict\";Ke();Hn();St();jt();Pt=()=>!!be.wasm.proxy&&typeof document<\"u\",ir=!1,dn=!1,ln=!1,Ao=new Map,Ht=(e,t)=>{let r=Ao.get(e);r?r.push(t):Ao.set(e,[t])},Gt=()=>{if(ir||!dn||ln||!Ye)throw new Error(\"worker not ready\")},$h=e=>{switch(e.data.type){case\"init-wasm\":ir=!1,e.data.err?(ln=!0,To[1](e.data.err)):(dn=!0,To[0]()),un&&(URL.revokeObjectURL(un),un=void 0);break;case\"init-ep\":case\"copy-from\":case\"create\":case\"release\":case\"run\":case\"end-profiling\":{let t=Ao.get(e.data.type);e.data.err?t.shift()[1](e.data.err):t.shift()[0](e.data.out);break}default:}},Al=async()=>{if(!dn){if(ir)throw new Error(\"multiple calls to 'initWasm()' detected.\");if(ln)throw new Error(\"previous call to 'initWasm()' failed.\");if(ir=!0,Pt())return new Promise((e,t)=>{Ye?.terminate(),Oa().then(([r,n])=>{try{Ye=n,Ye.onerror=i=>t(i),Ye.onmessage=$h,To=[e,t];let o={type:\"init-wasm\",in:be};Ye.postMessage(o),un=r}catch(o){t(o)}},t)});try{await Ar(be.wasm),await Er(be),dn=!0}catch(e){throw ln=!0,e}finally{ir=!1}}},El=async e=>{if(Pt())return Gt(),new Promise((t,r)=>{Ht(\"init-ep\",[t,r]);let n={type:\"init-ep\",in:{epName:e,env:be}};Ye.postMessage(n)});await kr(be,e)},kl=async e=>Pt()?(Gt(),new Promise((t,r)=>{Ht(\"copy-from\",[t,r]);let n={type:\"copy-from\",in:{buffer:e}};Ye.postMessage(n,[e.buffer])})):Kt(e),Pl=async(e,t)=>{if(Pt()){if(t?.preferredOutputLocation)throw new Error('session option \"preferredOutputLocation\" is not supported for proxy.');return Gt(),new Promise((r,n)=>{Ht(\"create\",[r,n]);let o={type:\"create\",in:{model:e,options:{...t}}},i=[];e instanceof Uint8Array&&i.push(e.buffer),Ye.postMessage(o,i)})}else return Pr(e,t)},Ol=async e=>{if(Pt())return Gt(),new Promise((t,r)=>{Ht(\"release\",[t,r]);let n={type:\"release\",in:e};Ye.postMessage(n)});Or(e)},Dl=async(e,t,r,n,o,i)=>{if(Pt()){if(r.some(a=>a[3]!==\"cpu\"))throw new Error(\"input tensor on GPU is not supported for proxy.\");if(o.some(a=>a))throw new Error(\"pre-allocated output tensor is not supported for proxy.\");return Gt(),new Promise((a,l)=>{Ht(\"run\",[a,l]);let d=r,p={type:\"run\",in:{sessionId:e,inputIndices:t,inputs:d,outputIndices:n,options:i}};Ye.postMessage(p,Br(d))})}else return Dr(e,t,r,n,o,i)},zl=async e=>{if(Pt())return Gt(),new Promise((t,r)=>{Ht(\"end-profiling\",[t,r]);let n={type:\"end-profiling\",in:e};Ye.postMessage(n)});zr(e)}});var Bl,_h,cn,Rl=U(()=>{\"use strict\";Ke();Eo();Q();Tr();Kn();Bl=(e,t)=>{switch(e.location){case\"cpu\":return[e.type,e.dims,e.data,\"cpu\"];case\"gpu-buffer\":return[e.type,e.dims,{gpuBuffer:e.gpuBuffer},\"gpu-buffer\"];default:throw new Error(`invalid data location: ${e.location} for ${t()}`)}},_h=e=>{switch(e[3]){case\"cpu\":return new De(e[0],e[2],e[1]);case\"gpu-buffer\":{let t=e[0];if(!Vr(t))throw new Error(`not supported data type: ${t} for deserializing GPU tensor`);let{gpuBuffer:r,download:n,dispose:o}=e[2];return De.fromGpuBuffer(r,{dataType:t,dims:e[1],download:n,dispose:o})}default:throw new Error(`invalid data location: ${e[3]}`)}},cn=class{async fetchModelAndCopyToWasmMemory(t){return kl(await Zt(t))}async loadModel(t,r){We();let n;typeof t==\"string\"?!1?n=await Zt(t):n=await this.fetchModelAndCopyToWasmMemory(t):n=t,[this.sessionId,this.inputNames,this.outputNames]=await Pl(n,r),Me()}async dispose(){return Ol(this.sessionId)}async run(t,r,n){We();let o=[],i=[];Object.entries(t).forEach(h=>{let w=h[0],g=h[1],b=this.inputNames.indexOf(w);if(b===-1)throw new Error(`invalid input '${w}'`);o.push(g),i.push(b)});let a=[],l=[];Object.entries(r).forEach(h=>{let w=h[0],g=h[1],b=this.outputNames.indexOf(w);if(b===-1)throw new Error(`invalid output '${w}'`);a.push(g),l.push(b)});let d=o.map((h,w)=>Bl(h,()=>`input \"${this.inputNames[i[w]]}\"`)),p=a.map((h,w)=>h?Bl(h,()=>`output \"${this.outputNames[l[w]]}\"`):null),m=await Dl(this.sessionId,i,d,l,p,n),u={};for(let h=0;h<m.length;h++)u[this.outputNames[l[h]]]=a[h]??_h(m[h]);return Me(),u}startProfiling(){}endProfiling(){zl(this.sessionId)}}});var xh,pn,Ml=U(()=>{\"use strict\";Ke();Eo();Rl();jt();xh=()=>{if((typeof be.wasm.initTimeout!=\"number\"||be.wasm.initTimeout<0)&&(be.wasm.initTimeout=0),be.wasm.simd===!1&&console.warn('Deprecated property \"env.wasm.simd\" is set to false. non-SIMD build is no longer provided, and this setting will be ignored.'),typeof be.wasm.proxy!=\"boolean\"&&(be.wasm.proxy=!1),typeof be.wasm.trace!=\"boolean\"&&(be.wasm.trace=!1),typeof be.wasm.numThreads!=\"number\"||!Number.isInteger(be.wasm.numThreads)||be.wasm.numThreads<=0)if(typeof self<\"u\"&&!self.crossOriginIsolated)be.wasm.numThreads=1;else{let e=typeof navigator>\"u\"?Mn(\"node:os\").cpus().length:navigator.hardwareConcurrency;be.wasm.numThreads=Math.min(4,Math.ceil((e||1)/2))}},pn=class{async init(t){xh(),await Al(),await El(t)}async createInferenceSessionHandler(t,r){let n=new cn;return await n.loadModel(t,r),Promise.resolve(n)}}});var Ul={};Ft(Ul,{wasmBackend:()=>Sh});var Sh,Vl=U(()=>{\"use strict\";Ml();Sh=new pn});Ke();Ke();Ke();var xa=\"1.19.0-dev.20240804-ee2fe87e2d\";var K_=Wn;{let e=(Vl(),br(Ul)).wasmBackend;_t(\"webgpu\",e,5),_t(\"webnn\",e,5),_t(\"cpu\",e,10),_t(\"wasm\",e,10)}Object.defineProperty(be.versions,\"web\",{value:xa,enumerable:!0});export{dp as InferenceSession,Sr as TRACE,We as TRACE_FUNC_BEGIN,Me as TRACE_FUNC_END,De as Tensor,cp as TrainingSession,K_ as default,be as env,_t as registerBackend};\n/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n//# sourceMappingURL=ort.webgpu.bundle.min.mjs.map\n","/**\n * @file Handler file for choosing the correct version of ONNX Runtime, based on the environment.\n * Ideally, we could import the `onnxruntime-web` and `onnxruntime-node` packages only when needed,\n * but dynamic imports don't seem to work with the current webpack version and/or configuration.\n * This is possibly due to the experimental nature of top-level await statements.\n * So, we just import both packages, and use the appropriate one based on the environment:\n *   - When running in node, we use `onnxruntime-node`.\n *   - When running in the browser, we use `onnxruntime-web` (`onnxruntime-node` is not bundled).\n * \n * This module is not directly exported, but can be accessed through the environment variables:\n * ```javascript\n * import { env } from '@huggingface/transformers';\n * console.log(env.backends.onnx);\n * ```\n * \n * @module backends/onnx\n */\n\nimport { env, apis } from '../env.js';\n\n// NOTE: Import order matters here. We need to import `onnxruntime-node` before `onnxruntime-web`.\n// In either case, we select the default export if it exists, otherwise we use the named export.\nimport * as ONNX_NODE from 'onnxruntime-node';\nimport * as ONNX_WEB from 'onnxruntime-web/webgpu';\n\nexport { Tensor } from 'onnxruntime-common';\n\n/** @type {import('../utils/devices.js').DeviceType[]} */\nconst supportedExecutionProviders = [];\n\n/** @type {import('../utils/devices.js').DeviceType[]} */\nlet defaultExecutionProviders;\nlet ONNX;\nif (apis.IS_NODE_ENV) {\n    ONNX = ONNX_NODE.default ?? ONNX_NODE;\n    supportedExecutionProviders.push('cpu');\n    defaultExecutionProviders = ['cpu'];\n} else {\n    ONNX = ONNX_WEB;\n    if (apis.IS_WEBGPU_AVAILABLE) {\n        supportedExecutionProviders.push('webgpu');\n    }\n    supportedExecutionProviders.push('wasm');\n    defaultExecutionProviders = ['wasm'];\n}\n\n// @ts-ignore\nconst InferenceSession = ONNX.InferenceSession;\n\n/**\n * Map a device to the execution providers to use for the given device.\n * @param {import(\"../utils/devices.js\").DeviceType} [device=null] (Optional) The device to run the inference on.\n * @returns {import(\"../utils/devices.js\").DeviceType[]} The execution providers to use for the given device.\n */\nexport function deviceToExecutionProviders(device) {\n    // TODO: Use mapping from device to execution providers for overloaded devices (e.g., 'gpu' or 'cpu').\n    let executionProviders = defaultExecutionProviders;\n    if (device) { // User has specified a device\n        if (!supportedExecutionProviders.includes(device)) {\n            throw new Error(`Unsupported device: \"${device}\". Should be one of: ${supportedExecutionProviders.join(', ')}.`)\n        }\n        executionProviders = [device];\n    }\n    return executionProviders;\n}\n\n\n/**\n * To prevent multiple calls to `initWasm()`, we store the first call in a Promise\n * that is resolved when the first InferenceSession is created. Subsequent calls\n * will wait for this Promise to resolve before creating their own InferenceSession.\n * @type {Promise<any>|null}\n */\nlet wasmInitPromise = null;\n\n/**\n * Create an ONNX inference session.\n * @param {Uint8Array} buffer The ONNX model buffer.\n * @param {Object} session_options ONNX inference session options.\n * @returns {Promise<import('onnxruntime-common').InferenceSession>} The ONNX inference session.\n */\nexport async function createInferenceSession(buffer, session_options) {\n    if (wasmInitPromise) {\n        // A previous session has already initialized the WASM runtime\n        // so we wait for it to resolve before creating this new session.\n        await wasmInitPromise;\n    }\n\n    const sessionPromise = InferenceSession.create(buffer, session_options);\n    wasmInitPromise ??= sessionPromise;\n    return await sessionPromise;\n}\n\n/**\n * Check if an object is an ONNX tensor.\n * @param {any} x The object to check\n * @returns {boolean} Whether the object is an ONNX tensor.\n */\nexport function isONNXTensor(x) {\n    return x instanceof ONNX.Tensor;\n}\n\n// @ts-ignore\nconst ONNX_ENV = ONNX?.env;\nif (ONNX_ENV?.wasm) {\n    // Initialize wasm backend with suitable default settings.\n\n    // (Optional) Set path to wasm files. This is needed when running in a web worker.\n    // https://onnxruntime.ai/docs/api/js/interfaces/Env.WebAssemblyFlags.html#wasmPaths\n    // We use remote wasm files by default to make it easier for newer users.\n    // In practice, users should probably self-host the necessary .wasm files.\n    ONNX_ENV.wasm.wasmPaths = `https://cdn.jsdelivr.net/npm/@huggingface/transformers@${env.version}/dist/`;\n\n    // TODO: Add support for loading WASM files from cached buffer when we upgrade to onnxruntime-web@1.19.0\n    // https://github.com/microsoft/onnxruntime/pull/21534\n\n    // Proxy the WASM backend to prevent the UI from freezing\n    // NOTE: This is only needed when running in a non-worker browser environment.\n    ONNX_ENV.wasm.proxy = !apis.IS_WEBWORKER_ENV;\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/crossOriginIsolated\n    if (typeof crossOriginIsolated === 'undefined' || !crossOriginIsolated) {\n        ONNX_ENV.wasm.numThreads = 1;\n    }\n\n    // Running in a browser-environment\n    // TODO: Check if 1.17.1 fixes this issue.\n    // SIMD for WebAssembly does not operate correctly in some recent versions of iOS (16.4.x).\n    // As a temporary fix, we disable it for now.\n    // For more information, see: https://github.com/microsoft/onnxruntime/issues/15644\n    const isIOS = typeof navigator !== 'undefined' && /iP(hone|od|ad).+16_4.+AppleWebKit/.test(navigator.userAgent);\n    if (isIOS) {\n        ONNX_ENV.wasm.simd = false;\n    }\n}\n\nif (ONNX_ENV?.webgpu) {\n    ONNX_ENV.webgpu.powerPreference = 'high-performance';\n}\n\n/**\n * Check if ONNX's WASM backend is being proxied.\n * @returns {boolean} Whether ONNX's WASM backend is being proxied.\n */\nexport function isONNXProxy() {\n    // TODO: Update this when allowing non-WASM backends.\n    return ONNX_ENV?.wasm?.proxy;\n}\n\n// Expose ONNX environment variables to `env.backends.onnx`\nenv.backends.onnx = ONNX_ENV;\n","\n/**\n * @file Helper module for using model configs. For more information, see the corresponding\n * [Python documentation](https://huggingface.co/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig).\n * \n * **Example:** Load an `AutoConfig`.\n * \n * ```javascript\n * import { AutoConfig } from '@huggingface/transformers';\n * const config = await AutoConfig.from_pretrained('bert-base-uncased');\n * console.log(config);\n * // PretrainedConfig {\n * //   \"model_type\": \"bert\",\n * //   \"is_encoder_decoder\": false,\n * //   \"architectures\": [\n * //       \"BertForMaskedLM\"\n * //   ],\n * //   \"vocab_size\": 30522\n * //   \"num_attention_heads\": 12,\n * //   \"num_hidden_layers\": 12,\n * //   \"hidden_size\": 768,\n * //   \"max_position_embeddings\": 512,\n * //   ...\n * // }\n * ```\n * \n * @module configs\n */\n\nimport { pick } from './utils/core.js';\nimport {\n    getModelJSON,\n} from './utils/hub.js';\n\n/**\n * @typedef {import('./utils/hub.js').PretrainedOptions} PretrainedOptions\n */\n\n\n/**\n * Loads a config from the specified path.\n * @param {string} pretrained_model_name_or_path The path to the config directory.\n * @param {PretrainedOptions} options Additional options for loading the config.\n * @returns {Promise<Object>} A promise that resolves with information about the loaded config.\n */\nasync function loadConfig(pretrained_model_name_or_path, options) {\n    return await getModelJSON(pretrained_model_name_or_path, 'config.json', true, options);\n}\n\n/**\n * \n * @param {PretrainedConfig} config \n * @returns {Object} The normalized configuration.\n */\nfunction getNormalizedConfig(config) {\n    const mapping = {};\n\n    let init_normalized_config = {};\n    switch (config.model_type) {\n        // Sub-configs\n        case 'llava':\n        case 'paligemma':\n        case 'florence2':\n            init_normalized_config = getNormalizedConfig(config.text_config);\n            break;\n        case 'moondream1':\n            init_normalized_config = getNormalizedConfig(config.phi_config);\n            break;\n        case 'musicgen':\n            init_normalized_config = getNormalizedConfig(config.decoder);\n            break;\n\n        // Decoder-only models\n        case 'gpt2':\n        case 'gptj':\n        case 'codegen':\n        case 'gpt_bigcode':\n            mapping['num_heads'] = 'n_head';\n            mapping['num_layers'] = 'n_layer';\n            mapping['hidden_size'] = 'n_embd';\n            break;\n        case 'gpt_neox':\n        case 'stablelm':\n        case 'opt':\n        case 'phi':\n        case 'phi3':\n        case 'falcon':\n            mapping['num_heads'] = 'num_attention_heads';\n            mapping['num_layers'] = 'num_hidden_layers';\n            mapping['hidden_size'] = 'hidden_size';\n            break;\n        case 'llama':\n        case 'cohere':\n        case 'mistral':\n        case 'starcoder2':\n        case 'qwen2':\n            mapping['num_heads'] = 'num_key_value_heads';\n            mapping['num_layers'] = 'num_hidden_layers';\n            mapping['hidden_size'] = 'hidden_size';\n            mapping['num_attention_heads'] = 'num_attention_heads';\n            break;\n        case 'gemma':\n        case 'gemma2':\n            mapping['num_heads'] = 'num_key_value_heads';\n            mapping['num_layers'] = 'num_hidden_layers';\n            mapping['dim_kv'] = 'head_dim';\n            break;\n        case 'openelm':\n            mapping['num_heads'] = 'num_kv_heads';\n            mapping['num_layers'] = 'num_transformer_layers';\n            mapping['dim_kv'] = 'head_dim';\n            break;\n        case 'gpt_neo':\n        case 'donut-swin':\n            mapping['num_heads'] = 'num_heads';\n            mapping['num_layers'] = 'num_layers';\n            mapping['hidden_size'] = 'hidden_size';\n            break;\n        case 'bloom':\n            mapping['num_heads'] = 'n_head';\n            mapping['num_layers'] = 'n_layer';\n            mapping['hidden_size'] = 'hidden_size';\n            break;\n        case 'mpt':\n            mapping['num_heads'] = 'n_heads';\n            mapping['num_layers'] = 'n_layers';\n            mapping['hidden_size'] = 'd_model';\n            break;\n\n        // Encoder-decoder models\n        case 't5':\n        case 'mt5':\n        case 'longt5':\n            mapping['num_decoder_layers'] = 'num_decoder_layers';\n            mapping['num_decoder_heads'] = 'num_heads';\n            mapping['decoder_dim_kv'] = 'd_kv';\n            mapping['num_encoder_layers'] = 'num_layers';\n            mapping['num_encoder_heads'] = 'num_heads';\n            mapping['encoder_dim_kv'] = 'd_kv';\n            break;\n        case 'bart':\n        case 'mbart':\n        case 'marian':\n        case 'whisper':\n        case 'm2m_100':\n        case 'blenderbot':\n        case 'blenderbot-small':\n        case 'florence2_language':\n            mapping['num_decoder_layers'] = 'decoder_layers';\n            mapping['num_decoder_heads'] = 'decoder_attention_heads';\n            mapping['decoder_hidden_size'] = 'd_model';\n            mapping['num_encoder_layers'] = 'encoder_layers';\n            mapping['num_encoder_heads'] = 'encoder_attention_heads';\n            mapping['encoder_hidden_size'] = 'd_model';\n            break;\n        case 'speecht5':\n            mapping['num_decoder_layers'] = 'decoder_layers';\n            mapping['num_decoder_heads'] = 'decoder_attention_heads';\n            mapping['decoder_hidden_size'] = 'hidden_size';\n            mapping['num_encoder_layers'] = 'encoder_layers';\n            mapping['num_encoder_heads'] = 'encoder_attention_heads';\n            mapping['encoder_hidden_size'] = 'hidden_size';\n            break;\n        case 'trocr':\n            mapping['num_encoder_layers'] = mapping['num_decoder_layers'] = 'decoder_layers';\n            mapping['num_encoder_heads'] = mapping['num_decoder_heads'] = 'decoder_attention_heads';\n            mapping['encoder_hidden_size'] = mapping['decoder_hidden_size'] = 'd_model';\n            break;\n        case 'musicgen_decoder':\n            mapping['num_encoder_layers'] = mapping['num_decoder_layers'] = 'num_hidden_layers';\n            mapping['num_encoder_heads'] = mapping['num_decoder_heads'] = 'num_attention_heads';\n            mapping['encoder_hidden_size'] = mapping['decoder_hidden_size'] = 'hidden_size';\n            break;\n\n        case 'vision-encoder-decoder':\n            const decoderConfig = getNormalizedConfig(config.decoder);\n\n            const add_encoder_pkv = 'num_decoder_layers' in decoderConfig;\n            const result = pick(config, ['model_type', 'is_encoder_decoder']);\n            if (add_encoder_pkv) {\n                // Decoder is part of an encoder-decoder model\n                result.num_decoder_layers = decoderConfig.num_decoder_layers;\n                result.num_decoder_heads = decoderConfig.num_decoder_heads;\n                result.decoder_hidden_size = decoderConfig.decoder_hidden_size;\n\n                result.num_encoder_layers = decoderConfig.num_encoder_layers;\n                result.num_encoder_heads = decoderConfig.num_encoder_heads;\n                result.encoder_hidden_size = decoderConfig.encoder_hidden_size;\n            } else {\n                // Decoder is a decoder-only model\n                result.num_layers = decoderConfig.num_layers;\n                result.num_heads = decoderConfig.num_heads;\n                result.hidden_size = decoderConfig.hidden_size;\n            }\n            return result;\n\n    }\n\n    // NOTE: If `num_attention_heads` is not set, it is assumed to be equal to `num_heads`\n    const normalized_config = {\n        ...init_normalized_config,\n        ...pick(config, ['model_type', 'multi_query', 'is_encoder_decoder']),\n    };\n    for (const key in mapping) {\n        normalized_config[key] = config[mapping[key]];\n    }\n    return normalized_config;\n}\n\n/**\n * \n * @param {PretrainedConfig} config \n * @returns {Record<string, number[]>}\n */\nexport function getKeyValueShapes(config, {\n    prefix = 'past_key_values',\n} = {}) {\n    /** @type {Record<string, number[]>} */\n    const decoderFeeds = {};\n    const normalized_config = config.normalized_config;\n\n    // TODO support batches (i.e., batch_size > 1)\n    const batch_size = 1;\n\n    if (normalized_config.is_encoder_decoder && (\n        'num_encoder_heads' in normalized_config && 'num_decoder_heads' in normalized_config\n    )) {\n        const encoder_dim_kv = normalized_config.encoder_dim_kv ?? (\n            normalized_config.encoder_hidden_size / normalized_config.num_encoder_heads\n        );\n        const decoder_dim_kv = normalized_config.decoder_dim_kv ?? (\n            normalized_config.decoder_hidden_size / normalized_config.num_decoder_heads\n        );\n\n        const encoder_dims = [batch_size, normalized_config.num_encoder_heads, 0, encoder_dim_kv];\n        const decoder_dims = [batch_size, normalized_config.num_decoder_heads, 0, decoder_dim_kv];\n        for (let i = 0; i < normalized_config.num_decoder_layers; ++i) {\n            decoderFeeds[`${prefix}.${i}.encoder.key`] = encoder_dims;\n            decoderFeeds[`${prefix}.${i}.encoder.value`] = encoder_dims;\n            decoderFeeds[`${prefix}.${i}.decoder.key`] = decoder_dims;\n            decoderFeeds[`${prefix}.${i}.decoder.value`] = decoder_dims;\n        }\n    } else { // Decoders\n        const num_heads = normalized_config.num_heads;\n        const num_layers = normalized_config.num_layers;\n        const dim_kv = normalized_config.dim_kv ?? (\n            normalized_config.hidden_size /\n            (normalized_config.num_attention_heads ?? num_heads)\n        );\n\n        if (normalized_config.model_type === 'falcon') {\n            // NOTE: Custom implementation for Falcon\n            const dims = [batch_size * num_heads, 0, dim_kv]\n            for (let i = 0; i < num_layers; ++i) {\n                decoderFeeds[`${prefix}.${i}.key`] = dims;\n                decoderFeeds[`${prefix}.${i}.value`] = dims;\n            }\n        } else if (normalized_config.multi_query) { // e.g., for `gpt_bigcode`\n            const dims = [batch_size * num_heads, 0, 2 * dim_kv]\n\n            for (let i = 0; i < num_layers; ++i) {\n                decoderFeeds[`${prefix}.${i}.key_value`] = dims;\n            }\n        } else if (normalized_config.model_type === 'bloom') {\n            // NOTE: Custom implementation for Bloom\n\n            const keyDims = [batch_size * num_heads, dim_kv, 0] // [batch_size x num_heads,64,past_sequence_length]\n            const valueDims = [batch_size * num_heads, 0, dim_kv] // [batch_size x num_heads,past_sequence_length,64]\n            for (let i = 0; i < num_layers; ++i) {\n                decoderFeeds[`${prefix}.${i}.key`] = keyDims;\n                decoderFeeds[`${prefix}.${i}.value`] = valueDims;\n            }\n        } else if (normalized_config.model_type === 'openelm') {\n            for (let i = 0; i < num_layers; ++i) {\n                const dims = [batch_size, num_heads[i], 0, dim_kv]\n\n                decoderFeeds[`${prefix}.${i}.key`] = dims;\n                decoderFeeds[`${prefix}.${i}.value`] = dims;\n            }\n        } else { // Decoder-only\n            const dims = [batch_size, num_heads, 0, dim_kv]\n            for (let i = 0; i < num_layers; ++i) {\n                decoderFeeds[`${prefix}.${i}.key`] = dims;\n                decoderFeeds[`${prefix}.${i}.value`] = dims;\n            }\n        }\n    }\n\n    return decoderFeeds;\n}\n/**\n * Base class for all configuration classes. For more information, see the corresponding\n * [Python documentation](https://huggingface.co/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig).\n */\nexport class PretrainedConfig {\n    // NOTE: Typo in original\n\n    max_position_embeddings;\n\n    /**\n     * Create a new PreTrainedTokenizer instance.\n     * @param {Object} configJSON The JSON of the config.\n     */\n    constructor(configJSON) {\n        this.model_type = null;\n        this.is_encoder_decoder = false;\n\n        Object.assign(this, configJSON);\n        this.normalized_config = getNormalizedConfig(this);\n    }\n\n    /**\n     * Loads a pre-trained config from the given `pretrained_model_name_or_path`. \n     * \n     * @param {string} pretrained_model_name_or_path The path to the pre-trained config.\n     * @param {PretrainedOptions} options Additional options for loading the config.\n     * @throws {Error} Throws an error if the config.json is not found in the `pretrained_model_name_or_path`.\n     * \n     * @returns {Promise<PretrainedConfig>} A new instance of the `PretrainedConfig` class.\n     */\n    static async from_pretrained(pretrained_model_name_or_path, {\n        progress_callback = null,\n        config = null,\n        cache_dir = null,\n        local_files_only = false,\n        revision = 'main',\n    } = {}) {\n        if (config && !(config instanceof PretrainedConfig)) {\n            config = new PretrainedConfig(config);\n        }\n\n        const data = config ?? await loadConfig(pretrained_model_name_or_path, {\n            progress_callback,\n            config,\n            cache_dir,\n            local_files_only,\n            revision,\n        })\n        return new this(data);\n    }\n}\n\n/**\n * Helper class which is used to instantiate pretrained configs with the `from_pretrained` function.\n * \n * @example\n * const config = await AutoConfig.from_pretrained('Xenova/bert-base-uncased'); \n */\nexport class AutoConfig {\n    /** @type {typeof PretrainedConfig.from_pretrained} */\n    static async from_pretrained(...args) {\n        return PretrainedConfig.from_pretrained(...args);\n    }\n}\n\n/**\n * Transformers.js-specific configuration, possibly present in config.json under the key `transformers.js_config`.\n * @typedef {Object} TransformersJSConfig\n * @property {import('./transformers.js').DataType} [kv_cache_dtype]\n */\n","/**\n * @file Module used to configure Transformers.js.\n * \n * **Example:** Disable remote models.\n * ```javascript\n * import { env } from '@huggingface/transformers';\n * env.allowRemoteModels = false;\n * ```\n * \n * **Example:** Set local model path.\n * ```javascript\n * import { env } from '@huggingface/transformers';\n * env.localModelPath = '/path/to/local/models/';\n * ```\n * \n * **Example:** Set cache directory.\n * ```javascript\n * import { env } from '@huggingface/transformers';\n * env.cacheDir = '/path/to/cache/directory/';\n * ```\n * \n * @module env\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport url from 'url';\n\nconst VERSION = '3.0.0-alpha.5';\n\n// Check if various APIs are available (depends on environment)\nconst IS_BROWSER_ENV = typeof self !== 'undefined';\nconst IS_WEBWORKER_ENV = IS_BROWSER_ENV && self.constructor.name === 'DedicatedWorkerGlobalScope';\nconst IS_WEB_CACHE_AVAILABLE = IS_BROWSER_ENV && 'caches' in self;\nconst IS_WEBGPU_AVAILABLE = typeof navigator !== 'undefined' && 'gpu' in navigator;\n\nconst IS_PROCESS_AVAILABLE = typeof process !== 'undefined';\nconst IS_NODE_ENV = IS_PROCESS_AVAILABLE && process?.release?.name === 'node';\nconst IS_FS_AVAILABLE = !isEmpty(fs);\nconst IS_PATH_AVAILABLE = !isEmpty(path);\n\n/**\n * A read-only object containing information about the APIs available in the current environment.\n */\nexport const apis = Object.freeze({\n    /** Whether we are running in a browser environment */\n    IS_BROWSER_ENV,\n\n    /** Whether we are running in a web worker environment */\n    IS_WEBWORKER_ENV,\n\n    /** Whether the Cache API is available */\n    IS_WEB_CACHE_AVAILABLE,\n\n    /** Whether the WebGPU API is available */\n    IS_WEBGPU_AVAILABLE,\n\n    /** Whether the Node.js process API is available */\n    IS_PROCESS_AVAILABLE,\n\n    /** Whether we are running in a Node.js environment */\n    IS_NODE_ENV,\n\n    /** Whether the filesystem API is available */\n    IS_FS_AVAILABLE,\n\n    /** Whether the path API is available */\n    IS_PATH_AVAILABLE,\n});\n\nconst RUNNING_LOCALLY = IS_FS_AVAILABLE && IS_PATH_AVAILABLE;\nconst __dirname = RUNNING_LOCALLY\n    ? path.dirname(path.dirname(url.fileURLToPath(import.meta.url)))\n    : './';\n\n// Only used for environments with access to file system\nconst DEFAULT_CACHE_DIR = RUNNING_LOCALLY\n    ? path.join(__dirname, '/.cache/')\n    : null;\n\n// Set local model path, based on available APIs\nconst DEFAULT_LOCAL_MODEL_PATH = '/models/';\nconst localModelPath = RUNNING_LOCALLY\n    ? path.join(__dirname, DEFAULT_LOCAL_MODEL_PATH)\n    : DEFAULT_LOCAL_MODEL_PATH;\n\n/**\n * Global variable given visible to users to control execution. This provides users a simple way to configure Transformers.js.\n * @typedef {Object} TransformersEnvironment\n * @property {string} version This version of Transformers.js.\n * @property {Object} backends Expose environment variables of different backends,\n * allowing users to set these variables if they want to.\n * @property {boolean} allowRemoteModels Whether to allow loading of remote files, defaults to `true`.\n * If set to `false`, it will have the same effect as setting `local_files_only=true` when loading pipelines, models, tokenizers, processors, etc.\n * @property {string} remoteHost Host URL to load models from. Defaults to the Hugging Face Hub.\n * @property {string} remotePathTemplate Path template to fill in and append to `remoteHost` when loading models.\n * @property {boolean} allowLocalModels Whether to allow loading of local files, defaults to `false` if running in-browser, and `true` otherwise.\n * If set to `false`, it will skip the local file check and try to load the model from the remote host.\n * @property {string} localModelPath Path to load local models from. Defaults to `/models/`.\n * @property {boolean} useFS Whether to use the file system to load files. By default, it is `true` if available.\n * @property {boolean} useBrowserCache Whether to use Cache API to cache models. By default, it is `true` if available.\n * @property {boolean} useFSCache Whether to use the file system to cache files. By default, it is `true` if available.\n * @property {string} cacheDir The directory to use for caching files with the file system. By default, it is `./.cache`.\n * @property {boolean} useCustomCache Whether to use a custom cache system (defined by `customCache`), defaults to `false`.\n * @property {Object} customCache The custom cache to use. Defaults to `null`. Note: this must be an object which\n * implements the `match` and `put` functions of the Web Cache API. For more information, see https://developer.mozilla.org/en-US/docs/Web/API/Cache\n */\n\n/** @type {TransformersEnvironment} */\nexport const env = {\n    version: VERSION,\n\n    /////////////////// Backends settings ///////////////////\n    // NOTE: These will be populated later by the backends themselves.\n    backends: {\n        // onnxruntime-web/onnxruntime-node\n        onnx: {},\n\n        // TensorFlow.js\n        tfjs: {},\n    },\n\n\n    /////////////////// Model settings ///////////////////\n    allowRemoteModels: true,\n    remoteHost: 'https://huggingface.co/',\n    remotePathTemplate: '{model}/resolve/{revision}/',\n\n    allowLocalModels: !IS_BROWSER_ENV,\n    localModelPath: localModelPath,\n    useFS: IS_FS_AVAILABLE,\n\n    /////////////////// Cache settings ///////////////////\n    useBrowserCache: IS_WEB_CACHE_AVAILABLE,\n\n    useFSCache: IS_FS_AVAILABLE,\n    cacheDir: DEFAULT_CACHE_DIR,\n\n    useCustomCache: false,\n    customCache: null,\n    //////////////////////////////////////////////////////\n}\n\n\n/**\n * @param {Object} obj\n * @private\n */\nfunction isEmpty(obj) {\n    return Object.keys(obj).length === 0;\n}\n\n","\n/**\n * @module generation/configuration_utils\n */\n\nimport { pick } from \"../utils/core.js\";\n\n/**\n * Class that holds a configuration for a generation task.\n */\nexport class GenerationConfig {\n    // Parameters that control the length of the output\n    /**\n     * The maximum length the generated tokens can have.\n     * Corresponds to the length of the input prompt + `max_new_tokens`.\n     * Its effect is overridden by `max_new_tokens`, if also set.\n     * @type {number}\n     * @default 20\n     */\n    max_length = 20;\n\n    /**\n     * The maximum numbers of tokens to generate, ignoring the number of tokens in the prompt.\n     * @type {number}\n     * @default null\n     */\n    max_new_tokens = null;\n\n    /**\n     * The minimum length of the sequence to be generated.\n     * Corresponds to the length of the input prompt + `min_new_tokens`.\n     * Its effect is overridden by `min_new_tokens`, if also set.\n     * @type {number}\n     * @default 0\n     */\n    min_length = 0;\n\n    /**\n     * The minimum numbers of tokens to generate, ignoring the number of tokens in the prompt.\n     * @type {number}\n     * @default null\n     */\n    min_new_tokens = null;\n\n    /**\n     * Controls the stopping condition for beam-based methods, like beam-search. It accepts the following values:\n     * - `true`, where the generation stops as soon as there are `num_beams` complete candidates;\n     * - `false`, where an heuristic is applied and the generation stops when is it very unlikely to find better candidates;\n     * - `\"never\"`, where the beam search procedure only stops when there cannot be better candidates (canonical beam search algorithm).\n     * @type {boolean|\"never\"}\n     * @default false\n     */\n    early_stopping = false;\n\n    /**\n     * The maximum amount of time you allow the computation to run for in seconds.\n     * Generation will still finish the current pass after allocated time has been passed.\n     * @type {number}\n     * @default null\n     */\n    max_time = null;\n\n    // Parameters that control the generation strategy used\n    /**\n     * Whether or not to use sampling; use greedy decoding otherwise.\n     * @type {boolean}\n     * @default false\n     */\n    do_sample = false;\n\n    /**\n     * Number of beams for beam search. 1 means no beam search.\n     * @type {number}\n     * @default 1\n     */\n    num_beams = 1;\n\n    /**\n     * Number of groups to divide `num_beams` into in order to ensure diversity among different groups of beams.\n     * See [this paper](https://arxiv.org/pdf/1610.02424.pdf) for more details.\n     * @type {number}\n     * @default 1\n     */\n    num_beam_groups = 1;\n\n    /**\n     * The values balance the model confidence and the degeneration penalty in contrastive search decoding.\n     * @type {number}\n     * @default null\n     */\n    penalty_alpha = null;\n\n    /**\n     * Whether or not the model should use the past last key/values attentions (if applicable to the model) to speed up decoding.\n     * @type {boolean}\n     * @default true\n     */\n    use_cache = true;\n\n    // Parameters for manipulation of the model output logits\n    /**\n     * The value used to modulate the next token probabilities.\n     * @type {number}\n     * @default 1.0\n     */\n    temperature = 1.0;\n\n    /**\n     * The number of highest probability vocabulary tokens to keep for top-k-filtering.\n     * @type {number}\n     * @default 50\n     */\n    top_k = 50;\n\n    /**\n     * If set to float < 1, only the smallest set of most probable tokens with probabilities that add up to `top_p` or higher are kept for generation.\n     * @type {number}\n     * @default 1.0\n     */\n    top_p = 1.0;\n\n    /**\n     * Local typicality measures how similar the conditional probability of predicting a target token next is to the expected conditional probability of predicting a random token next, given the partial text already generated.\n     * If set to float < 1, the smallest set of the most locally typical tokens with probabilities that add up to `typical_p` or higher are kept for generation.\n     * See [this paper](https://arxiv.org/pdf/2202.00666.pdf) for more details.\n     * @type {number}\n     * @default 1.0\n     */\n    typical_p = 1.0;\n\n    /**\n     * If set to float strictly between 0 and 1, only tokens with a conditional probability greater than `epsilon_cutoff` will be sampled.\n     * In the paper, suggested values range from 3e-4 to 9e-4, depending on the size of the model.\n     * See [Truncation Sampling as Language Model Desmoothing](https://arxiv.org/abs/2210.15191) for more details.\n     * @type {number}\n     * @default 0.0\n     */\n    epsilon_cutoff = 0.0;\n\n    /**\n     * Eta sampling is a hybrid of locally typical sampling and epsilon sampling.\n     * If set to float strictly between 0 and 1, a token is only considered if it is greater than either `eta_cutoff` or `sqrt(eta_cutoff) * exp(-entropy(softmax(next_token_logits)))`.\n     * The latter term is intuitively the expected next token probability, scaled by `sqrt(eta_cutoff)`. In the paper, suggested values range from 3e-4 to 2e-3, depending on the size of the model.\n     * See [Truncation Sampling as Language Model Desmoothing](https://arxiv.org/abs/2210.15191) for more details.\n     * @type {number}\n     * @default 0.0\n     */\n    eta_cutoff = 0.0;\n\n    /**\n     * This value is subtracted from a beam's score if it generates a token same as any beam from other group at a particular time.\n     * Note that `diversity_penalty` is only effective if `group beam search` is enabled.\n     * @type {number}\n     * @default 0.0\n     */\n    diversity_penalty = 0.0;\n\n    /**\n     * The parameter for repetition penalty. 1.0 means no penalty.\n     * See [this paper](https://arxiv.org/pdf/1909.05858.pdf) for more details.\n     * @type {number}\n     * @default 1.0\n     */\n    repetition_penalty = 1.0;\n\n    /**\n     * The paramater for encoder_repetition_penalty.\n     * An exponential penalty on sequences that are not in the original input.\n     * 1.0 means no penalty.\n     * @type {number}\n     * @default 1.0\n     */\n    encoder_repetition_penalty = 1.0;\n\n    /**\n     * Exponential penalty to the length that is used with beam-based generation.\n     * It is applied as an exponent to the sequence length, which in turn is used to divide the score of the sequence.\n     * Since the score is the log likelihood of the sequence (i.e. negative), `length_penalty` > 0.0 promotes longer sequences, while `length_penalty` < 0.0 encourages shorter sequences.\n     * @type {number}\n     * @default 1.0\n     */\n    length_penalty = 1.0;\n\n    /**\n     * If set to int > 0, all ngrams of that size can only occur once.\n     * @type {number}\n     * @default 0\n     */\n    no_repeat_ngram_size = 0;\n\n    /**\n     * List of token ids that are not allowed to be generated.\n     * In order to get the token ids of the words that should not appear in the generated text, use\n     * `tokenizer(bad_words, { add_prefix_space: true, add_special_tokens: false }).input_ids`.\n     * @type {number[][]}\n     * @default null\n     */\n    bad_words_ids = null;\n\n    /**\n     * List of token ids that must be generated.\n     * If given a `number[][]`, this is treated as a simple list of words that must be included, the opposite to `bad_words_ids`.\n     * If given `number[][][]`, this triggers a [disjunctive constraint](https://github.com/huggingface/transformers/issues/14081), where one can allow different forms of each word.\n     * @type {number[][]|number[][][]}\n     * @default null\n     */\n    force_words_ids = null;\n\n    /**\n     * Whether to renormalize the logits after applying all the logits processors or warpers (including the custom ones).\n     * It's highly recommended to set this flag to `true` as the search algorithms suppose the score logits are normalized but some logit processors or warpers break the normalization.\n     * @type {boolean}\n     * @default false\n     */\n    renormalize_logits = false;\n\n    /**\n     * Custom constraints that can be added to the generation to ensure that the output will contain the use of certain tokens as defined by `Constraint` objects, in the most sensible way possible.\n     * @type {Object[]}\n     * @default null\n     */\n    constraints = null;\n\n    /**\n     * The id of the token to force as the first generated token after the `decoder_start_token_id`.\n     * Useful for multilingual models like mBART where the first generated token needs to be the target language token.\n     * @type {number}\n     * @default null\n     */\n    forced_bos_token_id = null;\n\n    /**\n     * The id of the token to force as the last generated token when `max_length` is reached.\n     * Optionally, use a list to set multiple *end-of-sequence* tokens.\n     * @type {number|number[]}\n     * @default null\n     */\n    forced_eos_token_id = null;\n\n    /**\n     * Whether to remove possible *nan* and *inf* outputs of the model to prevent the generation method to crash. Note that using `remove_invalid_values` can slow down generation.\n     * @type {boolean}\n     */\n    remove_invalid_values = false;\n\n    /**\n     * This Tuple adds an exponentially increasing length penalty, after a certain amount of tokens have been generated.\n     * The tuple shall consist of: `(start_index, decay_factor)` where `start_index` indicates where penalty starts and `decay_factor` represents the factor of exponential decay.\n     * @type {[number, number]}\n     * @default null\n     */\n    exponential_decay_length_penalty = null;\n\n    /**\n     * A list of tokens that will be suppressed at generation.\n     * The `SuppressTokens` logit processor will set their log probs to `-inf` so that they are not sampled.\n     * @type {number[]}\n     * @default null\n     */\n    suppress_tokens = null;\n\n    /**\n     * A list of tokens that will be suppressed at the beginning of the generation.\n     * The `SuppressBeginTokens` logit processor will set their log probs to `-inf` so that they are not sampled.\n     * @type {number[]}\n     * @default null\n     */\n    begin_suppress_tokens = null;\n\n    /**\n     * A list of pairs of integers which indicates a mapping from generation indices to token indices that will be forced before sampling.\n     * For example, `[[1, 123]]` means the second generated token will always be a token of index 123.\n     * @type {[number, number][]}\n     * @default null\n     */\n    forced_decoder_ids = null;\n\n    /**\n     * The guidance scale for classifier free guidance (CFG). CFG is enabled by setting `guidance_scale > 1`.\n     * Higher guidance scale encourages the model to generate samples that are more closely linked to the input\n     * prompt, usually at the expense of poorer quality.\n     * @type {number}\n     * @default null\n     */\n    guidance_scale = null;\n\n    // Parameters that define the output variables of `generate`\n    /**\n     * The number of independently computed returned sequences for each element in the batch.\n     * @type {number}\n     * @default 1\n     */\n    num_return_sequences = 1;\n\n    /**\n     * Whether or not to return the attentions tensors of all attention layers.\n     * See `attentions` under returned tensors for more details.\n     * @type {boolean}\n     * @default false\n     */\n    output_attentions = false;\n\n    /**\n     * Whether or not to return the hidden states of all layers.\n     * See `hidden_states` under returned tensors for more details.\n     * @type {boolean}\n     * @default false\n     */\n    output_hidden_states = false;\n\n    /**\n     * Whether or not to return the prediction scores.\n     * See `scores` under returned tensors for more details.\n     * @type {boolean}\n     * @default false\n     */\n    output_scores = false;\n\n    /**\n     * Whether or not to return a `ModelOutput` instead of a plain tuple.\n     * @type {boolean}\n     * @default false\n     */\n    return_dict_in_generate = false;\n\n    // Special tokens that can be used at generation time\n    /**\n     * The id of the *padding* token.\n     * @type {number}\n     * @default null\n     */\n    pad_token_id = null;\n\n    /**\n     * The id of the *beginning-of-sequence* token.\n     * @type {number}\n     * @default null\n     */\n    bos_token_id = null;\n\n    /**\n     * The id of the *end-of-sequence* token.\n     * Optionally, use a list to set multiple *end-of-sequence* tokens.\n     * @type {number|number[]}\n     * @default null\n     */\n    eos_token_id = null;\n\n    // Generation parameters exclusive to encoder-decoder models\n    /**\n     * If set to int > 0, all ngrams of that size that occur in the `encoder_input_ids` cannot occur in the `decoder_input_ids`.\n     * @type {number}\n     * @default 0\n     */\n    encoder_no_repeat_ngram_size = 0;\n\n    /**\n     * If an encoder-decoder model starts decoding with a different token than *bos*, the id of that token.\n     * @type {number}\n     * @default null\n     */\n    decoder_start_token_id = null;\n\n    // Wild card\n    /**\n     * Additional generation kwargs will be forwarded to the `generate` function of the model.\n     * Kwargs that are not present in `generate`'s signature will be used in the model forward pass.\n     * @type {Object}\n     * @default {}\n     */\n    generation_kwargs = {};\n\n    /**\n     * \n     * @param {GenerationConfig|import('../configs.js').PretrainedConfig} config \n     */\n    constructor(config) {\n        Object.assign(this, pick(config, Object.getOwnPropertyNames(this)));\n    }\n}\n\n","\n/**\n * @module generation/logits_process\n */\n\nimport { Callable } from \"../utils/generic.js\";\nimport { Tensor } from \"../utils/tensor.js\";\n\nimport { max, log_softmax } from \"../utils/maths.js\";\n\n/**\n * Abstract base class for all logit processors that can be applied during generation.\n */\nexport class LogitsProcessor extends Callable {\n    /**\n     * Apply the processor to the input logits.\n     *\n     * @abstract\n     * @param {bigint[][]} input_ids The input ids.\n     * @param {Tensor} logits The logits to process.\n     * @throws {Error} Throws an error if `_call` is not implemented in the subclass.\n     */\n    _call(input_ids, logits) {\n        throw Error(\"`_call` should be implemented in a subclass\")\n    }\n}\n\n\n/**\n * Abstract base class for all logit warpers that can be applied during generation with multinomial sampling.\n */\nexport class LogitsWarper extends Callable {\n    /**\n     * Apply the processor to the input logits.\n     *\n     * @abstract\n     * @param {bigint[][]} input_ids The input ids.\n     * @param {Tensor} logits The logits to process.\n     * @throws {Error} Throws an error if `_call` is not implemented in the subclass.\n     */\n    _call(input_ids, logits) {\n        throw Error(\"`_call` should be implemented in a subclass\")\n    }\n}\n\n\n/**\n * A class representing a list of logits processors. A logits processor is a function that modifies the logits\n * output of a language model. This class provides methods for adding new processors and applying all processors to a\n * batch of logits.\n */\nexport class LogitsProcessorList extends Callable {\n    /**\n     * Constructs a new instance of `LogitsProcessorList`.\n     */\n    constructor() {\n        super();\n        this.processors = [];\n    }\n\n    /**\n     * Adds a new logits processor to the list.\n     *\n     * @param {LogitsProcessor} item The logits processor function to add.\n     */\n    push(item) {\n        this.processors.push(item);\n    }\n\n    /**\n     * Adds multiple logits processors to the list.\n     *\n     * @param {LogitsProcessor[]} items The logits processor functions to add.\n     */\n    extend(items) {\n        this.processors.push(...items);\n    }\n\n    /**\n     * Applies all logits processors in the list to a batch of logits, modifying them in-place.\n     *\n     * @param {bigint[][]} input_ids The input IDs for the language model.\n     * @param {Tensor} logits\n     */\n    _call(input_ids, logits) {\n        let toReturn = logits;\n        // NOTE: Most processors modify logits inplace\n        for (const processor of this.processors) {\n            toReturn = processor(input_ids, toReturn);\n        }\n        return toReturn;\n    }\n\n    [Symbol.iterator]() {\n        return this.processors.values();\n    }\n}\n\n// DEPRECATED: https://github.com/huggingface/transformers/pull/29485\n// /**\n//  * A logits processor that forces a specific token to be generated by the decoder.\n//  */\n// export class ForceTokensLogitsProcessor extends LogitsProcessor {\n//     /**\n//      * Constructs a new instance of `ForceTokensLogitsProcessor`.\n//      * \n//      * @param {[number, number][]} forced_decoder_ids The ids of tokens that should be forced.\n//      */\n//     constructor(forced_decoder_ids) {\n//         super();\n//         // TODO: convert to `new Map(forced_decoder_ids)`\n//         this.force_token_map = Object.fromEntries(forced_decoder_ids ?? []);\n//     }\n\n//     /**\n//      * Apply the processor to the input logits.\n//      *\n//      * @param {bigint[][]} input_ids The input ids.\n//      * @param {Tensor} logits The logits to process.\n//      * @returns {Tensor} The processed logits.\n//      */\n//     _call(input_ids, logits) {\n//         console.log('this.force_token_map', this.force_token_map)\n//         console.log('call ForceTokensLogitsProcessor', input_ids, logits)\n//         console.log('input_ids.length', input_ids.length)\n//         let map = this.force_token_map[input_ids.length];\n//         if (map) { // There exists a mapping\n//             logits.data.fill(-Infinity)\n//             logits.data[map] = 0;\n//         }\n//         console.log('map', map)\n//         // throw Error(\"Not implemented\")\n//         return logits;\n//     }\n// }\n\n/**\n * A LogitsProcessor that forces a BOS token at the beginning of the generated sequence.\n */\nexport class ForcedBOSTokenLogitsProcessor extends LogitsProcessor {\n    /**\n     * Create a ForcedBOSTokenLogitsProcessor.\n     * @param {number} bos_token_id The ID of the beginning-of-sequence token to be forced.\n     */\n    constructor(bos_token_id) {\n        super();\n        this.bos_token_id = bos_token_id;\n    }\n\n    /**\n     * Apply the BOS token forcing to the logits.\n     * @param {bigint[][]} input_ids The input IDs.\n     * @param {Tensor} logits The logits.\n     * @returns {Object} The logits with BOS token forcing.\n     */\n    _call(input_ids, logits) {\n        for (let i = 0; i < input_ids.length; ++i) {\n            if (input_ids[i].length === 1) {\n                const batch_logits = logits[i];\n                batch_logits.data.fill(-Infinity);\n                batch_logits.data[this.bos_token_id] = 0;\n            }\n        }\n        return logits;\n    }\n}\n\n/**\n * A logits processor that enforces the specified token as the last generated token when `max_length` is reached.\n */\nexport class ForcedEOSTokenLogitsProcessor extends LogitsProcessor {\n    /**\n     * Create a ForcedEOSTokenLogitsProcessor.\n     * @param {number} max_length The maximum length of the sequence to be generated.\n     * @param {number|number[]} eos_token_id The id(s) of the *end-of-sequence* token.\n     */\n    constructor(max_length, eos_token_id) {\n        super();\n        this.max_length = max_length;\n        this.eos_token_id = Array.isArray(eos_token_id) ? eos_token_id : [eos_token_id];\n    }\n\n    /**\n     * Apply the processor to input_ids and logits.\n     * \n     * @param {bigint[][]} input_ids The input ids.\n     * @param {Tensor} logits The logits tensor.\n     */\n    _call(input_ids, logits) {\n        for (let i = 0; i < input_ids.length; ++i) {\n            if (input_ids[i].length === this.max_length - 1) {\n                const batch_logits = logits[i];\n                batch_logits.data.fill(-Infinity);\n\n                for (const eos_token of this.eos_token_id) {\n                    batch_logits.data[eos_token] = 0;\n                }\n            }\n        }\n        return logits;\n    }\n}\n\n/**\n * A LogitsProcessor that suppresses a list of tokens as soon as the `generate` function starts\n * generating using `begin_index` tokens. This should ensure that the tokens defined by\n * `begin_suppress_tokens` at not sampled at the begining of the generation.\n */\nexport class SuppressTokensAtBeginLogitsProcessor extends LogitsProcessor {\n    /**\n     * Create a SuppressTokensAtBeginLogitsProcessor.\n     * @param {number[]} begin_suppress_tokens The IDs of the tokens to suppress.\n     * @param {number} begin_index The number of tokens to generate before suppressing tokens.\n     */\n    constructor(begin_suppress_tokens, begin_index) {\n        super();\n        this.begin_suppress_tokens = begin_suppress_tokens;\n        this.begin_index = begin_index;\n    }\n\n    /**\n     * Apply the BOS token forcing to the logits.\n     * @param {bigint[][]} input_ids The input IDs.\n     * @param {Tensor} logits The logits.\n     * @returns {Object} The logits with BOS token forcing.\n     */\n    _call(input_ids, logits) {\n        for (let i = 0; i < input_ids.length; ++i) {\n            if (input_ids[i].length === this.begin_index) {\n                const batch_logits = logits[i];\n                for (const token_id of this.begin_suppress_tokens) {\n                    batch_logits.data[token_id] = -Infinity;\n                }\n            }\n        }\n        return logits;\n    }\n}\n\n/**\n * A LogitsProcessor that handles adding timestamps to generated text.\n */\nexport class WhisperTimeStampLogitsProcessor extends LogitsProcessor {\n    /**\n     * Constructs a new WhisperTimeStampLogitsProcessor.\n     * @param {import('../models/whisper/generation_whisper.js').WhisperGenerationConfig} generate_config The config object passed to the `generate()` method of a transformer model.\n     * @param {number[]} init_tokens The initial tokens of the input sequence.\n     */\n    constructor(generate_config, init_tokens) {\n        super();\n        this.eos_token_id =\n            Array.isArray(generate_config.eos_token_id)\n                ? generate_config.eos_token_id[0]\n                : generate_config.eos_token_id;\n\n        this.no_timestamps_token_id = generate_config.no_timestamps_token_id;\n        this.timestamp_begin = this.no_timestamps_token_id + 1;\n\n        this.begin_index = init_tokens.length;\n        if (init_tokens.at(-1) === this.no_timestamps_token_id) {\n            this.begin_index -= 1;\n        }\n        this.max_initial_timestamp_index = generate_config.max_initial_timestamp_index;\n    }\n\n    /**\n     * Modify the logits to handle timestamp tokens.\n     * @param {bigint[][]} input_ids The input sequence of tokens.\n     * @param {Tensor} logits The logits output by the model.\n     * @returns {Tensor} The modified logits.\n     */\n    _call(input_ids, logits) {\n        for (let i = 0; i < input_ids.length; ++i) {\n            const batch_logits = logits[i];\n            const logitsData = /** @type {Float32Array} */(batch_logits.data);\n\n            // suppress <|notimestamps|> which is handled by without_timestamps\n            logitsData[this.no_timestamps_token_id] = -Infinity;\n\n            if (input_ids[i].length === this.begin_index - 1) {\n                logitsData.fill(-Infinity);\n                logitsData[this.timestamp_begin] = 0;\n                continue;\n            }\n\n            // timestamps have to appear in pairs, except directly before eos_token; mask logits accordingly\n            const seq = input_ids[i].slice(this.begin_index);\n            const last_was_timestamp = seq.length >= 1 && seq[seq.length - 1] >= this.timestamp_begin;\n            const penultimate_was_timestamp = seq.length < 2 || seq[seq.length - 2] >= this.timestamp_begin;\n\n            if (last_was_timestamp) {\n                if (penultimate_was_timestamp) { // has to be non-timestamp\n                    logitsData.subarray(this.timestamp_begin).fill(-Infinity);\n                } else { // cannot be normal text tokens\n                    logitsData.subarray(0, this.eos_token_id).fill(-Infinity);\n                }\n            }\n\n            // apply the `max_initial_timestamp` option\n            if (input_ids[i].length === this.begin_index && this.max_initial_timestamp_index !== null) {\n                const last_allowed = this.timestamp_begin + this.max_initial_timestamp_index;\n                logitsData.subarray(last_allowed + 1).fill(-Infinity);\n            }\n\n            // if sum of probability over timestamps is above any other token, sample timestamp\n            const logprobs = log_softmax(logitsData);\n            const timestamp_logprob = Math.log(logprobs.subarray(this.timestamp_begin).map(Math.exp).reduce((a, b) => a + b));\n            const max_text_token_logprob = max(logprobs.subarray(0, this.timestamp_begin))[0];\n\n            if (timestamp_logprob > max_text_token_logprob) {\n                logitsData.subarray(0, this.timestamp_begin).fill(-Infinity);\n            }\n        }\n\n        return logits;\n    }\n}\n\n/**\n * A logits processor that disallows ngrams of a certain size to be repeated.\n */\nexport class NoRepeatNGramLogitsProcessor extends LogitsProcessor {\n    /**\n     * Create a NoRepeatNGramLogitsProcessor.\n     * @param {number} no_repeat_ngram_size The no-repeat-ngram size. All ngrams of this size can only occur once.\n     */\n    constructor(no_repeat_ngram_size) {\n        super();\n        this.no_repeat_ngram_size = no_repeat_ngram_size;\n    }\n\n    /**\n     * Generate n-grams from a sequence of token ids.\n     * @param {bigint[]} prevInputIds List of previous input ids\n     * @returns {Map<string, number[]>} Map of generated n-grams\n     */\n    getNgrams(prevInputIds) {\n        const curLen = prevInputIds.length;\n\n        /**@type {number[][]} */\n        const ngrams = [];\n        for (let j = 0; j < curLen + 1 - this.no_repeat_ngram_size; ++j) {\n            const ngram = [];\n            for (let k = 0; k < this.no_repeat_ngram_size; ++k) {\n                ngram.push(prevInputIds[j + k]);\n            }\n            ngrams.push(ngram.map(Number));\n        }\n\n        /** @type {Map<string, number[]>} */\n        const generatedNgram = new Map();\n        for (const ngram of ngrams) {\n            const prevNgram = ngram.slice(0, ngram.length - 1);\n            const prevNgramKey = JSON.stringify(prevNgram);\n            const prevNgramValue = generatedNgram.get(prevNgramKey) ?? [];\n            prevNgramValue.push(ngram[ngram.length - 1]);\n            generatedNgram.set(prevNgramKey, prevNgramValue);\n        }\n        return generatedNgram;\n    }\n\n    /**\n     * Generate n-grams from a sequence of token ids.\n     * @param {Map<string, number[]>} bannedNgrams Map of banned n-grams\n     * @param {bigint[]} prevInputIds List of previous input ids\n     * @returns {number[]} Map of generated n-grams\n     */\n    getGeneratedNgrams(bannedNgrams, prevInputIds) {\n        const ngramIdx = prevInputIds.slice(prevInputIds.length + 1 - this.no_repeat_ngram_size, prevInputIds.length);\n        const banned = bannedNgrams.get(JSON.stringify(ngramIdx.map(Number))) ?? [];\n        return banned;\n    }\n\n    /**\n     * Calculate banned n-gram tokens\n     * @param {bigint[]} prevInputIds List of previous input ids\n     * @returns {number[]} Map of generated n-grams\n     */\n    calcBannedNgramTokens(prevInputIds) {\n        const bannedTokens = [];\n        if (prevInputIds.length + 1 < this.no_repeat_ngram_size) {\n            // return no banned tokens if we haven't generated no_repeat_ngram_size tokens yet\n            return bannedTokens;\n\n        } else {\n            const generatedNgrams = this.getNgrams(prevInputIds);\n            const bannedTokens = this.getGeneratedNgrams(generatedNgrams, prevInputIds);\n            return bannedTokens;\n        }\n    }\n\n    /**\n     * Apply the no-repeat-ngram processor to the logits.\n     * @param {bigint[][]} input_ids The input IDs.\n     * @param {Tensor} logits The logits.\n     * @returns {Object} The logits with no-repeat-ngram processing.\n     */\n    _call(input_ids, logits) {\n        for (let i = 0; i < input_ids.length; ++i) {\n            const batch_logits = logits[i];\n            const bannedTokens = this.calcBannedNgramTokens(input_ids[i]);\n            for (const token of bannedTokens) {\n                batch_logits.data[token] = -Infinity;\n            }\n        }\n        return logits;\n    }\n}\n\n/**\n * A logits processor that penalises repeated output tokens.\n */\nexport class RepetitionPenaltyLogitsProcessor extends LogitsProcessor {\n    /**\n     * Create a RepetitionPenaltyLogitsProcessor.\n     * @param {number} penalty The penalty to apply for repeated tokens.\n     */\n    constructor(penalty) {\n        super();\n        this.penalty = penalty;\n    }\n\n    /**\n     * Apply the repetition penalty to the logits.\n     * @param {bigint[][]} input_ids The input IDs.\n     * @param {Tensor} logits The logits.\n     * @returns {Object} The logits with repetition penalty processing.\n     */\n    _call(input_ids, logits) {\n        // Modify the logits corresponding to each element in `input_ids`.\n        // As a consequence, the logits corresponding to tokens that appear\n        // many times in the output will be penalised more.\n\n        for (let i = 0; i < input_ids.length; ++i) {\n            const batch_logits = logits[i];\n\n            for (const input_id of input_ids[i]) {\n                if (batch_logits.data[input_id] < 0) {\n                    batch_logits.data[input_id] *= this.penalty;\n                } else {\n                    batch_logits.data[input_id] /= this.penalty;\n                }\n            }\n        }\n\n        return logits\n    }\n}\n\n/**\n * A logits processor that enforces a minimum number of tokens.\n */\nexport class MinLengthLogitsProcessor extends LogitsProcessor {\n    /**\n     * Create a MinLengthLogitsProcessor.\n     * @param {number} min_length The minimum length below which the score of `eos_token_id` is set to negative infinity.\n     * @param {number|number[]} eos_token_id The ID/IDs of the end-of-sequence token.\n     */\n    constructor(min_length, eos_token_id) {\n        super();\n        this.min_length = min_length;\n        this.eos_token_id = Array.isArray(eos_token_id) ? eos_token_id : [eos_token_id];\n    }\n\n    /**\n     * Apply logit processor.\n     * @param {bigint[][]} input_ids The input IDs.\n     * @param {Tensor} logits The logits.\n     * @returns {Object} The processed logits.\n     */\n    _call(input_ids, logits) {\n        for (let i = 0; i < input_ids.length; ++i) {\n            if (input_ids[i].length < this.min_length) {\n                const batch_logits = logits[i];\n                for (const eos_token of this.eos_token_id) {\n                    batch_logits.data[eos_token] = -Infinity;\n                }\n            }\n        }\n\n        return logits\n    }\n}\n\n/**\n * A logits processor that enforces a minimum number of new tokens.\n */\nexport class MinNewTokensLengthLogitsProcessor extends LogitsProcessor {\n    /**\n     * Create a MinNewTokensLengthLogitsProcessor.\n     * @param {number} prompt_length_to_skip The input tokens length.\n     * @param {number} min_new_tokens The minimum *new* tokens length below which the score of `eos_token_id` is set to negative infinity.\n     * @param {number|number[]} eos_token_id The ID/IDs of the end-of-sequence token.\n     */\n    constructor(prompt_length_to_skip, min_new_tokens, eos_token_id) {\n        super();\n        this.prompt_length_to_skip = prompt_length_to_skip;\n        this.min_new_tokens = min_new_tokens;\n        this.eos_token_id = Array.isArray(eos_token_id) ? eos_token_id : [eos_token_id];\n    }\n\n    /**\n     * Apply logit processor.\n     * @param {bigint[][]} input_ids The input IDs.\n     * @param {Tensor} logits The logits.\n     * @returns {Object} The processed logits.\n     */\n    _call(input_ids, logits) {\n        for (let i = 0; i < input_ids.length; ++i) {\n            const new_tokens_length = input_ids[i].length - this.prompt_length_to_skip;\n            if (new_tokens_length < this.min_new_tokens) {\n                const batch_logits = logits[i];\n                for (const eos_token of this.eos_token_id) {\n                    batch_logits[eos_token] = -Infinity;\n                }\n            }\n        }\n        return logits\n    }\n}\n\nexport class NoBadWordsLogitsProcessor extends LogitsProcessor {\n    /**\n     * Create a `NoBadWordsLogitsProcessor`.\n     * @param {number[][]} bad_words_ids List of list of token ids that are not allowed to be generated.\n     * @param {number|number[]} eos_token_id The id of the *end-of-sequence* token. Optionally, use a list to set multiple *end-of-sequence* tokens.\n     */\n    constructor(bad_words_ids, eos_token_id) {\n        super();\n        this.bad_words_ids = bad_words_ids;\n        this.eos_token_id = Array.isArray(eos_token_id) ? eos_token_id : [eos_token_id];\n    }\n\n    /**\n     * Apply logit processor.\n     * @param {bigint[][]} input_ids The input IDs.\n     * @param {Tensor} logits The logits.\n     * @returns {Object} The processed logits.\n     */\n    _call(input_ids, logits) {\n        for (let i = 0; i < input_ids.length; ++i) {\n            const batch_logits = logits[i];\n            for (const bad_word_ids of this.bad_words_ids) {\n                // Whether to modify the logits of the last token in the bad word id sequence\n                let mark = true;\n\n                // For each bad word in the list, if the current sequence of input ids ends with this sequence (excluding the last),\n                // then we set the logits of the last bad word id to -Infinity.\n                for (let i = 1; i <= bad_word_ids.length - 1 && bad_word_ids.length < input_ids[i].length; ++i) {\n\n                    if (bad_word_ids.at(-i - 1) !== Number(input_ids[i].at(-i))) {\n                        // We have found a mismatch\n                        mark = false;\n                        break;\n                    }\n                }\n                if (mark) {\n                    batch_logits[bad_word_ids.at(-1)] = -Infinity;\n                }\n            }\n        }\n        return logits\n    }\n}\n\n/**\n * [`LogitsProcessor`] for classifier free guidance (CFG). The scores are split over the batch dimension,\n * where the first half correspond to the conditional logits (predicted from the input prompt) and the second half\n * correspond to the unconditional logits (predicted from an empty or 'null' prompt). The processor computes a\n * weighted average across the conditional and unconditional logits, parameterised by the `guidance_scale`.\n * \n * See [the paper](https://arxiv.org/abs/2306.05284) for more information.\n */\nexport class ClassifierFreeGuidanceLogitsProcessor extends LogitsProcessor {\n\n    /**\n     * Create a `ClassifierFreeGuidanceLogitsProcessor`.\n     * @param {number} guidance_scale The guidance scale for classifier free guidance (CFG). CFG is enabled by setting `guidance_scale > 1`.\n     * Higher guidance scale encourages the model to generate samples that are more closely linked to the input\n     * prompt, usually at the expense of poorer quality.\n     */\n    constructor(guidance_scale) {\n        super();\n        if (guidance_scale <= 1) {\n            throw new Error(\n                `Require guidance scale >1 to use the classifier free guidance processor, got guidance scale ${guidance_scale}.`\n            )\n        }\n        this.guidance_scale = guidance_scale;\n    }\n\n    /**\n     * Apply logit processor.\n     * @param {bigint[][]} input_ids The input IDs.\n     * @param {Tensor} logits The logits.\n     * @returns {Object} The processed logits.\n     */\n    _call(input_ids, logits) {\n        if (logits.dims[0] !== 2 * input_ids.length) {\n            throw new Error(\n                `Logits should have twice the batch size of the input ids, the first half of batches corresponding to ` +\n                `the conditional inputs, and the second half of batches corresponding to the unconditional inputs. Got ` +\n                `batch size ${logits.dims[0]} for the logits and ${input_ids.length} for the input ids.`\n            )\n        }\n\n        const unguided_bsz = input_ids.length;\n        const cond_logits = logits.slice([0, unguided_bsz], null);\n        const uncond_logits = logits.slice([unguided_bsz, logits.dims[0]], null);\n\n        // Merge into uncond_logits (to save memory). This is equivalent to the following:\n        // scores = uncond_logits + (cond_logits - uncond_logits) * guidance_scale\n        for (let i = 0; i < uncond_logits.data.length; ++i) {\n            uncond_logits.data[i] += (cond_logits.data[i] - uncond_logits.data[i]) * this.guidance_scale;\n        }\n\n        return uncond_logits;\n    }\n}\n\n/**\n * [`LogitsWarper`] for temperature (exponential scaling output probability distribution), which effectively means\n * that it can control the randomness of the predicted tokens. Often used together with [`TopPLogitsWarper`] and [`TopKLogitsWarper`].\n */\nexport class TemperatureLogitsWarper extends LogitsWarper {\n    /**\n     * Create a `TemperatureLogitsWarper`.\n     * @param {number} temperature Strictly positive float value used to modulate the logits distribution.\n     * A value smaller than `1` decreases randomness (and vice versa), with `0` being equivalent to shifting\n     * all probability mass to the most likely token.\n     */\n    constructor(temperature) {\n        super();\n\n        if (typeof temperature !== 'number' || temperature <= 0) {\n            let errorMessage =\n                `\\`temperature\\` (=${temperature}) must be a strictly positive float, otherwise your next token scores will be invalid.`;\n\n            if (temperature === 0) {\n                errorMessage += \" If you're looking for greedy decoding strategies, set `do_sample=false`.\"\n            }\n        }\n        this.temperature = temperature;\n    }\n\n    /**\n     * Apply logit warper.\n     * @param {bigint[][]} input_ids The input IDs.\n     * @param {Tensor} logits The logits.\n     * @returns {Object} The processed logits.\n     */\n    _call(input_ids, logits) {\n        const logitsData = /** @type {Float32Array} */(logits.data);\n        for (let i = 0; i < logitsData.length; ++i) {\n            logitsData[i] /= this.temperature;\n        }\n        return logits;\n    }\n}\n\n/**\n * [`LogitsWarper`] that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off.\n * Often used together with [`TemperatureLogitsWarper`] and [`TopKLogitsWarper`].\n */\nexport class TopPLogitsWarper extends LogitsWarper {\n    /**\n     * Create a `TopPLogitsWarper`.\n     * @param {number} top_p If set to < 1, only the smallest set of most probable tokens with\n     * probabilities that add up to `top_p` or higher are kept for generation.\n     * @param {Object} options Additional options for the top-p sampling.\n     * @param {number} [options.filter_value=-Infinity] All filtered values will be set to this float value.\n     * @param {number} [options.min_tokens_to_keep=1] Minimum number of tokens that cannot be filtered.\n     */\n    constructor(top_p, {\n        filter_value = -Infinity,\n        min_tokens_to_keep = 1,\n    } = {}) {\n        super();\n        if (top_p < 0 || top_p > 1.0) {\n            throw new Error(`\\`top_p\\` must be a float > 0 and < 1, but is ${top_p}`)\n        }\n        if (!Number.isInteger(min_tokens_to_keep) || min_tokens_to_keep < 1) {\n            throw new Error(`\\`min_tokens_to_keep\\` must be a positive integer, but is ${min_tokens_to_keep}`)\n        }\n\n        this.top_p = top_p\n        this.filter_value = filter_value\n        this.min_tokens_to_keep = min_tokens_to_keep\n    }\n}\n\n/**\n * [`LogitsWarper`] that performs top-k, i.e. restricting to the k highest probability elements.\n * Often used together with [`TemperatureLogitsWarper`] and [`TopPLogitsWarper`].\n */\nexport class TopKLogitsWarper extends LogitsWarper {\n    /**\n     * Create a `TopKLogitsWarper`.\n     * @param {number} top_k If set to > 0, only the top `top_k` tokens are kept for generation.\n     * @param {Object} options Additional options for the top-k sampling.\n     * @param {number} [options.filter_value=-Infinity] All filtered values will be set to this float value.\n     * @param {number} [options.min_tokens_to_keep=1] Minimum number of tokens that cannot be filtered.\n     */\n    constructor(top_k, {\n        filter_value = -Infinity,\n        min_tokens_to_keep = 1,\n    } = {}) {\n        super();\n        if (!Number.isInteger(top_k) || top_k < 0) {\n            throw new Error(`\\`top_k\\` must be a positive integer, but is ${top_k}`)\n        }\n\n        this.top_k = Math.max(top_k, min_tokens_to_keep)\n        this.filter_value = filter_value\n    }\n}","\n/**\n * @module generation/logits_sampler\n */\n\nimport { Callable } from \"../utils/generic.js\";\nimport { Tensor, topk } from \"../utils/tensor.js\";\n\nimport {\n    max,\n    softmax,\n} from '../utils/maths.js';\nimport { GenerationConfig } from '../generation/configuration_utils.js';\n\n/**\n * Sampler is a base class for all sampling methods used for text generation.\n */\nexport class LogitsSampler extends Callable {\n    /**\n     * Creates a new Sampler object with the specified generation config.\n     * @param {GenerationConfig} generation_config The generation config.\n     */\n    constructor(generation_config) {\n        super();\n        this.generation_config = generation_config;\n    }\n\n    /**\n     * Executes the sampler, using the specified logits.\n     * @param {Tensor} logits\n     * @returns {Promise<[bigint, number][]>}\n     */\n    async _call(logits) {\n        // Sample from logits, of dims [batch, sequence_length, vocab_size].\n        // If index is specified, sample from [batch, index, vocab_size].\n        return this.sample(logits);\n    }\n\n    /**\n     * Abstract method for sampling the logits.\n     * @param {Tensor} logits\n     * @throws {Error} If not implemented in subclass.\n     * @returns {Promise<[bigint, number][]>}\n     */\n    async sample(logits) {\n        throw Error(\"sample should be implemented in subclasses.\")\n    }\n\n    /**\n     * Returns the specified logits as an array, with temperature applied.\n     * @param {Tensor} logits\n     * @param {number} index\n     * @returns {Float32Array}\n     */\n    getLogits(logits, index) {\n        let vocabSize = logits.dims.at(-1);\n\n        let logs = /** @type {Float32Array} */(logits.data);\n\n        if (index === -1) {\n            logs = logs.slice(-vocabSize);\n        } else {\n            let startIndex = index * vocabSize;\n            logs = logs.slice(startIndex, startIndex + vocabSize);\n        }\n        return logs;\n    }\n\n    /**\n     * Selects an item randomly based on the specified probabilities.\n     * @param {import(\"../transformers.js\").DataArray} probabilities An array of probabilities to use for selection.\n     * @returns {number} The index of the selected item.\n     */\n    randomSelect(probabilities) {\n        // Return index of chosen item\n        let sumProbabilities = 0;\n        for (let i = 0; i < probabilities.length; ++i) {\n            sumProbabilities += probabilities[i];\n        }\n\n        let r = Math.random() * sumProbabilities;\n        for (let i = 0; i < probabilities.length; ++i) {\n            r -= probabilities[i];\n            if (r <= 0) {\n                return i;\n            }\n        }\n        return 0; // return first (most probable) as a fallback\n    }\n\n    /**\n     * Returns a Sampler object based on the specified options.\n     * @param {GenerationConfig} generation_config An object containing options for the sampler.\n     * @returns {LogitsSampler} A Sampler object.\n     */\n    static getSampler(generation_config) {\n        // - *greedy decoding*: `num_beams=1` and `do_sample=False`\n        // - *contrastive search*: `penalty_alpha>0` and `top_k>1`\n        // - *multinomial sampling*: `num_beams=1` and `do_sample=True`\n        // - *beam-search decoding*: `num_beams>1` and `do_sample=False`\n        // - *beam-search multinomial sampling*: `num_beams>1` and `do_sample=True`\n        // - *diverse beam-search decoding*: `num_beams>1` and `num_beam_groups>1`\n        // - *constrained beam-search decoding*: `constraints!=None` or `force_words_ids!=None`\n\n        // NOTE: beam search is implemented directly into the generation function\n        if (generation_config.do_sample) {\n            return new MultinomialSampler(generation_config);\n\n        } else if (generation_config.num_beams > 1) {\n            return new BeamSearchSampler(generation_config);\n\n        } else {\n            if (generation_config.num_return_sequences > 1) {\n                throw Error(`num_return_sequences has to be 1 when doing greedy search, but is ${generation_config.num_return_sequences}.`)\n            }\n            return new GreedySampler(generation_config);\n        }\n    }\n}\n\n/**\n * Class representing a Greedy Sampler.\n */\nclass GreedySampler extends LogitsSampler {\n    /**\n     * Sample the maximum probability of a given logits tensor.\n     * @param {Tensor} logits\n     * @returns {Promise<[bigint, number][]>} An array with a single tuple, containing the index of the maximum value and a meaningless score (since this is a greedy search).\n     */\n    async sample(logits) {\n        // NOTE: no need to do log_softmax here since we only take the maximum\n        const argmax = max(logits.data)[1];\n\n        // Note: score is meaningless in this context, since we are performing\n        // greedy search (p = 1 => log(p) = 0)\n        return [\n            [BigInt(argmax), 0]\n        ];\n    }\n}\n\n/**\n * Class representing a MultinomialSampler.\n */\nclass MultinomialSampler extends LogitsSampler {\n\n    /**\n     * Sample from the logits.\n     * @param {Tensor} logits\n     * @returns {Promise<[bigint, number][]>}\n     */\n    async sample(logits) {\n        let k = logits.dims.at(-1); // defaults to vocab size\n        if (this.generation_config.top_k > 0) {\n            k = Math.min(this.generation_config.top_k, k);\n        }\n\n        // Get top k tokens\n        const [v, i] = await topk(logits, k);\n\n        // Compute softmax over logits\n        const probabilities = softmax(/** @type {Float32Array} */(v.data));\n\n        return Array.from({ length: this.generation_config.num_beams }, () => {\n            const sampledIndex = this.randomSelect(probabilities);\n            return [\n                i.data[sampledIndex], // token id\n                Math.log(probabilities[sampledIndex]), // score\n            ];\n        });\n    }\n}\n\n\n/**\n * Class representing a BeamSearchSampler.\n */\nclass BeamSearchSampler extends LogitsSampler {\n\n    /**\n     * Sample from the logits.\n     * @param {Tensor} logits\n     * @returns {Promise<[bigint, number][]>}\n     */\n    async sample(logits) {\n        let k = logits.dims.at(-1); // defaults to vocab size\n        if (this.generation_config.top_k > 0) {\n            k = Math.min(this.generation_config.top_k, k);\n        }\n\n        // Get top k tokens\n        const [v, i] = await topk(logits, k);\n\n        // Compute softmax over logits\n        const probabilities = softmax(/** @type {Float32Array} */(v.data));\n\n        return Array.from({ length: this.generation_config.num_beams }, (_, x) => {\n            return [\n                i.data[x], // token id\n                Math.log(probabilities[x]), // score\n            ];\n        });\n    }\n}\n","\n/**\n * @module generation/stopping_criteria\n */\n\nimport { Callable } from \"../utils/generic.js\";\n\n// NOTE:\n// Stopping Criteria returns a list of `batch_size` booleans, indicating whether each sequence in the batch should be stopped.\n\n/**\n * Abstract base class for all stopping criteria that can be applied during generation.\n */\nexport class StoppingCriteria extends Callable {\n    /**\n     * \n     * @param {number[][]} input_ids (`number[][]` of shape `(batch_size, sequence_length)`):\n     * Indices of input sequence tokens in the vocabulary.\n     * @param {number[][]} scores scores (`number[][]` of shape `(batch_size, config.vocab_size)`):\n     * Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax\n     * or scores for each vocabulary token after SoftMax.\n     * @returns {boolean[]} A list of booleans indicating whether each sequence should be stopped.\n     */\n    _call(input_ids, scores) {\n        throw Error(\"StoppingCriteria needs to be subclassed\");\n    }\n}\n/**\n */\nexport class StoppingCriteriaList extends Callable {\n    /**\n     * Constructs a new instance of `StoppingCriteriaList`.\n     */\n    constructor() {\n        super();\n        this.criteria = [];\n    }\n\n    /**\n     * Adds a new stopping criterion to the list.\n     *\n     * @param {StoppingCriteria} item The stopping criterion to add.\n     */\n    push(item) {\n        this.criteria.push(item);\n    }\n\n    /**\n     * Adds multiple stopping criteria to the list.\n     *\n     * @param {StoppingCriteria|StoppingCriteriaList|StoppingCriteria[]} items The stopping criteria to add.\n     */\n    extend(items) {\n        if (items instanceof StoppingCriteriaList) {\n            items = items.criteria;\n        } else if (items instanceof StoppingCriteria) {\n            items = [items];\n        }\n        this.criteria.push(...items);\n    }\n\n    _call(input_ids, scores) {\n        const is_done = new Array(input_ids.length).fill(false);\n        for (const criterion of this.criteria) {\n            const criterion_done = criterion(input_ids, scores);\n            for (let i = 0; i < is_done.length; ++i) {\n                is_done[i] ||= criterion_done[i];\n            }\n        }\n        return is_done;\n    }\n\n    [Symbol.iterator]() {\n        return this.criteria.values();\n    }\n}\n\n/**\n * This class can be used to stop generation whenever the full generated number of tokens exceeds `max_length`.\n * Keep in mind for decoder-only type of transformers, this will include the initial prompted tokens.\n */\nexport class MaxLengthCriteria extends StoppingCriteria {\n\n    /**\n     * \n     * @param {number} max_length The maximum length that the output sequence can have in number of tokens.\n     * @param {number} [max_position_embeddings=null] The maximum model length, as defined by the model's `config.max_position_embeddings` attribute.\n     */\n    constructor(max_length, max_position_embeddings = null) {\n        super();\n        this.max_length = max_length;\n        this.max_position_embeddings = max_position_embeddings;\n    }\n\n    _call(input_ids) {\n        return input_ids.map(ids => ids.length >= this.max_length);\n    }\n}\n\n// TODO: add MaxTimeCriteria\n\n/**\n * This class can be used to stop generation whenever the \"end-of-sequence\" token is generated.\n * By default, it uses the `model.generation_config.eos_token_id`.\n */\nexport class EosTokenCriteria extends StoppingCriteria {\n\n    /**\n     * \n     * @param {number|number[]} eos_token_id The id of the *end-of-sequence* token.\n     * Optionally, use a list to set multiple *end-of-sequence* tokens.\n     */\n    constructor(eos_token_id) {\n        super();\n        if (!Array.isArray(eos_token_id)) {\n            eos_token_id = [eos_token_id];\n        }\n        this.eos_token_id = eos_token_id;\n    }\n\n    /**\n     * \n     * @param {number[][]} input_ids \n     * @param {number[][]} scores \n     * @returns {boolean[]}\n     */\n    _call(input_ids, scores) {\n        return input_ids.map(ids => {\n            const last = ids.at(-1);\n            // NOTE: We use == instead of === to allow for number/bigint comparison\n            return this.eos_token_id.some(eos_id => last == eos_id);\n        });\n    }\n}\n\n/**\n * This class can be used to stop generation whenever the user interrupts the process.\n */\nexport class InterruptableStoppingCriteria extends StoppingCriteria {\n    constructor() {\n        super();\n        this.interrupted = false;\n    }\n\n    interrupt() {\n        this.interrupted = true;\n    }\n\n    reset() {\n        this.interrupted = false;\n    }\n\n    _call(input_ids, scores) {\n        return new Array(input_ids.length).fill(this.interrupted);\n    }\n}\n","\n/**\n * @module generation/streamers\n */\n\nimport { mergeArrays } from '../utils/core.js';\nimport { is_chinese_char } from '../tokenizers.js';\nimport { apis } from '../env.js';\n\nexport class BaseStreamer {\n    /**\n     * Function that is called by `.generate()` to push new tokens\n     * @param {bigint[][]} value \n     */\n    put(value) {\n        throw Error('Not implemented');\n    }\n\n    /**\n     * Function that is called by `.generate()` to signal the end of generation\n     */\n    end() {\n        throw Error('Not implemented');\n    }\n}\n\nconst stdout_write = apis.IS_PROCESS_AVAILABLE\n    ? x => process.stdout.write(x)\n    : x => console.log(x);\n\n/**\n * Simple text streamer that prints the token(s) to stdout as soon as entire words are formed.\n */\nexport class TextStreamer extends BaseStreamer {\n    /**\n     * \n     * @param {import('../tokenizers.js').PreTrainedTokenizer} tokenizer \n     */\n    constructor(tokenizer, {\n        skip_prompt = false,\n        callback_function = null,\n        token_callback_function = null,\n        decode_kwargs = {},\n        ...kwargs\n    } = {}) {\n        super();\n        this.tokenizer = tokenizer;\n        this.skip_prompt = skip_prompt;\n        this.callback_function = callback_function ?? stdout_write;\n        this.token_callback_function = token_callback_function;\n        this.decode_kwargs = { ...decode_kwargs, ...kwargs };\n\n        // variables used in the streaming process\n        this.token_cache = [];\n        this.print_len = 0;\n        this.next_tokens_are_prompt = true;\n    }\n\n    /**\n     * Receives tokens, decodes them, and prints them to stdout as soon as they form entire words.\n     * @param {bigint[][]} value \n     */\n    put(value) {\n        if (value.length > 1) {\n            throw Error('TextStreamer only supports batch size of 1');\n        }\n\n        const tokens = value[0];\n        this.token_callback_function?.(tokens)\n\n        if (this.skip_prompt && this.next_tokens_are_prompt) {\n            this.next_tokens_are_prompt = false;\n            return;\n        }\n\n        // Add the new token to the cache and decodes the entire thing.\n        this.token_cache = mergeArrays(this.token_cache, tokens);\n        const text = this.tokenizer.decode(this.token_cache, this.decode_kwargs);\n\n        let printable_text;\n        if (text.endsWith('\\n')) {\n            // After the symbol for a new line, we flush the cache.\n            printable_text = text.slice(this.print_len);\n            this.token_cache = [];\n            this.print_len = 0;\n        } else if (text.length > 0 && is_chinese_char(text.charCodeAt(text.length - 1))) {\n            // If the last token is a CJK character, we print the characters.\n            printable_text = text.slice(this.print_len);\n            this.print_len += printable_text.length;\n        } else {\n            // Otherwise, prints until the last space char (simple heuristic to avoid printing incomplete words,\n            // which may change with the subsequent token -- there are probably smarter ways to do this!)\n            printable_text = text.slice(this.print_len, text.lastIndexOf(' ') + 1);\n            this.print_len += printable_text.length;\n        }\n\n        this.on_finalized_text(printable_text, false);\n    }\n\n    /**\n     * Flushes any remaining cache and prints a newline to stdout.\n     */\n    end() {\n        let printable_text;\n        if (this.token_cache.length > 0) {\n            const text = this.tokenizer.decode(this.token_cache, this.decode_kwargs);\n            printable_text = text.slice(this.print_len);\n            this.token_cache = [];\n            this.print_len = 0;\n        } else {\n            printable_text = '';\n        }\n        this.next_tokens_are_prompt = true;\n        this.on_finalized_text(printable_text, true);\n    }\n\n    /**\n     * Prints the new text to stdout. If the stream is ending, also prints a newline.\n     * @param {string} text \n     * @param {boolean} stream_end \n     */\n    on_finalized_text(text, stream_end) {\n        if (text.length > 0) {\n            this.callback_function?.(text);\n        }\n        if (stream_end && this.callback_function === stdout_write && apis.IS_PROCESS_AVAILABLE) {\n            this.callback_function?.('\\n');\n        }\n    }\n}\n\n/**\n * Utility class to handle streaming of tokens generated by whisper speech-to-text models.\n * Callback functions are invoked when each of the following events occur:\n *  - A new chunk starts (on_chunk_start)\n *  - A new token is generated (callback_function)\n *  - A chunk ends (on_chunk_end)\n *  - The stream is finalized (on_finalize)\n */\nexport class WhisperTextStreamer extends TextStreamer {\n    /**\n     * @param {import('../tokenizers.js').WhisperTokenizer} tokenizer\n     * @param {Object} options\n     * @param {boolean} [options.skip_prompt=false] Whether to skip the prompt tokens\n     * @param {function(string): void} [options.callback_function=null] Function to call when a piece of text is ready to display\n     * @param {function(string): void} [options.token_callback_function=null] Function to call when a new token is generated\n     * @param {function(number): void} [options.on_chunk_start=null] Function to call when a new chunk starts\n     * @param {function(number): void} [options.on_chunk_end=null] Function to call when a chunk ends\n     * @param {function(): void} [options.on_finalize=null] Function to call when the stream is finalized\n     * @param {number} [options.time_precision=0.02] Precision of the timestamps\n     * @param {boolean} [options.skip_special_tokens=true] Whether to skip special tokens when decoding\n     * @param {Object} [options.decode_kwargs={}] Additional keyword arguments to pass to the tokenizer's decode method\n     */\n    constructor(tokenizer, {\n        skip_prompt = false,\n        callback_function = null,\n        token_callback_function = null,\n        on_chunk_start = null,\n        on_chunk_end = null,\n        on_finalize = null,\n        time_precision = 0.02,\n        skip_special_tokens = true,\n        decode_kwargs = {},\n    } = {}) {\n        super(tokenizer, {\n            skip_prompt,\n            callback_function,\n            token_callback_function,\n            decode_kwargs: { skip_special_tokens, ...decode_kwargs },\n        });\n        this.timestamp_begin = tokenizer.timestamp_begin;\n\n        this.on_chunk_start = on_chunk_start;\n        this.on_chunk_end = on_chunk_end;\n        this.on_finalize = on_finalize;\n\n        this.time_precision = time_precision;\n\n        this.waiting_for_timestamp = false;\n    }\n\n    /**\n     * @param {bigint[][]} value \n     */\n    put(value) {\n        if (value.length > 1) {\n            throw Error('WhisperTextStreamer only supports batch size of 1');\n        }\n        const tokens = value[0];\n\n        // Check if the token is a timestamp\n        if (tokens.length === 1) {\n            const offset = Number(tokens[0]) - this.timestamp_begin;\n            if (offset >= 0) {\n                const time = offset * this.time_precision;\n                if (this.waiting_for_timestamp) {\n                    this.on_chunk_end?.(time);\n                } else {\n                    this.on_chunk_start?.(time);\n                }\n                this.waiting_for_timestamp = !this.waiting_for_timestamp; // Toggle\n                value = [[]]; // Skip timestamp\n            }\n        }\n        return super.put(value);\n    }\n\n    end() {\n        super.end();\n        this.on_finalize?.();\n    }\n}\n","\n/**\n * @file Definitions of all models available in Transformers.js.\n * \n * **Example:** Load and run an `AutoModel`.\n * \n * ```javascript\n * import { AutoModel, AutoTokenizer } from '@huggingface/transformers';\n * \n * let tokenizer = await AutoTokenizer.from_pretrained('Xenova/bert-base-uncased');\n * let model = await AutoModel.from_pretrained('Xenova/bert-base-uncased');\n * \n * let inputs = await tokenizer('I love transformers!');\n * let { logits } = await model(inputs);\n * // Tensor {\n * //     data: Float32Array(183132) [-7.117443084716797, -7.107812881469727, -7.092104911804199, ...]\n * //     dims: (3) [1, 6, 30522],\n * //     type: \"float32\",\n * //     size: 183132,\n * // }\n * ```\n * \n * We also provide other `AutoModel`s (listed below), which you can use in the same way as the Python library. For example:\n * \n * **Example:** Load and run an `AutoModelForSeq2SeqLM`.\n * ```javascript\n * import { AutoModelForSeq2SeqLM, AutoTokenizer } from '@huggingface/transformers';\n * \n * let tokenizer = await AutoTokenizer.from_pretrained('Xenova/t5-small');\n * let model = await AutoModelForSeq2SeqLM.from_pretrained('Xenova/t5-small');\n * \n * let { input_ids } = await tokenizer('translate English to German: I love transformers!');\n * let outputs = await model.generate(input_ids);\n * let decoded = tokenizer.decode(outputs[0], { skip_special_tokens: true });\n * // 'Ich liebe Transformatoren!'\n * ```\n * \n * @module models\n */\n\nimport {\n    AutoConfig,\n    getKeyValueShapes,\n} from './configs.js';\n\nimport {\n    deviceToExecutionProviders,\n    createInferenceSession,\n    isONNXTensor,\n    isONNXProxy,\n} from './backends/onnx.js';\nimport {\n    DATA_TYPES,\n    DEFAULT_DEVICE_DTYPE_MAPPING,\n    DEFAULT_DTYPE_SUFFIX_MAPPING,\n    isWebGpuFp16Supported,\n} from './utils/dtypes.js';\n\nimport {\n    Callable,\n} from './utils/generic.js';\n\nimport {\n    isIntegralNumber,\n    mergeArrays,\n    pick,\n} from './utils/core.js';\n\nimport {\n    getModelFile,\n    getModelJSON,\n} from './utils/hub.js';\n\nimport {\n    LogitsProcessorList,\n    ForcedBOSTokenLogitsProcessor,\n    ForcedEOSTokenLogitsProcessor,\n    SuppressTokensAtBeginLogitsProcessor,\n    WhisperTimeStampLogitsProcessor,\n    NoRepeatNGramLogitsProcessor,\n    RepetitionPenaltyLogitsProcessor,\n    NoBadWordsLogitsProcessor,\n    MinLengthLogitsProcessor,\n    MinNewTokensLengthLogitsProcessor,\n\n    TemperatureLogitsWarper,\n    TopKLogitsWarper,\n    TopPLogitsWarper,\n    ClassifierFreeGuidanceLogitsProcessor,\n} from './generation/logits_process.js';\n\nimport {\n    GenerationConfig,\n} from './generation/configuration_utils.js';\n\nimport {\n    cat,\n    full_like,\n    mean,\n    ones,\n    ones_like,\n    stack,\n    std_mean,\n    Tensor,\n    zeros_like,\n} from './utils/tensor.js';\n\nimport { dynamic_time_warping, medianFilter } from './utils/maths.js';\nimport { EosTokenCriteria, MaxLengthCriteria, StoppingCriteriaList } from './generation/stopping_criteria.js';\nimport { LogitsSampler } from './generation/logits_sampler.js';\nimport { apis } from './env.js';\n\nimport { WhisperGenerationConfig } from './models/whisper/generation_whisper.js';\nimport { whisper_language_to_code } from './models/whisper/common_whisper.js';\n\n//////////////////////////////////////////////////\n// Model types: used internally\nconst MODEL_TYPES = {\n    EncoderOnly: 0,\n    EncoderDecoder: 1,\n    Seq2Seq: 2,\n    Vision2Seq: 3,\n    DecoderOnly: 4,\n    MaskGeneration: 5,\n    ImageTextToText: 6,\n    Musicgen: 7,\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// Helper functions\n\n// NOTE: These will be populated fully later\nconst MODEL_TYPE_MAPPING = new Map();\nconst MODEL_NAME_TO_CLASS_MAPPING = new Map();\nconst MODEL_CLASS_TO_NAME_MAPPING = new Map();\n\n\n/**\n * Constructs an InferenceSession using a model file located at the specified path.\n * @param {string} pretrained_model_name_or_path The path to the directory containing the model file.\n * @param {string} fileName The name of the model file.\n * @param {import('./utils/hub.js').PretrainedModelOptions} options Additional options for loading the model.\n * @returns {Promise<{buffer: Uint8Array, session_options: Object}>} A Promise that resolves to the data needed to create an InferenceSession object.\n * @private\n */\nasync function getSession(pretrained_model_name_or_path, fileName, options) {\n    let device = options.device;\n    if (device && typeof device !== 'string') {\n        if (device.hasOwnProperty(fileName)) {\n            device = device[fileName];\n        } else {\n            console.warn(`device not specified for \"${fileName}\". Using the default device.`);\n            device = null;\n        }\n    }\n\n    // If the device is not specified, we use the default (supported) execution providers.\n    const executionProviders = deviceToExecutionProviders(\n        /** @type {import(\"./utils/devices.js\").DeviceType|null} */(device)\n    );\n\n    // If options.dtype is specified, we use it to choose the suffix for the model file.\n    // Otherwise, we use the default dtype for the device.\n    let dtype = options.dtype;\n    if (typeof dtype !== 'string') {\n        if (dtype && dtype.hasOwnProperty(fileName)) {\n            dtype = dtype[fileName];\n        } else {\n            dtype = DEFAULT_DEVICE_DTYPE_MAPPING[executionProviders[0]];\n            console.warn(`dtype not specified for \"${fileName}\". Using the default dtype for this device (${dtype}).`);\n        }\n    }\n\n    if (!DEFAULT_DTYPE_SUFFIX_MAPPING.hasOwnProperty(dtype)) {\n        throw new Error(`Invalid dtype: ${dtype}. Should be one of: ${Object.keys(DATA_TYPES).join(', ')}`);\n    } else if (dtype === DATA_TYPES.fp16 && device === 'webgpu' && !(await isWebGpuFp16Supported())) {\n        throw new Error(`The device (${device}) does not support fp16.`);\n    }\n\n    // Construct the model file name\n    const suffix = DEFAULT_DTYPE_SUFFIX_MAPPING[dtype];\n    const modelFileName = `${options.subfolder ?? ''}/${fileName}${suffix}.onnx`;\n\n    const session_options = { ...options.session_options } ?? {};\n\n    // Overwrite `executionProviders` if not specified\n    session_options.executionProviders ??= executionProviders;\n\n\n    const bufferPromise = getModelFile(pretrained_model_name_or_path, modelFileName, true, options);\n\n    // handle onnx external data files\n    /** @type {Promise<{path: string, data: Uint8Array}>[]} */\n    let externalDataPromises = [];\n    if (options.use_external_data_format && (\n        options.use_external_data_format === true ||\n        (\n            typeof options.use_external_data_format === 'object' &&\n            options.use_external_data_format.hasOwnProperty(fileName) &&\n            options.use_external_data_format[fileName] === true\n        )\n    )) {\n        if (apis.IS_NODE_ENV) {\n            throw new Error('External data format is not yet supported in Node.js');\n        }\n        const path = `${fileName}${suffix}.onnx_data`;\n        const fullPath = `${options.subfolder ?? ''}/${path}`;\n        externalDataPromises.push(new Promise(async (resolve, reject) => {\n            const data = await getModelFile(pretrained_model_name_or_path, fullPath, true, options);\n            resolve({ path, data })\n        }));\n\n    } else if (session_options.externalData !== undefined) {\n        externalDataPromises = session_options.externalData.map(async (ext) => {\n            // if the external data is a string, fetch the file and replace the string with its content\n            if (typeof ext.data === \"string\") {\n                const ext_buffer = await getModelFile(pretrained_model_name_or_path, ext.data, true, options);\n                return { ...ext, data: ext_buffer };\n            }\n            return ext;\n        });\n    }\n\n    if (externalDataPromises.length > 0) {\n        session_options.externalData = await Promise.all(externalDataPromises);\n    }\n\n    if (device === 'webgpu') {\n        const shapes = getKeyValueShapes(options.config, {\n            prefix: 'present',\n        });\n        if (Object.keys(shapes).length > 0 && !isONNXProxy()) {\n            // Only set preferredOutputLocation if shapes are present and we aren't proxying ONNX\n            const preferredOutputLocation = {};\n            for (const key in shapes) {\n                preferredOutputLocation[key] = 'gpu-buffer';\n            }\n            session_options.preferredOutputLocation = preferredOutputLocation;\n        }\n    }\n\n    const buffer = await bufferPromise;\n    return { buffer, session_options };\n}\n\n/**\n * Helper function to create multiple InferenceSession objects.\n * \n * @param {string} pretrained_model_name_or_path The path to the directory containing the model file.\n * @param {Record<string, string>} names The names of the model files to load.\n * @param {import('./utils/hub.js').PretrainedModelOptions} options Additional options for loading the model.\n * @returns {Promise<Record<string, any>>} A Promise that resolves to a dictionary of InferenceSession objects.\n * @private\n */\nasync function constructSessions(pretrained_model_name_or_path, names, options) {\n    return Object.fromEntries(await Promise.all(\n        Object.keys(names).map(async (name) => {\n            const { buffer, session_options } = await getSession(pretrained_model_name_or_path, names[name], options);\n            const session = await createInferenceSession(buffer, session_options);\n            return [name, session];\n        })\n    ));\n}\n\n/**\n * Validate model inputs\n * @param {Object} session The InferenceSession object that will be run.\n * @param {Object} inputs The inputs to check.\n * @returns {Record<string, Tensor>} The checked inputs.\n * @throws {Error} If any inputs are missing.\n * @private\n */\nfunction validateInputs(session, inputs) {\n    /**\n     * NOTE: Create either a shallow or deep copy based on `onnx.wasm.proxy`\n     * @type {Record<string, Tensor>}\n     */\n    const checkedInputs = Object.create(null);\n    const missingInputs = [];\n    for (const inputName of session.inputNames) {\n        const tensor = inputs[inputName];\n        // Rare case where one of the model's input names corresponds to a built-in\n        // object name (e.g., toString), which would cause a simple (!tensor) check to fail,\n        // because it's not undefined but a function.\n        if (!(tensor instanceof Tensor)) {\n            missingInputs.push(inputName);\n            continue;\n        }\n        // NOTE: When `env.wasm.proxy is true` the tensor is moved across the Worker\n        // boundary, transferring ownership to the worker and invalidating the tensor.\n        // So, in this case, we simply sacrifice a clone for it.\n        checkedInputs[inputName] = isONNXProxy() ? tensor.clone() : tensor;\n    }\n    if (missingInputs.length > 0) {\n        throw new Error(\n            `An error occurred during model execution: \"Missing the following inputs: ${missingInputs.join(', ')}.`);\n    }\n\n    const numInputsProvided = Object.keys(inputs).length;\n    const numInputsNeeded = session.inputNames.length;\n    if (numInputsProvided > numInputsNeeded) {\n        // No missing inputs, but too many inputs were provided.\n        // Warn the user and ignore the extra inputs.\n        let ignored = Object.keys(inputs).filter(inputName => !session.inputNames.includes(inputName));\n        console.warn(`WARNING: Too many inputs were provided (${numInputsProvided} > ${numInputsNeeded}). The following inputs will be ignored: \"${ignored.join(', ')}\".`);\n    }\n\n    return checkedInputs;\n}\n\n/**\n * Executes an InferenceSession using the specified inputs.\n * NOTE: `inputs` must contain at least the input names of the model.\n *  - If additional inputs are passed, they will be ignored.\n *  - If inputs are missing, an error will be thrown.\n * \n * @param {Object} session The InferenceSession object to run.\n * @param {Object} inputs An object that maps input names to input tensors.\n * @returns {Promise<Object>} A Promise that resolves to an object that maps output names to output tensors.\n * @private\n */\nasync function sessionRun(session, inputs) {\n    const checkedInputs = validateInputs(session, inputs);\n    try {\n        // pass the original ort tensor\n        const ortFeed = Object.fromEntries(Object.entries(checkedInputs).map(([k, v]) => [k, v.ort_tensor]));\n        let output = await session.run(ortFeed);\n        output = replaceTensors(output);\n        return output;\n    } catch (e) {\n        // This usually occurs when the inputs are of the wrong type.\n        console.error(`An error occurred during model execution: \"${e}\".`);\n        console.error('Inputs given to model:', checkedInputs);\n        throw e;\n    }\n}\n\n/**\n * Replaces ONNX Tensor objects with custom Tensor objects to support additional functions.\n * @param {Object} obj The object to replace tensor objects in.\n * @returns {Object} The object with tensor objects replaced by custom Tensor objects.\n * @private\n */\nfunction replaceTensors(obj) {\n    for (let prop in obj) {\n        if (isONNXTensor(obj[prop])) {\n            obj[prop] = new Tensor(obj[prop]);\n        } else if (typeof obj[prop] === 'object') {\n            replaceTensors(obj[prop]);\n        }\n    }\n    return obj;\n}\n\n\n/**\n * Converts an array or Tensor of integers to an int64 Tensor.\n * @param {Array|Tensor} items The input integers to be converted.\n * @returns {Tensor} The int64 Tensor with the converted values.\n * @throws {Error} If the input array is empty or the input is a batched Tensor and not all sequences have the same length.\n * @private\n */\nfunction toI64Tensor(items) {\n    if (items instanceof Tensor) {\n        return items;\n    }\n    // items is an array\n    if (items.length === 0) {\n        throw Error(\"items must be non-empty\");\n    }\n\n    if (Array.isArray(items[0])) {\n        // batched\n        if (items.some(x => x.length !== items[0].length)) {\n            throw Error(\"Unable to create tensor, you should probably activate truncation and/or padding with 'padding=True' and/or 'truncation=True' to have batched tensors with the same length.\")\n        }\n\n        return new Tensor('int64',\n            BigInt64Array.from(items.flat().map(x => BigInt(x))),\n            [items.length, items[0].length]\n        );\n    } else {\n        //flat\n        return new Tensor('int64',\n            BigInt64Array.from(items.map(x => BigInt(x))),\n            [1, items.length]\n        );\n    }\n}\n\n/**\n * Prepares an attention mask for a sequence of tokens based on configuration options.\n * @param {Object} self The calling object instance.\n * @param {Tensor} tokens The input tokens.\n * @returns {Tensor} The attention mask tensor.\n * @private\n */\nfunction prepareAttentionMask(self, tokens) {\n\n    // Prepare attention mask\n    let pad_token_id = self.config.pad_token_id ?? null;\n    let eos_token_id = self.config.eos_token_id ?? null;\n    if (isIntegralNumber(eos_token_id)) {\n        eos_token_id = [eos_token_id];\n    }\n\n    let is_pad_token_in_inputs = tokens.indexOf(pad_token_id) !== -1;\n    let is_pad_token_not_equal_to_eos_token_id = (eos_token_id === null) || !eos_token_id.includes(pad_token_id)\n\n    if (is_pad_token_in_inputs && is_pad_token_not_equal_to_eos_token_id) {\n        let data = BigInt64Array.from(\n            // Note: != so that int matches bigint\n            // @ts-ignore\n            tokens.data.map(x => x != pad_token_id)\n        )\n        return new Tensor('int64', data, tokens.dims)\n    } else {\n        return ones_like(tokens);\n    }\n}\n\n/**\n * Creates a boolean tensor with a single value.\n * @param {boolean} value The value of the tensor.\n * @returns {Tensor} The boolean tensor.\n * @private\n */\nfunction boolTensor(value) {\n    return new Tensor('bool', [value], [1]);\n}\n\n// JS doesn't support mixins, so we define some reused functions here, and allow \"this\" to be passed in\n/**\n * Perform forward pass on the seq2seq model (both encoder and decoder).\n * @param {Object} self The seq2seq model object.\n * @param {Object} model_inputs The input object for the model containing encoder and decoder inputs.\n * @returns {Promise<Seq2SeqLMOutput>} Promise that resolves with the output of the seq2seq model.\n * @private\n */\nasync function seq2seqForward(self, model_inputs) {\n    let { encoder_outputs, input_ids, decoder_input_ids, ...other_decoder_inputs } = model_inputs;\n    // Encode if needed\n    if (!encoder_outputs) {\n        const encoder_inputs = pick(model_inputs, self.sessions['model'].inputNames);\n        // Encoder outputs are not given, so we must compute them.\n        encoder_outputs = (await encoderForward(self, encoder_inputs)).last_hidden_state;\n    }\n\n    other_decoder_inputs.input_ids = decoder_input_ids;\n    other_decoder_inputs.encoder_hidden_states = encoder_outputs;\n\n    if (self.sessions['decoder_model_merged'].inputNames.includes('encoder_attention_mask')) {\n        other_decoder_inputs.encoder_attention_mask = model_inputs.attention_mask\n    }\n\n    const decoderResults = await decoderForward(self, other_decoder_inputs, true);\n\n    return decoderResults;\n}\n\n/**\n * Forward pass of an encoder model.\n * @param {Object} self The encoder model.\n * @param {Object} model_inputs The input data to be used for the forward pass.\n * @returns {Promise<Object>} The model's outputs.\n * @private\n */\nasync function encoderForward(self, model_inputs) {\n    const session = self.sessions['model'];\n    const encoderFeeds = pick(model_inputs, session.inputNames);\n\n    if (session.inputNames.includes('inputs_embeds') && !encoderFeeds.inputs_embeds) {\n        if (!model_inputs.input_ids) {\n            throw new Error('Both `input_ids` and `inputs_embeds` are missing in the model inputs.');\n        }\n        encoderFeeds.inputs_embeds = await self.encode_text({ input_ids: model_inputs.input_ids });\n    }\n    if (session.inputNames.includes('token_type_ids') && !encoderFeeds.token_type_ids) {\n        // Assign default `token_type_ids` (all zeroes) to the `encoderFeeds` if the model expects it,\n        // but they weren't created by the tokenizer.\n        encoderFeeds.token_type_ids = new Tensor(\n            'int64',\n            new BigInt64Array(encoderFeeds.input_ids.data.length),\n            encoderFeeds.input_ids.dims\n        )\n    }\n    return await sessionRun(session, encoderFeeds);\n}\n\n/**\n * Forward pass of a decoder model.\n * @param {Object} self The decoder model.\n * @param {Object} model_inputs The input data to be used for the forward pass.\n * @returns {Promise<Object>} The logits and past key values.\n * @private\n */\nasync function decoderForward(self, model_inputs, is_encoder_decoder = false) {\n\n    const session = self.sessions[\n        is_encoder_decoder ? 'decoder_model_merged' : 'model'\n    ]\n\n    const { past_key_values, ...new_model_inputs } = model_inputs;\n\n    if (session.inputNames.includes('use_cache_branch')) {\n        new_model_inputs.use_cache_branch = boolTensor(!!past_key_values);\n    }\n    if (session.inputNames.includes('position_ids') && new_model_inputs.attention_mask && !new_model_inputs.position_ids) {\n        new_model_inputs.position_ids = createPositionIds(new_model_inputs, past_key_values);\n    }\n\n    // Unpack the `past_key_values` object into model inputs\n    self.addPastKeyValues(new_model_inputs, past_key_values);\n\n    // Select only the inputs that are needed for the current session\n    const fixed = pick(new_model_inputs, session.inputNames);\n    return await sessionRun(session, fixed);\n}\n\n\n/**\n * Forward pass of an image-text-to-text model.\n * @param {Object} self The image-text-to-text model model.\n * @param {Object} model_inputs The input data to be used for the forward pass.\n * @param {Tensor} [model_inputs.input_ids=null]\n * @param {Tensor} [model_inputs.attention_mask=null]\n * @param {Tensor} [model_inputs.pixel_values=null]\n * @param {Tensor} [model_inputs.position_ids=null]\n * @param {Tensor} [model_inputs.inputs_embeds=null]\n * @param {Tensor} [model_inputs.past_key_values=null]\n * @param {Object} [model_inputs.generation_config=null]\n * @param {Object} [model_inputs.logits_processor=null]\n * @returns {Promise<Tensor>} The model's output tensor\n * @private\n */\nasync function imageTextToTextForward(self, {\n    // Produced by the tokenizer/processor:\n    input_ids = null,\n    attention_mask = null,\n    pixel_values = null,\n\n    // Used during generation:\n    position_ids = null,\n    inputs_embeds = null,\n    past_key_values = null,\n\n    // Generic generation parameters\n    generation_config = null,\n    logits_processor = null,\n\n    // TODO: needed?\n    ...kwargs\n}) {\n\n    if (!inputs_embeds) {\n        // 1. Extract the input embeddings\n        inputs_embeds = await self.encode_text({ input_ids });\n\n        // 2. Possibly, merge text and images\n        if (pixel_values && input_ids.dims[1] !== 1) {\n            const image_features = await self.encode_image({ pixel_values });\n\n            ({ inputs_embeds, attention_mask } = self._merge_input_ids_with_image_features({\n                image_features,\n                inputs_embeds,\n                input_ids,\n                attention_mask,\n            }));\n\n        } else if (past_key_values && pixel_values && input_ids.dims[1] === 1) {\n            // This is the case when we are generating with cache\n            const target_length = input_ids.dims[1]; // always 1\n            const past_length = Object.values(past_key_values)[0].dims.at(-2);\n\n            attention_mask = cat([\n                ones([input_ids.dims[0], past_length]),\n                attention_mask.slice(null, [attention_mask.dims[1] - target_length, attention_mask.dims[1]]),\n            ], 1);\n        }\n    }\n\n    const outputs = await decoderForward(self, {\n        inputs_embeds,\n        past_key_values,\n        attention_mask,\n        position_ids,\n        generation_config,\n        logits_processor,\n    }, true);\n    return outputs;\n}\n\nfunction createPositionIds(model_inputs, past_key_values = null) {\n    // If the model supports providing position_ids, we create position_ids on the fly for batch generation,\n    // by computing the cumulative sum of the attention mask along the sequence length dimension.\n    // \n    // Equivalent to:\n    // position_ids = attention_mask.long().cumsum(-1) - 1\n    // position_ids.masked_fill_(attention_mask == 0, 1)\n    // if past_key_values:\n    //     position_ids = position_ids[:, -input_ids.shape[1] :]\n    const { input_ids, inputs_embeds, attention_mask } = model_inputs;\n    const [bz, seq_len] = attention_mask.dims;\n\n    const data = new BigInt64Array(attention_mask.data.length);\n    for (let i = 0; i < bz; ++i) {\n        const start = i * seq_len;\n        let sum = BigInt(0);\n        for (let j = 0; j < seq_len; ++j) {\n            const index = start + j;\n            if (attention_mask.data[index] === 0n) {\n                data[index] = BigInt(1);\n            } else { // === 1n\n                data[index] = sum;\n                sum += attention_mask.data[index];\n            }\n        }\n    }\n\n    let position_ids = new Tensor('int64', data, attention_mask.dims);\n    if (past_key_values) {\n        const offset = -(input_ids ?? inputs_embeds).dims.at(1);\n        position_ids = position_ids.slice(null, [offset, null]);\n    }\n    return position_ids;\n}\n\nfunction decoder_prepare_inputs_for_generation(self, input_ids, model_inputs, generation_config) {\n    if (model_inputs.past_key_values) {\n        const past_length = Object.values(model_inputs.past_key_values)[0].dims.at(-2);\n        const { input_ids, attention_mask } = model_inputs;\n\n        // Keep only the unprocessed tokens:\n        // 1 - If the length of the attention_mask exceeds the length of input_ids, then we are in a setting where\n        // some of the inputs are exclusively passed as part of the cache (e.g. when passing input_embeds as\n        // input)\n        if (attention_mask && attention_mask.dims[1] > input_ids.dims[1]) {\n            // NOTE: not needed since we only pass the generated tokens to the next forward pass\n            // const offset = -(attention_mask.dims[1] - past_length);\n            // model_inputs.input_ids = input_ids.slice(null, [offset, null]);\n        }\n        // 2 - If the past_length is smaller than input_ids', then input_ids holds all input tokens.\n        // We can discard input_ids based on the past_length.\n        else if (past_length < input_ids.dims[1]) {\n            // NOTE: Required for phi models.\n            // See https://github.com/huggingface/transformers/issues/30809#issuecomment-2111918479 for more information.\n            model_inputs.input_ids = input_ids.slice(null, [past_length, null]);\n        }\n        // 3 - Otherwise (past_length >= input_ids.shape[1]), let's assume input_ids only has unprocessed tokens.\n        else {\n            if (\n                // NOTE: Only used by VLMs (!= so that null matches undefined)\n                self.config.image_token_index != null &&\n                // Equivalent to `self.config.image_token_index in input_ids` (== so that int matches bigint)\n                input_ids.data.some(x => x == self.config.image_token_index)\n            ) {\n                // TODO: Support multiple image tokens\n                const num_image_tokens = self.config.num_image_tokens;\n                if (!num_image_tokens) {\n                    throw new Error('`num_image_tokens` is missing in the model configuration.');\n                }\n\n                const num_new_tokens = input_ids.dims[1] - (past_length - num_image_tokens);\n                model_inputs.input_ids = input_ids.slice(null, [-num_new_tokens, null]);\n\n                // TODO: The attention mask should be formed from the attention mask passed in model_inputs\n                model_inputs.attention_mask = ones([1, past_length + num_new_tokens]);\n            }\n        }\n    }\n\n    return model_inputs;\n}\n\nfunction encoder_decoder_prepare_inputs_for_generation(self, input_ids, model_inputs, generation_config) {\n    if (model_inputs.past_key_values) {\n        input_ids = input_ids.map(x => [x.at(-1)]);\n    }\n\n    return {\n        ...model_inputs,\n        decoder_input_ids: toI64Tensor(input_ids),\n    };\n}\n\nfunction image_text_to_text_prepare_inputs_for_generation(self, ...args) {\n    if (self.config.is_encoder_decoder) {\n        return encoder_decoder_prepare_inputs_for_generation(self, ...args);\n    } else {\n        return decoder_prepare_inputs_for_generation(self, ...args);\n    }\n\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n/**\n * A base class for pre-trained models that provides the model configuration and an ONNX session.\n */\nexport class PreTrainedModel extends Callable {\n    main_input_name = 'input_ids';\n    forward_params = ['input_ids', 'attention_mask'];\n    /**\n     * Creates a new instance of the `PreTrainedModel` class.\n     * @param {import('./configs.js').PretrainedConfig} config The model configuration.\n     * @param {Record<string, any>} sessions The inference sessions for the model.\n     */\n    constructor(config, sessions) {\n        super();\n\n        this.config = config;\n        this.sessions = sessions;\n\n        const modelName = MODEL_CLASS_TO_NAME_MAPPING.get(this.constructor);\n        const modelType = MODEL_TYPE_MAPPING.get(modelName);\n\n        this.can_generate = false;\n        this._forward = null;\n\n        this._prepare_inputs_for_generation = null;\n        switch (modelType) {\n            case MODEL_TYPES.DecoderOnly:\n                this.can_generate = true;\n                this._forward = decoderForward;\n                this._prepare_inputs_for_generation = decoder_prepare_inputs_for_generation;\n                break;\n            case MODEL_TYPES.Seq2Seq:\n            case MODEL_TYPES.Vision2Seq:\n            case MODEL_TYPES.Musicgen:\n                this.can_generate = true;\n\n                this._forward = seq2seqForward;\n                this._prepare_inputs_for_generation = encoder_decoder_prepare_inputs_for_generation;\n                break;\n\n            case MODEL_TYPES.EncoderDecoder:\n                this._forward = seq2seqForward;\n                break;\n            case MODEL_TYPES.ImageTextToText:\n                this.can_generate = true;\n                this._forward = imageTextToTextForward;\n                this._prepare_inputs_for_generation = image_text_to_text_prepare_inputs_for_generation;\n                break;\n\n            default:\n                // should be MODEL_TYPES.EncoderOnly\n                this._forward = encoderForward;\n                break;\n        }\n\n        if (this.can_generate) {\n            this.forward_params.push('past_key_values');\n        }\n\n        /** @type {import('./configs.js').TransformersJSConfig} */\n        this.custom_config = this.config['transformers.js_config'] ?? {};\n    }\n\n    /**\n    * Disposes of all the ONNX sessions that were created during inference.\n    * @returns {Promise<unknown[]>} An array of promises, one for each ONNX session that is being disposed.\n    * @todo Use https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\n    */\n    async dispose() {\n        const promises = [];\n        for (const session of Object.values(this.sessions)) {\n            if (session?.handler?.dispose) {\n                promises.push(session.handler.dispose())\n            }\n        }\n        return await Promise.all(promises);\n    }\n\n    /**\n     * Instantiate one of the model classes of the library from a pretrained model.\n     * \n     * The model class to instantiate is selected based on the `model_type` property of the config object\n     * (either passed as an argument or loaded from `pretrained_model_name_or_path` if possible)\n     * \n     * @param {string} pretrained_model_name_or_path The name or path of the pretrained model. Can be either:\n     * - A string, the *model id* of a pretrained model hosted inside a model repo on huggingface.co.\n     *   Valid model ids can be located at the root-level, like `bert-base-uncased`, or namespaced under a\n     *   user or organization name, like `dbmdz/bert-base-german-cased`.\n     * - A path to a *directory* containing model weights, e.g., `./my_model_directory/`.\n     * @param {import('./utils/hub.js').PretrainedModelOptions} options Additional options for loading the model.\n     * \n     * @returns {Promise<PreTrainedModel>} A new instance of the `PreTrainedModel` class.\n     */\n    static async from_pretrained(pretrained_model_name_or_path, {\n        progress_callback = null,\n        config = null,\n        cache_dir = null,\n        local_files_only = false,\n        revision = 'main',\n        model_file_name = null,\n        subfolder = 'onnx',\n        device = null,\n        dtype = null,\n        use_external_data_format = null,\n        session_options = {},\n    } = {}) {\n\n        let options = {\n            progress_callback,\n            config,\n            cache_dir,\n            local_files_only,\n            revision,\n            model_file_name,\n            subfolder,\n            device,\n            dtype,\n            use_external_data_format,\n            session_options,\n        }\n\n        const modelName = MODEL_CLASS_TO_NAME_MAPPING.get(this);\n        const modelType = MODEL_TYPE_MAPPING.get(modelName);\n\n        config = options.config = await AutoConfig.from_pretrained(pretrained_model_name_or_path, options);\n\n        let info;\n        if (modelType === MODEL_TYPES.DecoderOnly) {\n            info = await Promise.all([\n                constructSessions(pretrained_model_name_or_path, {\n                    model: options.model_file_name ?? 'model',\n                }, options),\n                getModelJSON(pretrained_model_name_or_path, 'generation_config.json', false, options),\n            ]);\n\n        } else if (modelType === MODEL_TYPES.Seq2Seq || modelType === MODEL_TYPES.Vision2Seq) {\n            info = await Promise.all([\n                constructSessions(pretrained_model_name_or_path, {\n                    model: 'encoder_model',\n                    decoder_model_merged: 'decoder_model_merged',\n                }, options),\n                getModelJSON(pretrained_model_name_or_path, 'generation_config.json', false, options),\n            ]);\n\n        } else if (modelType === MODEL_TYPES.MaskGeneration) {\n            info = await Promise.all([\n                constructSessions(pretrained_model_name_or_path, {\n                    model: 'vision_encoder',\n                    prompt_encoder_mask_decoder: 'prompt_encoder_mask_decoder',\n                }, options),\n            ]);\n\n        } else if (modelType === MODEL_TYPES.EncoderDecoder) {\n            info = await Promise.all([\n                constructSessions(pretrained_model_name_or_path, {\n                    model: 'encoder_model',\n                    decoder_model_merged: 'decoder_model_merged',\n                }, options),\n            ]);\n\n        } else if (modelType === MODEL_TYPES.ImageTextToText) {\n            const sessions = {\n                embed_tokens: 'embed_tokens',\n                vision_encoder: 'vision_encoder',\n                decoder_model_merged: 'decoder_model_merged',\n            }\n            if (config.is_encoder_decoder) {\n                sessions['model'] = 'encoder_model';\n            }\n            info = await Promise.all([\n                constructSessions(pretrained_model_name_or_path, sessions, options),\n                getModelJSON(pretrained_model_name_or_path, 'generation_config.json', false, options),\n            ]);\n\n        } else if (modelType === MODEL_TYPES.Musicgen) {\n            info = await Promise.all([\n                constructSessions(pretrained_model_name_or_path, {\n                    model: 'text_encoder',\n                    decoder_model_merged: 'decoder_model_merged',\n                    encodec_decode: 'encodec_decode',\n                }, options),\n                getModelJSON(pretrained_model_name_or_path, 'generation_config.json', false, options),\n            ]);\n\n        } else { // should be MODEL_TYPES.EncoderOnly\n            if (modelType !== MODEL_TYPES.EncoderOnly) {\n                console.warn(`Model type for '${modelName ?? config?.model_type}' not found, assuming encoder-only architecture. Please report this at https://github.com/xenova/transformers.js/issues/new/choose.`)\n            }\n            info = await Promise.all([\n                constructSessions(pretrained_model_name_or_path, {\n                    model: options.model_file_name ?? 'model',\n                }, options),\n            ]);\n        }\n\n        // @ts-ignore\n        return new this(config, ...info);\n    }\n\n    /**\n     * Runs the model with the provided inputs\n     * @param {Object} model_inputs Object containing input tensors\n     * @returns {Promise<Object>} Object containing output tensors\n     */\n    async _call(model_inputs) {\n        return await this.forward(model_inputs);\n    }\n\n    /**\n     * Forward method for a pretrained model. If not overridden by a subclass, the correct forward method\n     * will be chosen based on the model type.\n     * @param {Object} model_inputs The input data to the model in the format specified in the ONNX model.\n     * @returns {Promise<Object>} The output data from the model in the format specified in the ONNX model.\n     * @throws {Error} This method must be implemented in subclasses.\n     */\n    async forward(model_inputs) {\n        return await this._forward(this, model_inputs);\n    }\n\n    /**\n     * This function returns a [`LogitsProcessorList`] list object that contains all relevant [`LogitsWarper`]\n     * instances used for multinomial sampling.\n     * @param {GenerationConfig} generation_config The generation config.\n     * @returns {LogitsProcessorList} generation_config \n     */\n    _get_logits_warper(generation_config) {\n\n        // instantiate warpers list\n        const warpers = new LogitsProcessorList();\n\n        if (generation_config.temperature !== null && generation_config.temperature !== 1.0) {\n            warpers.push(new TemperatureLogitsWarper(generation_config.temperature));\n        }\n        if (generation_config.top_k !== null && generation_config.top_k !== 0) {\n            // TODO: add min_tokens_to_keep\n            warpers.push(new TopKLogitsWarper(generation_config.top_k));\n        }\n        if (generation_config.top_p !== null && generation_config.top_p < 1.0) {\n            // TODO: add min_tokens_to_keep\n            warpers.push(new TopPLogitsWarper(generation_config.top_p));\n        }\n\n        return warpers;\n    }\n\n    /**\n     * @param {GenerationConfig} generation_config \n     * @param {number} input_ids_seq_length The starting sequence length for the input ids.\n     * @returns {LogitsProcessorList}\n     * @private\n     */\n    _get_logits_processor(\n        generation_config,\n        input_ids_seq_length,\n        // encoder_input_ids, TODO\n        // prefix_allowed_tokens_fn, TODO\n        logits_processor = null\n    ) {\n        const processors = new LogitsProcessorList();\n\n        // if (generation_config.diversity_penalty !== null && generation_config.diversity_penalty > 0.0) {\n        //     processors.push(new HammingDiversityLogitsProcessor(\n        //         generation_config.diversity_penalty,\n        //         generation_config.num_beams,\n        //         generation_config.num_beam_groups\n        //     ));\n        // }\n\n        // if (generation_config.encoder_repetition_penalty !== null && generation_config.encoder_repetition_penalty !== 1.0) {\n        //     processors.push(new EncoderRepetitionPenaltyLogitsProcessor(\n        //         generation_config.encoder_repetition_penalty,\n        //         encoder_input_ids\n        //     ));\n        // }\n\n        if (generation_config.repetition_penalty !== null && generation_config.repetition_penalty !== 1.0) {\n            processors.push(new RepetitionPenaltyLogitsProcessor(generation_config.repetition_penalty));\n        }\n\n        if (generation_config.no_repeat_ngram_size !== null && generation_config.no_repeat_ngram_size > 0) {\n            processors.push(new NoRepeatNGramLogitsProcessor(generation_config.no_repeat_ngram_size));\n        }\n\n        // if (generation_config.encoder_no_repeat_ngram_size !== null && generation_config.encoder_no_repeat_ngram_size > 0) {\n        //     if (this.config.is_encoder_decoder) {\n        //         processors.push(new EncoderNoRepeatNGramLogitsProcessor(\n        //             generation_config.encoder_no_repeat_ngram_size,\n        //             encoder_input_ids\n        //         ));\n        //     } else {\n        //         throw new Error(\"It's impossible to use `encoder_no_repeat_ngram_size` with decoder-only architecture\");\n        //     }\n        // }\n\n        if (generation_config.bad_words_ids !== null) {\n            processors.push(new NoBadWordsLogitsProcessor(generation_config.bad_words_ids, generation_config.eos_token_id));\n        }\n\n        if (generation_config.min_length !== null && generation_config.eos_token_id !== null && generation_config.min_length > 0) {\n            processors.push(new MinLengthLogitsProcessor(generation_config.min_length, generation_config.eos_token_id));\n        }\n\n        if (generation_config.min_new_tokens !== null && generation_config.eos_token_id !== null && generation_config.min_new_tokens > 0) {\n            processors.push(new MinNewTokensLengthLogitsProcessor(\n                input_ids_seq_length,\n                generation_config.min_new_tokens,\n                generation_config.eos_token_id\n            ));\n        }\n\n        // if (prefix_allowed_tokens_fn !== null) {\n        //     processors.push(new PrefixConstrainedLogitsProcessor(\n        //         prefix_allowed_tokens_fn,\n        //         generation_config.num_beams / generation_config.num_beam_groups\n        //     ));\n        // }\n\n\n        if (generation_config.forced_bos_token_id !== null) {\n            processors.push(new ForcedBOSTokenLogitsProcessor(generation_config.forced_bos_token_id));\n        }\n\n        if (generation_config.forced_eos_token_id !== null) {\n            processors.push(new ForcedEOSTokenLogitsProcessor(\n                generation_config.max_length,\n                generation_config.forced_eos_token_id\n            ));\n        }\n\n        // if (generation_config.remove_invalid_values === true) {\n        //     processors.push(new InfNanRemoveLogitsProcessor());\n        // }\n\n        // if (generation_config.exponential_decay_length_penalty !== null) {\n        //     processors.push(new ExponentialDecayLengthPenalty(\n        //         generation_config.exponential_decay_length_penalty,\n        //         generation_config.eos_token_id,\n        //         input_ids_seq_length\n        //     ));\n        // }\n\n        // if (generation_config.suppress_tokens !== null) {\n        //     processors.push(new SuppressTokensLogitsProcessor(generation_config.suppress_tokens));\n        // }\n\n        if (generation_config.begin_suppress_tokens !== null) {\n            const begin_index = (input_ids_seq_length > 1 || generation_config.forced_bos_token_id === null)\n                ? input_ids_seq_length\n                : input_ids_seq_length + 1;\n\n            processors.push(new SuppressTokensAtBeginLogitsProcessor(generation_config.begin_suppress_tokens, begin_index));\n        }\n\n        // DEPRECATED: https://github.com/huggingface/transformers/pull/29485\n        // if (generation_config.forced_decoder_ids !== null) {\n        //     processors.push(new ForceTokensLogitsProcessor(generation_config.forced_decoder_ids));\n        // }\n\n\n        // 8. prepare batched CFG externally\n        if (generation_config.guidance_scale !== null && generation_config.guidance_scale > 1) {\n            processors.push(new ClassifierFreeGuidanceLogitsProcessor(generation_config.guidance_scale));\n        }\n\n        if (logits_processor !== null) {\n            processors.extend(logits_processor)\n        }\n\n        // `LogitNormalization` should always be the last logit processor, when present\n        // if (generation_config.renormalize_logits === true) {\n        //     processors.push(new LogitNormalization());\n        // }\n\n        return processors;\n    }\n\n    /**\n     * This function merges multiple generation configs together to form a final generation config to be used by the model for text generation.\n     * It first creates an empty `GenerationConfig` object, then it applies the model's own `generation_config` property to it. Finally, if a `generation_config` object was passed in the arguments, it overwrites the corresponding properties in the final config with those of the passed config object.\n     * @param {GenerationConfig|null} generation_config A `GenerationConfig` object containing generation parameters.\n     * @param {Object} kwargs Additional generation parameters to be used in place of those in the `generation_config` object.\n     * @returns {GenerationConfig} The final generation config object to be used by the model for text generation.\n     */\n    _prepare_generation_config(generation_config, kwargs, cls = GenerationConfig) {\n        // Create empty generation config (contains defaults)\n        // We pass `this.config` so that if `eos_token_id` or `bos_token_id` exist in the model's config, we will use them\n        const config = { ...this.config };\n        for (const key of [\"decoder\", \"generator\", \"text_config\"]) {\n            // Special case: some models have generation attributes set in the decoder.\n            // Use them if still unset in the generation config.\n            if (key in config) {\n                Object.assign(config, config[key]);\n            }\n        }\n\n        const gen_config = new cls(config);\n\n        // Apply model's generation config, if it exists\n        if ('generation_config' in this) {\n            Object.assign(gen_config, this.generation_config);\n        }\n\n        // Next, use any generation config specified by the user\n        // when calling `generate`\n        if (generation_config) {\n            Object.assign(gen_config, generation_config);\n        }\n\n        // Finally, if any kwargs were passed, use them to overwrite\n        if (kwargs) {\n            Object.assign(gen_config, pick(kwargs, Object.getOwnPropertyNames(gen_config)));\n        }\n\n        return gen_config;\n    }\n\n    /**\n     * \n     * @param {GenerationConfig} generation_config \n     * @param {StoppingCriteriaList} [stopping_criteria=null] \n     */\n    _get_stopping_criteria(generation_config, stopping_criteria = null) {\n        const criteria = new StoppingCriteriaList();\n\n        if (generation_config.max_length !== null) {\n            criteria.push(new MaxLengthCriteria(\n                generation_config.max_length,\n                this.config.max_position_embeddings ?? null,\n            ));\n        }\n        // if (generation_config.max_time !== null) {\n        //     criteria.push(new MaxTimeCriteria(generation_config.max_time));\n        // }\n        if (generation_config.eos_token_id !== null) {\n            criteria.push(new EosTokenCriteria(generation_config.eos_token_id));\n        }\n\n        if (stopping_criteria) {\n            criteria.extend(stopping_criteria);\n        }\n        return criteria;\n\n    }\n\n    /**\n     * Confirms that the model class is compatible with generation.\n     * If not, raises an exception that points to the right class to use.\n     */\n    _validate_model_class() {\n        if (!this.can_generate) {\n            const generate_compatible_mappings = [\n                MODEL_FOR_CAUSAL_LM_MAPPING_NAMES,\n                // MODEL_FOR_CAUSAL_IMAGE_MODELING_MAPPING, // TODO\n                MODEL_FOR_VISION_2_SEQ_MAPPING_NAMES,\n                MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING_NAMES,\n                MODEL_FOR_SPEECH_SEQ_2_SEQ_MAPPING_NAMES,\n            ];\n\n            const modelName = MODEL_CLASS_TO_NAME_MAPPING.get(this.constructor);\n\n            const generate_compatible_classes = new Set();\n            const modelType = this.config.model_type;\n            for (const model_mapping of generate_compatible_mappings) {\n                const supported_models = model_mapping.get(modelType);\n                if (supported_models) {\n                    generate_compatible_classes.add(supported_models[0]);\n                }\n            }\n\n            let errorMessage = `The current model class (${modelName}) is not compatible with \\`.generate()\\`, as it doesn't have a language model head.`\n            if (generate_compatible_classes.size > 0) {\n                errorMessage += ` Please use the following class instead: ${[...generate_compatible_classes].join(', ')}`;\n            }\n            throw Error(errorMessage);\n        }\n    }\n\n    prepare_inputs_for_generation(...args) {\n        return this._prepare_inputs_for_generation(this, ...args);\n    }\n\n    /**\n     * \n     * @param {Object} inputs\n     * @param {bigint[][]} inputs.generated_input_ids\n     * @param {Object} inputs.outputs\n     * @param {Object} inputs.model_inputs\n     * @param {boolean} inputs.is_encoder_decoder\n     * @returns {Object} The updated model inputs for the next generation iteration.\n     */\n    _update_model_kwargs_for_generation({ generated_input_ids, outputs, model_inputs, is_encoder_decoder }) {\n        // update past_key_values\n        model_inputs['past_key_values'] = this.getPastKeyValues(outputs, model_inputs.past_key_values);\n\n        // update inputs for next run\n        model_inputs['input_ids'] = new Tensor('int64', generated_input_ids.flat(), [generated_input_ids.length, 1]);\n\n        if (!is_encoder_decoder) {\n            // update attention mask\n            model_inputs.attention_mask = cat(\n                [\n                    model_inputs.attention_mask,\n                    ones([model_inputs.attention_mask.dims[0], 1]),\n                ], 1\n            );\n        } else if ('decoder_attention_mask' in model_inputs) {\n            // TODO: update decoder attention mask if the model requires it\n        }\n\n        // force recreate position_ids in next iteration\n        model_inputs['position_ids'] = null;\n\n        return model_inputs;\n    }\n\n    /**\n     * This function extracts the model-specific `inputs` for generation.\n     * @param {Object} params\n     * @param {Tensor} [params.inputs=null]\n     * @param {number} [params.bos_token_id=null]\n     * @param {Record<string, Tensor|number[]>} [params.model_kwargs]\n     * @returns {{inputs_tensor: Tensor, model_inputs: Record<string, Tensor>, model_input_name: string}} The model-specific inputs for generation.\n     */\n    _prepare_model_inputs({ inputs, bos_token_id, model_kwargs }) {\n        const model_inputs = pick(model_kwargs, this.forward_params);\n        const input_name = this.main_input_name;\n        if (input_name in model_inputs) {\n            if (inputs) {\n                throw new Error(\n                    \"`inputs`: {inputs}` were passed alongside {input_name} which is not allowed. \" +\n                    \"Make sure to either pass {inputs} or {input_name}=...\"\n                );\n            }\n        } else {\n            model_inputs[input_name] = inputs;\n        }\n\n        const inputs_tensor = model_inputs[input_name];\n\n        return { inputs_tensor, model_inputs, model_input_name: input_name };\n    }\n\n    async _prepare_encoder_decoder_kwargs_for_generation({ inputs_tensor, model_inputs, model_input_name, generation_config }) {\n        if (\n            this.sessions['model'].inputNames.includes('inputs_embeds')\n            && !model_inputs.inputs_embeds\n            && '_prepare_inputs_embeds' in this\n        ) {\n            // Encoder expects `inputs_embeds` instead of `input_ids`\n            const { input_ids, pixel_values, attention_mask, ...kwargs } = model_inputs;\n            // @ts-ignore\n            const prepared_inputs = await this._prepare_inputs_embeds(model_inputs);\n            model_inputs = {\n                ...kwargs,\n                ...pick(prepared_inputs, ['inputs_embeds', 'attention_mask']),\n            };\n        }\n        let { last_hidden_state } = await encoderForward(this, model_inputs);\n\n        // for classifier free guidance we need to add a 'null' input to our encoder hidden states\n        if (generation_config.guidance_scale !== null && generation_config.guidance_scale > 1) {\n\n            last_hidden_state = cat([\n                last_hidden_state,\n                full_like(last_hidden_state, 0.0),\n            ], 0);\n\n            if ('attention_mask' in model_inputs) {\n                model_inputs['attention_mask'] = cat([\n                    model_inputs['attention_mask'],\n                    zeros_like(model_inputs['attention_mask']),\n                ], 0);\n            }\n\n        } else if (model_inputs.decoder_input_ids) {\n            // Ensure that the encoder outputs have the same batch size as the decoder inputs,\n            // allowing for more efficient batched generation for single inputs\n            const decoder_input_ids_batch_size = toI64Tensor(model_inputs.decoder_input_ids).dims[0];\n            if (decoder_input_ids_batch_size !== last_hidden_state.dims[0]) {\n                if (last_hidden_state.dims[0] !== 1) {\n                    throw new Error(\n                        `The encoder outputs have a different batch size (${last_hidden_state.dims[0]}) than the decoder inputs (${decoder_input_ids_batch_size}).`\n                    )\n                }\n                last_hidden_state = cat(Array.from({ length: decoder_input_ids_batch_size }, () => last_hidden_state), 0);\n            }\n        }\n        model_inputs['encoder_outputs'] = last_hidden_state;\n\n        return model_inputs;\n    }\n\n    /**\n     * Prepares `decoder_input_ids` for generation with encoder-decoder models\n     * @param {*} param0 \n     */\n    _prepare_decoder_input_ids_for_generation({ batch_size, model_input_name, model_kwargs, decoder_start_token_id, bos_token_id, generation_config }) {\n        let { decoder_input_ids, ...model_inputs } = model_kwargs;\n\n        // Prepare input ids if the user has not defined `decoder_input_ids` manually.\n        if (!decoder_input_ids) {\n            decoder_start_token_id ??= bos_token_id;\n\n            if (this.config.model_type === 'musicgen') {\n                // Custom logic (TODO: move to Musicgen class)\n                decoder_input_ids = Array.from({\n                    length: batch_size * this.config.decoder.num_codebooks\n                }, () => [decoder_start_token_id]);\n\n            } else if (Array.isArray(decoder_start_token_id)) {\n                if (decoder_start_token_id.length !== batch_size) {\n                    throw new Error(\n                        `\\`decoder_start_token_id\\` expcted to have length ${batch_size} but got ${decoder_start_token_id.length}`\n                    )\n                }\n                decoder_input_ids = decoder_start_token_id;\n            } else {\n                decoder_input_ids = Array.from({\n                    length: batch_size,\n                }, () => [decoder_start_token_id]);\n            }\n        } else if (!Array.isArray(decoder_input_ids[0])) {\n            // Correct batch size\n            decoder_input_ids = Array.from({\n                length: batch_size,\n            }, () => decoder_input_ids);\n        }\n\n        decoder_input_ids = toI64Tensor(decoder_input_ids);\n        model_kwargs['decoder_attention_mask'] = ones_like(decoder_input_ids);\n\n        return { input_ids: decoder_input_ids, model_inputs };\n    }\n\n    /**\n     * Generates sequences of token ids for models with a language modeling head.\n     * @param {import('./generation/parameters.js').GenerationFunctionParameters} options\n     * @returns {Promise<ModelOutput|Tensor>} The output of the model, which can contain the generated token ids, attentions, and scores.\n     */\n    async generate({\n        inputs = null,\n        generation_config = null,\n        logits_processor = null,\n        stopping_criteria = null,\n        streamer = null,\n\n        // inputs_attention_mask = null,\n        ...kwargs\n    }) {\n        this._validate_model_class();\n\n        // Update generation config with defaults and kwargs\n        generation_config = this._prepare_generation_config(generation_config, kwargs);\n\n        // 3. Define model inputs\n        let { inputs_tensor, model_inputs, model_input_name } = this._prepare_model_inputs({\n            inputs,\n            model_kwargs: kwargs,\n        });\n\n        const is_encoder_decoder = this.config.is_encoder_decoder;\n\n        // 4. Define other model kwargs\n        if (!is_encoder_decoder) {\n            // decoder-only models should use left-padding for generation\n        } else if (!('encoder_outputs' in model_inputs)) {\n            // if model is encoder decoder encoder_outputs are created\n            // and added to `model_kwargs`\n            model_inputs = await this._prepare_encoder_decoder_kwargs_for_generation(\n                { inputs_tensor, model_inputs, model_input_name, generation_config }\n            )\n        }\n\n        // 5. Prepare `input_ids` which will be used for auto-regressive generation\n        // TODO: Update to align with HF transformers' implementation\n        let input_ids;\n        if (is_encoder_decoder) {\n            // Generating from the encoder outputs\n            ({ input_ids, model_inputs } = this._prepare_decoder_input_ids_for_generation({\n                batch_size: model_inputs[model_input_name].dims.at(0),\n                model_input_name,\n                model_kwargs: model_inputs,\n                decoder_start_token_id: generation_config.decoder_start_token_id,\n                bos_token_id: generation_config.bos_token_id,\n                generation_config,\n            }));\n        } else {\n            input_ids = model_inputs[model_input_name]\n        }\n\n        // 6. Prepare `max_length` depending on other stopping criteria.\n        let input_ids_length = input_ids.dims.at(-1);\n\n        if (generation_config.max_new_tokens !== null) {\n            generation_config.max_length = input_ids_length + generation_config.max_new_tokens;\n        }\n\n        // input_ids_length = model_inputs[model_input_name].dims.at(1);\n        // // inputs instanceof Tensor ?  : inputs.length;\n\n        // // decoder-only\n        // if (input_ids_length === 0) {\n        //     throw Error(\"Must supply a non-empty array of input token ids.\")\n        // }\n\n        // let decoder_input_ids =\n        // generation_config.decoder_input_ids\n        // ?? generation_config.decoder_start_token_id\n        // ?? generation_config.bos_token_id\n        // ?? generation_config.eos_token_id;\n\n        // Update logits processor\n        // 8. prepare distribution pre_processing samplers\n        const prepared_logits_processor = this._get_logits_processor(\n            generation_config,\n            input_ids_length,\n            logits_processor,\n        )\n\n        // 9. prepare stopping criteria\n        const prepared_stopping_criteria = this._get_stopping_criteria(\n            generation_config, stopping_criteria\n        )\n\n        // /** @type {number[]} */\n        // let eos_token_ids = generation_config.eos_token_id;\n        // if (eos_token_ids !== null && !Array.isArray(eos_token_ids)) {\n        //     eos_token_ids = [eos_token_ids];\n        // }\n\n        const numInputs = model_inputs[model_input_name].dims.at(0);\n\n        // TODO:\n        // done is a list of booleans to keep track of which inputs are done\n        // const done = new Array(numInputs).fill(false);\n        // For efficiency purposes, we remove completed rows from model_inputs\n        // when the beam is complete, and we keep track of the row index\n        // const rowIndexToBatchIndex = new Map();\n\n        const sampler = LogitsSampler.getSampler(generation_config);\n\n        // TODO make > numInputs\n        const scores = new Array(numInputs).fill(0);\n        /** @type {bigint[][]} */\n        const all_input_ids = input_ids.tolist();\n        if (streamer) {\n            streamer.put(all_input_ids);\n        }\n        // const all_generated_input_ids = Array.from({ length: numInputs }, () => []);\n\n        // NOTE: For now, we don't support spawning new beams\n        // TODO: when we do, we simply copy past key values and accumulate into single large tensor\n\n        ////////////////////////////////////////////////////\n        // Generic search which handles 4 generation modes:\n        // - GenerationMode.GREEDY_SEARCH\n        // - GenerationMode.SAMPLE\n        // - GenerationMode.BEAM_SEARCH\n        // - GenerationMode.BEAM_SAMPLE\n        ////////////////////////////////////////////////////\n        let past_key_values = null;\n        let attentions = {};\n        while (true) {\n            // prepare model inputs\n            model_inputs = this.prepare_inputs_for_generation(all_input_ids, model_inputs, generation_config);\n\n            const outputs = await this.forward(model_inputs);\n\n            if (generation_config.output_attentions && generation_config.return_dict_in_generate) {\n                // Get attentions if they are present\n                const token_attentions = this.getAttentions(outputs);\n                for (const key in token_attentions) {\n                    if (!(key in attentions)) {\n                        attentions[key] = [];\n                    }\n                    attentions[key].push(token_attentions[key]);\n                }\n            }\n\n            // Logits are of the form [batch_size, out_seq_length, vocab_size]\n            // In most cases, this will be [batch_size, 1, vocab_size]\n            // So, we select the last token's logits:\n            // (equivalent to `logits = outputs.logits[:, -1, :]`)\n            const logits = outputs.logits.slice(null, -1, null);\n\n            const next_tokens_scores = prepared_logits_processor(all_input_ids, logits);\n\n            /** @type {[bigint][]} */\n            const generated_input_ids = [];\n            // const new_kv_cache = [];// NOTE: Only used for beam search when concatenating new kv\n            // Loop over each batch\n            for (let batch_idx = 0; batch_idx < next_tokens_scores.dims.at(0); ++batch_idx) {\n                const logs = next_tokens_scores[batch_idx];\n\n                const sampledTokens = await sampler(logs);\n                for (const [newTokenId, logProb] of sampledTokens) {\n                    const bigint = BigInt(newTokenId);\n                    // TODO: If branching, use previous beam as a starting point\n                    // update generated ids, model inputs, and length for next step\n                    scores[batch_idx] += logProb;\n                    all_input_ids[batch_idx].push(bigint);\n                    generated_input_ids.push([bigint]);\n\n                    // TODO: Support beam search\n                    break;\n                }\n            }\n            if (streamer) {\n                streamer.put(generated_input_ids);\n            }\n\n            const stop = prepared_stopping_criteria(all_input_ids);\n            if (stop.every(x => x)) {\n                if (generation_config.return_dict_in_generate) {\n                    // Get past key values without disposing buffers\n                    past_key_values = this.getPastKeyValues(outputs, model_inputs.past_key_values, false);\n                }\n                break;\n            }\n\n            model_inputs = this._update_model_kwargs_for_generation({\n                generated_input_ids, outputs, model_inputs, is_encoder_decoder,\n            });\n        }\n\n        if (streamer) {\n            streamer.end();\n        }\n\n        // TODO: ensure all_input_ids is padded correctly...\n        const sequences = new Tensor('int64', all_input_ids.flat(), [all_input_ids.length, all_input_ids[0].length]);\n\n        if (generation_config.return_dict_in_generate) {\n            return {\n                sequences,\n                past_key_values,\n                ...attentions,\n                // TODO:\n                // scores,\n                // logits,\n            }\n        } else {\n            return sequences;\n        }\n    }\n\n    /**\n     * Returns an object containing past key values from the given decoder results object.\n     *\n     * @param {Object} decoderResults The decoder results object.\n     * @param {Object} pastKeyValues The previous past key values.\n     * @param {boolean} [dispose=true] Whether to dispose of the old gpu buffer.\n     * @returns {Object} An object containing past key values.\n     */\n    getPastKeyValues(decoderResults, pastKeyValues, dispose = true) {\n        const pkvs = Object.create(null);\n\n        for (const name in decoderResults) {\n            if (name.startsWith('present')) {\n                const newName = name.replace('present', 'past_key_values');\n\n                if (pastKeyValues && name.includes('encoder')) {\n                    // Optimization introduced by optimum to reuse past key values. So, we just replace the constant\n                    // outputs with the previous past key values.\n                    // https://github.com/huggingface/optimum/blob/0bf2c05fb7e1182b52d21b703cfc95fd9e4ea3dc/optimum/onnxruntime/base.py#L677-L704\n                    pkvs[newName] = pastKeyValues[newName];\n                } else {\n                    if (dispose && pastKeyValues) {\n                        // Free old gpu buffer\n                        const t = pastKeyValues[newName];\n                        if (t.location === 'gpu-buffer') {\n                            t.dispose();\n                        }\n                    }\n                    pkvs[newName] = decoderResults[name];\n                }\n            }\n        }\n        return pkvs;\n    }\n\n    /**\n     * Returns an object containing attentions from the given model output object.\n     *\n     * @param {Object} model_output The output of the model.\n     * @returns {{cross_attentions?: Tensor[]}} An object containing attentions.\n     */\n    getAttentions(model_output) {\n        const attentions = {};\n\n        for (const attnName of ['cross_attentions', 'encoder_attentions', 'decoder_attentions']) {\n            for (const name in model_output) {\n                if (name.startsWith(attnName)) {\n                    if (!(attnName in attentions)) {\n                        attentions[attnName] = [];\n                    }\n                    attentions[attnName].push(model_output[name]);\n                }\n            }\n        }\n        return attentions;\n    }\n\n    /**\n     * Adds past key values to the decoder feeds object. If pastKeyValues is null, creates new tensors for past key values.\n     *\n     * @param {Object} decoderFeeds The decoder feeds object to add past key values to.\n     * @param {Object} pastKeyValues An object containing past key values.\n     */\n    addPastKeyValues(decoderFeeds, pastKeyValues) {\n        if (pastKeyValues) {\n            Object.assign(decoderFeeds, pastKeyValues)\n        } else {\n\n            /** @type {import('./transformers.js').DataType} */\n            const dtype = this.custom_config.kv_cache_dtype ?? 'float32';\n            const empty = (dtype === 'float16') ? new Uint16Array() : [];\n\n            const shapes = getKeyValueShapes(this.config);\n\n            for (const name in shapes) {\n                decoderFeeds[name] = new Tensor(dtype, empty, shapes[name]);\n            }\n        }\n    }\n\n    async encode_image({ pixel_values }) {\n        // image_inputs === { pixel_values }\n        const features = (await sessionRun(this.sessions['vision_encoder'], { pixel_values })).image_features;\n        if (!this.config.num_image_tokens) {\n            console.warn(\n                'The number of image tokens was not set in the model configuration. ' +\n                `Setting it to the number of features detected by the vision encoder (${features.dims[1]}).`\n            )\n            this.config.num_image_tokens = features.dims[1];\n        }\n        return features;\n    }\n\n    async encode_text({ input_ids }) {\n        // text_inputs === { input_ids, attention_mask }\n        return (await sessionRun(this.sessions['embed_tokens'], { input_ids })).inputs_embeds;\n    }\n}\n\n//////////////////////////////////////////////////\n// Base model output class\nexport class ModelOutput { }\n\n/**\n * Base class for model's outputs, with potential hidden states and attentions.\n */\nexport class BaseModelOutput extends ModelOutput {\n    /**\n     * @param {Object} output The output of the model.\n     * @param {Tensor} output.last_hidden_state Sequence of hidden-states at the output of the last layer of the model.\n     * @param {Tensor} [output.hidden_states] Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.\n     * @param {Tensor} [output.attentions] Attentions weights after the attention softmax, used to compute the weighted average in the self-attention heads.\n     */\n    constructor({ last_hidden_state, hidden_states = null, attentions = null }) {\n        super();\n        this.last_hidden_state = last_hidden_state;\n        this.hidden_states = hidden_states;\n        this.attentions = attentions;\n    }\n}\n//////////////////////////////////////////////////\n// Bert models\nexport class BertPreTrainedModel extends PreTrainedModel { }\nexport class BertModel extends BertPreTrainedModel { }\n\n/**\n * BertForMaskedLM is a class representing a BERT model for masked language modeling.\n */\nexport class BertForMaskedLM extends BertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.\n     */\n    async _call(model_inputs) {\n        return new MaskedLMOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * BertForSequenceClassification is a class representing a BERT model for sequence classification.\n */\nexport class BertForSequenceClassification extends BertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * BertForTokenClassification is a class representing a BERT model for token classification.\n */\nexport class BertForTokenClassification extends BertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.\n     */\n    async _call(model_inputs) {\n        return new TokenClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * BertForQuestionAnswering is a class representing a BERT model for question answering.\n */\nexport class BertForQuestionAnswering extends BertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.\n     */\n    async _call(model_inputs) {\n        return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// NomicBert models\nexport class NomicBertPreTrainedModel extends PreTrainedModel { }\nexport class NomicBertModel extends NomicBertPreTrainedModel { }\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// RoFormer models\nexport class RoFormerPreTrainedModel extends PreTrainedModel { }\n\n/**\n * The bare RoFormer Model transformer outputting raw hidden-states without any specific head on top.\n */\nexport class RoFormerModel extends RoFormerPreTrainedModel { }\n\n/**\n * RoFormer Model with a `language modeling` head on top.\n */\nexport class RoFormerForMaskedLM extends RoFormerPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.\n     */\n    async _call(model_inputs) {\n        return new MaskedLMOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * RoFormer Model transformer with a sequence classification/regression head on top (a linear layer on top of the pooled output)\n */\nexport class RoFormerForSequenceClassification extends RoFormerPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * RoFormer Model with a token classification head on top (a linear layer on top of the hidden-states output)\n * e.g. for Named-Entity-Recognition (NER) tasks.\n */\nexport class RoFormerForTokenClassification extends RoFormerPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.\n     */\n    async _call(model_inputs) {\n        return new TokenClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * RoFormer Model with a span classification head on top for extractive question-answering tasks like SQuAD\n * (a linear layers on top of the hidden-states output to compute `span start logits` and `span end logits`).\n */\nexport class RoFormerForQuestionAnswering extends RoFormerPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.\n     */\n    async _call(model_inputs) {\n        return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n    }\n}\n// TODO: Add RoFormerForCausalLM and RoFormerForMultipleChoice\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// ConvBert models\nexport class ConvBertPreTrainedModel extends PreTrainedModel { }\n\n/**\n * The bare ConvBERT Model transformer outputting raw hidden-states without any specific head on top.\n */\nexport class ConvBertModel extends ConvBertPreTrainedModel { }\n\n/**\n * ConvBERT Model with a language modeling head on top.\n */\nexport class ConvBertForMaskedLM extends ConvBertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.\n     */\n    async _call(model_inputs) {\n        return new MaskedLMOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * ConvBERT Model transformer with a sequence classification/regression head on top (a linear layer on top of the pooled output)\n */\nexport class ConvBertForSequenceClassification extends ConvBertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * ConvBERT Model with a token classification head on top (a linear layer on top of the hidden-states output)\n * e.g. for Named-Entity-Recognition (NER) tasks.\n */\nexport class ConvBertForTokenClassification extends ConvBertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.\n     */\n    async _call(model_inputs) {\n        return new TokenClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * ConvBERT Model with a span classification head on top for extractive question-answering tasks like SQuAD\n * (a linear layers on top of the hidden-states output to compute `span start logits` and `span end logits`)\n */\nexport class ConvBertForQuestionAnswering extends ConvBertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.\n     */\n    async _call(model_inputs) {\n        return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// Electra models\nexport class ElectraPreTrainedModel extends PreTrainedModel { }\n\n/**\n * The bare Electra Model transformer outputting raw hidden-states without any specific head on top.\n * Identical to the BERT model except that it uses an additional linear layer between the embedding\n * layer and the encoder if the hidden size and embedding size are different.\n */\nexport class ElectraModel extends ElectraPreTrainedModel { }\n// TODO add ElectraForPreTraining\n/**\n * Electra model with a language modeling head on top.\n */\nexport class ElectraForMaskedLM extends ElectraPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.\n     */\n    async _call(model_inputs) {\n        return new MaskedLMOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * ELECTRA Model transformer with a sequence classification/regression head on top (a linear layer on top of the pooled output)\n */\nexport class ElectraForSequenceClassification extends ElectraPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * Electra model with a token classification head on top.\n */\nexport class ElectraForTokenClassification extends ElectraPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.\n     */\n    async _call(model_inputs) {\n        return new TokenClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * LECTRA Model with a span classification head on top for extractive question-answering tasks like SQuAD\n * (a linear layers on top of the hidden-states output to compute `span start logits` and `span end logits`).\n */\nexport class ElectraForQuestionAnswering extends ElectraPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.\n     */\n    async _call(model_inputs) {\n        return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// CamemBERT models\nexport class CamembertPreTrainedModel extends PreTrainedModel { }\n\n/**\n * The bare CamemBERT Model transformer outputting raw hidden-states without any specific head on top.\n */\nexport class CamembertModel extends CamembertPreTrainedModel { }\n\n/**\n * CamemBERT Model with a `language modeling` head on top.\n */\nexport class CamembertForMaskedLM extends CamembertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.\n     */\n    async _call(model_inputs) {\n        return new MaskedLMOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * CamemBERT Model transformer with a sequence classification/regression head on top (a linear layer on top of the pooled output) e.g. for GLUE tasks.\n */\nexport class CamembertForSequenceClassification extends CamembertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * CamemBERT Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g. for Named-Entity-Recognition (NER) tasks.\n */\nexport class CamembertForTokenClassification extends CamembertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.\n     */\n    async _call(model_inputs) {\n        return new TokenClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * CamemBERT Model with a span classification head on top for extractive question-answering tasks\n */\nexport class CamembertForQuestionAnswering extends CamembertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.\n     */\n    async _call(model_inputs) {\n        return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// DeBERTa models\nexport class DebertaPreTrainedModel extends PreTrainedModel { }\n\n/**\n * The bare DeBERTa Model transformer outputting raw hidden-states without any specific head on top.\n */\nexport class DebertaModel extends DebertaPreTrainedModel { }\n\n/**\n * DeBERTa Model with a `language modeling` head on top.\n */\nexport class DebertaForMaskedLM extends DebertaPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.\n     */\n    async _call(model_inputs) {\n        return new MaskedLMOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * DeBERTa Model transformer with a sequence classification/regression head on top (a linear layer on top of the pooled output)\n */\nexport class DebertaForSequenceClassification extends DebertaPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * DeBERTa Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g. for Named-Entity-Recognition (NER) tasks.\n */\nexport class DebertaForTokenClassification extends DebertaPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.\n     */\n    async _call(model_inputs) {\n        return new TokenClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * DeBERTa Model with a span classification head on top for extractive question-answering tasks like SQuAD (a linear\n * layers on top of the hidden-states output to compute `span start logits` and `span end logits`).\n */\nexport class DebertaForQuestionAnswering extends DebertaPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.\n     */\n    async _call(model_inputs) {\n        return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// DeBERTa-v2 models\nexport class DebertaV2PreTrainedModel extends PreTrainedModel { }\n\n/**\n * The bare DeBERTa-V2 Model transformer outputting raw hidden-states without any specific head on top.\n */\nexport class DebertaV2Model extends DebertaV2PreTrainedModel { }\n\n/**\n * DeBERTa-V2 Model with a `language modeling` head on top.\n */\nexport class DebertaV2ForMaskedLM extends DebertaV2PreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.\n     */\n    async _call(model_inputs) {\n        return new MaskedLMOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * DeBERTa-V2 Model transformer with a sequence classification/regression head on top (a linear layer on top of the pooled output)\n */\nexport class DebertaV2ForSequenceClassification extends DebertaV2PreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * DeBERTa-V2 Model with a token classification head on top (a linear layer on top of the hidden-states output) e.g. for Named-Entity-Recognition (NER) tasks.\n */\nexport class DebertaV2ForTokenClassification extends DebertaV2PreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.\n     */\n    async _call(model_inputs) {\n        return new TokenClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * DeBERTa-V2 Model with a span classification head on top for extractive question-answering tasks like SQuAD (a linear\n * layers on top of the hidden-states output to compute `span start logits` and `span end logits`).\n */\nexport class DebertaV2ForQuestionAnswering extends DebertaV2PreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.\n     */\n    async _call(model_inputs) {\n        return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// DistilBert models\nexport class DistilBertPreTrainedModel extends PreTrainedModel { }\nexport class DistilBertModel extends DistilBertPreTrainedModel { }\n\n/**\n * DistilBertForSequenceClassification is a class representing a DistilBERT model for sequence classification.\n */\nexport class DistilBertForSequenceClassification extends DistilBertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * DistilBertForTokenClassification is a class representing a DistilBERT model for token classification.\n */\nexport class DistilBertForTokenClassification extends DistilBertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.\n     */\n    async _call(model_inputs) {\n        return new TokenClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n\n/**\n * DistilBertForQuestionAnswering is a class representing a DistilBERT model for question answering.\n */\nexport class DistilBertForQuestionAnswering extends DistilBertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.\n     */\n    async _call(model_inputs) {\n        return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * DistilBertForMaskedLM is a class representing a DistilBERT model for masking task.\n */\nexport class DistilBertForMaskedLM extends DistilBertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<MaskedLMOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new MaskedLMOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// ESM models\nexport class EsmPreTrainedModel extends PreTrainedModel { }\n\n/**\n * The bare ESM Model transformer outputting raw hidden-states without any specific head on top.\n */\nexport class EsmModel extends EsmPreTrainedModel { }\n\n/**\n * ESM Model with a `language modeling` head on top.\n */\nexport class EsmForMaskedLM extends EsmPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.\n     */\n    async _call(model_inputs) {\n        return new MaskedLMOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * ESM Model transformer with a sequence classification/regression head on top (a linear layer on top of the pooled output)\n */\nexport class EsmForSequenceClassification extends EsmPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * ESM Model with a token classification head on top (a linear layer on top of the hidden-states output)\n * e.g. for Named-Entity-Recognition (NER) tasks.\n */\nexport class EsmForTokenClassification extends EsmPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.\n     */\n    async _call(model_inputs) {\n        return new TokenClassifierOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// MobileBert models\nexport class MobileBertPreTrainedModel extends PreTrainedModel { }\nexport class MobileBertModel extends MobileBertPreTrainedModel { }\n\n/**\n * MobileBertForMaskedLM is a class representing a MobileBERT model for masking task.\n */\nexport class MobileBertForMaskedLM extends MobileBertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<MaskedLMOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new MaskedLMOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * MobileBert Model transformer with a sequence classification/regression head on top (a linear layer on top of the pooled output)\n */\nexport class MobileBertForSequenceClassification extends MobileBertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * MobileBert Model with a span classification head on top for extractive question-answering tasks\n */\nexport class MobileBertForQuestionAnswering extends MobileBertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<QuestionAnsweringModelOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// MPNet models\nexport class MPNetPreTrainedModel extends PreTrainedModel { }\n\n/**\n * The bare MPNet Model transformer outputting raw hidden-states without any specific head on top.\n */\nexport class MPNetModel extends MPNetPreTrainedModel { }\n\n/**\n * MPNetForMaskedLM is a class representing a MPNet model for masked language modeling.\n */\nexport class MPNetForMaskedLM extends MPNetPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<MaskedLMOutput>} An object containing the model's output logits for masked language modeling.\n     */\n    async _call(model_inputs) {\n        return new MaskedLMOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * MPNetForSequenceClassification is a class representing a MPNet model for sequence classification.\n */\nexport class MPNetForSequenceClassification extends MPNetPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * MPNetForTokenClassification is a class representing a MPNet model for token classification.\n */\nexport class MPNetForTokenClassification extends MPNetPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.\n     */\n    async _call(model_inputs) {\n        return new TokenClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * MPNetForQuestionAnswering is a class representing a MPNet model for question answering.\n */\nexport class MPNetForQuestionAnswering extends MPNetPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<QuestionAnsweringModelOutput>} An object containing the model's output logits for question answering.\n     */\n    async _call(model_inputs) {\n        return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// SqueezeBert models\nexport class SqueezeBertPreTrainedModel extends PreTrainedModel { }\nexport class SqueezeBertModel extends SqueezeBertPreTrainedModel { }\nexport class SqueezeBertForMaskedLM extends SqueezeBertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<MaskedLMOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new MaskedLMOutput(await super._call(model_inputs));\n    }\n}\nexport class SqueezeBertForSequenceClassification extends SqueezeBertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\nexport class SqueezeBertForQuestionAnswering extends SqueezeBertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<QuestionAnsweringModelOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// Albert models\nexport class AlbertPreTrainedModel extends PreTrainedModel { }\nexport class AlbertModel extends AlbertPreTrainedModel { }\nexport class AlbertForSequenceClassification extends AlbertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\nexport class AlbertForQuestionAnswering extends AlbertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<QuestionAnsweringModelOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n    }\n}\nexport class AlbertForMaskedLM extends AlbertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<MaskedLMOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new MaskedLMOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// T5 models\nexport class T5PreTrainedModel extends PreTrainedModel {\n    forward_params = [\n        'input_ids',\n        'attention_mask',\n        'encoder_outputs',\n        'decoder_input_ids',\n        'decoder_attention_mask',\n        'past_key_values',\n    ];\n\n    /**\n     * Creates a new instance of the `T5PreTrainedModel` class.\n     * @param {Object} config The model configuration.\n     * @param {Record<string, any>} sessions The inference sessions for the model.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, sessions, generation_config) {\n        super(config, sessions);\n        this.generation_config = generation_config;\n    }\n};\n\nexport class T5Model extends T5PreTrainedModel { }\n\n/**\n * T5Model is a class representing a T5 model for conditional generation.\n */\nexport class T5ForConditionalGeneration extends T5PreTrainedModel { }\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// LONGT5 models\n/**\n * An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained models.\n */\nexport class LongT5PreTrainedModel extends PreTrainedModel {\n    /**\n     * Creates a new instance of the `LongT5ForConditionalGeneration` class.\n     * @param {Object} config The model configuration.\n     * @param {Record<string, any>} sessions The inference sessions for the model.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, sessions, generation_config) {\n        super(config, sessions);\n        this.generation_config = generation_config;\n    }\n};\n\n/**\n * The bare LONGT5 Model transformer outputting raw hidden-states without any specific head on top.\n */\nexport class LongT5Model extends LongT5PreTrainedModel { }\n\n/**\n * LONGT5 Model with a `language modeling` head on top.\n */\nexport class LongT5ForConditionalGeneration extends LongT5PreTrainedModel { }\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// MT5 models\nexport class MT5PreTrainedModel extends PreTrainedModel {\n\n    /**\n     * Creates a new instance of the `MT5ForConditionalGeneration` class.\n     * @param {Object} config The model configuration.\n     * @param {Record<string, any>} sessions The inference sessions for the model.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, sessions, generation_config) {\n        super(config, sessions);\n        this.generation_config = generation_config;\n    }\n};\n\nexport class MT5Model extends MT5PreTrainedModel { }\n\n/**\n * A class representing a conditional sequence-to-sequence model based on the MT5 architecture.\n */\nexport class MT5ForConditionalGeneration extends MT5PreTrainedModel { }\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// Bart models\nexport class BartPretrainedModel extends PreTrainedModel {\n\n    /**\n     * Creates a new instance of the `BartForConditionalGeneration` class.\n     * @param {Object} config The model configuration.\n     * @param {Record<string, any>} sessions The inference sessions for the model.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, sessions, generation_config) {\n        super(config, sessions);\n        this.generation_config = generation_config;\n    }\n};\n\n/**\n * The bare BART Model outputting raw hidden-states without any specific head on top.\n */\nexport class BartModel extends BartPretrainedModel { }\n\n/**\n * The BART Model with a language modeling head. Can be used for summarization.\n */\nexport class BartForConditionalGeneration extends BartPretrainedModel { }\n\n/**\n * Bart model with a sequence classification/head on top (a linear layer on top of the pooled output)\n */\nexport class BartForSequenceClassification extends BartPretrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// MBart models\nexport class MBartPreTrainedModel extends PreTrainedModel {\n\n    /**\n     * Creates a new instance of the `MBartForConditionalGeneration` class.\n     * @param {Object} config The model configuration.\n     * @param {Record<string, any>} sessions The inference sessions for the model.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, sessions, generation_config) {\n        super(config, sessions);\n        this.generation_config = generation_config;\n    }\n};\n\n/**\n * The bare MBART Model outputting raw hidden-states without any specific head on top.\n */\nexport class MBartModel extends MBartPreTrainedModel { }\n\n/**\n * The MBART Model with a language modeling head. Can be used for summarization, after fine-tuning the pretrained models.\n */\nexport class MBartForConditionalGeneration extends MBartPreTrainedModel { }\n\n/**\n * MBart model with a sequence classification/head on top (a linear layer on top of the pooled output).\n */\nexport class MBartForSequenceClassification extends MBartPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n\nexport class MBartForCausalLM extends MBartPreTrainedModel { }\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// Blenderbot models\nexport class BlenderbotPreTrainedModel extends PreTrainedModel {\n\n    /**\n     * Creates a new instance of the `BlenderbotForConditionalGeneration` class.\n     * @param {Object} config The model configuration.\n     * @param {Record<string, any>} sessions The inference sessions for the model.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, sessions, generation_config) {\n        super(config, sessions);\n        this.generation_config = generation_config;\n    }\n};\n\n/**\n * The bare Blenderbot Model outputting raw hidden-states without any specific head on top.\n */\nexport class BlenderbotModel extends BlenderbotPreTrainedModel { }\n\n/**\n * The Blenderbot Model with a language modeling head. Can be used for summarization.\n */\nexport class BlenderbotForConditionalGeneration extends BlenderbotPreTrainedModel { }\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// Blenderbot models\nexport class BlenderbotSmallPreTrainedModel extends PreTrainedModel {\n\n    /**\n     * Creates a new instance of the `BlenderbotForConditionalGeneration` class.\n     * @param {Object} config The model configuration.\n     * @param {Record<string, any>} sessions The inference sessions for the model.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, sessions, generation_config) {\n        super(config, sessions);\n        this.generation_config = generation_config;\n    }\n};\n\n/**\n * The bare BlenderbotSmall Model outputting raw hidden-states without any specific head on top.\n */\nexport class BlenderbotSmallModel extends BlenderbotSmallPreTrainedModel { }\n\n/**\n * The BlenderbotSmall Model with a language modeling head. Can be used for summarization.\n */\nexport class BlenderbotSmallForConditionalGeneration extends BlenderbotSmallPreTrainedModel { }\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// Roberta models\nexport class RobertaPreTrainedModel extends PreTrainedModel { }\nexport class RobertaModel extends RobertaPreTrainedModel { }\n\n/**\n * RobertaForMaskedLM class for performing masked language modeling on Roberta models.\n */\nexport class RobertaForMaskedLM extends RobertaPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<MaskedLMOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new MaskedLMOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * RobertaForSequenceClassification class for performing sequence classification on Roberta models.\n */\nexport class RobertaForSequenceClassification extends RobertaPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * RobertaForTokenClassification class for performing token classification on Roberta models.\n */\nexport class RobertaForTokenClassification extends RobertaPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.\n     */\n    async _call(model_inputs) {\n        return new TokenClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * RobertaForQuestionAnswering class for performing question answering on Roberta models.\n */\nexport class RobertaForQuestionAnswering extends RobertaPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<QuestionAnsweringModelOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// XLM models\n/**\n * An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained models.\n */\nexport class XLMPreTrainedModel extends PreTrainedModel { }\n\n/**\n * The bare XLM Model transformer outputting raw hidden-states without any specific head on top.\n */\nexport class XLMModel extends XLMPreTrainedModel { }\n\n/**\n * The XLM Model transformer with a language modeling head on top (linear layer with weights tied to the input embeddings).\n */\nexport class XLMWithLMHeadModel extends XLMPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<MaskedLMOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new MaskedLMOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * XLM Model with a sequence classification/regression head on top (a linear layer on top of the pooled output)\n */\nexport class XLMForSequenceClassification extends XLMPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * XLM Model with a token classification head on top (a linear layer on top of the hidden-states output)\n */\nexport class XLMForTokenClassification extends XLMPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.\n     */\n    async _call(model_inputs) {\n        return new TokenClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * XLM Model with a span classification head on top for extractive question-answering tasks\n */\nexport class XLMForQuestionAnswering extends XLMPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<QuestionAnsweringModelOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// XLMRoberta models\nexport class XLMRobertaPreTrainedModel extends PreTrainedModel { }\nexport class XLMRobertaModel extends XLMRobertaPreTrainedModel { }\n\n/**\n * XLMRobertaForMaskedLM class for performing masked language modeling on XLMRoberta models.\n */\nexport class XLMRobertaForMaskedLM extends XLMRobertaPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<MaskedLMOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new MaskedLMOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * XLMRobertaForSequenceClassification class for performing sequence classification on XLMRoberta models.\n */\nexport class XLMRobertaForSequenceClassification extends XLMRobertaPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * XLMRobertaForTokenClassification class for performing token classification on XLMRoberta models.\n */\nexport class XLMRobertaForTokenClassification extends XLMRobertaPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for token classification.\n     */\n    async _call(model_inputs) {\n        return new TokenClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * XLMRobertaForQuestionAnswering class for performing question answering on XLMRoberta models.\n */\nexport class XLMRobertaForQuestionAnswering extends XLMRobertaPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     *\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<QuestionAnsweringModelOutput>} returned object\n     */\n    async _call(model_inputs) {\n        return new QuestionAnsweringModelOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// Audio Spectrogram Transformer (AST) models\nexport class ASTPreTrainedModel extends PreTrainedModel { };\n\n/**\n * The bare AST Model transformer outputting raw hidden-states without any specific head on top.\n */\nexport class ASTModel extends ASTPreTrainedModel { }\n\n/**\n * Audio Spectrogram Transformer model with an audio classification head on top\n * (a linear layer on top of the pooled output) e.g. for datasets like AudioSet, Speech Commands v2.\n */\nexport class ASTForAudioClassification extends ASTPreTrainedModel { }\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// Whisper models\nexport class WhisperPreTrainedModel extends PreTrainedModel {\n\n    requires_attention_mask = false;\n    main_input_name = 'input_features';\n    forward_params = [\n        'input_features',\n        'attention_mask',\n        'decoder_input_ids',\n        'decoder_attention_mask',\n        'past_key_values',\n    ];\n\n    /**\n     * Creates a new instance of the `WhisperPreTrainedModel` class.\n     * @param {Object} config The model configuration.\n     * @param {Record<string, any>} sessions The inference sessions for the model.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, sessions, generation_config) {\n        super(config, sessions);\n        this.generation_config = generation_config;\n    }\n};\n\n/**\n * WhisperModel class for training Whisper models without a language model head.\n */\nexport class WhisperModel extends WhisperPreTrainedModel { }\n\n\n/**\n * WhisperForConditionalGeneration class for generating conditional outputs from Whisper models.\n */\nexport class WhisperForConditionalGeneration extends WhisperPreTrainedModel {\n\n    _prepare_generation_config(generation_config, kwargs) {\n        return /** @type {WhisperGenerationConfig} */ (super._prepare_generation_config(generation_config, kwargs, WhisperGenerationConfig));\n    }\n\n    /**\n     * \n     * @param {WhisperGenerationConfig} generation_config \n     */\n    _retrieve_init_tokens(generation_config) {\n        // prefix tokens are of the form: \n        //  - Multilingual: <|startoftranscript|> <|lang_id|> <|task|> [<|notimestamps|>]\n        //  - English-only: <|startoftranscript|> [<|notimestamps|>]\n\n        // 1. Handle <|startoftranscript|> token\n        const init_tokens = [generation_config.decoder_start_token_id];\n\n        // 2. Handle <|lang_id|> and <|task> tokens\n        let language = generation_config.language;\n        const task = generation_config.task;\n        if (generation_config.is_multilingual) {\n            if (!language) {\n                // TODO: Implement language detection\n                console.warn('No language specified - defaulting to English (en).');\n                language = 'en';\n            }\n\n            // Add language token\n            const language_code = whisper_language_to_code(language);\n            const language_token = `<|${language_code}|>`;\n            init_tokens.push(generation_config.lang_to_id[language_token])\n\n            // Add task token\n            // NOTE: Defaults to 'transcribe' if no task is specified\n            init_tokens.push(generation_config.task_to_id[task ?? 'transcribe']);\n\n        } else if (language || task) {\n            throw new Error(\n                \"Cannot specify `task` or `language` for an English-only model. If the model is intended to be multilingual, pass `is_multilingual=true` to generate, or update the generation config.\"\n            )\n        }\n\n        // 3. Handle <|notimestamps|> token\n        if (\n            !generation_config.return_timestamps\n            && generation_config.no_timestamps_token_id\n            && init_tokens.at(-1) !== generation_config.no_timestamps_token_id\n        ) {\n            init_tokens.push(generation_config.no_timestamps_token_id);\n        } else if (\n            generation_config.return_timestamps\n            &&\n            init_tokens.at(-1) === generation_config.no_timestamps_token_id\n        ) {\n            console.warn(\"<|notimestamps|> prompt token is removed from generation_config since `return_timestamps` is set to `true`.\");\n            init_tokens.pop();\n        }\n\n        // let's make sure we don't pass `null` tokens as prompt tokens\n        return init_tokens.filter(token => token != null);\n    }\n\n    /**\n     * Transcribes or translates log-mel input features to a sequence of auto-regressively generated token ids.\n     * @param {import('./models/whisper/generation_whisper.js').WhisperGenerationFunctionParameters} options\n     * @returns {Promise<ModelOutput|Tensor>} The output of the model, which can contain the generated token ids, attentions, and scores.\n     */\n    async generate({\n        inputs = null,\n        generation_config = null,\n        logits_processor = null,\n        stopping_criteria = null,\n\n        // Whisper-specific options (passed to kwargs)\n        // prompt_ids = null,\n        // language = null,\n        // task = null,\n\n        ...kwargs\n    }) {\n        generation_config = this._prepare_generation_config(generation_config, kwargs);\n\n        const init_tokens = kwargs.decoder_input_ids ?? this._retrieve_init_tokens(generation_config);\n\n        if (generation_config.return_timestamps) {\n            logits_processor ??= new LogitsProcessorList();\n            logits_processor.push(\n                new WhisperTimeStampLogitsProcessor(generation_config, init_tokens)\n            );\n        }\n\n        if (generation_config.begin_suppress_tokens) {\n            logits_processor ??= new LogitsProcessorList();\n            logits_processor.push(\n                new SuppressTokensAtBeginLogitsProcessor(generation_config.begin_suppress_tokens, init_tokens.length)\n            );\n        }\n\n        if (generation_config.return_token_timestamps) {\n            if (!generation_config.alignment_heads) {\n                throw new Error(\n                    \"Model generation config has no `alignment_heads`, token-level timestamps not available. \" +\n                    \"See https://gist.github.com/hollance/42e32852f24243b748ae6bc1f985b13a on how to add this property to the generation config.\"\n                )\n            }\n\n            if (generation_config.task === 'translate') {\n                console.warn(\"Token-level timestamps may not be reliable for task 'translate'.\")\n            }\n\n            generation_config.output_attentions = true;\n            generation_config.return_dict_in_generate = true;\n        }\n\n        const outputs = await super.generate({\n            inputs,\n            generation_config,\n            logits_processor,\n            decoder_input_ids: init_tokens,\n            ...kwargs\n        });\n\n        if (generation_config.return_token_timestamps) {\n            outputs[\"token_timestamps\"] = this._extract_token_timestamps(\n                outputs,\n                generation_config.alignment_heads,\n                generation_config.num_frames,\n            );\n        }\n\n        return outputs;\n    }\n\n    /**\n     * Calculates token-level timestamps using the encoder-decoder cross-attentions and\n     * dynamic time-warping (DTW) to map each output token to a position in the input audio.\n     * If `num_frames` is specified, the encoder-decoder cross-attentions will be cropped before applying DTW.\n     * @param {Object} generate_outputs Outputs generated by the model\n     * @param {Tensor[][]} generate_outputs.cross_attentions The cross attentions output by the model\n     * @param {Tensor} generate_outputs.sequences The sequences output by the model\n     * @param {number[][]} alignment_heads Alignment heads of the model\n     * @param {number} [num_frames=null] Number of frames in the input audio.\n     * @param {number} [time_precision=0.02] Precision of the timestamps in seconds\n     * @returns {Tensor} tensor containing the timestamps in seconds for each predicted token\n     */\n    _extract_token_timestamps(generate_outputs, alignment_heads, num_frames = null, time_precision = 0.02) {\n        if (!generate_outputs.cross_attentions) {\n            throw new Error(\n                \"Model outputs must contain cross attentions to extract timestamps. \" +\n                \"This is most likely because the model was not exported with `output_attentions=True`.\"\n            )\n        }\n        if (num_frames == null) {\n            console.warn(\n                \"`num_frames` has not been set, meaning the entire audio will be analyzed. \" +\n                \"This may lead to inaccurate token-level timestamps for short audios (< 30 seconds).\"\n            );\n        }\n\n        let median_filter_width = this.config.median_filter_width;\n        if (median_filter_width === undefined) {\n            console.warn(\"Model config has no `median_filter_width`, using default value of 7.\")\n            median_filter_width = 7;\n        }\n\n        // TODO: Improve batch processing\n        const batch = generate_outputs.cross_attentions;\n        // Create a list with `decoder_layers` elements, each a tensor of shape\n        // (batch size, attention_heads, output length, input length).\n        const cross_attentions = Array.from({ length: this.config.decoder_layers },\n            // Concatenate the cross attentions for each layer across sequence length dimension.\n            (_, i) => cat(batch.map(x => x[i]), 2)\n        );\n\n        const weights = stack(alignment_heads.map(([l, h]) => {\n            if (l >= cross_attentions.length) {\n                throw new Error(`Layer index ${l} is out of bounds for cross attentions (length ${cross_attentions.length}).`)\n            }\n            return num_frames\n                ? cross_attentions[l].slice(null, h, null, [0, num_frames])\n                : cross_attentions[l].slice(null, h);\n        })).transpose(1, 0, 2, 3);\n\n        const [std, calculatedMean] = std_mean(weights, -2, 0, true);\n\n        // Normalize and smoothen the weights.\n        const smoothedWeights = weights.clone(); // [1, 8, seqLength, 1500]\n\n        for (let a = 0; a < smoothedWeights.dims[0]; ++a) {\n            const aTensor = smoothedWeights[a]; // [8, seqLength, 1500]\n\n            for (let b = 0; b < aTensor.dims[0]; ++b) {\n                const bTensor = aTensor[b]; // [seqLength, 1500]\n\n                const stdTensorData = std[a][b][0].data; // [1500]\n                const meanTensorData = calculatedMean[a][b][0].data; // [1500]\n\n                for (let c = 0; c < bTensor.dims[0]; ++c) {\n\n                    let cTensorData = bTensor[c].data; // [1500]\n                    for (let d = 0; d < cTensorData.length; ++d) {\n                        cTensorData[d] = (cTensorData[d] - meanTensorData[d]) / stdTensorData[d]\n                    }\n\n                    // Apply median filter.\n                    cTensorData.set(medianFilter(cTensorData, median_filter_width))\n                }\n            }\n        }\n\n        // Average the different cross-attention heads.\n        const batchedMatrices = [mean(smoothedWeights, 1)];\n\n        const timestampsShape = generate_outputs.sequences.dims;\n\n        const timestamps = new Tensor(\n            'float32',\n            new Float32Array(timestampsShape[0] * timestampsShape[1]),\n            timestampsShape\n        );\n\n        // Perform dynamic time warping on each element of the batch.\n        for (let batch_idx = 0; batch_idx < timestampsShape[0]; ++batch_idx) {\n            // NOTE: Since we run only one batch at a time, we can squeeze to get the same dimensions\n            // as the python implementation\n            const matrix = batchedMatrices[batch_idx].neg().squeeze_(0);\n            const [text_indices, time_indices] = dynamic_time_warping(matrix.tolist());\n\n            const diffs = Array.from({ length: text_indices.length - 1 }, (v, i) => text_indices[i + 1] - text_indices[i]);\n            const jumps = mergeArrays([1], diffs).map(x => !!x); // convert to boolean\n\n            const jump_times = [];\n            for (let i = 0; i < jumps.length; ++i) {\n                if (jumps[i]) {\n                    // NOTE: No point in rounding here, since we set to Float32Array later\n                    jump_times.push(time_indices[i] * time_precision);\n                }\n            }\n            timestamps[batch_idx].data.set(jump_times, 1)\n        }\n\n        return timestamps;\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n/**\n * Vision Encoder-Decoder model based on OpenAI's GPT architecture for image captioning and other vision tasks\n */\nexport class VisionEncoderDecoderModel extends PreTrainedModel {\n    main_input_name = 'pixel_values';\n    forward_params = [\n        'pixel_values',\n        'input_ids',\n        'encoder_hidden_states',\n        'past_key_values',\n    ];\n    /**\n     * Creates a new instance of the `VisionEncoderDecoderModel` class.\n     * @param {Object} config The model configuration.\n     * @param {Record<string, any>} sessions The inference sessions for the model.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, sessions, generation_config) {\n        super(config, sessions);\n        this.generation_config = generation_config;\n    }\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// LLaVa Models\nexport class LlavaPreTrainedModel extends PreTrainedModel {\n    forward_params = [\n        'input_ids',\n        'pixel_values',\n        'attention_mask',\n        'position_ids',\n        'past_key_values',\n    ];\n\n    constructor(config, sessions, generation_config) {\n        super(config, sessions);\n        this.generation_config = generation_config;\n    }\n}\n\n/**\n * The LLAVA model which consists of a vision backbone and a language model.\n */\nexport class LlavaForConditionalGeneration extends LlavaPreTrainedModel {\n\n    _merge_input_ids_with_image_features({\n        inputs_embeds,\n        image_features,\n        input_ids,\n        attention_mask,\n    }) {\n\n        const image_token_index = this.config.image_token_index;\n\n        const idsList = input_ids.tolist();\n\n        // NOTE: we use .findIndex instead of .indexOf to perform weak comparison (==) between BigInt and Number\n        const indexOfImage = idsList.map(x => x.findIndex(x => x == image_token_index));\n\n        const noImages = indexOfImage.every(x => x === -1);\n        const allImages = indexOfImage.every(x => x !== -1);\n        if (!noImages && !allImages) {\n            // Check for padding reasons\n            throw new Error('Every input should contain either 0 or 1 image token.');\n        }\n\n        if (noImages) {\n            return {\n                inputs_embeds,\n                attention_mask,\n            }\n        }\n\n        const stacked = [];\n        const stacked_attention_mask = [];\n        for (let i = 0; i < indexOfImage.length; ++i) {\n            const index = indexOfImage[i];\n\n            const e = inputs_embeds[i];\n            const im = image_features[i];\n            const am = attention_mask[i];\n            stacked.push(\n                cat([\n                    e.slice([0, index]),\n                    im,\n                    e.slice([index + 1, e.dims[0]]),\n                ], 0)\n            );\n\n            stacked_attention_mask.push(\n                cat([\n                    am.slice([0, index]),\n                    ones([im.dims[0]]),\n                    am.slice([index + 1, am.dims[0]])\n                ], 0)\n            )\n        }\n\n        return {\n            inputs_embeds: stack(stacked, 0),\n            attention_mask: stack(stacked_attention_mask, 0),\n        }\n    }\n}\n//////////////////////////////////////////////////\n\nexport class Moondream1ForConditionalGeneration extends LlavaForConditionalGeneration { } // NOTE: extends LlavaForConditionalGeneration\n\nexport class Florence2PreTrainedModel extends PreTrainedModel {\n    forward_params = [\n        // Encoder inputs\n        'input_ids',\n        'inputs_embeds',\n        'attention_mask',\n        'pixel_values',\n\n        // Decoder inputs\n        'encoder_outputs',\n        'decoder_input_ids',\n        'decoder_inputs_embeds',\n        'decoder_attention_mask',\n        'past_key_values',\n    ];\n    main_input_name = 'inputs_embeds';\n\n    constructor(config, sessions, generation_config) {\n        super(config, sessions);\n        this.generation_config = generation_config;\n    }\n}\n\nexport class Florence2ForConditionalGeneration extends Florence2PreTrainedModel {\n\n    _merge_input_ids_with_image_features({\n        inputs_embeds,\n        image_features,\n        input_ids,\n        attention_mask,\n    }) {\n        return {\n            inputs_embeds: cat([\n                image_features, // image embeds\n                inputs_embeds, // task prefix embeds\n            ], 1),\n            attention_mask: cat([\n                ones(image_features.dims.slice(0, 2)), // image attention mask\n                attention_mask, // task prefix attention mask\n            ], 1),\n        }\n    }\n\n    async _prepare_inputs_embeds({ input_ids, pixel_values, inputs_embeds, attention_mask }) {\n        if (!input_ids && !pixel_values) {\n            throw new Error('Either `input_ids` or `pixel_values` should be provided.');\n        }\n\n        // 1. Possibly, extract the input embeddings\n        let text_features, image_features;\n        if (input_ids) {\n            text_features = await this.encode_text({ input_ids });\n        }\n        if (pixel_values) {\n            image_features = await this.encode_image({ pixel_values });\n        }\n\n        // 2. Possibly, merge text and images\n        if (text_features && image_features) {\n            ({ inputs_embeds, attention_mask } = this._merge_input_ids_with_image_features({\n                inputs_embeds: text_features,\n                image_features,\n                input_ids,\n                attention_mask,\n            }));\n        } else {\n            inputs_embeds = text_features || image_features;\n        }\n\n        return { inputs_embeds, attention_mask };\n    }\n\n    async forward({\n        input_ids,\n        pixel_values,\n        attention_mask,\n        decoder_input_ids,\n        decoder_attention_mask,\n        encoder_outputs,\n        past_key_values,\n\n        inputs_embeds,\n        decoder_inputs_embeds,\n    }) {\n        if (!inputs_embeds) {\n            ({ inputs_embeds, attention_mask } = await this._prepare_inputs_embeds({ input_ids, pixel_values, inputs_embeds, attention_mask }));\n        }\n\n        if (!encoder_outputs) {\n            // Must compute encoder outputs\n            let { last_hidden_state } = await encoderForward(this, { inputs_embeds, attention_mask });\n            encoder_outputs = last_hidden_state;\n        }\n\n        if (!decoder_inputs_embeds) {\n            if (!decoder_input_ids) {\n                throw new Error('Either `decoder_input_ids` or `decoder_inputs_embeds` should be provided.');\n            }\n            decoder_inputs_embeds = await this.encode_text({ input_ids: decoder_input_ids });\n        }\n\n        const decoderFeeds = {\n            inputs_embeds: decoder_inputs_embeds,\n            attention_mask: decoder_attention_mask,\n            encoder_attention_mask: attention_mask,\n            encoder_hidden_states: encoder_outputs,\n            past_key_values,\n        };\n        const decoder_outputs = await decoderForward(this, decoderFeeds, true);\n        return decoder_outputs;\n    }\n}\nexport class CLIPPreTrainedModel extends PreTrainedModel { }\n\n/**\n * CLIP Text and Vision Model with a projection layers on top\n * \n * **Example:** Perform zero-shot image classification with a `CLIPModel`.\n * \n * ```javascript\n * import { AutoTokenizer, AutoProcessor, CLIPModel, RawImage } from '@huggingface/transformers';\n * \n * // Load tokenizer, processor, and model\n * let tokenizer = await AutoTokenizer.from_pretrained('Xenova/clip-vit-base-patch16');\n * let processor = await AutoProcessor.from_pretrained('Xenova/clip-vit-base-patch16');\n * let model = await CLIPModel.from_pretrained('Xenova/clip-vit-base-patch16');\n * \n * // Run tokenization\n * let texts = ['a photo of a car', 'a photo of a football match']\n * let text_inputs = tokenizer(texts, { padding: true, truncation: true });\n * \n * // Read image and run processor\n * let image = await RawImage.read('https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/football-match.jpg');\n * let image_inputs = await processor(image);\n * \n * // Run model with both text and pixel inputs\n * let output = await model({ ...text_inputs, ...image_inputs });\n * // {\n * //   logits_per_image: Tensor {\n * //     dims: [ 1, 2 ],\n * //     data: Float32Array(2) [ 18.579734802246094, 24.31830596923828 ],\n * //   },\n * //   logits_per_text: Tensor {\n * //     dims: [ 2, 1 ],\n * //     data: Float32Array(2) [ 18.579734802246094, 24.31830596923828 ],\n * //   },\n * //   text_embeds: Tensor {\n * //     dims: [ 2, 512 ],\n * //     data: Float32Array(1024) [ ... ],\n * //   },\n * //   image_embeds: Tensor {\n * //     dims: [ 1, 512 ],\n * //     data: Float32Array(512) [ ... ],\n * //   }\n * // }\n * ```\n */\nexport class CLIPModel extends CLIPPreTrainedModel { }\n\n/**\n * CLIP Text Model with a projection layer on top (a linear layer on top of the pooled output)\n * \n * **Example:** Compute text embeddings with `CLIPTextModelWithProjection`.\n * \n * ```javascript\n * import { AutoTokenizer, CLIPTextModelWithProjection } from '@huggingface/transformers';\n * \n * // Load tokenizer and text model\n * const tokenizer = await AutoTokenizer.from_pretrained('Xenova/clip-vit-base-patch16');\n * const text_model = await CLIPTextModelWithProjection.from_pretrained('Xenova/clip-vit-base-patch16');\n * \n * // Run tokenization\n * let texts = ['a photo of a car', 'a photo of a football match'];\n * let text_inputs = tokenizer(texts, { padding: true, truncation: true });\n * \n * // Compute embeddings\n * const { text_embeds } = await text_model(text_inputs);\n * // Tensor {\n * //   dims: [ 2, 512 ],\n * //   type: 'float32',\n * //   data: Float32Array(1024) [ ... ],\n * //   size: 1024\n * // }\n * ```\n */\nexport class CLIPTextModelWithProjection extends CLIPPreTrainedModel {\n\n    /** @type {PreTrainedModel.from_pretrained} */\n    static async from_pretrained(pretrained_model_name_or_path, options = {}) {\n        // Update default model file name if not provided\n        options.model_file_name ??= 'text_model';\n        return super.from_pretrained(pretrained_model_name_or_path, options);\n    }\n}\n\n/**\n * CLIP Vision Model with a projection layer on top (a linear layer on top of the pooled output)\n * \n * **Example:** Compute vision embeddings with `CLIPVisionModelWithProjection`.\n * \n * ```javascript\n * import { AutoProcessor, CLIPVisionModelWithProjection, RawImage} from '@huggingface/transformers';\n * \n * // Load processor and vision model\n * const processor = await AutoProcessor.from_pretrained('Xenova/clip-vit-base-patch16');\n * const vision_model = await CLIPVisionModelWithProjection.from_pretrained('Xenova/clip-vit-base-patch16');\n * \n * // Read image and run processor\n * let image = await RawImage.read('https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/football-match.jpg');\n * let image_inputs = await processor(image);\n * \n * // Compute embeddings\n * const { image_embeds } = await vision_model(image_inputs);\n * // Tensor {\n * //   dims: [ 1, 512 ],\n * //   type: 'float32',\n * //   data: Float32Array(512) [ ... ],\n * //   size: 512\n * // }\n * ```\n */\nexport class CLIPVisionModelWithProjection extends CLIPPreTrainedModel {\n    /** @type {PreTrainedModel.from_pretrained} */\n    static async from_pretrained(pretrained_model_name_or_path, options = {}) {\n        // Update default model file name if not provided\n        options.model_file_name ??= 'vision_model';\n        return super.from_pretrained(pretrained_model_name_or_path, options);\n    }\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// SigLIP models\nexport class SiglipPreTrainedModel extends PreTrainedModel { }\n\n/**\n * SigLIP Text and Vision Model with a projection layers on top\n * \n * **Example:** Perform zero-shot image classification with a `SiglipModel`.\n * \n * ```javascript\n * import { AutoTokenizer, AutoProcessor, SiglipModel, RawImage } from '@huggingface/transformers';\n * \n * // Load tokenizer, processor, and model\n * const tokenizer = await AutoTokenizer.from_pretrained('Xenova/siglip-base-patch16-224');\n * const processor = await AutoProcessor.from_pretrained('Xenova/siglip-base-patch16-224');\n * const model = await SiglipModel.from_pretrained('Xenova/siglip-base-patch16-224');\n * \n * // Run tokenization\n * const texts = ['a photo of 2 cats', 'a photo of 2 dogs'];\n * const text_inputs = tokenizer(texts, { padding: 'max_length', truncation: true });\n * \n * // Read image and run processor\n * const image = await RawImage.read('http://images.cocodataset.org/val2017/000000039769.jpg');\n * const image_inputs = await processor(image);\n * \n * // Run model with both text and pixel inputs\n * const output = await model({ ...text_inputs, ...image_inputs });\n * // {\n * //   logits_per_image: Tensor {\n * //     dims: [ 1, 2 ],\n * //     data: Float32Array(2) [ -1.6019744873046875, -10.720091819763184 ],\n * //   },\n * //   logits_per_text: Tensor {\n * //     dims: [ 2, 1 ],\n * //     data: Float32Array(2) [ -1.6019744873046875, -10.720091819763184 ],\n * //   },\n * //   text_embeds: Tensor {\n * //     dims: [ 2, 768 ],\n * //     data: Float32Array(1536) [ ... ],\n * //   },\n * //   image_embeds: Tensor {\n * //     dims: [ 1, 768 ],\n * //     data: Float32Array(768) [ ... ],\n * //   }\n * // }\n * ```\n */\nexport class SiglipModel extends SiglipPreTrainedModel { }\n\n/**\n * The text model from SigLIP without any head or projection on top.\n * \n * **Example:** Compute text embeddings with `SiglipTextModel`.\n * \n * ```javascript\n * import { AutoTokenizer, SiglipTextModel } from '@huggingface/transformers';\n * \n * // Load tokenizer and text model\n * const tokenizer = await AutoTokenizer.from_pretrained('Xenova/siglip-base-patch16-224');\n * const text_model = await SiglipTextModel.from_pretrained('Xenova/siglip-base-patch16-224');\n * \n * // Run tokenization\n * const texts = ['a photo of 2 cats', 'a photo of 2 dogs'];\n * const text_inputs = tokenizer(texts, { padding: 'max_length', truncation: true });\n * \n * // Compute embeddings\n * const { pooler_output } = await text_model(text_inputs);\n * // Tensor {\n * //   dims: [ 2, 768 ],\n * //   type: 'float32',\n * //   data: Float32Array(1536) [ ... ],\n * //   size: 1536\n * // }\n * ```\n */\nexport class SiglipTextModel extends SiglipPreTrainedModel {\n\n    /** @type {PreTrainedModel.from_pretrained} */\n    static async from_pretrained(pretrained_model_name_or_path, options = {}) {\n        // Update default model file name if not provided\n        options.model_file_name ??= 'text_model';\n        return super.from_pretrained(pretrained_model_name_or_path, options);\n    }\n}\n\n/**\n * The vision model from SigLIP without any head or projection on top.\n * \n * **Example:** Compute vision embeddings with `SiglipVisionModel`.\n * \n * ```javascript\n * import { AutoProcessor, SiglipVisionModel, RawImage} from '@huggingface/transformers';\n * \n * // Load processor and vision model\n * const processor = await AutoProcessor.from_pretrained('Xenova/siglip-base-patch16-224');\n * const vision_model = await SiglipVisionModel.from_pretrained('Xenova/siglip-base-patch16-224');\n * \n * // Read image and run processor\n * const image = await RawImage.read('https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/football-match.jpg');\n * const image_inputs = await processor(image);\n * \n * // Compute embeddings\n * const { pooler_output } = await vision_model(image_inputs);\n * // Tensor {\n * //   dims: [ 1, 768 ],\n * //   type: 'float32',\n * //   data: Float32Array(768) [ ... ],\n * //   size: 768\n * // }\n * ```\n */\nexport class SiglipVisionModel extends CLIPPreTrainedModel {\n    /** @type {PreTrainedModel.from_pretrained} */\n    static async from_pretrained(pretrained_model_name_or_path, options = {}) {\n        // Update default model file name if not provided\n        options.model_file_name ??= 'vision_model';\n        return super.from_pretrained(pretrained_model_name_or_path, options);\n    }\n}\n//////////////////////////////////////////////////\n// ChineseCLIP models\nexport class ChineseCLIPPreTrainedModel extends PreTrainedModel { }\n\nexport class ChineseCLIPModel extends ChineseCLIPPreTrainedModel { }\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// CLIPSeg models\nexport class CLIPSegPreTrainedModel extends PreTrainedModel { }\n\nexport class CLIPSegModel extends CLIPSegPreTrainedModel { }\n\n/**\n * CLIPSeg model with a Transformer-based decoder on top for zero-shot and one-shot image segmentation.\n * \n * **Example:** Perform zero-shot image segmentation with a `CLIPSegForImageSegmentation` model.\n * \n * ```javascript\n * import { AutoTokenizer, AutoProcessor, CLIPSegForImageSegmentation, RawImage } from '@huggingface/transformers';\n * \n * // Load tokenizer, processor, and model\n * const tokenizer = await AutoTokenizer.from_pretrained('Xenova/clipseg-rd64-refined');\n * const processor = await AutoProcessor.from_pretrained('Xenova/clipseg-rd64-refined');\n * const model = await CLIPSegForImageSegmentation.from_pretrained('Xenova/clipseg-rd64-refined');\n * \n * // Run tokenization\n * const texts = ['a glass', 'something to fill', 'wood', 'a jar'];\n * const text_inputs = tokenizer(texts, { padding: true, truncation: true });\n * \n * // Read image and run processor\n * const image = await RawImage.read('https://github.com/timojl/clipseg/blob/master/example_image.jpg?raw=true');\n * const image_inputs = await processor(image);\n * \n * // Run model with both text and pixel inputs\n * const { logits } = await model({ ...text_inputs, ...image_inputs });\n * // logits: Tensor {\n * //   dims: [4, 352, 352],\n * //   type: 'float32',\n * //   data: Float32Array(495616) [ ... ],\n * //   size: 495616\n * // }\n * ```\n * \n * You can visualize the predictions as follows:\n * ```javascript\n * const preds = logits\n *   .unsqueeze_(1)\n *   .sigmoid_()\n *   .mul_(255)\n *   .round_()\n *   .to('uint8');\n * \n * for (let i = 0; i < preds.dims[0]; ++i) {\n *   const img = RawImage.fromTensor(preds[i]);\n *   img.save(`prediction_${i}.png`);\n * }\n * ```\n */\nexport class CLIPSegForImageSegmentation extends CLIPSegPreTrainedModel { }\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// GPT2 models\nexport class GPT2PreTrainedModel extends PreTrainedModel {\n    /**\n     * Creates a new instance of the `GPT2PreTrainedModel` class.\n     * @param {Object} config The model configuration.\n     * @param {Record<string, any>} sessions The inference sessions for the model.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, sessions, generation_config) {\n        super(config, sessions);\n        this.generation_config = generation_config;\n    }\n}\n\nexport class GPT2Model extends GPT2PreTrainedModel { }\n\n/**\n * GPT-2 language model head on top of the GPT-2 base model. This model is suitable for text generation tasks.\n */\nexport class GPT2LMHeadModel extends GPT2PreTrainedModel { }\n// export class GPT2ForSequenceClassification extends GPT2PreTrainedModel {\n// TODO\n// }\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// GPTNeo models\nexport class GPTNeoPreTrainedModel extends PreTrainedModel {\n    /**\n     * Creates a new instance of the `GPTNeoPreTrainedModel` class.\n     * @param {Object} config The model configuration.\n     * @param {Record<string, any>} sessions The inference sessions for the model.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, sessions, generation_config) {\n        super(config, sessions);\n        this.generation_config = generation_config;\n    }\n}\nexport class GPTNeoModel extends GPTNeoPreTrainedModel { }\n\nexport class GPTNeoForCausalLM extends GPTNeoPreTrainedModel { }\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// GPTNeoX models\nexport class GPTNeoXPreTrainedModel extends PreTrainedModel {\n    /**\n     * Creates a new instance of the `GPTNeoXPreTrainedModel` class.\n     * @param {Object} config The model configuration.\n     * @param {Record<string, any>} sessions The inference sessions for the model.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, sessions, generation_config) {\n        super(config, sessions);\n        this.generation_config = generation_config;\n    }\n}\nexport class GPTNeoXModel extends GPTNeoXPreTrainedModel { }\n\nexport class GPTNeoXForCausalLM extends GPTNeoXPreTrainedModel { }\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// GPT-J models\nexport class GPTJPreTrainedModel extends PreTrainedModel {\n    /**\n     * Creates a new instance of the `GPTJPreTrainedModel` class.\n     * @param {Object} config The model configuration.\n     * @param {Record<string, any>} sessions The inference sessions for the model.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, sessions, generation_config) {\n        super(config, sessions);\n        this.generation_config = generation_config;\n    }\n}\n\nexport class GPTJModel extends GPTJPreTrainedModel { }\n\nexport class GPTJForCausalLM extends GPTJPreTrainedModel { }\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// GPTBigCode models\nexport class GPTBigCodePreTrainedModel extends PreTrainedModel {\n    /**\n     * Creates a new instance of the `GPTBigCodePreTrainedModel` class.\n     * @param {Object} config The model configuration.\n     * @param {Record<string, any>} sessions The inference sessions for the model.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, sessions, generation_config) {\n        super(config, sessions);\n        this.generation_config = generation_config;\n    }\n}\n\nexport class GPTBigCodeModel extends GPTBigCodePreTrainedModel { }\n\nexport class GPTBigCodeForCausalLM extends GPTBigCodePreTrainedModel { }\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// CodeGen models\nexport class CodeGenPreTrainedModel extends PreTrainedModel {\n    /**\n     * Creates a new instance of the `CodeGenPreTrainedModel` class.\n     * @param {Object} config The model configuration.\n     * @param {Record<string, any>} sessions The inference sessions for the model.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, sessions, generation_config) {\n        super(config, sessions);\n        this.generation_config = generation_config;\n    }\n}\n/**\n * CodeGenModel is a class representing a code generation model without a language model head.\n */\nexport class CodeGenModel extends CodeGenPreTrainedModel { }\n\n/**\n * CodeGenForCausalLM is a class that represents a code generation model based on the GPT-2 architecture. It extends the `CodeGenPreTrainedModel` class.\n */\nexport class CodeGenForCausalLM extends CodeGenPreTrainedModel { }\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// LLama models\n\n/**\n * The bare LLama Model outputting raw hidden-states without any specific head on top.\n */\nexport class LlamaPreTrainedModel extends PreTrainedModel {\n    /**\n     * Creates a new instance of the `LlamaPreTrainedModel` class.\n     * @param {Object} config The model configuration.\n     * @param {Record<string, any>} sessions The inference sessions for the model.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, sessions, generation_config) {\n        super(config, sessions);\n        this.generation_config = generation_config;\n    }\n}\n/**\n * The bare LLaMA Model outputting raw hidden-states without any specific head on top.\n */\nexport class LlamaModel extends LlamaPreTrainedModel { }\n\nexport class LlamaForCausalLM extends LlamaPreTrainedModel { }\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// Cohere models\n\n/**\n * The bare Cohere Model outputting raw hidden-states without any specific head on top.\n */\nexport class CoherePreTrainedModel extends PreTrainedModel {\n    /**\n     * Creates a new instance of the `CoherePreTrainedModel` class.\n     * @param {Object} config The model configuration.\n     * @param {Record<string, any>} sessions The inference sessions for the model.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, sessions, generation_config) {\n        super(config, sessions);\n        this.generation_config = generation_config;\n    }\n}\nexport class CohereModel extends CoherePreTrainedModel { }\n\nexport class CohereForCausalLM extends CoherePreTrainedModel { }\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// Gemma models\n\n/**\n * The bare Gemma Model outputting raw hidden-states without any specific head on top.\n */\nexport class GemmaPreTrainedModel extends PreTrainedModel {\n    /**\n     * Creates a new instance of the `GemmaPreTrainedModel` class.\n     * @param {Object} config The model configuration.\n     * @param {Record<string, any>} sessions The inference sessions for the model.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, sessions, generation_config) {\n        super(config, sessions);\n        this.generation_config = generation_config;\n    }\n}\n/**\n * The bare Gemma Model outputting raw hidden-states without any specific head on top.\n */\nexport class GemmaModel extends GemmaPreTrainedModel { }\n\nexport class GemmaForCausalLM extends GemmaPreTrainedModel { }\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// Gemma2 models\n\n/**\n * The bare Gemma2 Model outputting raw hidden-states without any specific head on top.\n */\nexport class Gemma2PreTrainedModel extends PreTrainedModel {\n    /**\n     * Creates a new instance of the `Gemma2PreTrainedModel` class.\n     * @param {Object} config The model configuration.\n     * @param {Record<string, any>} sessions The inference sessions for the model.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, sessions, generation_config) {\n        super(config, sessions);\n        this.generation_config = generation_config;\n    }\n}\n/**\n * The bare Gemma2 Model outputting raw hidden-states without any specific head on top.\n */\nexport class Gemma2Model extends Gemma2PreTrainedModel { }\n\nexport class Gemma2ForCausalLM extends Gemma2PreTrainedModel { }\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\nexport class OpenELMPreTrainedModel extends PreTrainedModel {\n    /**\n     * Creates a new instance of the `OpenELMPreTrainedModel` class.\n     * @param {Object} config The model configuration.\n     * @param {Record<string, any>} sessions The inference sessions for the model.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, sessions, generation_config) {\n        super(config, sessions);\n        this.generation_config = generation_config;\n    }\n}\nexport class OpenELMModel extends OpenELMPreTrainedModel { }\n\nexport class OpenELMForCausalLM extends OpenELMPreTrainedModel { }\n\n\n//////////////////////////////////////////////////\n// Qwen2 models\n\n/**\n * The bare Qwen2 Model outputting raw hidden-states without any specific head on top.\n */\nexport class Qwen2PreTrainedModel extends PreTrainedModel {\n    /**\n     * Creates a new instance of the `Qwen2PreTrainedModel` class.\n     * @param {Object} config The model configuration.\n     * @param {Record<string, any>} sessions The inference sessions for the model.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, sessions, generation_config) {\n        super(config, sessions);\n        this.generation_config = generation_config;\n    }\n}\n/**\n * The bare Qwen2 Model outputting raw hidden-states without any specific head on top.\n */\nexport class Qwen2Model extends Qwen2PreTrainedModel { }\n\nexport class Qwen2ForCausalLM extends Qwen2PreTrainedModel { }\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// Phi models\nexport class PhiPreTrainedModel extends PreTrainedModel {\n    /**\n     * Creates a new instance of the `PhiPreTrainedModel` class.\n     * @param {Object} config The model configuration.\n     * @param {Record<string, any>} sessions The inference sessions for the model.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, sessions, generation_config) {\n        super(config, sessions);\n        this.generation_config = generation_config;\n    }\n}\n/**\n * The bare Phi Model outputting raw hidden-states without any specific head on top.\n */\nexport class PhiModel extends PhiPreTrainedModel { }\n\nexport class PhiForCausalLM extends PhiPreTrainedModel { }\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// Phi3 models\nexport class Phi3PreTrainedModel extends PreTrainedModel {\n    /**\n     * Creates a new instance of the `Phi3PreTrainedModel` class.\n     * @param {Object} config The model configuration.\n     * @param {Record<string, any>} sessions The inference sessions for the model.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, sessions, generation_config) {\n        super(config, sessions);\n        this.generation_config = generation_config;\n    }\n}\n\n/**\n * The bare Phi3 Model outputting raw hidden-states without any specific head on top.\n */\nexport class Phi3Model extends Phi3PreTrainedModel { }\n\nexport class Phi3ForCausalLM extends Phi3PreTrainedModel { }\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// Bloom models\n/**\n * The Bloom Model transformer with a language modeling head on top (linear layer with weights tied to the input embeddings).\n */\nexport class BloomPreTrainedModel extends PreTrainedModel {\n    /**\n     * Creates a new instance of the `BloomPreTrainedModel` class.\n     * @param {Object} config The model configuration.\n     * @param {Record<string, any>} sessions The inference sessions for the model.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, sessions, generation_config) {\n        super(config, sessions);\n        this.generation_config = generation_config;\n    }\n}\n\n/**\n * The bare Bloom Model transformer outputting raw hidden-states without any specific head on top.\n */\nexport class BloomModel extends BloomPreTrainedModel { }\n\n/**\n * The Bloom Model transformer with a language modeling head on top (linear layer with weights tied to the input embeddings).\n */\nexport class BloomForCausalLM extends BloomPreTrainedModel { }\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// MPT models\nexport class MptPreTrainedModel extends PreTrainedModel {\n    /**\n     * Creates a new instance of the `MptPreTrainedModel` class.\n     * @param {Object} config The model configuration.\n     * @param {Record<string, any>} sessions The inference sessions for the model.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, sessions, generation_config) {\n        super(config, sessions);\n        this.generation_config = generation_config;\n    }\n}\n\n/**\n * The bare Mpt Model transformer outputting raw hidden-states without any specific head on top.\n */\nexport class MptModel extends MptPreTrainedModel { }\n\n/**\n * The MPT Model transformer with a language modeling head on top (linear layer with weights tied to the input embeddings).\n */\nexport class MptForCausalLM extends MptPreTrainedModel { }\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// OPT models\nexport class OPTPreTrainedModel extends PreTrainedModel {\n    /**\n     * Creates a new instance of the `OPTPreTrainedModel` class.\n     * @param {Object} config The model configuration.\n     * @param {Record<string, any>} sessions The inference sessions for the model.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, sessions, generation_config) {\n        super(config, sessions);\n        this.generation_config = generation_config;\n    }\n}\n\n/**\n * The bare OPT Model outputting raw hidden-states without any specific head on top.\n */\nexport class OPTModel extends OPTPreTrainedModel { }\n\n/**\n * The OPT Model transformer with a language modeling head on top (linear layer with weights tied to the input embeddings).\n */\nexport class OPTForCausalLM extends OPTPreTrainedModel { }\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\nexport class ViTPreTrainedModel extends PreTrainedModel { }\nexport class ViTModel extends ViTPreTrainedModel { }\nexport class ViTForImageClassification extends ViTPreTrainedModel {\n    /**\n     * @param {any} model_inputs\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\nexport class FastViTPreTrainedModel extends PreTrainedModel { }\nexport class FastViTModel extends FastViTPreTrainedModel { }\nexport class FastViTForImageClassification extends FastViTPreTrainedModel {\n    /**\n     * @param {any} model_inputs\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\nexport class VitMattePreTrainedModel extends PreTrainedModel { }\n\n/**\n * ViTMatte framework leveraging any vision backbone e.g. for ADE20k, CityScapes.\n * \n * **Example:** Perform image matting with a `VitMatteForImageMatting` model.\n * ```javascript\n * import { AutoProcessor, VitMatteForImageMatting, RawImage } from '@huggingface/transformers';\n * \n * // Load processor and model\n * const processor = await AutoProcessor.from_pretrained('Xenova/vitmatte-small-distinctions-646');\n * const model = await VitMatteForImageMatting.from_pretrained('Xenova/vitmatte-small-distinctions-646');\n * \n * // Load image and trimap\n * const image = await RawImage.fromURL('https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/vitmatte_image.png');\n * const trimap = await RawImage.fromURL('https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/vitmatte_trimap.png');\n * \n * // Prepare image + trimap for the model\n * const inputs = await processor(image, trimap);\n * \n * // Predict alpha matte\n * const { alphas } = await model(inputs);\n * // Tensor {\n * //   dims: [ 1, 1, 640, 960 ],\n * //   type: 'float32',\n * //   size: 614400,\n * //   data: Float32Array(614400) [ 0.9894027709960938, 0.9970508813858032, ... ]\n * // }\n * ```\n * \n * You can visualize the alpha matte as follows:\n * ```javascript\n * import { Tensor, cat } from '@huggingface/transformers';\n * \n * // Visualize predicted alpha matte\n * const imageTensor = image.toTensor();\n * \n * // Convert float (0-1) alpha matte to uint8 (0-255)\n * const alphaChannel = alphas\n *   .squeeze(0)\n *   .mul_(255)\n *   .clamp_(0, 255)\n *   .round_()\n *   .to('uint8');\n * \n * // Concatenate original image with predicted alpha\n * const imageData = cat([imageTensor, alphaChannel], 0);\n * \n * // Save output image\n * const outputImage = RawImage.fromTensor(imageData);\n * outputImage.save('output.png');\n * ```\n */\nexport class VitMatteForImageMatting extends VitMattePreTrainedModel {\n    /**\n     * @param {any} model_inputs\n     */\n    async _call(model_inputs) {\n        return new ImageMattingOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\nexport class MobileViTPreTrainedModel extends PreTrainedModel { }\nexport class MobileViTModel extends MobileViTPreTrainedModel { }\nexport class MobileViTForImageClassification extends MobileViTPreTrainedModel {\n    /**\n     * @param {any} model_inputs\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n// TODO: MobileViTForSemanticSegmentation\n\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\nexport class MobileViTV2PreTrainedModel extends PreTrainedModel { }\nexport class MobileViTV2Model extends MobileViTV2PreTrainedModel { }\nexport class MobileViTV2ForImageClassification extends MobileViTV2PreTrainedModel {\n    /**\n     * @param {any} model_inputs\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n// TODO: MobileViTV2ForSemanticSegmentation\n\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\nexport class OwlViTPreTrainedModel extends PreTrainedModel { }\nexport class OwlViTModel extends OwlViTPreTrainedModel { }\nexport class OwlViTForObjectDetection extends OwlViTPreTrainedModel { }\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\nexport class Owlv2PreTrainedModel extends PreTrainedModel { }\nexport class Owlv2Model extends Owlv2PreTrainedModel { }\nexport class Owlv2ForObjectDetection extends Owlv2PreTrainedModel { }\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// Beit Models\nexport class BeitPreTrainedModel extends PreTrainedModel { }\nexport class BeitModel extends BeitPreTrainedModel { }\nexport class BeitForImageClassification extends BeitPreTrainedModel {\n    /**\n     * @param {any} model_inputs\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\nexport class DetrPreTrainedModel extends PreTrainedModel { }\nexport class DetrModel extends DetrPreTrainedModel { }\nexport class DetrForObjectDetection extends DetrPreTrainedModel {\n    /**\n     * @param {any} model_inputs\n     */\n    async _call(model_inputs) {\n        return new DetrObjectDetectionOutput(await super._call(model_inputs));\n    }\n}\n\nexport class DetrForSegmentation extends DetrPreTrainedModel {\n    /**\n     * Runs the model with the provided inputs\n     * @param {Object} model_inputs Model inputs\n     * @returns {Promise<DetrSegmentationOutput>} Object containing segmentation outputs\n     */\n    async _call(model_inputs) {\n        return new DetrSegmentationOutput(await super._call(model_inputs));\n    }\n}\n\nexport class DetrObjectDetectionOutput extends ModelOutput {\n    /**\n     * @param {Object} output The output of the model.\n     * @param {Tensor} output.logits Classification logits (including no-object) for all queries.\n     * @param {Tensor} output.pred_boxes Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height).\n     * These values are normalized in [0, 1], relative to the size of each individual image in the batch (disregarding possible padding).\n     */\n    constructor({ logits, pred_boxes }) {\n        super();\n        this.logits = logits;\n        this.pred_boxes = pred_boxes;\n    }\n}\n\nexport class DetrSegmentationOutput extends ModelOutput {\n    /**\n     * @param {Object} output The output of the model.\n     * @param {Tensor} output.logits The output logits of the model.\n     * @param {Tensor} output.pred_boxes Predicted boxes.\n     * @param {Tensor} output.pred_masks Predicted masks.\n     */\n    constructor({ logits, pred_boxes, pred_masks }) {\n        super();\n        this.logits = logits;\n        this.pred_boxes = pred_boxes;\n        this.pred_masks = pred_masks;\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\nexport class RTDetrPreTrainedModel extends PreTrainedModel { }\nexport class RTDetrModel extends RTDetrPreTrainedModel { }\nexport class RTDetrForObjectDetection extends RTDetrPreTrainedModel {\n    /**\n     * @param {any} model_inputs\n     */\n    async _call(model_inputs) {\n        return new RTDetrObjectDetectionOutput(await super._call(model_inputs));\n    }\n}\n\nexport class RTDetrObjectDetectionOutput extends ModelOutput {\n    /**\n     * @param {Object} output The output of the model.\n     * @param {Tensor} output.logits Classification logits (including no-object) for all queries.\n     * @param {Tensor} output.pred_boxes Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height).\n     * These values are normalized in [0, 1], relative to the size of each individual image in the batch (disregarding possible padding).\n     */\n    constructor({ logits, pred_boxes }) {\n        super();\n        this.logits = logits;\n        this.pred_boxes = pred_boxes;\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\nexport class TableTransformerPreTrainedModel extends PreTrainedModel { }\n\n/**\n * The bare Table Transformer Model (consisting of a backbone and encoder-decoder Transformer)\n * outputting raw hidden-states without any specific head on top.\n */\nexport class TableTransformerModel extends TableTransformerPreTrainedModel { }\n\n/**\n * Table Transformer Model (consisting of a backbone and encoder-decoder Transformer)\n * with object detection heads on top, for tasks such as COCO detection.\n */\nexport class TableTransformerForObjectDetection extends TableTransformerPreTrainedModel {\n    /**\n     * @param {any} model_inputs\n     */\n    async _call(model_inputs) {\n        return new TableTransformerObjectDetectionOutput(await super._call(model_inputs));\n    }\n}\nexport class TableTransformerObjectDetectionOutput extends DetrObjectDetectionOutput { }\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\nexport class DeiTPreTrainedModel extends PreTrainedModel { }\nexport class DeiTModel extends DeiTPreTrainedModel { }\nexport class DeiTForImageClassification extends DeiTPreTrainedModel {\n    /**\n     * @param {any} model_inputs\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n/**\n * An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained models.\n */\nexport class ResNetPreTrainedModel extends PreTrainedModel { }\n\n/**\n * The bare ResNet model outputting raw features without any specific head on top.\n */\nexport class ResNetModel extends ResNetPreTrainedModel { }\n\n/**\n * ResNet Model with an image classification head on top (a linear layer on top of the pooled features), e.g. for ImageNet.\n */\nexport class ResNetForImageClassification extends ResNetPreTrainedModel {\n    /**\n     * @param {any} model_inputs\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\nexport class SwinPreTrainedModel extends PreTrainedModel { }\nexport class SwinModel extends SwinPreTrainedModel { }\nexport class SwinForImageClassification extends SwinPreTrainedModel {\n    /**\n     * @param {any} model_inputs\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\nexport class Swin2SRPreTrainedModel extends PreTrainedModel { }\n\n/**\n * The bare Swin2SR Model transformer outputting raw hidden-states without any specific head on top.\n */\nexport class Swin2SRModel extends Swin2SRPreTrainedModel { }\n\n/**\n * Swin2SR Model transformer with an upsampler head on top for image super resolution and restoration.\n * \n * **Example:** Super-resolution w/ `Xenova/swin2SR-classical-sr-x2-64`.\n * \n * ```javascript\n * import { AutoProcessor, Swin2SRForImageSuperResolution, RawImage } from '@huggingface/transformers';\n * \n * // Load processor and model\n * const model_id = 'Xenova/swin2SR-classical-sr-x2-64';\n * const processor = await AutoProcessor.from_pretrained(model_id);\n * const model = await Swin2SRForImageSuperResolution.from_pretrained(model_id);\n * \n * // Prepare model inputs\n * const url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/butterfly.jpg';\n * const image = await RawImage.fromURL(url);\n * const inputs = await processor(image);\n * \n * // Run model\n * const outputs = await model(inputs);\n * \n * // Convert Tensor to RawImage\n * const output = outputs.reconstruction.squeeze().clamp_(0, 1).mul_(255).round_().to('uint8');\n * const outputImage = RawImage.fromTensor(output);\n * // RawImage {\n * //   data: Uint8Array(786432) [ 41, 31, 24, ... ],\n * //   width: 512,\n * //   height: 512,\n * //   channels: 3\n * // }\n * ```\n */\nexport class Swin2SRForImageSuperResolution extends Swin2SRPreTrainedModel { }\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\nexport class DPTPreTrainedModel extends PreTrainedModel { }\n\n/**\n * The bare DPT Model transformer outputting raw hidden-states without any specific head on top.\n */\nexport class DPTModel extends DPTPreTrainedModel { }\n\n/**\n * DPT Model with a depth estimation head on top (consisting of 3 convolutional layers) e.g. for KITTI, NYUv2.\n * \n * **Example:** Depth estimation w/ `Xenova/dpt-hybrid-midas`.\n * ```javascript\n * import { DPTForDepthEstimation, AutoProcessor, RawImage, interpolate, max } from '@huggingface/transformers';\n * \n * // Load model and processor\n * const model_id = 'Xenova/dpt-hybrid-midas';\n * const model = await DPTForDepthEstimation.from_pretrained(model_id);\n * const processor = await AutoProcessor.from_pretrained(model_id);\n * \n * // Load image from URL\n * const url = 'http://images.cocodataset.org/val2017/000000039769.jpg';\n * const image = await RawImage.fromURL(url);\n * \n * // Prepare image for the model\n * const inputs = await processor(image);\n * \n * // Run model\n * const { predicted_depth } = await model(inputs);\n * \n * // Interpolate to original size\n * const prediction = interpolate(predicted_depth, image.size.reverse(), 'bilinear', false);\n * \n * // Visualize the prediction\n * const formatted = prediction.mul_(255 / max(prediction.data)[0]).to('uint8');\n * const depth = RawImage.fromTensor(formatted);\n * // RawImage {\n * //   data: Uint8Array(307200) [ 85, 85, 84, ... ],\n * //   width: 640,\n * //   height: 480,\n * //   channels: 1\n * // }\n * ```\n */\nexport class DPTForDepthEstimation extends DPTPreTrainedModel { }\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\nexport class DepthAnythingPreTrainedModel extends PreTrainedModel { }\n\n/**\n * Depth Anything Model with a depth estimation head on top (consisting of 3 convolutional layers) e.g. for KITTI, NYUv2.\n */\nexport class DepthAnythingForDepthEstimation extends DepthAnythingPreTrainedModel { }\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\nexport class GLPNPreTrainedModel extends PreTrainedModel { }\n\n/**\n * The bare GLPN encoder (Mix-Transformer) outputting raw hidden-states without any specific head on top.\n */\nexport class GLPNModel extends GLPNPreTrainedModel { }\n\n/**\n * GLPN Model transformer with a lightweight depth estimation head on top e.g. for KITTI, NYUv2.\n * \n * **Example:** Depth estimation w/ `Xenova/glpn-kitti`.\n * ```javascript\n * import { GLPNForDepthEstimation, AutoProcessor, RawImage, interpolate, max } from '@huggingface/transformers';\n * \n * // Load model and processor\n * const model_id = 'Xenova/glpn-kitti';\n * const model = await GLPNForDepthEstimation.from_pretrained(model_id);\n * const processor = await AutoProcessor.from_pretrained(model_id);\n * \n * // Load image from URL\n * const url = 'http://images.cocodataset.org/val2017/000000039769.jpg';\n * const image = await RawImage.fromURL(url);\n * \n * // Prepare image for the model\n * const inputs = await processor(image);\n * \n * // Run model\n * const { predicted_depth } = await model(inputs);\n * \n * // Interpolate to original size\n * const prediction = interpolate(predicted_depth, image.size.reverse(), 'bilinear', false);\n * \n * // Visualize the prediction\n * const formatted = prediction.mul_(255 / max(prediction.data)[0]).to('uint8');\n * const depth = RawImage.fromTensor(formatted);\n * // RawImage {\n * //   data: Uint8Array(307200) [ 207, 169, 154, ... ],\n * //   width: 640,\n * //   height: 480,\n * //   channels: 1\n * // }\n * ```\n */\nexport class GLPNForDepthEstimation extends GLPNPreTrainedModel { }\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\nexport class DonutSwinPreTrainedModel extends PreTrainedModel { }\n\n/**\n * The bare Donut Swin Model transformer outputting raw hidden-states without any specific head on top.\n * \n * **Example:** Step-by-step Document Parsing.\n * \n * ```javascript\n * import { AutoProcessor, AutoTokenizer, AutoModelForVision2Seq, RawImage } from '@huggingface/transformers';\n * \n * // Choose model to use\n * const model_id = 'Xenova/donut-base-finetuned-cord-v2';\n * \n * // Prepare image inputs\n * const processor = await AutoProcessor.from_pretrained(model_id);\n * const url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/receipt.png';\n * const image = await RawImage.read(url);\n * const image_inputs = await processor(image);\n * \n * // Prepare decoder inputs\n * const tokenizer = await AutoTokenizer.from_pretrained(model_id);\n * const task_prompt = '<s_cord-v2>';\n * const decoder_input_ids = tokenizer(task_prompt, {\n *   add_special_tokens: false,\n * }).input_ids;\n * \n * // Create the model\n * const model = await AutoModelForVision2Seq.from_pretrained(model_id);\n * \n * // Run inference\n * const output = await model.generate(image_inputs.pixel_values, {\n *   decoder_input_ids,\n *   max_length: model.config.decoder.max_position_embeddings,\n * });\n * \n * // Decode output\n * const decoded = tokenizer.batch_decode(output)[0];\n * // <s_cord-v2><s_menu><s_nm> CINNAMON SUGAR</s_nm><s_unitprice> 17,000</s_unitprice><s_cnt> 1 x</s_cnt><s_price> 17,000</s_price></s_menu><s_sub_total><s_subtotal_price> 17,000</s_subtotal_price></s_sub_total><s_total><s_total_price> 17,000</s_total_price><s_cashprice> 20,000</s_cashprice><s_changeprice> 3,000</s_changeprice></s_total></s>\n * ```\n * \n * **Example:** Step-by-step Document Visual Question Answering (DocVQA)\n * \n * ```javascript\n * import { AutoProcessor, AutoTokenizer, AutoModelForVision2Seq, RawImage } from '@huggingface/transformers';\n * \n * // Choose model to use\n * const model_id = 'Xenova/donut-base-finetuned-docvqa';\n * \n * // Prepare image inputs\n * const processor = await AutoProcessor.from_pretrained(model_id);\n * const url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/invoice.png';\n * const image = await RawImage.read(url);\n * const image_inputs = await processor(image);\n * \n * // Prepare decoder inputs\n * const tokenizer = await AutoTokenizer.from_pretrained(model_id);\n * const question = 'What is the invoice number?';\n * const task_prompt = `<s_docvqa><s_question>${question}</s_question><s_answer>`;\n * const decoder_input_ids = tokenizer(task_prompt, {\n *   add_special_tokens: false,\n * }).input_ids;\n * \n * // Create the model\n * const model = await AutoModelForVision2Seq.from_pretrained(model_id);\n * \n * // Run inference\n * const output = await model.generate(image_inputs.pixel_values, {\n *   decoder_input_ids,\n *   max_length: model.config.decoder.max_position_embeddings,\n * });\n * \n * // Decode output\n * const decoded = tokenizer.batch_decode(output)[0];\n * // <s_docvqa><s_question> What is the invoice number?</s_question><s_answer> us-001</s_answer></s>\n * ```\n */\nexport class DonutSwinModel extends DonutSwinPreTrainedModel { }\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\nexport class ConvNextPreTrainedModel extends PreTrainedModel { }\n\n/**\n * The bare ConvNext model outputting raw features without any specific head on top.\n */\nexport class ConvNextModel extends ConvNextPreTrainedModel { }\n\n/**\n * ConvNext Model with an image classification head on top (a linear layer on top of the pooled features), e.g. for ImageNet.\n */\nexport class ConvNextForImageClassification extends ConvNextPreTrainedModel {\n    /**\n     * @param {any} model_inputs\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\nexport class ConvNextV2PreTrainedModel extends PreTrainedModel { }\n\n/**\n * The bare ConvNextV2 model outputting raw features without any specific head on top.\n */\nexport class ConvNextV2Model extends ConvNextV2PreTrainedModel { }\n\n/**\n * ConvNextV2 Model with an image classification head on top (a linear layer on top of the pooled features), e.g. for ImageNet.\n */\nexport class ConvNextV2ForImageClassification extends ConvNextV2PreTrainedModel {\n    /**\n     * @param {any} model_inputs\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\nexport class Dinov2PreTrainedModel extends PreTrainedModel { }\n\n/**\n * The bare DINOv2 Model transformer outputting raw hidden-states without any specific head on top.\n */\nexport class Dinov2Model extends Dinov2PreTrainedModel { }\n\n/**\n * Dinov2 Model transformer with an image classification head on top (a linear layer on top of the final hidden state of the [CLS] token) e.g. for ImageNet.\n */\nexport class Dinov2ForImageClassification extends Dinov2PreTrainedModel {\n    /**\n     * @param {any} model_inputs\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\nexport class YolosPreTrainedModel extends PreTrainedModel { }\nexport class YolosModel extends YolosPreTrainedModel { }\nexport class YolosForObjectDetection extends YolosPreTrainedModel {\n    /**\n     * @param {any} model_inputs\n     */\n    async _call(model_inputs) {\n        return new YolosObjectDetectionOutput(await super._call(model_inputs));\n    }\n}\n\nexport class YolosObjectDetectionOutput extends ModelOutput {\n    /**\n     * @param {Object} output The output of the model.\n     * @param {Tensor} output.logits Classification logits (including no-object) for all queries.\n     * @param {Tensor} output.pred_boxes Normalized boxes coordinates for all queries, represented as (center_x, center_y, width, height).\n     * These values are normalized in [0, 1], relative to the size of each individual image in the batch (disregarding possible padding).\n     */\n    constructor({ logits, pred_boxes }) {\n        super();\n        this.logits = logits;\n        this.pred_boxes = pred_boxes;\n    }\n}\n//////////////////////////////////////////////////\n\n\n\n\n//////////////////////////////////////////////////\nexport class SamPreTrainedModel extends PreTrainedModel { }\n\n/**\n * Segment Anything Model (SAM) for generating segmentation masks, given an input image\n * and optional 2D location and bounding boxes.\n * \n * **Example:** Perform mask generation w/ `Xenova/sam-vit-base`.\n * ```javascript\n * import { SamModel, AutoProcessor, RawImage } from '@huggingface/transformers';\n * \n * const model = await SamModel.from_pretrained('Xenova/sam-vit-base');\n * const processor = await AutoProcessor.from_pretrained('Xenova/sam-vit-base');\n * \n * const img_url = 'https://huggingface.co/ybelkada/segment-anything/resolve/main/assets/car.png';\n * const raw_image = await RawImage.read(img_url);\n * const input_points = [[[450, 600]]] // 2D localization of a window\n * \n * const inputs = await processor(raw_image, { input_points });\n * const outputs = await model(inputs);\n * \n * const masks = await processor.post_process_masks(outputs.pred_masks, inputs.original_sizes, inputs.reshaped_input_sizes);\n * // [\n * //   Tensor {\n * //     dims: [ 1, 3, 1764, 2646 ],\n * //     type: 'bool',\n * //     data: Uint8Array(14002632) [ ... ],\n * //     size: 14002632\n * //   }\n * // ]\n * const scores = outputs.iou_scores;\n * // Tensor {\n * //   dims: [ 1, 1, 3 ],\n * //   type: 'float32',\n * //   data: Float32Array(3) [\n * //     0.8892380595207214,\n * //     0.9311248064041138,\n * //     0.983696699142456\n * //   ],\n * //   size: 3\n * // }\n * ```\n */\nexport class SamModel extends SamPreTrainedModel {\n\n    /**\n     * Compute image embeddings and positional image embeddings, given the pixel values of an image.\n     * @param {Object} model_inputs Object containing the model inputs.\n     * @param {Tensor} model_inputs.pixel_values Pixel values obtained using a `SamProcessor`.\n     * @returns {Promise<{ image_embeddings: Tensor, image_positional_embeddings: Tensor }>} The image embeddings and positional image embeddings.\n     */\n    async get_image_embeddings({ pixel_values }) {\n        // in:\n        //  - pixel_values: tensor.float32[batch_size,3,1024,1024]\n        // \n        // out:\n        //  - image_embeddings: tensor.float32[batch_size,256,64,64]\n        //  - image_positional_embeddings: tensor.float32[batch_size,256,64,64]\n        return await encoderForward(this, { pixel_values })\n    }\n\n    /**\n     * @typedef {Object} SamModelInputs Object containing the model inputs.\n     * @property {Tensor} pixel_values Pixel values as a Tensor with shape `(batch_size, num_channels, height, width)`.\n     * These can be obtained using a `SamProcessor`.\n     * @property {Tensor} [input_points] Input 2D spatial points with shape `(batch_size, num_points, 2)`.\n     * This is used by the prompt encoder to encode the prompt.\n     * @property {Tensor} [input_labels] Input labels for the points, as a Tensor of shape `(batch_size, point_batch_size, num_points)`.\n     * This is used by the prompt encoder to encode the prompt. There are 4 types of labels:\n     *  - `1`: the point is a point that contains the object of interest\n     *  - `0`: the point is a point that does not contain the object of interest\n     *  - `-1`: the point corresponds to the background\n     *  - `-10`: the point is a padding point, thus should be ignored by the prompt encoder\n     * @property {Tensor} [input_boxes] Input bounding boxes with shape `(batch_size, num_boxes, 4)`.\n     * @property {Tensor} [image_embeddings] Image embeddings used by the mask decoder.\n     * @property {Tensor} [image_positional_embeddings] Image positional embeddings used by the mask decoder.\n     */\n\n    /**\n     * @param {SamModelInputs} model_inputs Object containing the model inputs.\n     * @returns {Promise<Object>} The output of the model.\n     */\n    async forward(model_inputs) {\n        if (!model_inputs.image_embeddings || !model_inputs.image_positional_embeddings) {\n            // Compute the image embeddings if they are missing\n            model_inputs = {\n                ...model_inputs,\n                ...(await this.get_image_embeddings(model_inputs))\n            }\n        }\n\n        if (!model_inputs.input_labels && model_inputs.input_points) {\n            // Set default input labels if they are missing\n            const shape = model_inputs.input_points.dims.slice(0, -1);\n            const numElements = shape.reduce((a, b) => a * b, 1);\n            model_inputs.input_labels = new Tensor(\n                'int64',\n                new BigInt64Array(numElements).fill(1n),\n                shape\n            );\n        }\n\n        const decoder_inputs = {\n            image_embeddings: model_inputs.image_embeddings,\n            image_positional_embeddings: model_inputs.image_positional_embeddings,\n        };\n        if (model_inputs.input_points) {\n            decoder_inputs.input_points = model_inputs.input_points;\n        }\n        if (model_inputs.input_labels) {\n            decoder_inputs.input_labels = model_inputs.input_labels;\n        }\n        if (model_inputs.input_boxes) {\n            decoder_inputs.input_boxes = model_inputs.input_boxes;\n        }\n\n        // Returns:\n        //  - iou_scores: tensor.float32[batch_size,point_batch_size,3]\n        //  - pred_masks: tensor.float32[batch_size,point_batch_size,3,256,256]\n        return await sessionRun(this.sessions['prompt_encoder_mask_decoder'], decoder_inputs);\n    }\n\n    /**\n     * Runs the model with the provided inputs\n     * @param {Object} model_inputs Model inputs\n     * @returns {Promise<SamImageSegmentationOutput>} Object containing segmentation outputs\n     */\n    async _call(model_inputs) {\n        return new SamImageSegmentationOutput(await super._call(model_inputs));\n    }\n}\n\n\n/**\n * Base class for Segment-Anything model's output.\n */\nexport class SamImageSegmentationOutput extends ModelOutput {\n    /**\n     * @param {Object} output The output of the model.\n     * @param {Tensor} output.iou_scores The output logits of the model.\n     * @param {Tensor} output.pred_masks Predicted boxes.\n     */\n    constructor({ iou_scores, pred_masks }) {\n        super();\n        this.iou_scores = iou_scores;\n        this.pred_masks = pred_masks;\n    }\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// MarianMT models\nexport class MarianPreTrainedModel extends PreTrainedModel {\n\n    /**\n     * Creates a new instance of the `MarianMTModel` class.\n     * @param {Object} config The model configuration.\n     * @param {Record<string, any>} sessions The inference sessions for the model.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, sessions, generation_config) {\n        super(config, sessions);\n        this.generation_config = generation_config;\n    }\n};\n\nexport class MarianModel extends MarianPreTrainedModel { }\n\nexport class MarianMTModel extends MarianPreTrainedModel { }\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// M2M100 models\nexport class M2M100PreTrainedModel extends PreTrainedModel {\n\n    /**\n     * Creates a new instance of the `M2M100ForConditionalGeneration` class.\n     * @param {Object} config The model configuration.\n     * @param {Record<string, any>} sessions The inference sessions for the model.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, sessions, generation_config) {\n        super(config, sessions);\n        this.generation_config = generation_config;\n    }\n};\n\nexport class M2M100Model extends M2M100PreTrainedModel { }\n\nexport class M2M100ForConditionalGeneration extends M2M100PreTrainedModel { }\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// Wav2Vec2 models\nexport class Wav2Vec2PreTrainedModel extends PreTrainedModel { };\n\n/**\n * The bare Wav2Vec2 Model transformer outputting raw hidden-states without any specific head on top.\n * \n * **Example:** Load and run a `Wav2Vec2Model` for feature extraction.\n * \n * ```javascript\n * import { AutoProcessor, AutoModel, read_audio } from '@huggingface/transformers';\n * \n * // Read and preprocess audio\n * const processor = await AutoProcessor.from_pretrained('Xenova/mms-300m');\n * const audio = await read_audio('https://huggingface.co/datasets/Narsil/asr_dummy/resolve/main/mlk.flac', 16000);\n * const inputs = await processor(audio);\n * \n * // Run model with inputs\n * const model = await AutoModel.from_pretrained('Xenova/mms-300m');\n * const output = await model(inputs);\n * // {\n * //   last_hidden_state: Tensor {\n * //     dims: [ 1, 1144, 1024 ],\n * //     type: 'float32',\n * //     data: Float32Array(1171456) [ ... ],\n * //     size: 1171456\n * //   }\n * // }\n * ```\n */\nexport class Wav2Vec2Model extends Wav2Vec2PreTrainedModel { }\n\nexport class Wav2Vec2ForCTC extends Wav2Vec2PreTrainedModel {\n    /**\n     * @param {Object} model_inputs\n     * @param {Tensor} model_inputs.input_values Float values of input raw speech waveform.\n     * @param {Tensor} model_inputs.attention_mask Mask to avoid performing convolution and attention on padding token indices. Mask values selected in [0, 1]\n     */\n    async _call(model_inputs) {\n        return new CausalLMOutput(await super._call(model_inputs));\n    }\n}\n\nexport class Wav2Vec2ForSequenceClassification extends Wav2Vec2PreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * Wav2Vec2 Model with a frame classification head on top for tasks like Speaker Diarization.\n */\nexport class Wav2Vec2ForAudioFrameClassification extends Wav2Vec2PreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for sequence classification.\n     */\n    async _call(model_inputs) {\n        return new TokenClassifierOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// PyAnnote models\nexport class PyAnnotePreTrainedModel extends PreTrainedModel { };\n\n/**\n * The bare PyAnnote Model transformer outputting raw hidden-states without any specific head on top.\n */\nexport class PyAnnoteModel extends PyAnnotePreTrainedModel { }\n\n/**\n * PyAnnote Model with a frame classification head on top for tasks like Speaker Diarization.\n * \n * **Example:** Load and run a `PyAnnoteForAudioFrameClassification` for speaker diarization.\n * \n * ```javascript\n * import { AutoProcessor, AutoModelForAudioFrameClassification, read_audio } from '@xenova/transformers';\n * \n * // Load model and processor\n * const model_id = 'onnx-community/pyannote-segmentation-3.0';\n * const model = await AutoModelForAudioFrameClassification.from_pretrained(model_id);\n * const processor = await AutoProcessor.from_pretrained(model_id);\n * \n * // Read and preprocess audio\n * const url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/mlk.wav';\n * const audio = await read_audio(url, processor.feature_extractor.config.sampling_rate);\n * const inputs = await processor(audio);\n * \n * // Run model with inputs\n * const { logits } = await model(inputs);\n * // {\n * //   logits: Tensor {\n * //     dims: [ 1, 767, 7 ],  // [batch_size, num_frames, num_classes]\n * //     type: 'float32',\n * //     data: Float32Array(5369) [ ... ],\n * //     size: 5369\n * //   }\n * // }\n * \n * const result = processor.post_process_speaker_diarization(logits, audio.length);\n * // [\n * //   [\n * //     { id: 0, start: 0, end: 1.0512535626298245, confidence: 0.8220156481664611 },\n * //     { id: 2, start: 1.0512535626298245, end: 2.3398869619825127, confidence: 0.9008811707860472 },\n * //     ...\n * //   ]\n * // ]\n * \n * // Display result\n * console.table(result[0], ['start', 'end', 'id', 'confidence']);\n * // ┌─────────┬────────────────────┬────────────────────┬────┬─────────────────────┐\n * // │ (index) │ start              │ end                │ id │ confidence          │\n * // ├─────────┼────────────────────┼────────────────────┼────┼─────────────────────┤\n * // │ 0       │ 0                  │ 1.0512535626298245 │ 0  │ 0.8220156481664611  │\n * // │ 1       │ 1.0512535626298245 │ 2.3398869619825127 │ 2  │ 0.9008811707860472  │\n * // │ 2       │ 2.3398869619825127 │ 3.5946089560890773 │ 0  │ 0.7521651315796233  │\n * // │ 3       │ 3.5946089560890773 │ 4.578039708226655  │ 2  │ 0.8491978128022479  │\n * // │ 4       │ 4.578039708226655  │ 4.594995410849717  │ 0  │ 0.2935352600416393  │\n * // │ 5       │ 4.594995410849717  │ 6.121008646925269  │ 3  │ 0.6788051309866024  │\n * // │ 6       │ 6.121008646925269  │ 6.256654267909762  │ 0  │ 0.37125512393851134 │\n * // │ 7       │ 6.256654267909762  │ 8.630452635138397  │ 2  │ 0.7467035186353542  │\n * // │ 8       │ 8.630452635138397  │ 10.088643060721703 │ 0  │ 0.7689364814666032  │\n * // │ 9       │ 10.088643060721703 │ 12.58113134631177  │ 2  │ 0.9123324509131324  │\n * // │ 10      │ 12.58113134631177  │ 13.005023911888312 │ 0  │ 0.4828358177572041  │\n * // └─────────┴────────────────────┴────────────────────┴────┴─────────────────────┘\n * ```\n */\nexport class PyAnnoteForAudioFrameClassification extends PyAnnotePreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for sequence classification.\n     */\n    async _call(model_inputs) {\n        return new TokenClassifierOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// WeSpeakerResNet models\nexport class WeSpeakerResNetPreTrainedModel extends PreTrainedModel { };\nexport class WeSpeakerResNetModel extends WeSpeakerResNetPreTrainedModel { }\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// UniSpeech models\nexport class UniSpeechPreTrainedModel extends PreTrainedModel { };\n\n/**\n * The bare UniSpeech Model transformer outputting raw hidden-states without any specific head on top.\n */\nexport class UniSpeechModel extends UniSpeechPreTrainedModel { }\n\n/**\n * UniSpeech Model with a `language modeling` head on top for Connectionist Temporal Classification (CTC).\n */\nexport class UniSpeechForCTC extends UniSpeechPreTrainedModel {\n    /**\n     * @param {Object} model_inputs\n     * @param {Tensor} model_inputs.input_values Float values of input raw speech waveform.\n     * @param {Tensor} model_inputs.attention_mask Mask to avoid performing convolution and attention on padding token indices. Mask values selected in [0, 1]\n     */\n    async _call(model_inputs) {\n        return new CausalLMOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * UniSpeech Model with a sequence classification head on top (a linear layer over the pooled output).\n */\nexport class UniSpeechForSequenceClassification extends UniSpeechPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// UniSpeechSat models\nexport class UniSpeechSatPreTrainedModel extends PreTrainedModel { };\n\n/**\n * The bare UniSpeechSat Model transformer outputting raw hidden-states without any specific head on top.\n */\nexport class UniSpeechSatModel extends UniSpeechSatPreTrainedModel { }\n\n/**\n * UniSpeechSat Model with a `language modeling` head on top for Connectionist Temporal Classification (CTC).\n */\nexport class UniSpeechSatForCTC extends UniSpeechSatPreTrainedModel {\n    /**\n     * @param {Object} model_inputs\n     * @param {Tensor} model_inputs.input_values Float values of input raw speech waveform.\n     * @param {Tensor} model_inputs.attention_mask Mask to avoid performing convolution and attention on padding token indices. Mask values selected in [0, 1]\n     */\n    async _call(model_inputs) {\n        return new CausalLMOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * UniSpeechSat Model with a sequence classification head on top (a linear layer over the pooled output).\n */\nexport class UniSpeechSatForSequenceClassification extends UniSpeechSatPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * UniSpeechSat Model with a frame classification head on top for tasks like Speaker Diarization.\n */\nexport class UniSpeechSatForAudioFrameClassification extends UniSpeechSatPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for sequence classification.\n     */\n    async _call(model_inputs) {\n        return new TokenClassifierOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// Wav2Vec2Bert models\nexport class Wav2Vec2BertPreTrainedModel extends PreTrainedModel { };\n\n/**\n * The bare Wav2Vec2Bert Model transformer outputting raw hidden-states without any specific head on top.\n */\nexport class Wav2Vec2BertModel extends Wav2Vec2BertPreTrainedModel { }\n\n/**\n * Wav2Vec2Bert Model with a `language modeling` head on top for Connectionist Temporal Classification (CTC).\n */\nexport class Wav2Vec2BertForCTC extends Wav2Vec2BertPreTrainedModel {\n    /**\n     * @param {Object} model_inputs\n     * @param {Tensor} model_inputs.input_features Float values of input mel-spectrogram.\n     * @param {Tensor} model_inputs.attention_mask Mask to avoid performing convolution and attention on padding token indices. Mask values selected in [0, 1]\n     */\n    async _call(model_inputs) {\n        return new CausalLMOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * Wav2Vec2Bert Model with a sequence classification head on top (a linear layer over the pooled output).\n */\nexport class Wav2Vec2BertForSequenceClassification extends Wav2Vec2BertPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// Hubert models\nexport class HubertPreTrainedModel extends PreTrainedModel { }\n\n/**\n * The bare Hubert Model transformer outputting raw hidden-states without any specific head on top.\n * \n * **Example:** Load and run a `HubertModel` for feature extraction.\n * \n * ```javascript\n * import { AutoProcessor, AutoModel, read_audio } from '@huggingface/transformers';\n * \n * // Read and preprocess audio\n * const processor = await AutoProcessor.from_pretrained('Xenova/hubert-base-ls960');\n * const audio = await read_audio('https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/jfk.wav', 16000);\n * const inputs = await processor(audio);\n * \n * // Load and run model with inputs\n * const model = await AutoModel.from_pretrained('Xenova/hubert-base-ls960');\n * const output = await model(inputs);\n * // {\n * //   last_hidden_state: Tensor {\n * //     dims: [ 1, 549, 768 ],\n * //     type: 'float32',\n * //     data: Float32Array(421632) [0.0682469978928566, 0.08104046434164047, -0.4975186586380005, ...],\n * //     size: 421632\n * //   }\n * // }\n * ```\n */\nexport class HubertModel extends Wav2Vec2PreTrainedModel { }\n\n/**\n * Hubert Model with a `language modeling` head on top for Connectionist Temporal Classification (CTC).\n */\nexport class HubertForCTC extends Wav2Vec2PreTrainedModel {\n    /**\n     * @param {Object} model_inputs\n     * @param {Tensor} model_inputs.input_values Float values of input raw speech waveform.\n     * @param {Tensor} model_inputs.attention_mask Mask to avoid performing convolution and attention on padding token indices. Mask values selected in [0, 1]\n     */\n    async _call(model_inputs) {\n        return new CausalLMOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * Hubert Model with a sequence classification head on top (a linear layer over the pooled output) for tasks like SUPERB Keyword Spotting.\n */\nexport class HubertForSequenceClassification extends Wav2Vec2PreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// WavLM models\n/**\n * An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained models.\n */\nexport class WavLMPreTrainedModel extends PreTrainedModel { };\n\n/**\n * The bare WavLM Model transformer outputting raw hidden-states without any specific head on top.\n * \n * **Example:** Load and run a `WavLMModel` for feature extraction.\n * \n * ```javascript\n * import { AutoProcessor, AutoModel, read_audio } from '@huggingface/transformers';\n * \n * // Read and preprocess audio\n * const processor = await AutoProcessor.from_pretrained('Xenova/wavlm-base');\n * const audio = await read_audio('https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/jfk.wav', 16000);\n * const inputs = await processor(audio);\n * \n * // Run model with inputs\n * const model = await AutoModel.from_pretrained('Xenova/wavlm-base');\n * const output = await model(inputs);\n * // {\n * //   last_hidden_state: Tensor {\n * //     dims: [ 1, 549, 768 ],\n * //     type: 'float32',\n * //     data: Float32Array(421632) [-0.349443256855011, -0.39341306686401367,  0.022836603224277496, ...],\n * //     size: 421632\n * //   }\n * // }\n * ```\n */\nexport class WavLMModel extends WavLMPreTrainedModel { }\n\n/**\n * WavLM Model with a `language modeling` head on top for Connectionist Temporal Classification (CTC).\n */\nexport class WavLMForCTC extends WavLMPreTrainedModel {\n    /**\n     * @param {Object} model_inputs\n     * @param {Tensor} model_inputs.input_values Float values of input raw speech waveform.\n     * @param {Tensor} model_inputs.attention_mask Mask to avoid performing convolution and attention on padding token indices. Mask values selected in [0, 1]\n     */\n    async _call(model_inputs) {\n        return new CausalLMOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * WavLM Model with a sequence classification head on top (a linear layer over the pooled output).\n */\nexport class WavLMForSequenceClassification extends WavLMPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<SequenceClassifierOutput>} An object containing the model's output logits for sequence classification.\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * WavLM Model with an XVector feature extraction head on top for tasks like Speaker Verification.\n * \n * **Example:** Extract speaker embeddings with `WavLMForXVector`.\n * ```javascript\n * import { AutoProcessor, AutoModel, read_audio } from '@huggingface/transformers';\n * \n * // Read and preprocess audio\n * const processor = await AutoProcessor.from_pretrained('Xenova/wavlm-base-plus-sv');\n * const url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/jfk.wav';\n * const audio = await read_audio(url, 16000);\n * const inputs = await processor(audio);\n * \n * // Run model with inputs\n * const model = await AutoModel.from_pretrained('Xenova/wavlm-base-plus-sv');\n * const outputs = await model(inputs);\n * // {\n * //   logits: Tensor {\n * //     dims: [ 1, 512 ],\n * //     type: 'float32',\n * //     data: Float32Array(512) [0.5847219228744507, ...],\n * //     size: 512\n * //   },\n * //   embeddings: Tensor {\n * //     dims: [ 1, 512 ],\n * //     type: 'float32',\n * //     data: Float32Array(512) [-0.09079201519489288, ...],\n * //     size: 512\n * //   }\n * // }\n * ```\n */\nexport class WavLMForXVector extends WavLMPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<XVectorOutput>} An object containing the model's output logits and speaker embeddings.\n     */\n    async _call(model_inputs) {\n        return new XVectorOutput(await super._call(model_inputs));\n    }\n}\n\n/**\n * WavLM Model with a frame classification head on top for tasks like Speaker Diarization.\n * \n * **Example:** Perform speaker diarization with `WavLMForAudioFrameClassification`.\n * ```javascript\n * import { AutoProcessor, AutoModelForAudioFrameClassification, read_audio } from '@huggingface/transformers';\n * \n * // Read and preprocess audio\n * const processor = await AutoProcessor.from_pretrained('Xenova/wavlm-base-plus-sd');\n * const url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/jfk.wav';\n * const audio = await read_audio(url, 16000);\n * const inputs = await processor(audio);\n * \n * // Run model with inputs\n * const model = await AutoModelForAudioFrameClassification.from_pretrained('Xenova/wavlm-base-plus-sd');\n * const { logits } = await model(inputs);\n * // {\n * //   logits: Tensor {\n * //     dims: [ 1, 549, 2 ],  // [batch_size, num_frames, num_speakers]\n * //     type: 'float32',\n * //     data: Float32Array(1098) [-3.5301010608673096, ...],\n * //     size: 1098\n * //   }\n * // }\n * \n * const labels = logits[0].sigmoid().tolist().map(\n *     frames => frames.map(speaker => speaker > 0.5 ? 1 : 0)\n * );\n * console.log(labels); // labels is a one-hot array of shape (num_frames, num_speakers)\n * // [\n * //     [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0],\n * //     [0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0],\n * //     [0, 0], [0, 1], [0, 1], [0, 1], [0, 1], [0, 1],\n * //     ...\n * // ]\n * ```\n */\nexport class WavLMForAudioFrameClassification extends WavLMPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<TokenClassifierOutput>} An object containing the model's output logits for sequence classification.\n     */\n    async _call(model_inputs) {\n        return new TokenClassifierOutput(await super._call(model_inputs));\n    }\n}\n\n//////////////////////////////////////////////////\n// SpeechT5 models\n/**\n * An abstract class to handle weights initialization and a simple interface for downloading and loading pretrained models.\n */\nexport class SpeechT5PreTrainedModel extends PreTrainedModel {\n\n    /**\n     * Creates a new instance of the `SpeechT5ForTextToSpeech` class.\n     * @param {Object} config The model configuration.\n     * @param {Record<string, any>} sessions The inference sessions for the model.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, sessions, generation_config) {\n        super(config, sessions);\n        this.generation_config = generation_config;\n    }\n};\n\n/**\n * The bare SpeechT5 Encoder-Decoder Model outputting raw hidden-states without any specific pre- or post-nets.\n */\nexport class SpeechT5Model extends SpeechT5PreTrainedModel { };\n\n/**\n * SpeechT5 Model with a speech encoder and a text decoder.\n * \n * **Example:** Generate speech from text with `SpeechT5ForSpeechToText`.\n * ```javascript\n * import { AutoTokenizer, AutoProcessor, SpeechT5ForTextToSpeech, SpeechT5HifiGan, Tensor } from '@huggingface/transformers';\n * \n * // Load the tokenizer and processor\n * const tokenizer = await AutoTokenizer.from_pretrained('Xenova/speecht5_tts');\n * const processor = await AutoProcessor.from_pretrained('Xenova/speecht5_tts');\n * \n * // Load the models\n * // NOTE: We use the full-precision versions as they are more accurate\n * const model = await SpeechT5ForTextToSpeech.from_pretrained('Xenova/speecht5_tts', { dtype: 'fp32' });\n * const vocoder = await SpeechT5HifiGan.from_pretrained('Xenova/speecht5_hifigan', { dtype: 'fp32' });\n * \n * // Load speaker embeddings from URL\n * const speaker_embeddings_data = new Float32Array(\n *     await (await fetch('https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/speaker_embeddings.bin')).arrayBuffer()\n * );\n * const speaker_embeddings = new Tensor(\n *     'float32',\n *     speaker_embeddings_data,\n *     [1, speaker_embeddings_data.length]\n * )\n * \n * // Run tokenization\n * const { input_ids } = tokenizer('Hello, my dog is cute');\n * \n * // Generate waveform\n * const { waveform } = await model.generate_speech(input_ids, speaker_embeddings, { vocoder });\n * console.log(waveform)\n * // Tensor {\n * //   dims: [ 26112 ],\n * //   type: 'float32',\n * //   size: 26112,\n * //   data: Float32Array(26112) [ -0.00043630177970044315, -0.00018082228780258447, ... ],\n * // }\n * ```\n */\nexport class SpeechT5ForSpeechToText extends SpeechT5PreTrainedModel { }\n\n/**\n * SpeechT5 Model with a text encoder and a speech decoder.\n */\nexport class SpeechT5ForTextToSpeech extends SpeechT5PreTrainedModel {\n\n    /**\n     * @typedef {Object} SpeechOutput\n     * @property {Tensor} [spectrogram] The predicted log-mel spectrogram of shape\n     * `(output_sequence_length, config.num_mel_bins)`. Returned when no `vocoder` is provided\n     * @property {Tensor} [waveform] The predicted waveform of shape `(num_frames,)`. Returned when a `vocoder` is provided.\n     * @property {Tensor} [cross_attentions] The outputs of the decoder's cross-attention layers of shape\n     * `(config.decoder_layers, config.decoder_attention_heads, output_sequence_length, input_sequence_length)`. returned when `output_cross_attentions` is `true`.\n     */\n\n    /**\n     * Converts a sequence of input tokens into a sequence of mel spectrograms, which are subsequently turned into a speech waveform using a vocoder.\n     * @param {Tensor} input_values Indices of input sequence tokens in the vocabulary.\n     * @param {Tensor} speaker_embeddings Tensor containing the speaker embeddings.\n     * @param {Object} options Optional parameters for generating speech.\n     * @param {number} [options.threshold=0.5] The generated sequence ends when the predicted stop token probability exceeds this value.\n     * @param {number} [options.minlenratio=0.0] Used to calculate the minimum required length for the output sequence.\n     * @param {number} [options.maxlenratio=20.0] Used to calculate the maximum allowed length for the output sequence.\n     * @param {Object} [options.vocoder=null] The vocoder that converts the mel spectrogram into a speech waveform. If `null`, the output is the mel spectrogram.\n     * @param {boolean} [options.output_cross_attentions=false] Whether or not to return the attentions tensors of the decoder's cross-attention layers.\n     * @returns {Promise<SpeechOutput>} A promise which resolves to an object containing the spectrogram, waveform, and cross-attention tensors.\n     */\n    async generate_speech(input_values, speaker_embeddings, {\n        threshold = 0.5,\n        minlenratio = 0.0,\n        maxlenratio = 20.0,\n        vocoder = null,\n        // output_cross_attentions = false, // TODO add\n    } = {}) {\n\n        const model_inputs = {\n            input_ids: input_values\n        }\n\n        const { encoder_outputs, encoder_attention_mask } = await encoderForward(this, model_inputs);\n\n        const r = encoder_outputs.dims[1] / this.config.reduction_factor;\n        const maxlen = Math.floor(r * maxlenratio);\n        const minlen = Math.floor(r * minlenratio);\n\n        const num_mel_bins = this.config.num_mel_bins;\n\n        let spectrogramParts = [];\n        let past_key_values = null;\n        let decoder_outputs = null;\n        let idx = 0;\n\n        while (true) {\n            ++idx;\n\n            const use_cache_branch = boolTensor(!!decoder_outputs);\n            let output_sequence;\n            if (decoder_outputs) {\n                output_sequence = decoder_outputs.output_sequence_out;\n            } else {\n                output_sequence = new Tensor(\n                    'float32',\n                    new Float32Array(num_mel_bins),\n                    [1, 1, num_mel_bins],\n                )\n            }\n            let decoderFeeds = {\n                use_cache_branch,\n                output_sequence,\n                encoder_attention_mask: encoder_attention_mask,\n                speaker_embeddings: speaker_embeddings,\n                encoder_hidden_states: encoder_outputs,\n            };\n\n            this.addPastKeyValues(decoderFeeds, past_key_values);\n            decoder_outputs = await sessionRun(this.sessions['decoder_model_merged'], decoderFeeds);\n            past_key_values = this.getPastKeyValues(decoder_outputs, past_key_values);\n\n            const { prob, spectrum } = decoder_outputs;\n            spectrogramParts.push(spectrum);\n\n            if (idx >= minlen && (\n                // Finished when stop token or maximum length is reached.\n                Array.from(prob.data).filter(p => p >= threshold).length > 0 || idx >= maxlen\n            )) {\n                break;\n            }\n        }\n\n        const spectrogram = cat(spectrogramParts);\n        const { waveform } = await sessionRun(vocoder.sessions['model'], { spectrogram });\n\n        return {\n            spectrogram,\n            waveform,\n            // cross_attentions: null, // TODO add\n        }\n    }\n}\n\n/**\n * HiFi-GAN vocoder.\n * \n * See [SpeechT5ForSpeechToText](./models#module_models.SpeechT5ForSpeechToText) for example usage.\n */\nexport class SpeechT5HifiGan extends PreTrainedModel {\n    main_input_name = 'spectrogram';\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// TrOCR models\nexport class TrOCRPreTrainedModel extends PreTrainedModel {\n    /**\n     * Creates a new instance of the `TrOCRPreTrainedModel` class.\n     * @param {Object} config The configuration of the model.\n     * @param {any} session The ONNX session containing the model weights.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, session, generation_config) {\n        super(config, session);\n        this.generation_config = generation_config;\n    }\n}\n\n/**\n * The TrOCR Decoder with a language modeling head.\n */\nexport class TrOCRForCausalLM extends TrOCRPreTrainedModel { }\n\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// Mistral models\n/**\n * The bare Mistral Model outputting raw hidden-states without any specific head on top.\n */\nexport class MistralPreTrainedModel extends PreTrainedModel {\n    /**\n     * Creates a new instance of the `MistralPreTrainedModel` class.\n     * @param {Object} config The configuration of the model.\n     * @param {any} session The ONNX session containing the model weights.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, session, generation_config) {\n        super(config, session);\n        this.generation_config = generation_config;\n    }\n}\n\nexport class MistralModel extends MistralPreTrainedModel { }\n\nexport class MistralForCausalLM extends MistralPreTrainedModel { }\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// Starcoder2 models\n/**\n * The bare Starcoder2 Model outputting raw hidden-states without any specific head on top.\n */\nexport class Starcoder2PreTrainedModel extends PreTrainedModel {\n    /**\n     * Creates a new instance of the `Starcoder2PreTrainedModel` class.\n     * @param {Object} config The configuration of the model.\n     * @param {any} session The ONNX session containing the model weights.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, session, generation_config) {\n        super(config, session);\n        this.generation_config = generation_config;\n    }\n}\n\nexport class Starcoder2Model extends Starcoder2PreTrainedModel { }\n\nexport class Starcoder2ForCausalLM extends Starcoder2PreTrainedModel { }\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// Falcon models\n/**\n * The bare Falcon Model outputting raw hidden-states without any specific head on top.\n */\nexport class FalconPreTrainedModel extends PreTrainedModel {\n    /**\n     * Creates a new instance of the `FalconPreTrainedModel` class.\n     * @param {Object} config The configuration of the model.\n     * @param {any} session The ONNX session containing the model weights.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, session, generation_config) {\n        super(config, session);\n        this.generation_config = generation_config;\n    }\n}\n\nexport class FalconModel extends FalconPreTrainedModel { }\n\nexport class FalconForCausalLM extends FalconPreTrainedModel { }\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// CLAP models\nexport class ClapPreTrainedModel extends PreTrainedModel { }\n\nexport class ClapModel extends ClapPreTrainedModel { }\n\n/**\n * CLAP Text Model with a projection layer on top (a linear layer on top of the pooled output).\n * \n * **Example:** Compute text embeddings with `ClapTextModelWithProjection`.\n * \n * ```javascript\n * import { AutoTokenizer, ClapTextModelWithProjection } from '@huggingface/transformers';\n * \n * // Load tokenizer and text model\n * const tokenizer = await AutoTokenizer.from_pretrained('Xenova/clap-htsat-unfused');\n * const text_model = await ClapTextModelWithProjection.from_pretrained('Xenova/clap-htsat-unfused');\n * \n * // Run tokenization\n * const texts = ['a sound of a cat', 'a sound of a dog'];\n * const text_inputs = tokenizer(texts, { padding: true, truncation: true });\n * \n * // Compute embeddings\n * const { text_embeds } = await text_model(text_inputs);\n * // Tensor {\n * //   dims: [ 2, 512 ],\n * //   type: 'float32',\n * //   data: Float32Array(1024) [ ... ],\n * //   size: 1024\n * // }\n * ```\n */\nexport class ClapTextModelWithProjection extends ClapPreTrainedModel {\n\n    /** @type {PreTrainedModel.from_pretrained} */\n    static async from_pretrained(pretrained_model_name_or_path, options = {}) {\n        // Update default model file name if not provided\n        options.model_file_name ??= 'text_model';\n        return super.from_pretrained(pretrained_model_name_or_path, options);\n    }\n}\n\n/**\n * CLAP Audio Model with a projection layer on top (a linear layer on top of the pooled output).\n * \n * **Example:** Compute audio embeddings with `ClapAudioModelWithProjection`.\n * \n * ```javascript\n * import { AutoProcessor, ClapAudioModelWithProjection, read_audio } from '@huggingface/transformers';\n * \n * // Load processor and audio model\n * const processor = await AutoProcessor.from_pretrained('Xenova/clap-htsat-unfused');\n * const audio_model = await ClapAudioModelWithProjection.from_pretrained('Xenova/clap-htsat-unfused');\n * \n * // Read audio and run processor\n * const audio = await read_audio('https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/cat_meow.wav');\n * const audio_inputs = await processor(audio);\n * \n * // Compute embeddings\n * const { audio_embeds } = await audio_model(audio_inputs);\n * // Tensor {\n * //   dims: [ 1, 512 ],\n * //   type: 'float32',\n * //   data: Float32Array(512) [ ... ],\n * //   size: 512\n * // }\n * ```\n */\nexport class ClapAudioModelWithProjection extends ClapPreTrainedModel {\n    /** @type {PreTrainedModel.from_pretrained} */\n    static async from_pretrained(pretrained_model_name_or_path, options = {}) {\n        // Update default model file name if not provided\n        options.model_file_name ??= 'audio_model';\n        return super.from_pretrained(pretrained_model_name_or_path, options);\n    }\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// VITS models\nexport class VitsPreTrainedModel extends PreTrainedModel { }\n\n/**\n * The complete VITS model, for text-to-speech synthesis.\n * \n * **Example:** Generate speech from text with `VitsModel`.\n * ```javascript\n * import { AutoTokenizer, VitsModel } from '@huggingface/transformers';\n * \n * // Load the tokenizer and model\n * const tokenizer = await AutoTokenizer.from_pretrained('Xenova/mms-tts-eng');\n * const model = await VitsModel.from_pretrained('Xenova/mms-tts-eng');\n * \n * // Run tokenization\n * const inputs = tokenizer('I love transformers');\n * \n * // Generate waveform\n * const { waveform } = await model(inputs);\n * // Tensor {\n * //   dims: [ 1, 35328 ],\n * //   type: 'float32',\n * //   data: Float32Array(35328) [ ... ],\n * //   size: 35328,\n * // }\n * ```\n */\nexport class VitsModel extends VitsPreTrainedModel {\n    /**\n     * Calls the model on new inputs.\n     * @param {Object} model_inputs The inputs to the model.\n     * @returns {Promise<VitsModelOutput>} The outputs for the VITS model.\n     */\n    async _call(model_inputs) {\n        return new VitsModelOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// Segformer models\nexport class SegformerPreTrainedModel extends PreTrainedModel { }\n\n/**\n * The bare SegFormer encoder (Mix-Transformer) outputting raw hidden-states without any specific head on top.\n */\nexport class SegformerModel extends SegformerPreTrainedModel { }\n\n/**\n * SegFormer Model transformer with an image classification head on top (a linear layer on top of the final hidden states) e.g. for ImageNet.\n */\nexport class SegformerForImageClassification extends SegformerPreTrainedModel { }\n\n/**\n * SegFormer Model transformer with an all-MLP decode head on top e.g. for ADE20k, CityScapes.\n */\nexport class SegformerForSemanticSegmentation extends SegformerPreTrainedModel { }\n\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// StableLm models\nexport class StableLmPreTrainedModel extends PreTrainedModel {\n    /**\n     * Creates a new instance of the `StableLmPreTrainedModel` class.\n     * @param {Object} config The configuration of the model.\n     * @param {any} session The ONNX session containing the model weights.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, session, generation_config) {\n        super(config, session);\n        this.generation_config = generation_config;\n    }\n}\n\n/**\n * The bare StableLm Model transformer outputting raw hidden-states without any specific head on top.\n */\nexport class StableLmModel extends StableLmPreTrainedModel { }\n\n/**\n * StableLm Model with a `language modeling` head on top for Causal Language Modeling (with past).\n */\nexport class StableLmForCausalLM extends StableLmPreTrainedModel { }\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\nexport class EfficientNetPreTrainedModel extends PreTrainedModel { }\n\n/**\n * The bare EfficientNet model outputting raw features without any specific head on top.\n */\nexport class EfficientNetModel extends EfficientNetPreTrainedModel { }\n\n/**\n * EfficientNet Model with an image classification head on top (a linear layer on top of the pooled features).\n */\nexport class EfficientNetForImageClassification extends EfficientNetPreTrainedModel {\n    /**\n     * @param {any} model_inputs\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// Musicgen models\nexport class MusicgenPreTrainedModel extends PreTrainedModel { }\n\n/**\n * The bare Musicgen decoder model outputting raw hidden-states without any specific head on top.\n */\nexport class MusicgenModel extends MusicgenPreTrainedModel { }\n\n/**\n * The MusicGen decoder model with a language modelling head on top.\n */\nexport class MusicgenForCausalLM extends MusicgenPreTrainedModel { }\n\n/**\n * The composite MusicGen model with a text encoder, audio encoder and Musicgen decoder,\n * for music generation tasks with one or both of text and audio prompts.\n * \n * **Example:** Generate music from text with `Xenova/musicgen-small`.\n * ```javascript\n * import { AutoTokenizer, MusicgenForConditionalGeneration } from '@huggingface/transformers';\n * \n * // Load tokenizer and model\n * const tokenizer = await AutoTokenizer.from_pretrained('Xenova/musicgen-small');\n * const model = await MusicgenForConditionalGeneration.from_pretrained(\n *   'Xenova/musicgen-small', { dtype: 'fp32' }\n * );\n * \n * // Prepare text input\n * const prompt = '80s pop track with bassy drums and synth';\n * const inputs = tokenizer(prompt);\n * \n * // Generate audio\n * const audio_values = await model.generate({\n *   ...inputs,\n *   max_new_tokens: 512,\n *   do_sample: true,\n *   guidance_scale: 3,\n * });\n * \n * // (Optional) Write the output to a WAV file\n * import wavefile from 'wavefile';\n * import fs from 'fs';\n * \n * const wav = new wavefile.WaveFile();\n * wav.fromScratch(1, model.config.audio_encoder.sampling_rate, '32f', audio_values.data);\n * fs.writeFileSync('musicgen_out.wav', wav.toBuffer());\n * ```\n */\nexport class MusicgenForConditionalGeneration extends PreTrainedModel { // NOTE: not MusicgenPreTrainedModel\n    forward_params = [\n        'input_ids',\n        'attention_mask',\n        'encoder_outputs',\n        'decoder_input_ids',\n        'decoder_attention_mask',\n        'past_key_values',\n    ];\n\n    /**\n     * Creates a new instance of the `MusicgenForConditionalGeneration` class.\n     * @param {Object} config The model configuration.\n     * @param {Record<string, any>} sessions The inference sessions for the model.\n     * @param {GenerationConfig} generation_config The generation configuration.\n     */\n    constructor(config, sessions, generation_config) {\n        super(config, sessions);\n        this.generation_config = generation_config;\n    }\n\n    /**\n     * Apply the pattern mask to the final ids,\n     * then revert the pattern delay mask by filtering the pad token id in a single step.\n     * @param {Tensor} outputs The output tensor from the model.\n     * @returns {Tensor} The filtered output tensor.\n     */\n    _apply_and_filter_by_delay_pattern_mask(outputs) {\n        const [bs_x_codebooks, seqLength] = outputs.dims;\n        const num_codebooks = this.config.decoder.num_codebooks;\n        const upperBound = (seqLength - num_codebooks);\n\n        let newDataSize = 0;\n        for (let i = 0; i < outputs.size; ++i) {\n            if (outputs.data[i] === this.config.decoder.pad_token_id) {\n                continue;\n            }\n\n            const row = (i % seqLength);\n            const col = Math.floor(i / seqLength) % num_codebooks;\n\n            const diff = row - col;\n            if (diff > 0 && diff <= upperBound) {\n                outputs.data[newDataSize++] = outputs.data[i];\n            }\n        }\n\n        const batch_size = Math.floor(bs_x_codebooks / num_codebooks);\n        const inferred = newDataSize / (batch_size * num_codebooks);\n        // TODO: assert `inferred` is an integer\n        return new Tensor(\n            outputs.type,\n            outputs.data.slice(0, newDataSize),\n            [batch_size, num_codebooks, inferred]\n        );\n    }\n\n\n    prepare_inputs_for_generation(input_ids, model_inputs, generation_config) {\n        // apply the delay pattern mask\n        let clonedInputIds = structuredClone(input_ids);\n        for (let i = 0; i < clonedInputIds.length; ++i) {\n            for (let j = 0; j < clonedInputIds[i].length; ++j) {\n                if ((i % this.config.decoder.num_codebooks) >= j) {\n                    clonedInputIds[i][j] = BigInt(this.config.decoder.pad_token_id);\n                }\n            }\n        }\n        // for classifier free guidance we need to replicate the decoder args across the batch dim\n        // (we'll split these before sampling)\n        if (generation_config.guidance_scale !== null && generation_config.guidance_scale > 1) {\n            // [batch, seqLength] -> [2 * batch, seqLength]\n            clonedInputIds = clonedInputIds.concat(clonedInputIds);\n        }\n\n        const prepped = super.prepare_inputs_for_generation(clonedInputIds, model_inputs, generation_config);\n        return prepped;\n    }\n\n    /**\n     * Generates sequences of token ids for models with a language modeling head.\n     * @param {import('./generation/parameters.js').GenerationFunctionParameters} options\n     * @returns {Promise<ModelOutput|Tensor>} The output of the model, which can contain the generated token ids, attentions, and scores.\n     */\n    async generate(options) {\n\n        const output_ids = await super.generate(options);\n\n        // apply the pattern mask to the final ids\n        // tensor: int64[1,batch_size,4,chunk_length]\n        const audio_codes = this._apply_and_filter_by_delay_pattern_mask(\n            /** @type {Tensor} */(output_ids)\n        ).unsqueeze_(0); // append the frame dimension back to the audio codes\n\n        const { audio_values } = await sessionRun(this.sessions['encodec_decode'], { audio_codes })\n\n        return audio_values;\n    }\n}\n\n//////////////////////////////////////////////////\n// MobileNetV1 models\nexport class MobileNetV1PreTrainedModel extends PreTrainedModel { }\n\n/**\n * The bare MobileNetV1 model outputting raw hidden-states without any specific head on top.\n */\nexport class MobileNetV1Model extends MobileNetV1PreTrainedModel { }\n\n/**\n * MobileNetV1 model with an image classification head on top (a linear layer on top of the pooled features),\n * e.g. for ImageNet.\n */\nexport class MobileNetV1ForImageClassification extends MobileNetV1PreTrainedModel {\n    /**\n     * @param {any} model_inputs\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// MobileNetV2 models\nexport class MobileNetV2PreTrainedModel extends PreTrainedModel { }\n\n/**\n * The bare MobileNetV2 model outputting raw hidden-states without any specific head on top.\n */\nexport class MobileNetV2Model extends MobileNetV2PreTrainedModel { }\n\n/**\n * MobileNetV2 model with an image classification head on top (a linear layer on top of the pooled features),\n * e.g. for ImageNet.\n */\nexport class MobileNetV2ForImageClassification extends MobileNetV2PreTrainedModel {\n    /**\n     * @param {any} model_inputs\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// MobileNetV3 models\nexport class MobileNetV3PreTrainedModel extends PreTrainedModel { }\n\n/**\n * The bare MobileNetV3 model outputting raw hidden-states without any specific head on top.\n */\nexport class MobileNetV3Model extends MobileNetV3PreTrainedModel { }\n\n/**\n * MobileNetV3 model with an image classification head on top (a linear layer on top of the pooled features),\n * e.g. for ImageNet.\n */\nexport class MobileNetV3ForImageClassification extends MobileNetV3PreTrainedModel {\n    /**\n     * @param {any} model_inputs\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\n// MobileNetV4 models\nexport class MobileNetV4PreTrainedModel extends PreTrainedModel { }\n\n/**\n * The bare MobileNetV4 model outputting raw hidden-states without any specific head on top.\n */\nexport class MobileNetV4Model extends MobileNetV4PreTrainedModel { }\n\n/**\n * MobileNetV4 model with an image classification head on top (a linear layer on top of the pooled features),\n * e.g. for ImageNet.\n */\nexport class MobileNetV4ForImageClassification extends MobileNetV4PreTrainedModel {\n    /**\n     * @param {any} model_inputs\n     */\n    async _call(model_inputs) {\n        return new SequenceClassifierOutput(await super._call(model_inputs));\n    }\n}\n//////////////////////////////////////////////////\n\n\n//////////////////////////////////////////////////\n// AutoModels, used to simplify construction of PreTrainedModels\n// (uses config to instantiate correct class)\n\n/**\n * Base class of all AutoModels. Contains the `from_pretrained` function\n * which is used to instantiate pretrained models.\n */\nexport class PretrainedMixin {\n    /**\n     * Mapping from model type to model class.\n     * @type {Map<string, Object>[]}\n     */\n    static MODEL_CLASS_MAPPINGS = null;\n\n    /**\n     * Whether to attempt to instantiate the base class (`PretrainedModel`) if \n     * the model type is not found in the mapping.\n     */\n    static BASE_IF_FAIL = false;\n\n\n    /** @type {typeof PreTrainedModel.from_pretrained} */\n    static async from_pretrained(pretrained_model_name_or_path, {\n        progress_callback = null,\n        config = null,\n        cache_dir = null,\n        local_files_only = false,\n        revision = 'main',\n        model_file_name = null,\n        subfolder = 'onnx',\n        device = null,\n        dtype = null,\n        use_external_data_format = null,\n        session_options = {},\n    } = {}) {\n\n        let options = {\n            progress_callback,\n            config,\n            cache_dir,\n            local_files_only,\n            revision,\n            model_file_name,\n            subfolder,\n            device,\n            dtype,\n            use_external_data_format,\n            session_options,\n        }\n        options.config = await AutoConfig.from_pretrained(pretrained_model_name_or_path, options);\n\n        if (!this.MODEL_CLASS_MAPPINGS) {\n            throw new Error(\"`MODEL_CLASS_MAPPINGS` not implemented for this type of `AutoClass`: \" + this.name);\n        }\n\n        for (let MODEL_CLASS_MAPPING of this.MODEL_CLASS_MAPPINGS) {\n            const modelInfo = MODEL_CLASS_MAPPING.get(options.config.model_type);\n            if (!modelInfo) {\n                continue; // Item not found in this mapping\n            }\n            return await modelInfo[1].from_pretrained(pretrained_model_name_or_path, options);\n        }\n\n        if (this.BASE_IF_FAIL) {\n            console.warn(`Unknown model class \"${options.config.model_type}\", attempting to construct from base class.`);\n            return await PreTrainedModel.from_pretrained(pretrained_model_name_or_path, options);\n        } else {\n            throw Error(`Unsupported model type: ${options.config.model_type}`)\n        }\n    }\n}\n\nconst MODEL_MAPPING_NAMES_ENCODER_ONLY = new Map([\n    ['bert', ['BertModel', BertModel]],\n    ['nomic_bert', ['NomicBertModel', NomicBertModel]],\n    ['roformer', ['RoFormerModel', RoFormerModel]],\n    ['electra', ['ElectraModel', ElectraModel]],\n    ['esm', ['EsmModel', EsmModel]],\n    ['convbert', ['ConvBertModel', ConvBertModel]],\n    ['camembert', ['CamembertModel', CamembertModel]],\n    ['deberta', ['DebertaModel', DebertaModel]],\n    ['deberta-v2', ['DebertaV2Model', DebertaV2Model]],\n    ['mpnet', ['MPNetModel', MPNetModel]],\n    ['albert', ['AlbertModel', AlbertModel]],\n    ['distilbert', ['DistilBertModel', DistilBertModel]],\n    ['roberta', ['RobertaModel', RobertaModel]],\n    ['xlm', ['XLMModel', XLMModel]],\n    ['xlm-roberta', ['XLMRobertaModel', XLMRobertaModel]],\n    ['clap', ['ClapModel', ClapModel]],\n    ['clip', ['CLIPModel', CLIPModel]],\n    ['clipseg', ['CLIPSegModel', CLIPSegModel]],\n    ['chinese_clip', ['ChineseCLIPModel', ChineseCLIPModel]],\n    ['siglip', ['SiglipModel', SiglipModel]],\n    ['mobilebert', ['MobileBertModel', MobileBertModel]],\n    ['squeezebert', ['SqueezeBertModel', SqueezeBertModel]],\n    ['wav2vec2', ['Wav2Vec2Model', Wav2Vec2Model]],\n    ['wav2vec2-bert', ['Wav2Vec2BertModel', Wav2Vec2BertModel]],\n    ['unispeech', ['UniSpeechModel', UniSpeechModel]],\n    ['unispeech-sat', ['UniSpeechSatModel', UniSpeechSatModel]],\n    ['hubert', ['HubertModel', HubertModel]],\n    ['wavlm', ['WavLMModel', WavLMModel]],\n    ['audio-spectrogram-transformer', ['ASTModel', ASTModel]],\n    ['vits', ['VitsModel', VitsModel]],\n    ['pyannote', ['PyAnnoteModel', PyAnnoteModel]],\n    ['wespeaker-resnet', ['WeSpeakerResNetModel', WeSpeakerResNetModel]],\n\n    ['detr', ['DetrModel', DetrModel]],\n    ['rt_detr', ['RTDetrModel', RTDetrModel]],\n    ['table-transformer', ['TableTransformerModel', TableTransformerModel]],\n    ['vit', ['ViTModel', ViTModel]],\n    ['fastvit', ['FastViTModel', FastViTModel]],\n    ['mobilevit', ['MobileViTModel', MobileViTModel]],\n    ['mobilevitv2', ['MobileViTV2Model', MobileViTV2Model]],\n    ['owlvit', ['OwlViTModel', OwlViTModel]],\n    ['owlv2', ['Owlv2Model', Owlv2Model]],\n    ['beit', ['BeitModel', BeitModel]],\n    ['deit', ['DeiTModel', DeiTModel]],\n    ['convnext', ['ConvNextModel', ConvNextModel]],\n    ['convnextv2', ['ConvNextV2Model', ConvNextV2Model]],\n    ['dinov2', ['Dinov2Model', Dinov2Model]],\n    ['resnet', ['ResNetModel', ResNetModel]],\n    ['swin', ['SwinModel', SwinModel]],\n    ['swin2sr', ['Swin2SRModel', Swin2SRModel]],\n    ['donut-swin', ['DonutSwinModel', DonutSwinModel]],\n    ['yolos', ['YolosModel', YolosModel]],\n    ['dpt', ['DPTModel', DPTModel]],\n    ['glpn', ['GLPNModel', GLPNModel]],\n\n    ['hifigan', ['SpeechT5HifiGan', SpeechT5HifiGan]],\n    ['efficientnet', ['EfficientNetModel', EfficientNetModel]],\n\n    ['mobilenet_v1', ['MobileNetV1Model', MobileNetV1Model]],\n    ['mobilenet_v2', ['MobileNetV2Model', MobileNetV2Model]],\n    ['mobilenet_v3', ['MobileNetV3Model', MobileNetV3Model]],\n    ['mobilenet_v4', ['MobileNetV4Model', MobileNetV4Model]],\n]);\n\nconst MODEL_MAPPING_NAMES_ENCODER_DECODER = new Map([\n    ['t5', ['T5Model', T5Model]],\n    ['longt5', ['LongT5Model', LongT5Model]],\n    ['mt5', ['MT5Model', MT5Model]],\n    ['bart', ['BartModel', BartModel]],\n    ['mbart', ['MBartModel', MBartModel]],\n    ['marian', ['MarianModel', MarianModel]],\n    ['whisper', ['WhisperModel', WhisperModel]],\n    ['m2m_100', ['M2M100Model', M2M100Model]],\n    ['blenderbot', ['BlenderbotModel', BlenderbotModel]],\n    ['blenderbot-small', ['BlenderbotSmallModel', BlenderbotSmallModel]],\n]);\n\n\nconst MODEL_MAPPING_NAMES_DECODER_ONLY = new Map([\n    ['bloom', ['BloomModel', BloomModel]],\n    ['gpt2', ['GPT2Model', GPT2Model]],\n    ['gptj', ['GPTJModel', GPTJModel]],\n    ['gpt_bigcode', ['GPTBigCodeModel', GPTBigCodeModel]],\n    ['gpt_neo', ['GPTNeoModel', GPTNeoModel]],\n    ['gpt_neox', ['GPTNeoXModel', GPTNeoXModel]],\n    ['codegen', ['CodeGenModel', CodeGenModel]],\n    ['llama', ['LlamaModel', LlamaModel]],\n    ['cohere', ['CohereModel', CohereModel]],\n    ['gemma', ['GemmaModel', GemmaModel]],\n    ['gemma2', ['Gemma2Model', Gemma2Model]],\n    ['openelm', ['OpenELMModel', OpenELMModel]],\n    ['qwen2', ['Qwen2Model', Qwen2Model]],\n    ['phi', ['PhiModel', PhiModel]],\n    ['phi3', ['Phi3Model', Phi3Model]],\n    ['mpt', ['MptModel', MptModel]],\n    ['opt', ['OPTModel', OPTModel]],\n    ['mistral', ['MistralModel', MistralModel]],\n    ['starcoder2', ['Starcoder2Model', Starcoder2Model]],\n    ['falcon', ['FalconModel', FalconModel]],\n    ['stablelm', ['StableLmModel', StableLmModel]],\n]);\n\nconst MODEL_FOR_SPEECH_SEQ_2_SEQ_MAPPING_NAMES = new Map([\n    ['speecht5', ['SpeechT5ForSpeechToText', SpeechT5ForSpeechToText]],\n    ['whisper', ['WhisperForConditionalGeneration', WhisperForConditionalGeneration]],\n]);\n\nconst MODEL_FOR_TEXT_TO_SPECTROGRAM_MAPPING_NAMES = new Map([\n    ['speecht5', ['SpeechT5ForTextToSpeech', SpeechT5ForTextToSpeech]],\n]);\n\nconst MODEL_FOR_TEXT_TO_WAVEFORM_MAPPING_NAMES = new Map([\n    ['vits', ['VitsModel', VitsModel]],\n    ['musicgen', ['MusicgenForConditionalGeneration', MusicgenForConditionalGeneration]],\n]);\n\nconst MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING_NAMES = new Map([\n    ['bert', ['BertForSequenceClassification', BertForSequenceClassification]],\n    ['roformer', ['RoFormerForSequenceClassification', RoFormerForSequenceClassification]],\n    ['electra', ['ElectraForSequenceClassification', ElectraForSequenceClassification]],\n    ['esm', ['EsmForSequenceClassification', EsmForSequenceClassification]],\n    ['convbert', ['ConvBertForSequenceClassification', ConvBertForSequenceClassification]],\n    ['camembert', ['CamembertForSequenceClassification', CamembertForSequenceClassification]],\n    ['deberta', ['DebertaForSequenceClassification', DebertaForSequenceClassification]],\n    ['deberta-v2', ['DebertaV2ForSequenceClassification', DebertaV2ForSequenceClassification]],\n    ['mpnet', ['MPNetForSequenceClassification', MPNetForSequenceClassification]],\n    ['albert', ['AlbertForSequenceClassification', AlbertForSequenceClassification]],\n    ['distilbert', ['DistilBertForSequenceClassification', DistilBertForSequenceClassification]],\n    ['roberta', ['RobertaForSequenceClassification', RobertaForSequenceClassification]],\n    ['xlm', ['XLMForSequenceClassification', XLMForSequenceClassification]],\n    ['xlm-roberta', ['XLMRobertaForSequenceClassification', XLMRobertaForSequenceClassification]],\n    ['bart', ['BartForSequenceClassification', BartForSequenceClassification]],\n    ['mbart', ['MBartForSequenceClassification', MBartForSequenceClassification]],\n    ['mobilebert', ['MobileBertForSequenceClassification', MobileBertForSequenceClassification]],\n    ['squeezebert', ['SqueezeBertForSequenceClassification', SqueezeBertForSequenceClassification]],\n]);\n\nconst MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING_NAMES = new Map([\n    ['bert', ['BertForTokenClassification', BertForTokenClassification]],\n    ['roformer', ['RoFormerForTokenClassification', RoFormerForTokenClassification]],\n    ['electra', ['ElectraForTokenClassification', ElectraForTokenClassification]],\n    ['esm', ['EsmForTokenClassification', EsmForTokenClassification]],\n    ['convbert', ['ConvBertForTokenClassification', ConvBertForTokenClassification]],\n    ['camembert', ['CamembertForTokenClassification', CamembertForTokenClassification]],\n    ['deberta', ['DebertaForTokenClassification', DebertaForTokenClassification]],\n    ['deberta-v2', ['DebertaV2ForTokenClassification', DebertaV2ForTokenClassification]],\n    ['mpnet', ['MPNetForTokenClassification', MPNetForTokenClassification]],\n    ['distilbert', ['DistilBertForTokenClassification', DistilBertForTokenClassification]],\n    ['roberta', ['RobertaForTokenClassification', RobertaForTokenClassification]],\n    ['xlm', ['XLMForTokenClassification', XLMForTokenClassification]],\n    ['xlm-roberta', ['XLMRobertaForTokenClassification', XLMRobertaForTokenClassification]],\n]);\n\nconst MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING_NAMES = new Map([\n    ['t5', ['T5ForConditionalGeneration', T5ForConditionalGeneration]],\n    ['longt5', ['LongT5ForConditionalGeneration', LongT5ForConditionalGeneration]],\n    ['mt5', ['MT5ForConditionalGeneration', MT5ForConditionalGeneration]],\n    ['bart', ['BartForConditionalGeneration', BartForConditionalGeneration]],\n    ['mbart', ['MBartForConditionalGeneration', MBartForConditionalGeneration]],\n    ['marian', ['MarianMTModel', MarianMTModel]],\n    ['m2m_100', ['M2M100ForConditionalGeneration', M2M100ForConditionalGeneration]],\n    ['blenderbot', ['BlenderbotForConditionalGeneration', BlenderbotForConditionalGeneration]],\n    ['blenderbot-small', ['BlenderbotSmallForConditionalGeneration', BlenderbotSmallForConditionalGeneration]],\n]);\n\nconst MODEL_FOR_CAUSAL_LM_MAPPING_NAMES = new Map([\n    ['bloom', ['BloomForCausalLM', BloomForCausalLM]],\n    ['gpt2', ['GPT2LMHeadModel', GPT2LMHeadModel]],\n    ['gptj', ['GPTJForCausalLM', GPTJForCausalLM]],\n    ['gpt_bigcode', ['GPTBigCodeForCausalLM', GPTBigCodeForCausalLM]],\n    ['gpt_neo', ['GPTNeoForCausalLM', GPTNeoForCausalLM]],\n    ['gpt_neox', ['GPTNeoXForCausalLM', GPTNeoXForCausalLM]],\n    ['codegen', ['CodeGenForCausalLM', CodeGenForCausalLM]],\n    ['llama', ['LlamaForCausalLM', LlamaForCausalLM]],\n    ['cohere', ['CohereForCausalLM', CohereForCausalLM]],\n    ['gemma', ['GemmaForCausalLM', GemmaForCausalLM]],\n    ['gemma2', ['Gemma2ForCausalLM', Gemma2ForCausalLM]],\n    ['openelm', ['OpenELMForCausalLM', OpenELMForCausalLM]],\n    ['qwen2', ['Qwen2ForCausalLM', Qwen2ForCausalLM]],\n    ['phi', ['PhiForCausalLM', PhiForCausalLM]],\n    ['phi3', ['Phi3ForCausalLM', Phi3ForCausalLM]],\n    ['mpt', ['MptForCausalLM', MptForCausalLM]],\n    ['opt', ['OPTForCausalLM', OPTForCausalLM]],\n    ['mbart', ['MBartForCausalLM', MBartForCausalLM]],\n    ['mistral', ['MistralForCausalLM', MistralForCausalLM]],\n    ['starcoder2', ['Starcoder2ForCausalLM', Starcoder2ForCausalLM]],\n    ['falcon', ['FalconForCausalLM', FalconForCausalLM]],\n    ['trocr', ['TrOCRForCausalLM', TrOCRForCausalLM]],\n    ['stablelm', ['StableLmForCausalLM', StableLmForCausalLM]],\n]);\n\nconst MODEL_FOR_MASKED_LM_MAPPING_NAMES = new Map([\n    ['bert', ['BertForMaskedLM', BertForMaskedLM]],\n    ['roformer', ['RoFormerForMaskedLM', RoFormerForMaskedLM]],\n    ['electra', ['ElectraForMaskedLM', ElectraForMaskedLM]],\n    ['esm', ['EsmForMaskedLM', EsmForMaskedLM]],\n    ['convbert', ['ConvBertForMaskedLM', ConvBertForMaskedLM]],\n    ['camembert', ['CamembertForMaskedLM', CamembertForMaskedLM]],\n    ['deberta', ['DebertaForMaskedLM', DebertaForMaskedLM]],\n    ['deberta-v2', ['DebertaV2ForMaskedLM', DebertaV2ForMaskedLM]],\n    ['mpnet', ['MPNetForMaskedLM', MPNetForMaskedLM]],\n    ['albert', ['AlbertForMaskedLM', AlbertForMaskedLM]],\n    ['distilbert', ['DistilBertForMaskedLM', DistilBertForMaskedLM]],\n    ['roberta', ['RobertaForMaskedLM', RobertaForMaskedLM]],\n    ['xlm', ['XLMWithLMHeadModel', XLMWithLMHeadModel]],\n    ['xlm-roberta', ['XLMRobertaForMaskedLM', XLMRobertaForMaskedLM]],\n    ['mobilebert', ['MobileBertForMaskedLM', MobileBertForMaskedLM]],\n    ['squeezebert', ['SqueezeBertForMaskedLM', SqueezeBertForMaskedLM]],\n]);\n\nconst MODEL_FOR_QUESTION_ANSWERING_MAPPING_NAMES = new Map([\n    ['bert', ['BertForQuestionAnswering', BertForQuestionAnswering]],\n    ['roformer', ['RoFormerForQuestionAnswering', RoFormerForQuestionAnswering]],\n    ['electra', ['ElectraForQuestionAnswering', ElectraForQuestionAnswering]],\n    ['convbert', ['ConvBertForQuestionAnswering', ConvBertForQuestionAnswering]],\n    ['camembert', ['CamembertForQuestionAnswering', CamembertForQuestionAnswering]],\n    ['deberta', ['DebertaForQuestionAnswering', DebertaForQuestionAnswering]],\n    ['deberta-v2', ['DebertaV2ForQuestionAnswering', DebertaV2ForQuestionAnswering]],\n    ['mpnet', ['MPNetForQuestionAnswering', MPNetForQuestionAnswering]],\n    ['albert', ['AlbertForQuestionAnswering', AlbertForQuestionAnswering]],\n    ['distilbert', ['DistilBertForQuestionAnswering', DistilBertForQuestionAnswering]],\n    ['roberta', ['RobertaForQuestionAnswering', RobertaForQuestionAnswering]],\n    ['xlm', ['XLMForQuestionAnswering', XLMForQuestionAnswering]],\n    ['xlm-roberta', ['XLMRobertaForQuestionAnswering', XLMRobertaForQuestionAnswering]],\n    ['mobilebert', ['MobileBertForQuestionAnswering', MobileBertForQuestionAnswering]],\n    ['squeezebert', ['SqueezeBertForQuestionAnswering', SqueezeBertForQuestionAnswering]],\n]);\n\nconst MODEL_FOR_VISION_2_SEQ_MAPPING_NAMES = new Map([\n    ['vision-encoder-decoder', ['VisionEncoderDecoderModel', VisionEncoderDecoderModel]],\n]);\n\nconst MODEL_FOR_IMAGE_TEXT_TO_TEXT_MAPPING_NAMES = new Map([\n    ['llava', ['LlavaForConditionalGeneration', LlavaForConditionalGeneration]],\n    ['moondream1', ['Moondream1ForConditionalGeneration', Moondream1ForConditionalGeneration]],\n    ['florence2', ['Florence2ForConditionalGeneration', Florence2ForConditionalGeneration]],\n]);\n\nconst MODEL_FOR_DOCUMENT_QUESTION_ANSWERING_MAPPING_NAMES = new Map([\n    ['vision-encoder-decoder', ['VisionEncoderDecoderModel', VisionEncoderDecoderModel]],\n]);\n\nconst MODEL_FOR_IMAGE_CLASSIFICATION_MAPPING_NAMES = new Map([\n    ['vit', ['ViTForImageClassification', ViTForImageClassification]],\n    ['fastvit', ['FastViTForImageClassification', FastViTForImageClassification]],\n    ['mobilevit', ['MobileViTForImageClassification', MobileViTForImageClassification]],\n    ['mobilevitv2', ['MobileViTV2ForImageClassification', MobileViTV2ForImageClassification]],\n    ['beit', ['BeitForImageClassification', BeitForImageClassification]],\n    ['deit', ['DeiTForImageClassification', DeiTForImageClassification]],\n    ['convnext', ['ConvNextForImageClassification', ConvNextForImageClassification]],\n    ['convnextv2', ['ConvNextV2ForImageClassification', ConvNextV2ForImageClassification]],\n    ['dinov2', ['Dinov2ForImageClassification', Dinov2ForImageClassification]],\n    ['resnet', ['ResNetForImageClassification', ResNetForImageClassification]],\n    ['swin', ['SwinForImageClassification', SwinForImageClassification]],\n    ['segformer', ['SegformerForImageClassification', SegformerForImageClassification]],\n    ['efficientnet', ['EfficientNetForImageClassification', EfficientNetForImageClassification]],\n    ['mobilenet_v1', ['MobileNetV1ForImageClassification', MobileNetV1ForImageClassification]],\n    ['mobilenet_v2', ['MobileNetV2ForImageClassification', MobileNetV2ForImageClassification]],\n    ['mobilenet_v3', ['MobileNetV3ForImageClassification', MobileNetV3ForImageClassification]],\n    ['mobilenet_v4', ['MobileNetV4ForImageClassification', MobileNetV4ForImageClassification]],\n]);\n\nconst MODEL_FOR_OBJECT_DETECTION_MAPPING_NAMES = new Map([\n    ['detr', ['DetrForObjectDetection', DetrForObjectDetection]],\n    ['rt_detr', ['RTDetrForObjectDetection', RTDetrForObjectDetection]],\n    ['table-transformer', ['TableTransformerForObjectDetection', TableTransformerForObjectDetection]],\n    ['yolos', ['YolosForObjectDetection', YolosForObjectDetection]],\n]);\n\nconst MODEL_FOR_ZERO_SHOT_OBJECT_DETECTION_MAPPING_NAMES = new Map([\n    ['owlvit', ['OwlViTForObjectDetection', OwlViTForObjectDetection]],\n    ['owlv2', ['Owlv2ForObjectDetection', Owlv2ForObjectDetection]],\n]);\n\nconst MODEL_FOR_IMAGE_SEGMENTATION_MAPPING_NAMES = new Map([\n    ['detr', ['DetrForSegmentation', DetrForSegmentation]],\n    ['clipseg', ['CLIPSegForImageSegmentation', CLIPSegForImageSegmentation]],\n]);\n\nconst MODEL_FOR_SEMANTIC_SEGMENTATION_MAPPING_NAMES = new Map([\n    ['segformer', ['SegformerForSemanticSegmentation', SegformerForSemanticSegmentation]],\n]);\n\nconst MODEL_FOR_MASK_GENERATION_MAPPING_NAMES = new Map([\n    ['sam', ['SamModel', SamModel]],\n]);\n\nconst MODEL_FOR_CTC_MAPPING_NAMES = new Map([\n    ['wav2vec2', ['Wav2Vec2ForCTC', Wav2Vec2ForCTC]],\n    ['wav2vec2-bert', ['Wav2Vec2BertForCTC', Wav2Vec2BertForCTC]],\n    ['unispeech', ['UniSpeechForCTC', UniSpeechForCTC]],\n    ['unispeech-sat', ['UniSpeechSatForCTC', UniSpeechSatForCTC]],\n    ['wavlm', ['WavLMForCTC', WavLMForCTC]],\n    ['hubert', ['HubertForCTC', HubertForCTC]],\n]);\n\nconst MODEL_FOR_AUDIO_CLASSIFICATION_MAPPING_NAMES = new Map([\n    ['wav2vec2', ['Wav2Vec2ForSequenceClassification', Wav2Vec2ForSequenceClassification]],\n    ['wav2vec2-bert', ['Wav2Vec2BertForSequenceClassification', Wav2Vec2BertForSequenceClassification]],\n    ['unispeech', ['UniSpeechForSequenceClassification', UniSpeechForSequenceClassification]],\n    ['unispeech-sat', ['UniSpeechSatForSequenceClassification', UniSpeechSatForSequenceClassification]],\n    ['wavlm', ['WavLMForSequenceClassification', WavLMForSequenceClassification]],\n    ['hubert', ['HubertForSequenceClassification', HubertForSequenceClassification]],\n    ['audio-spectrogram-transformer', ['ASTForAudioClassification', ASTForAudioClassification]],\n]);\n\nconst MODEL_FOR_AUDIO_XVECTOR_MAPPING_NAMES = new Map([\n    ['wavlm', ['WavLMForXVector', WavLMForXVector]],\n]);\n\nconst MODEL_FOR_AUDIO_FRAME_CLASSIFICATION_MAPPING_NAMES = new Map([\n    ['unispeech-sat', ['UniSpeechSatForAudioFrameClassification', UniSpeechSatForAudioFrameClassification]],\n    ['wavlm', ['WavLMForAudioFrameClassification', WavLMForAudioFrameClassification]],\n    ['wav2vec2', ['Wav2Vec2ForAudioFrameClassification', Wav2Vec2ForAudioFrameClassification]],\n    ['pyannote', ['PyAnnoteForAudioFrameClassification', PyAnnoteForAudioFrameClassification]],\n]);\n\nconst MODEL_FOR_IMAGE_MATTING_MAPPING_NAMES = new Map([\n    ['vitmatte', ['VitMatteForImageMatting', VitMatteForImageMatting]],\n]);\n\nconst MODEL_FOR_IMAGE_TO_IMAGE_MAPPING_NAMES = new Map([\n    ['swin2sr', ['Swin2SRForImageSuperResolution', Swin2SRForImageSuperResolution]],\n])\n\nconst MODEL_FOR_DEPTH_ESTIMATION_MAPPING_NAMES = new Map([\n    ['dpt', ['DPTForDepthEstimation', DPTForDepthEstimation]],\n    ['depth_anything', ['DepthAnythingForDepthEstimation', DepthAnythingForDepthEstimation]],\n    ['glpn', ['GLPNForDepthEstimation', GLPNForDepthEstimation]],\n])\n\n// NOTE: This is custom to Transformers.js, and is necessary because certain models\n// (e.g., CLIP) are split into vision and text components\nconst MODEL_FOR_IMAGE_FEATURE_EXTRACTION_MAPPING_NAMES = new Map([\n    ['clip', ['CLIPVisionModelWithProjection', CLIPVisionModelWithProjection]],\n    ['siglip', ['SiglipVisionModel', SiglipVisionModel]],\n])\n\nconst MODEL_CLASS_TYPE_MAPPING = [\n    [MODEL_MAPPING_NAMES_ENCODER_ONLY, MODEL_TYPES.EncoderOnly],\n    [MODEL_MAPPING_NAMES_ENCODER_DECODER, MODEL_TYPES.EncoderDecoder],\n    [MODEL_MAPPING_NAMES_DECODER_ONLY, MODEL_TYPES.DecoderOnly],\n    [MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n    [MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n    [MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING_NAMES, MODEL_TYPES.Seq2Seq],\n    [MODEL_FOR_SPEECH_SEQ_2_SEQ_MAPPING_NAMES, MODEL_TYPES.Seq2Seq],\n    [MODEL_FOR_CAUSAL_LM_MAPPING_NAMES, MODEL_TYPES.DecoderOnly],\n    [MODEL_FOR_MASKED_LM_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n    [MODEL_FOR_QUESTION_ANSWERING_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n    [MODEL_FOR_VISION_2_SEQ_MAPPING_NAMES, MODEL_TYPES.Vision2Seq],\n    [MODEL_FOR_IMAGE_TEXT_TO_TEXT_MAPPING_NAMES, MODEL_TYPES.ImageTextToText],\n    [MODEL_FOR_IMAGE_CLASSIFICATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n    [MODEL_FOR_IMAGE_SEGMENTATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n    [MODEL_FOR_SEMANTIC_SEGMENTATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n    [MODEL_FOR_IMAGE_MATTING_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n    [MODEL_FOR_IMAGE_TO_IMAGE_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n    [MODEL_FOR_DEPTH_ESTIMATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n    [MODEL_FOR_OBJECT_DETECTION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n    [MODEL_FOR_ZERO_SHOT_OBJECT_DETECTION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n    [MODEL_FOR_MASK_GENERATION_MAPPING_NAMES, MODEL_TYPES.MaskGeneration],\n    [MODEL_FOR_CTC_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n    [MODEL_FOR_AUDIO_CLASSIFICATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n    [MODEL_FOR_TEXT_TO_SPECTROGRAM_MAPPING_NAMES, MODEL_TYPES.Seq2Seq],\n    [MODEL_FOR_TEXT_TO_WAVEFORM_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n    [MODEL_FOR_AUDIO_XVECTOR_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n    [MODEL_FOR_AUDIO_FRAME_CLASSIFICATION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n\n    // Custom:\n    [MODEL_FOR_IMAGE_FEATURE_EXTRACTION_MAPPING_NAMES, MODEL_TYPES.EncoderOnly],\n];\n\nfor (const [mappings, type] of MODEL_CLASS_TYPE_MAPPING) {\n    // @ts-ignore\n    for (const [name, model] of mappings.values()) {\n        MODEL_TYPE_MAPPING.set(name, type);\n        MODEL_CLASS_TO_NAME_MAPPING.set(model, name);\n        MODEL_NAME_TO_CLASS_MAPPING.set(name, model);\n    }\n}\n\nconst CUSTOM_MAPPING = [\n    // OVERRIDE:\n    // TODO: Refactor to allow class to specify model\n    ['MusicgenForConditionalGeneration', MusicgenForConditionalGeneration, MODEL_TYPES.Musicgen],\n\n    ['CLIPTextModelWithProjection', CLIPTextModelWithProjection, MODEL_TYPES.EncoderOnly],\n    ['SiglipTextModel', SiglipTextModel, MODEL_TYPES.EncoderOnly],\n    ['ClapTextModelWithProjection', ClapTextModelWithProjection, MODEL_TYPES.EncoderOnly],\n    ['ClapAudioModelWithProjection', ClapAudioModelWithProjection, MODEL_TYPES.EncoderOnly],\n]\nfor (const [name, model, type] of CUSTOM_MAPPING) {\n    MODEL_TYPE_MAPPING.set(name, type);\n    MODEL_CLASS_TO_NAME_MAPPING.set(model, name);\n    MODEL_NAME_TO_CLASS_MAPPING.set(name, model);\n}\n\n\n/**\n * Helper class which is used to instantiate pretrained models with the `from_pretrained` function.\n * The chosen model class is determined by the type specified in the model config.\n * \n * @example\n * let model = await AutoModel.from_pretrained('Xenova/bert-base-uncased');\n */\nexport class AutoModel extends PretrainedMixin {\n    /** @type {Map<string, Object>[]} */\n    // @ts-ignore\n    static MODEL_CLASS_MAPPINGS = MODEL_CLASS_TYPE_MAPPING.map(x => x[0]);\n    static BASE_IF_FAIL = true;\n}\n\n/**\n * Helper class which is used to instantiate pretrained sequence classification models with the `from_pretrained` function.\n * The chosen model class is determined by the type specified in the model config.\n * \n * @example\n * let model = await AutoModelForSequenceClassification.from_pretrained('Xenova/distilbert-base-uncased-finetuned-sst-2-english');\n */\nexport class AutoModelForSequenceClassification extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING_NAMES];\n}\n\n/**\n * Helper class which is used to instantiate pretrained token classification models with the `from_pretrained` function.\n * The chosen model class is determined by the type specified in the model config.\n * \n * @example\n * let model = await AutoModelForTokenClassification.from_pretrained('Xenova/distilbert-base-multilingual-cased-ner-hrl');\n */\nexport class AutoModelForTokenClassification extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING_NAMES];\n}\n\n/**\n * Helper class which is used to instantiate pretrained sequence-to-sequence models with the `from_pretrained` function.\n * The chosen model class is determined by the type specified in the model config.\n * \n * @example\n * let model = await AutoModelForSeq2SeqLM.from_pretrained('Xenova/t5-small');\n */\nexport class AutoModelForSeq2SeqLM extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING_NAMES];\n}\n\n/**\n * Helper class which is used to instantiate pretrained sequence-to-sequence speech-to-text models with the `from_pretrained` function.\n * The chosen model class is determined by the type specified in the model config.\n * \n * @example\n * let model = await AutoModelForSpeechSeq2Seq.from_pretrained('openai/whisper-tiny.en');\n */\nexport class AutoModelForSpeechSeq2Seq extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_SPEECH_SEQ_2_SEQ_MAPPING_NAMES];\n}\n\n/**\n * Helper class which is used to instantiate pretrained sequence-to-sequence text-to-spectrogram models with the `from_pretrained` function.\n * The chosen model class is determined by the type specified in the model config.\n * \n * @example\n * let model = await AutoModelForTextToSpectrogram.from_pretrained('microsoft/speecht5_tts');\n */\nexport class AutoModelForTextToSpectrogram extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_TEXT_TO_SPECTROGRAM_MAPPING_NAMES];\n}\n\n/**\n * Helper class which is used to instantiate pretrained text-to-waveform models with the `from_pretrained` function.\n * The chosen model class is determined by the type specified in the model config.\n * \n * @example\n * let model = await AutoModelForTextToSpectrogram.from_pretrained('facebook/mms-tts-eng');\n */\nexport class AutoModelForTextToWaveform extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_TEXT_TO_WAVEFORM_MAPPING_NAMES];\n}\n\n/**\n * Helper class which is used to instantiate pretrained causal language models with the `from_pretrained` function.\n * The chosen model class is determined by the type specified in the model config.\n * \n * @example\n * let model = await AutoModelForCausalLM.from_pretrained('Xenova/gpt2');\n */\nexport class AutoModelForCausalLM extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_CAUSAL_LM_MAPPING_NAMES];\n}\n\n/**\n * Helper class which is used to instantiate pretrained masked language models with the `from_pretrained` function.\n * The chosen model class is determined by the type specified in the model config.\n * \n * @example\n * let model = await AutoModelForMaskedLM.from_pretrained('Xenova/bert-base-uncased');\n */\nexport class AutoModelForMaskedLM extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_MASKED_LM_MAPPING_NAMES];\n}\n\n/**\n * Helper class which is used to instantiate pretrained question answering models with the `from_pretrained` function.\n * The chosen model class is determined by the type specified in the model config.\n * \n * @example\n * let model = await AutoModelForQuestionAnswering.from_pretrained('Xenova/distilbert-base-cased-distilled-squad');\n */\nexport class AutoModelForQuestionAnswering extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_QUESTION_ANSWERING_MAPPING_NAMES];\n}\n\n/**\n * Helper class which is used to instantiate pretrained vision-to-sequence models with the `from_pretrained` function.\n * The chosen model class is determined by the type specified in the model config.\n * \n * @example\n * let model = await AutoModelForVision2Seq.from_pretrained('Xenova/vit-gpt2-image-captioning');\n */\nexport class AutoModelForVision2Seq extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_VISION_2_SEQ_MAPPING_NAMES];\n}\n\n/**\n * Helper class which is used to instantiate pretrained image classification models with the `from_pretrained` function.\n * The chosen model class is determined by the type specified in the model config.\n * \n * @example\n * let model = await AutoModelForImageClassification.from_pretrained('Xenova/vit-base-patch16-224');\n */\nexport class AutoModelForImageClassification extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_IMAGE_CLASSIFICATION_MAPPING_NAMES];\n}\n\n/**\n * Helper class which is used to instantiate pretrained image segmentation models with the `from_pretrained` function.\n * The chosen model class is determined by the type specified in the model config.\n * \n * @example\n * let model = await AutoModelForImageSegmentation.from_pretrained('Xenova/detr-resnet-50-panoptic');\n */\nexport class AutoModelForImageSegmentation extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_IMAGE_SEGMENTATION_MAPPING_NAMES];\n}\n\n/**\n * Helper class which is used to instantiate pretrained image segmentation models with the `from_pretrained` function.\n * The chosen model class is determined by the type specified in the model config.\n * \n * @example\n * let model = await AutoModelForSemanticSegmentation.from_pretrained('nvidia/segformer-b3-finetuned-cityscapes-1024-1024');\n */\nexport class AutoModelForSemanticSegmentation extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_SEMANTIC_SEGMENTATION_MAPPING_NAMES];\n}\n\n/**\n * Helper class which is used to instantiate pretrained object detection models with the `from_pretrained` function.\n * The chosen model class is determined by the type specified in the model config.\n * \n * @example\n * let model = await AutoModelForObjectDetection.from_pretrained('Xenova/detr-resnet-50');\n */\nexport class AutoModelForObjectDetection extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_OBJECT_DETECTION_MAPPING_NAMES];\n}\n\nexport class AutoModelForZeroShotObjectDetection extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_ZERO_SHOT_OBJECT_DETECTION_MAPPING_NAMES];\n}\n\n\n/**\n * Helper class which is used to instantiate pretrained mask generation models with the `from_pretrained` function.\n * The chosen model class is determined by the type specified in the model config.\n * \n * @example\n * let model = await AutoModelForMaskGeneration.from_pretrained('Xenova/sam-vit-base');\n */\nexport class AutoModelForMaskGeneration extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_MASK_GENERATION_MAPPING_NAMES];\n}\n\nexport class AutoModelForCTC extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_CTC_MAPPING_NAMES];\n}\n\nexport class AutoModelForAudioClassification extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_AUDIO_CLASSIFICATION_MAPPING_NAMES];\n}\n\nexport class AutoModelForXVector extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_AUDIO_XVECTOR_MAPPING_NAMES];\n}\n\nexport class AutoModelForAudioFrameClassification extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_AUDIO_FRAME_CLASSIFICATION_MAPPING_NAMES];\n}\n\nexport class AutoModelForDocumentQuestionAnswering extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_DOCUMENT_QUESTION_ANSWERING_MAPPING_NAMES];\n}\n\nexport class AutoModelForImageMatting extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_IMAGE_MATTING_MAPPING_NAMES];\n}\n\nexport class AutoModelForImageToImage extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_IMAGE_TO_IMAGE_MAPPING_NAMES];\n}\n\nexport class AutoModelForDepthEstimation extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_DEPTH_ESTIMATION_MAPPING_NAMES];\n}\n\nexport class AutoModelForImageFeatureExtraction extends PretrainedMixin {\n    static MODEL_CLASS_MAPPINGS = [MODEL_FOR_IMAGE_FEATURE_EXTRACTION_MAPPING_NAMES];\n}\n\n//////////////////////////////////////////////////\n\n//////////////////////////////////////////////////\nexport class Seq2SeqLMOutput extends ModelOutput {\n    /**\n     * @param {Object} output The output of the model.\n     * @param {Tensor} output.logits The output logits of the model.\n     * @param {Tensor} output.past_key_values An tensor of key/value pairs that represent the previous state of the model.\n     * @param {Tensor} output.encoder_outputs The output of the encoder in a sequence-to-sequence model.\n     * @param {Tensor} [output.decoder_attentions] Attentions weights of the decoder, after the attention softmax, used to compute the weighted average in the self-attention heads.\n     * @param {Tensor} [output.cross_attentions] Attentions weights of the decoder's cross-attention layer, after the attention softmax, used to compute the weighted average in the cross-attention heads.\n     */\n    constructor({ logits, past_key_values, encoder_outputs, decoder_attentions = null, cross_attentions = null }) {\n        super();\n        this.logits = logits;\n        this.past_key_values = past_key_values;\n        this.encoder_outputs = encoder_outputs;\n        this.decoder_attentions = decoder_attentions;\n        this.cross_attentions = cross_attentions;\n    }\n}\n\n/**\n * Base class for outputs of sentence classification models.\n */\nexport class SequenceClassifierOutput extends ModelOutput {\n    /**\n     * @param {Object} output The output of the model.\n     * @param {Tensor} output.logits classification (or regression if config.num_labels==1) scores (before SoftMax).\n     */\n    constructor({ logits }) {\n        super();\n        this.logits = logits;\n    }\n}\n\n/**\n * Base class for outputs of XVector models.\n */\nexport class XVectorOutput extends ModelOutput {\n    /**\n     * @param {Object} output The output of the model.\n     * @param {Tensor} output.logits Classification hidden states before AMSoftmax, of shape `(batch_size, config.xvector_output_dim)`.\n     * @param {Tensor} output.embeddings Utterance embeddings used for vector similarity-based retrieval, of shape `(batch_size, config.xvector_output_dim)`.\n     */\n    constructor({ logits, embeddings }) {\n        super();\n        this.logits = logits;\n        this.embeddings = embeddings;\n    }\n}\n\n/**\n * Base class for outputs of token classification models.\n */\nexport class TokenClassifierOutput extends ModelOutput {\n    /**\n     * @param {Object} output The output of the model.\n     * @param {Tensor} output.logits Classification scores (before SoftMax).\n     */\n    constructor({ logits }) {\n        super();\n        this.logits = logits;\n    }\n}\n\n/**\n * Base class for masked language models outputs.\n */\nexport class MaskedLMOutput extends ModelOutput {\n    /**\n     * @param {Object} output The output of the model.\n     * @param {Tensor} output.logits Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).\n     */\n    constructor({ logits }) {\n        super();\n        this.logits = logits;\n    }\n}\n\n/**\n * Base class for outputs of question answering models.\n */\nexport class QuestionAnsweringModelOutput extends ModelOutput {\n    /**\n     * @param {Object} output The output of the model.\n     * @param {Tensor} output.start_logits Span-start scores (before SoftMax).\n     * @param {Tensor} output.end_logits Span-end scores (before SoftMax).\n     */\n    constructor({ start_logits, end_logits }) {\n        super();\n        this.start_logits = start_logits;\n        this.end_logits = end_logits;\n    }\n}\n\n\n/**\n * Base class for causal language model (or autoregressive) outputs.\n */\nexport class CausalLMOutput extends ModelOutput {\n    /**\n     * @param {Object} output The output of the model.\n     * @param {Tensor} output.logits Prediction scores of the language modeling head (scores for each vocabulary token before softmax).\n     */\n    constructor({ logits }) {\n        super();\n        this.logits = logits;\n    }\n}\n\n/**\n * Base class for causal language model (or autoregressive) outputs.\n */\nexport class CausalLMOutputWithPast extends ModelOutput {\n    /**\n     * @param {Object} output The output of the model.\n     * @param {Tensor} output.logits Prediction scores of the language modeling head (scores for each vocabulary token before softmax).\n     * @param {Tensor} output.past_key_values Contains pre-computed hidden-states (key and values in the self-attention blocks)\n     * that can be used (see `past_key_values` input) to speed up sequential decoding.\n     */\n    constructor({ logits, past_key_values }) {\n        super();\n        this.logits = logits;\n        this.past_key_values = past_key_values;\n    }\n}\n\nexport class ImageMattingOutput extends ModelOutput {\n    /**\n     * @param {Object} output The output of the model.\n     * @param {Tensor} output.alphas Estimated alpha values, of shape `(batch_size, num_channels, height, width)`.\n     */\n    constructor({ alphas }) {\n        super();\n        this.alphas = alphas;\n    }\n}\n\n/**\n * Describes the outputs for the VITS model.\n */\nexport class VitsModelOutput extends ModelOutput {\n    /**\n     * @param {Object} output The output of the model.\n     * @param {Tensor} output.waveform The final audio waveform predicted by the model, of shape `(batch_size, sequence_length)`.\n     * @param {Tensor} output.spectrogram The log-mel spectrogram predicted at the output of the flow model.\n     * This spectrogram is passed to the Hi-Fi GAN decoder model to obtain the final audio waveform.\n     */\n    constructor({ waveform, spectrogram }) {\n        super();\n        this.waveform = waveform;\n        this.spectrogram = spectrogram;\n    }\n}\n","\n\nconst WHISPER_LANGUAGES = [\n    [\"en\", \"english\"],\n    [\"zh\", \"chinese\"],\n    [\"de\", \"german\"],\n    [\"es\", \"spanish\"],\n    [\"ru\", \"russian\"],\n    [\"ko\", \"korean\"],\n    [\"fr\", \"french\"],\n    [\"ja\", \"japanese\"],\n    [\"pt\", \"portuguese\"],\n    [\"tr\", \"turkish\"],\n    [\"pl\", \"polish\"],\n    [\"ca\", \"catalan\"],\n    [\"nl\", \"dutch\"],\n    [\"ar\", \"arabic\"],\n    [\"sv\", \"swedish\"],\n    [\"it\", \"italian\"],\n    [\"id\", \"indonesian\"],\n    [\"hi\", \"hindi\"],\n    [\"fi\", \"finnish\"],\n    [\"vi\", \"vietnamese\"],\n    [\"he\", \"hebrew\"],\n    [\"uk\", \"ukrainian\"],\n    [\"el\", \"greek\"],\n    [\"ms\", \"malay\"],\n    [\"cs\", \"czech\"],\n    [\"ro\", \"romanian\"],\n    [\"da\", \"danish\"],\n    [\"hu\", \"hungarian\"],\n    [\"ta\", \"tamil\"],\n    [\"no\", \"norwegian\"],\n    [\"th\", \"thai\"],\n    [\"ur\", \"urdu\"],\n    [\"hr\", \"croatian\"],\n    [\"bg\", \"bulgarian\"],\n    [\"lt\", \"lithuanian\"],\n    [\"la\", \"latin\"],\n    [\"mi\", \"maori\"],\n    [\"ml\", \"malayalam\"],\n    [\"cy\", \"welsh\"],\n    [\"sk\", \"slovak\"],\n    [\"te\", \"telugu\"],\n    [\"fa\", \"persian\"],\n    [\"lv\", \"latvian\"],\n    [\"bn\", \"bengali\"],\n    [\"sr\", \"serbian\"],\n    [\"az\", \"azerbaijani\"],\n    [\"sl\", \"slovenian\"],\n    [\"kn\", \"kannada\"],\n    [\"et\", \"estonian\"],\n    [\"mk\", \"macedonian\"],\n    [\"br\", \"breton\"],\n    [\"eu\", \"basque\"],\n    [\"is\", \"icelandic\"],\n    [\"hy\", \"armenian\"],\n    [\"ne\", \"nepali\"],\n    [\"mn\", \"mongolian\"],\n    [\"bs\", \"bosnian\"],\n    [\"kk\", \"kazakh\"],\n    [\"sq\", \"albanian\"],\n    [\"sw\", \"swahili\"],\n    [\"gl\", \"galician\"],\n    [\"mr\", \"marathi\"],\n    [\"pa\", \"punjabi\"],\n    [\"si\", \"sinhala\"],\n    [\"km\", \"khmer\"],\n    [\"sn\", \"shona\"],\n    [\"yo\", \"yoruba\"],\n    [\"so\", \"somali\"],\n    [\"af\", \"afrikaans\"],\n    [\"oc\", \"occitan\"],\n    [\"ka\", \"georgian\"],\n    [\"be\", \"belarusian\"],\n    [\"tg\", \"tajik\"],\n    [\"sd\", \"sindhi\"],\n    [\"gu\", \"gujarati\"],\n    [\"am\", \"amharic\"],\n    [\"yi\", \"yiddish\"],\n    [\"lo\", \"lao\"],\n    [\"uz\", \"uzbek\"],\n    [\"fo\", \"faroese\"],\n    [\"ht\", \"haitian creole\"],\n    [\"ps\", \"pashto\"],\n    [\"tk\", \"turkmen\"],\n    [\"nn\", \"nynorsk\"],\n    [\"mt\", \"maltese\"],\n    [\"sa\", \"sanskrit\"],\n    [\"lb\", \"luxembourgish\"],\n    [\"my\", \"myanmar\"],\n    [\"bo\", \"tibetan\"],\n    [\"tl\", \"tagalog\"],\n    [\"mg\", \"malagasy\"],\n    [\"as\", \"assamese\"],\n    [\"tt\", \"tatar\"],\n    [\"haw\", \"hawaiian\"],\n    [\"ln\", \"lingala\"],\n    [\"ha\", \"hausa\"],\n    [\"ba\", \"bashkir\"],\n    [\"jw\", \"javanese\"],\n    [\"su\", \"sundanese\"],\n]\n\n// @ts-ignore\nexport const WHISPER_LANGUAGE_MAPPING = new Map(WHISPER_LANGUAGES);\n// @ts-ignore\nexport const WHISPER_TO_LANGUAGE_CODE_MAPPING = new Map([\n    ...WHISPER_LANGUAGES.map(([k, v]) => [v, k]),\n    ...[\n        [\"burmese\", \"my\"],\n        [\"valencian\", \"ca\"],\n        [\"flemish\", \"nl\"],\n        [\"haitian\", \"ht\"],\n        [\"letzeburgesch\", \"lb\"],\n        [\"pushto\", \"ps\"],\n        [\"panjabi\", \"pa\"],\n        [\"moldavian\", \"ro\"],\n        [\"moldovan\", \"ro\"],\n        [\"sinhalese\", \"si\"],\n        [\"castilian\", \"es\"],\n    ]\n]);\n\n/**\n * @param {string} language The language name or code\n * @returns {string} The language code\n */\nexport function whisper_language_to_code(language) {\n    language = language.toLowerCase();\n\n    // Map to code from user-friendly name (e.g., \"english\" -> \"en\")\n    let language_code = WHISPER_TO_LANGUAGE_CODE_MAPPING.get(language);\n\n    if (language_code === undefined) {\n        // User provided something that is not a language name\n\n        if (WHISPER_LANGUAGE_MAPPING.has(language)) {\n            // User provided the language code directly (e.g., \"en\")\n            language_code = language;\n\n        } else {\n            // User provided something that is not a language code or name\n            const is_language_code = language.length === 2;\n            const langs = is_language_code ? WHISPER_LANGUAGE_MAPPING.keys() : WHISPER_LANGUAGE_MAPPING.values();\n\n            throw new Error(`Language \"${language}\" is not supported. Must be one of: ${JSON.stringify(langs)}`);\n        }\n    }\n    return language_code;\n}\n","import { GenerationConfig } from \"../../generation/configuration_utils.js\";\n\nexport class WhisperGenerationConfig extends GenerationConfig {\n\n    /**\n     * Whether to return the timestamps with the text. This enables the `WhisperTimestampsLogitsProcessor`.\n     * @type {boolean}\n     */\n    return_timestamps = null;\n\n    /**\n     * Whether to return token-level timestamps\n     * with the text. This can be used with or without the `return_timestamps` option. To get word-level\n     * timestamps, use the tokenizer to group the tokens into words.\n     * @type {boolean}\n     */\n    return_token_timestamps = null;\n\n    /**\n     * The number of audio frames available in this chunk. This is only used generating word-level timestamps.\n     * @type {number}\n     */\n    num_frames = null;\n\n    /**\n     * Alignment heads to predict word-level timestamps. This is a list of [layer, head] pairs that\n     * select the cross-attention heads that are highly correlated to word-level timing.\n     * @type {[number, number][]}\n     */\n    alignment_heads = null;\n\n    /**\n     * Task to use for generation, either \"translate\" or \"transcribe\".\n     * @type {string}\n     */\n    task = null;\n\n    /**\n     * Language token to use for generation, can be either in the form of `<|en|>`, `en` or `english`.\n     * You can find all the possible language tokens in the `model.generation_config.lang_to_id` dictionary.\n     * @type {string}\n     */\n    language = null;\n\n    /**\n     * The id of the `\"<|notimestamps|>\"` token.\n     * @type {number}\n     */\n    no_timestamps_token_id = null;\n\n    /**\n     * Rank-1 list of token IDs created by passing text to [`~WhisperProcessor.get_prompt_ids`] that is\n     * provided as a prompt to each chunk. This can be used to provide or \"prompt-engineer\" a context for\n     * transcription, e.g. custom vocabularies or proper nouns to make it more likely to predict those words\n     * correctly. It cannot be used in conjunction with `decoder_start_token_id` as it overwrites this value.\n     * @type {number[]}\n     */\n    prompt_ids = null;\n\n    /**\n     * Whether the model is multilingual or not.\n     * @type {boolean}\n     */\n    is_multilingual = null;\n\n    /**\n     * (Optional) A mapping from language tokens to their corresponding IDs.\n     * Only required if the model is multilingual.\n     * @type {Record<string, number>|null}\n     */\n    lang_to_id = null;\n\n    /**\n     * (Optional) A mapping from task tokens to their corresponding IDs.\n     * @type {Record<string, number>|null}\n     */\n    task_to_id = null;\n\n    /**\n     * Used to set the maximum value of the initial timestamp. This is used to prevent the model from\n     * predicting timestamps that are too far in the future.\n     * @type {number}\n     */\n    max_initial_timestamp_index = 1;\n}\n\n/**\n * @typedef {import('../../generation/parameters.js').GenerationFunctionParameters & {generation_config: WhisperGenerationConfig} & WhisperGenerationConfig} WhisperGenerationFunctionParameters\n */\n","import { createInferenceSession } from \"../backends/onnx.js\";\nimport { Tensor } from \"../utils/tensor.js\";\n\nconst wrap = async (session_bytes, session_options, names) => {\n    const session = await createInferenceSession(\n        new Uint8Array(session_bytes), session_options,\n    );\n    return async (inputs) => {\n        const ortFeed = Object.fromEntries(Object.entries(inputs).map(([k, v]) => [k, v.ort_tensor]));\n        const outputs = await session.run(ortFeed);\n\n        if (Array.isArray(names)) {\n            return names.map((n) => new Tensor(outputs[n]));\n        } else {\n            return new Tensor(outputs[names]);\n        }\n    }\n}\n\n// In-memory registry of initialized ONNX operators\nexport class TensorOpRegistry {\n    static session_options = {\n        // TODO: Allow for multiple execution providers\n        // executionProviders: ['webgpu'],\n    };\n\n    static get bilinear_interpolate_4d() {\n        if (!this._bilinear_interpolate_4d) {\n            this._bilinear_interpolate_4d = wrap(\n                [8, 9, 18, 0, 58, 128, 1, 10, 40, 10, 1, 120, 10, 0, 10, 0, 10, 1, 115, 18, 1, 121, 34, 6, 82, 101, 115, 105, 122, 101, 42, 17, 10, 4, 109, 111, 100, 101, 34, 6, 108, 105, 110, 101, 97, 114, 160, 1, 3, 18, 1, 114, 90, 31, 10, 1, 120, 18, 26, 10, 24, 8, 1, 18, 20, 10, 3, 18, 1, 98, 10, 3, 18, 1, 99, 10, 3, 18, 1, 104, 10, 3, 18, 1, 119, 90, 15, 10, 1, 115, 18, 10, 10, 8, 8, 7, 18, 4, 10, 2, 8, 4, 98, 31, 10, 1, 121, 18, 26, 10, 24, 8, 1, 18, 20, 10, 3, 18, 1, 98, 10, 3, 18, 1, 99, 10, 3, 18, 1, 104, 10, 3, 18, 1, 119, 66, 2, 16, 20],\n                this.session_options,\n                'y',\n            );\n        }\n        return this._bilinear_interpolate_4d;\n    }\n\n    static get bicubic_interpolate_4d() {\n        if (!this._bicubic_interpolate_4d) {\n            this._bicubic_interpolate_4d = wrap(\n                [8, 9, 18, 0, 58, 127, 10, 39, 10, 1, 120, 10, 0, 10, 0, 10, 1, 115, 18, 1, 121, 34, 6, 82, 101, 115, 105, 122, 101, 42, 16, 10, 4, 109, 111, 100, 101, 34, 5, 99, 117, 98, 105, 99, 160, 1, 3, 18, 1, 114, 90, 31, 10, 1, 120, 18, 26, 10, 24, 8, 1, 18, 20, 10, 3, 18, 1, 98, 10, 3, 18, 1, 99, 10, 3, 18, 1, 104, 10, 3, 18, 1, 119, 90, 15, 10, 1, 115, 18, 10, 10, 8, 8, 7, 18, 4, 10, 2, 8, 4, 98, 31, 10, 1, 121, 18, 26, 10, 24, 8, 1, 18, 20, 10, 3, 18, 1, 98, 10, 3, 18, 1, 99, 10, 3, 18, 1, 104, 10, 3, 18, 1, 119, 66, 2, 16, 20],\n                this.session_options,\n                'y',\n            );\n        }\n        return this._bicubic_interpolate_4d;\n    }\n\n    static get matmul() {\n        if (!this._matmul) {\n            this._matmul = wrap(\n                [8, 9, 18, 0, 58, 55, 10, 17, 10, 1, 97, 10, 1, 98, 18, 1, 99, 34, 6, 77, 97, 116, 77, 117, 108, 18, 1, 114, 90, 9, 10, 1, 97, 18, 4, 10, 2, 8, 1, 90, 9, 10, 1, 98, 18, 4, 10, 2, 8, 1, 98, 9, 10, 1, 99, 18, 4, 10, 2, 8, 1, 66, 2, 16, 20],\n                this.session_options,\n                'c',\n            );\n        }\n        return this._matmul;\n    }\n\n    static get stft() {\n        if (!this._stft) {\n            this._stft = wrap(\n                [8, 7, 18, 0, 58, 148, 1, 10, 38, 10, 1, 115, 10, 1, 106, 10, 1, 119, 10, 1, 108, 18, 1, 111, 34, 4, 83, 84, 70, 84, 42, 15, 10, 8, 111, 110, 101, 115, 105, 100, 101, 100, 24, 1, 160, 1, 2, 18, 1, 115, 90, 26, 10, 1, 115, 18, 21, 10, 19, 8, 1, 18, 15, 10, 3, 18, 1, 98, 10, 3, 18, 1, 115, 10, 3, 18, 1, 99, 90, 11, 10, 1, 106, 18, 6, 10, 4, 8, 7, 18, 0, 90, 16, 10, 1, 119, 18, 11, 10, 9, 8, 1, 18, 5, 10, 3, 18, 1, 119, 90, 11, 10, 1, 108, 18, 6, 10, 4, 8, 7, 18, 0, 98, 31, 10, 1, 111, 18, 26, 10, 24, 8, 1, 18, 20, 10, 3, 18, 1, 98, 10, 3, 18, 1, 102, 10, 3, 18, 1, 100, 10, 3, 18, 1, 99, 66, 2, 16, 17],\n                this.session_options,\n                'o',\n            )\n        }\n        return this._stft;\n    }\n\n    static get rfft() {\n        if (!this._rfft) {\n            this._rfft = wrap(\n                [8, 9, 18, 0, 58, 97, 10, 33, 10, 1, 120, 10, 0, 10, 1, 97, 18, 1, 121, 34, 3, 68, 70, 84, 42, 15, 10, 8, 111, 110, 101, 115, 105, 100, 101, 100, 24, 1, 160, 1, 2, 18, 1, 100, 90, 21, 10, 1, 120, 18, 16, 10, 14, 8, 1, 18, 10, 10, 3, 18, 1, 115, 10, 3, 18, 1, 99, 90, 11, 10, 1, 97, 18, 6, 10, 4, 8, 7, 18, 0, 98, 21, 10, 1, 121, 18, 16, 10, 14, 8, 1, 18, 10, 10, 3, 18, 1, 115, 10, 3, 18, 1, 99, 66, 2, 16, 20],\n                this.session_options,\n                'y',\n            )\n        }\n        return this._rfft;\n    }\n\n    static get top_k() {\n        if (!this._top_k) {\n            this._top_k = wrap(\n                [8, 10, 18, 0, 58, 73, 10, 18, 10, 1, 120, 10, 1, 107, 18, 1, 118, 18, 1, 105, 34, 4, 84, 111, 112, 75, 18, 1, 116, 90, 9, 10, 1, 120, 18, 4, 10, 2, 8, 1, 90, 15, 10, 1, 107, 18, 10, 10, 8, 8, 7, 18, 4, 10, 2, 8, 1, 98, 9, 10, 1, 118, 18, 4, 10, 2, 8, 1, 98, 9, 10, 1, 105, 18, 4, 10, 2, 8, 7, 66, 2, 16, 21],\n                this.session_options,\n                [ /* Values */ 'v', /* Indices */ 'i']\n            )\n        }\n        return this._top_k;\n    }\n}\n","/**\n * @file Pipelines provide a high-level, easy to use, API for running machine learning models.\n * \n * **Example:** Instantiate pipeline using the `pipeline` function.\n * ```javascript\n * import { pipeline } from '@huggingface/transformers';\n * \n * const classifier = await pipeline('sentiment-analysis');\n * const output = await classifier('I love transformers!');\n * // [{'label': 'POSITIVE', 'score': 0.999817686}]\n * ```\n * \n * @module pipelines\n */\n\nimport {\n    AutoTokenizer,\n    PreTrainedTokenizer,\n} from './tokenizers.js';\nimport {\n    AutoModel,\n    AutoModelForSequenceClassification,\n    AutoModelForAudioClassification,\n    AutoModelForTokenClassification,\n    AutoModelForQuestionAnswering,\n    AutoModelForMaskedLM,\n    AutoModelForSeq2SeqLM,\n    AutoModelForSpeechSeq2Seq,\n    AutoModelForTextToWaveform,\n    AutoModelForTextToSpectrogram,\n    AutoModelForCTC,\n    AutoModelForCausalLM,\n    AutoModelForVision2Seq,\n    AutoModelForImageClassification,\n    AutoModelForImageSegmentation,\n    AutoModelForSemanticSegmentation,\n    AutoModelForObjectDetection,\n    AutoModelForZeroShotObjectDetection,\n    AutoModelForDocumentQuestionAnswering,\n    AutoModelForImageToImage,\n    AutoModelForDepthEstimation,\n    AutoModelForImageFeatureExtraction,\n    PreTrainedModel,\n} from './models.js';\nimport {\n    AutoProcessor,\n    Processor\n} from './processors.js';\n\nimport {\n    Callable,\n} from './utils/generic.js';\n\nimport {\n    dispatchCallback,\n    pop,\n    product,\n} from './utils/core.js';\nimport {\n    softmax,\n    max,\n    round,\n} from './utils/maths.js';\nimport {\n    read_audio\n} from './utils/audio.js';\nimport {\n    Tensor,\n    mean_pooling,\n    interpolate,\n    quantize_embeddings,\n    topk,\n} from './utils/tensor.js';\nimport { RawImage } from './utils/image.js';\n\n\n/**\n * @typedef {string | RawImage | URL} ImageInput\n * @typedef {ImageInput|ImageInput[]} ImagePipelineInputs\n */\n\n/**\n * Prepare images for further tasks.\n * @param {ImagePipelineInputs} images images to prepare.\n * @returns {Promise<RawImage[]>} returns processed images.\n * @private\n */\nasync function prepareImages(images) {\n    if (!Array.isArray(images)) {\n        images = [images];\n    }\n\n    // Possibly convert any non-images to images\n    return await Promise.all(images.map(x => RawImage.read(x)));\n}\n\n/**\n * @typedef {string | URL | Float32Array | Float64Array} AudioInput\n * @typedef {AudioInput|AudioInput[]} AudioPipelineInputs\n */\n\n/**\n * Prepare audios for further tasks.\n * @param {AudioPipelineInputs} audios audios to prepare.\n * @param {number} sampling_rate sampling rate of the audios.\n * @returns {Promise<Float32Array[]>} The preprocessed audio data.\n * @private\n */\nasync function prepareAudios(audios, sampling_rate) {\n    if (!Array.isArray(audios)) {\n        audios = [audios];\n    }\n\n    return await Promise.all(audios.map(x => {\n        if (typeof x === 'string' || x instanceof URL) {\n            return read_audio(x, sampling_rate);\n        } else if (x instanceof Float64Array) {\n            return new Float32Array(x);\n        }\n        return x;\n    }));\n}\n\n/**\n * @typedef {Object} BoundingBox\n * @property {number} xmin The minimum x coordinate of the bounding box.\n * @property {number} ymin The minimum y coordinate of the bounding box.\n * @property {number} xmax The maximum x coordinate of the bounding box.\n * @property {number} ymax The maximum y coordinate of the bounding box.\n */\n\n/**\n * Helper function to convert list [xmin, xmax, ymin, ymax] into object { \"xmin\": xmin, ... }\n * @param {number[]} box The bounding box as a list.\n * @param {boolean} asInteger Whether to cast to integers.\n * @returns {BoundingBox} The bounding box as an object.\n * @private\n */\nfunction get_bounding_box(box, asInteger) {\n    if (asInteger) {\n        box = box.map(x => x | 0);\n    }\n    const [xmin, ymin, xmax, ymax] = box;\n\n    return { xmin, ymin, xmax, ymax };\n}\n\n\n/**\n * @callback DisposeType Disposes the item.\n * @returns {Promise<void>} A promise that resolves when the item has been disposed.\n * \n * @typedef {Object} Disposable\n * @property {DisposeType} dispose A promise that resolves when the pipeline has been disposed.\n */\n\n/**\n * The Pipeline class is the class from which all pipelines inherit.\n * Refer to this class for methods shared across different pipelines.\n * @extends Callable\n */\nexport class Pipeline extends Callable {\n    /**\n     * Create a new Pipeline.\n     * @param {Object} options An object containing the following properties:\n     * @param {string} [options.task] The task of the pipeline. Useful for specifying subtasks.\n     * @param {PreTrainedModel} [options.model] The model used by the pipeline.\n     * @param {PreTrainedTokenizer} [options.tokenizer=null] The tokenizer used by the pipeline (if any).\n     * @param {Processor} [options.processor=null] The processor used by the pipeline (if any).\n     */\n    constructor({ task, model, tokenizer = null, processor = null }) {\n        super();\n        this.task = task;\n        this.model = model;\n        this.tokenizer = tokenizer;\n        this.processor = processor;\n    }\n\n    /** @type {DisposeType} */\n    async dispose() {\n        await this.model.dispose();\n    }\n}\n\n/**\n * @typedef {Object} ModelTokenizerConstructorArgs\n * @property {string} task The task of the pipeline. Useful for specifying subtasks.\n * @property {PreTrainedModel} model The model used by the pipeline.\n * @property {PreTrainedTokenizer} tokenizer The tokenizer used by the pipeline.\n * \n * @typedef {ModelTokenizerConstructorArgs} TextPipelineConstructorArgs An object used to instantiate a text-based pipeline.\n */\n\n/**\n * @typedef {Object} ModelProcessorConstructorArgs\n * @property {string} task The task of the pipeline. Useful for specifying subtasks.\n * @property {PreTrainedModel} model The model used by the pipeline.\n * @property {Processor} processor The processor used by the pipeline.\n * \n * @typedef {ModelProcessorConstructorArgs} AudioPipelineConstructorArgs An object used to instantiate an audio-based pipeline.\n * @typedef {ModelProcessorConstructorArgs} ImagePipelineConstructorArgs An object used to instantiate an image-based pipeline.\n */\n\n\n/**\n * @typedef {Object} ModelTokenizerProcessorConstructorArgs\n * @property {string} task The task of the pipeline. Useful for specifying subtasks.\n * @property {PreTrainedModel} model The model used by the pipeline.\n * @property {PreTrainedTokenizer} tokenizer The tokenizer used by the pipeline.\n * @property {Processor} processor The processor used by the pipeline.\n * \n * @typedef {ModelTokenizerProcessorConstructorArgs} TextAudioPipelineConstructorArgs An object used to instantiate a text- and audio-based pipeline.\n * @typedef {ModelTokenizerProcessorConstructorArgs} TextImagePipelineConstructorArgs An object used to instantiate a text- and image-based pipeline.\n */\n\n/**\n * @typedef {Object} TextClassificationSingle\n * @property {string} label The label predicted.\n * @property {number} score The corresponding probability.\n * @typedef {TextClassificationSingle[]} TextClassificationOutput\n * \n * @typedef {Object} TextClassificationPipelineOptions Parameters specific to text classification pipelines.\n * @property {number} [top_k=1] The number of top predictions to be returned.\n * \n * @callback TextClassificationPipelineCallback Classify the text(s) given as inputs.\n * @param {string|string[]} texts The input text(s) to be classified.\n * @param {TextClassificationPipelineOptions} [options] The options to use for text classification.\n * @returns {Promise<TextClassificationOutput|TextClassificationOutput[]>} An array or object containing the predicted labels and scores.\n * \n * @typedef {TextPipelineConstructorArgs & TextClassificationPipelineCallback & Disposable} TextClassificationPipelineType\n */\n\n/**\n * Text classification pipeline using any `ModelForSequenceClassification`.\n *\n * **Example:** Sentiment-analysis w/ `Xenova/distilbert-base-uncased-finetuned-sst-2-english`.\n * ```javascript\n * const classifier = await pipeline('sentiment-analysis', 'Xenova/distilbert-base-uncased-finetuned-sst-2-english');\n * const output = await classifier('I love transformers!');\n * // [{ label: 'POSITIVE', score: 0.999788761138916 }]\n * ```\n * \n * **Example:** Multilingual sentiment-analysis w/ `Xenova/bert-base-multilingual-uncased-sentiment` (and return top 5 classes).\n * ```javascript\n * const classifier = await pipeline('sentiment-analysis', 'Xenova/bert-base-multilingual-uncased-sentiment');\n * const output = await classifier('Le meilleur film de tous les temps.', { top_k: 5 });\n * // [\n * //   { label: '5 stars', score: 0.9610759615898132 },\n * //   { label: '4 stars', score: 0.03323351591825485 },\n * //   { label: '3 stars', score: 0.0036155181005597115 },\n * //   { label: '1 star', score: 0.0011325967498123646 },\n * //   { label: '2 stars', score: 0.0009423971059732139 }\n * // ]\n * ```\n * \n * **Example:** Toxic comment classification w/ `Xenova/toxic-bert` (and return all classes).\n * ```javascript\n * const classifier = await pipeline('text-classification', 'Xenova/toxic-bert');\n * const output = await classifier('I hate you!', { top_k: null });\n * // [\n * //   { label: 'toxic', score: 0.9593140482902527 },\n * //   { label: 'insult', score: 0.16187334060668945 },\n * //   { label: 'obscene', score: 0.03452680632472038 },\n * //   { label: 'identity_hate', score: 0.0223250575363636 },\n * //   { label: 'threat', score: 0.019197041168808937 },\n * //   { label: 'severe_toxic', score: 0.005651099607348442 }\n * // ]\n * ```\n */\nexport class TextClassificationPipeline extends (/** @type {new (options: TextPipelineConstructorArgs) => TextClassificationPipelineType} */ (Pipeline)) {\n\n    /**\n     * Create a new TextClassificationPipeline.\n     * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.\n     */\n    constructor(options) {\n        super(options);\n    }\n\n    /** @type {TextClassificationPipelineCallback} */\n    async _call(texts, {\n        top_k = 1\n    } = {}) {\n\n        // Run tokenization\n        const model_inputs = this.tokenizer(texts, {\n            padding: true,\n            truncation: true,\n        });\n\n        // Run model\n        const outputs = await this.model(model_inputs)\n\n        // TODO: Use softmax tensor function\n        const function_to_apply =\n            this.model.config.problem_type === 'multi_label_classification'\n                ? batch => batch.sigmoid()\n                : batch => new Tensor(\n                    'float32',\n                    softmax(batch.data),\n                    batch.dims,\n                ); // single_label_classification (default)\n\n        const id2label = this.model.config.id2label;\n\n        const toReturn = [];\n        for (const batch of outputs.logits) {\n            const output = function_to_apply(batch);\n\n            const scores = await topk(output, top_k);\n\n            const values = scores[0].tolist();\n            const indices = scores[1].tolist();\n            const vals = indices.map((x, i) => ({\n                label: id2label ? id2label[x] : `LABEL_${x}`,\n                score: values[i],\n            }));\n            if (top_k === 1) {\n                toReturn.push(...vals);\n            } else {\n                toReturn.push(vals);\n            }\n        }\n\n        return Array.isArray(texts) || top_k === 1 ? /** @type {TextClassificationOutput} */ (toReturn) : /** @type {TextClassificationOutput[]} */ (toReturn)[0];\n    }\n}\n\n/**\n * @typedef {Object} TokenClassificationSingle\n * @property {string} word The token/word classified. This is obtained by decoding the selected tokens.\n * @property {number} score The corresponding probability for `entity`.\n * @property {string} entity The entity predicted for that token/word.\n * @property {number} index The index of the corresponding token in the sentence.\n * @property {number} [start] The index of the start of the corresponding entity in the sentence.\n * @property {number} [end] The index of the end of the corresponding entity in the sentence.\n * @typedef {TokenClassificationSingle[]} TokenClassificationOutput\n * \n * @typedef {Object} TokenClassificationPipelineOptions Parameters specific to token classification pipelines.\n * @property {string[]} [ignore_labels] A list of labels to ignore.\n * \n * @callback TokenClassificationPipelineCallback Classify each token of the text(s) given as inputs.\n * @param {string|string[]} texts One or several texts (or one list of texts) for token classification.\n * @param {TokenClassificationPipelineOptions} [options] The options to use for token classification.\n * @returns {Promise<TokenClassificationOutput|TokenClassificationOutput[]>} The result.\n * \n * @typedef {TextPipelineConstructorArgs & TokenClassificationPipelineCallback & Disposable} TokenClassificationPipelineType\n */\n\n/**\n * Named Entity Recognition pipeline using any `ModelForTokenClassification`.\n * \n * **Example:** Perform named entity recognition with `Xenova/bert-base-NER`.\n * ```javascript\n * const classifier = await pipeline('token-classification', 'Xenova/bert-base-NER');\n * const output = await classifier('My name is Sarah and I live in London');\n * // [\n * //   { entity: 'B-PER', score: 0.9980202913284302, index: 4, word: 'Sarah' },\n * //   { entity: 'B-LOC', score: 0.9994474053382874, index: 9, word: 'London' }\n * // ]\n * ```\n * \n * **Example:** Perform named entity recognition with `Xenova/bert-base-NER` (and return all labels).\n * ```javascript\n * const classifier = await pipeline('token-classification', 'Xenova/bert-base-NER');\n * const output = await classifier('Sarah lives in the United States of America', { ignore_labels: [] });\n * // [\n * //   { entity: 'B-PER', score: 0.9966587424278259, index: 1, word: 'Sarah' },\n * //   { entity: 'O', score: 0.9987385869026184, index: 2, word: 'lives' },\n * //   { entity: 'O', score: 0.9990072846412659, index: 3, word: 'in' },\n * //   { entity: 'O', score: 0.9988298416137695, index: 4, word: 'the' },\n * //   { entity: 'B-LOC', score: 0.9995510578155518, index: 5, word: 'United' },\n * //   { entity: 'I-LOC', score: 0.9990395307540894, index: 6, word: 'States' },\n * //   { entity: 'I-LOC', score: 0.9986724853515625, index: 7, word: 'of' },\n * //   { entity: 'I-LOC', score: 0.9975294470787048, index: 8, word: 'America' }\n * // ]\n * ```\n */\nexport class TokenClassificationPipeline extends (/** @type {new (options: TextPipelineConstructorArgs) => TokenClassificationPipelineType} */ (Pipeline)) {\n\n    /**\n     * Create a new TokenClassificationPipeline.\n     * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.\n     */\n    constructor(options) {\n        super(options);\n    }\n\n    /** @type {TokenClassificationPipelineCallback} */\n    async _call(texts, {\n        ignore_labels = ['O'],\n    } = {}) {\n\n        const isBatched = Array.isArray(texts);\n\n        // Run tokenization\n        const model_inputs = this.tokenizer(isBatched ? texts : [texts], {\n            padding: true,\n            truncation: true,\n        });\n\n        // Run model\n        const outputs = await this.model(model_inputs)\n\n        const logits = outputs.logits;\n        const id2label = this.model.config.id2label;\n\n        const toReturn = [];\n        for (let i = 0; i < logits.dims[0]; ++i) {\n            const ids = model_inputs.input_ids[i];\n            const batch = logits[i];\n\n            // List of tokens that aren't ignored\n            const tokens = [];\n            for (let j = 0; j < batch.dims[0]; ++j) {\n                const tokenData = batch[j];\n                const topScoreIndex = max(tokenData.data)[1];\n\n                const entity = id2label ? id2label[topScoreIndex] : `LABEL_${topScoreIndex}`;\n                if (ignore_labels.includes(entity)) {\n                    // We predicted a token that should be ignored. So, we skip it.\n                    continue;\n                }\n\n                // TODO add option to keep special tokens?\n                const word = this.tokenizer.decode([ids[j].item()], { skip_special_tokens: true });\n                if (word === '') {\n                    // Was a special token. So, we skip it.\n                    continue;\n                }\n\n                const scores = softmax(tokenData.data);\n\n                tokens.push({\n                    entity: entity,\n                    score: scores[topScoreIndex],\n                    index: j,\n                    word: word,\n\n                    // TODO: Add support for start and end\n                    // start: null,\n                    // end: null,\n                });\n            }\n            toReturn.push(tokens);\n        }\n        return isBatched ? toReturn : toReturn[0];\n    }\n}\n\n/**\n * @typedef {Object} QuestionAnsweringOutput\n * @property {number} score The probability associated to the answer.\n * @property {number} [start] The character start index of the answer (in the tokenized version of the input).\n * @property {number} [end] The character end index of the answer (in the tokenized version of the input).\n * @property {string} answer The answer to the question.\n * \n * @typedef {Object} QuestionAnsweringPipelineOptions Parameters specific to question answering pipelines.\n * @property {number} [top_k=1] The number of top answer predictions to be returned.\n * \n * @callback QuestionAnsweringPipelineCallback Answer the question(s) given as inputs by using the context(s).\n * @param {string|string[]} question One or several question(s) (must be used in conjunction with the `context` argument).\n * @param {string|string[]} context One or several context(s) associated with the question(s) (must be used in conjunction with the `question` argument).\n * @param {QuestionAnsweringPipelineOptions} [options] The options to use for question answering.\n * @returns {Promise<QuestionAnsweringOutput|QuestionAnsweringOutput[]>} An array or object containing the predicted answers and scores.\n * \n * @typedef {TextPipelineConstructorArgs & QuestionAnsweringPipelineCallback & Disposable} QuestionAnsweringPipelineType\n */\n\n/**\n * Question Answering pipeline using any `ModelForQuestionAnswering`.\n * \n * **Example:** Run question answering with `Xenova/distilbert-base-uncased-distilled-squad`.\n * ```javascript\n * const answerer = await pipeline('question-answering', 'Xenova/distilbert-base-uncased-distilled-squad');\n * const question = 'Who was Jim Henson?';\n * const context = 'Jim Henson was a nice puppet.';\n * const output = await answerer(question, context);\n * // {\n * //   answer: \"a nice puppet\",\n * //   score: 0.5768911502526741\n * // }\n * ```\n */\nexport class QuestionAnsweringPipeline extends (/** @type {new (options: TextPipelineConstructorArgs) => QuestionAnsweringPipelineType} */ (Pipeline)) {\n\n    /**\n     * Create a new QuestionAnsweringPipeline.\n     * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.\n     */\n    constructor(options) {\n        super(options);\n    }\n\n    /** @type {QuestionAnsweringPipelineCallback} */\n    async _call(question, context, {\n        top_k = 1\n    } = {}) {\n\n        // Run tokenization\n        const inputs = this.tokenizer(question, {\n            text_pair: context,\n            padding: true,\n            truncation: true,\n        });\n\n        const { start_logits, end_logits } = await this.model(inputs);\n        const input_ids = inputs.input_ids.tolist();\n        const attention_mask = inputs.attention_mask.tolist();\n\n        // TODO: add support for `return_special_tokens_mask`\n        const special_tokens = this.tokenizer.all_special_ids;\n\n        /** @type {QuestionAnsweringOutput[]} */\n        const toReturn = [];\n        for (let j = 0; j < start_logits.dims[0]; ++j) {\n            const ids = input_ids[j];\n            const sepIndex = ids.findIndex(x =>\n                // We use == to match bigint with number\n                // @ts-ignore\n                x == this.tokenizer.sep_token_id\n            );\n\n\n            const valid_mask = attention_mask[j].map((y, ix) => (\n                y == 1\n                && (\n                    ix === 0 // is cls_token\n                    || (\n                        ix > sepIndex\n                        && special_tokens.findIndex(x => x == ids[ix]) === -1 // token is not a special token (special_tokens_mask == 0)\n                    )\n                )\n            ));\n\n            const start = start_logits[j].tolist();\n            const end = end_logits[j].tolist();\n\n            // Now, we mask out values that can't be in the answer\n            // NOTE: We keep the cls_token unmasked (some models use it to indicate unanswerable questions)\n            for (let i = 1; i < start.length; ++i) {\n                if (\n                    attention_mask[j] == 0 // is part of padding\n                    || i <= sepIndex // is before the sep_token\n                    || special_tokens.findIndex(x => x == ids[i]) !== -1 // Is a special token\n                ) {\n                    // Make sure non-context indexes in the tensor cannot contribute to the softmax\n                    start[i] = -Infinity;\n                    end[i] = -Infinity;\n                }\n            }\n\n            // Normalize logits and spans to retrieve the answer\n            const start_scores = softmax(start).map((x, i) => [x, i]);\n            const end_scores = softmax(end).map((x, i) => [x, i]);\n\n            // Mask CLS\n            start_scores[0][0] = 0;\n            end_scores[0][0] = 0;\n\n            // Generate all valid spans and select best ones\n            const options = product(start_scores, end_scores)\n                .filter(x => x[0][1] <= x[1][1])\n                .map(x => [x[0][1], x[1][1], x[0][0] * x[1][0]])\n                .sort((a, b) => b[2] - a[2]);\n\n            for (let k = 0; k < Math.min(options.length, top_k); ++k) {\n                const [start, end, score] = options[k];\n\n                const answer_tokens = ids.slice(start, end + 1)\n\n                const answer = this.tokenizer.decode(answer_tokens, {\n                    skip_special_tokens: true,\n                });\n\n                // TODO add start and end?\n                // NOTE: HF returns character index\n                toReturn.push({\n                    answer, score\n                });\n            }\n        }\n\n        // Mimic HF's return type based on top_k\n        return (top_k === 1) ? toReturn[0] : toReturn;\n    }\n}\n\n\n/**\n * @typedef {Object} FillMaskSingle\n * @property {string} sequence The corresponding input with the mask token prediction.\n * @property {number} score The corresponding probability.\n * @property {number} token The predicted token id (to replace the masked one).\n * @property {string} token_str The predicted token (to replace the masked one).\n * @typedef {FillMaskSingle[]} FillMaskOutput\n * \n * @typedef {Object} FillMaskPipelineOptions Parameters specific to fill mask pipelines.\n * @property {number} [top_k=5] When passed, overrides the number of predictions to return.\n * \n * @callback FillMaskPipelineCallback Fill the masked token in the text(s) given as inputs.\n * @param {string|string[]} texts One or several texts (or one list of prompts) with masked tokens.\n * @param {FillMaskPipelineOptions} [options] The options to use for masked language modelling.\n * @returns {Promise<FillMaskOutput|FillMaskOutput[]>} An array of objects containing the score, predicted token, predicted token string,\n * and the sequence with the predicted token filled in, or an array of such arrays (one for each input text).\n * If only one input text is given, the output will be an array of objects.\n * @throws {Error} When the mask token is not found in the input text.\n * \n * @typedef {TextPipelineConstructorArgs & FillMaskPipelineCallback & Disposable} FillMaskPipelineType\n */\n\n/**\n * Masked language modeling prediction pipeline using any `ModelWithLMHead`.\n * \n * **Example:** Perform masked language modelling (a.k.a. \"fill-mask\") with `Xenova/bert-base-uncased`.\n * ```javascript\n * const unmasker = await pipeline('fill-mask', 'Xenova/bert-base-cased');\n * const output = await unmasker('The goal of life is [MASK].');\n * // [\n * //   { token_str: 'survival', score: 0.06137419492006302, token: 8115, sequence: 'The goal of life is survival.' },\n * //   { token_str: 'love', score: 0.03902450203895569, token: 1567, sequence: 'The goal of life is love.' },\n * //   { token_str: 'happiness', score: 0.03253183513879776, token: 9266, sequence: 'The goal of life is happiness.' },\n * //   { token_str: 'freedom', score: 0.018736306577920914, token: 4438, sequence: 'The goal of life is freedom.' },\n * //   { token_str: 'life', score: 0.01859794743359089, token: 1297, sequence: 'The goal of life is life.' }\n * // ]\n * ```\n * \n * **Example:** Perform masked language modelling (a.k.a. \"fill-mask\") with `Xenova/bert-base-cased` (and return top result).\n * ```javascript\n * const unmasker = await pipeline('fill-mask', 'Xenova/bert-base-cased');\n * const output = await unmasker('The Milky Way is a [MASK] galaxy.', { top_k: 1 });\n * // [{ token_str: 'spiral', score: 0.6299987435340881, token: 14061, sequence: 'The Milky Way is a spiral galaxy.' }]\n * ```\n */\nexport class FillMaskPipeline extends (/** @type {new (options: TextPipelineConstructorArgs) => FillMaskPipelineType} */ (Pipeline)) {\n\n    /**\n     * Create a new FillMaskPipeline.\n     * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.\n     */\n    constructor(options) {\n        super(options);\n    }\n\n    /** @type {FillMaskPipelineCallback} */\n    async _call(texts, {\n        top_k = 5\n    } = {}) {\n\n        // Run tokenization\n        const model_inputs = this.tokenizer(texts, {\n            padding: true,\n            truncation: true,\n        });\n\n        // Run model\n        const { logits } = await this.model(model_inputs)\n\n        const toReturn = [];\n\n        /** @type {bigint[][]} */\n        const input_ids = model_inputs.input_ids.tolist();\n        for (let i = 0; i < input_ids.length; ++i) {\n            const ids = input_ids[i];\n            const mask_token_index = ids.findIndex(x =>\n                // We use == to match bigint with number\n                // @ts-ignore\n                x == this.tokenizer.mask_token_id\n            );\n            if (mask_token_index === -1) {\n                throw Error(`Mask token (${this.tokenizer.mask_token}) not found in text.`)\n            }\n            const itemLogits = logits[i][mask_token_index];\n\n            const scores = await topk(new Tensor(\n                'float32',\n                softmax(itemLogits.data),\n                itemLogits.dims,\n            ), top_k);\n            const values = scores[0].tolist();\n            const indices = scores[1].tolist();\n\n            toReturn.push(indices.map((x, i) => {\n                const sequence = ids.slice();\n                sequence[mask_token_index] = x;\n\n                return {\n                    score: values[i],\n                    token: Number(x),\n                    token_str: this.tokenizer.model.vocab[x],\n                    sequence: this.tokenizer.decode(sequence, { skip_special_tokens: true }),\n                }\n            }));\n        }\n        return Array.isArray(texts) ? toReturn : toReturn[0];\n    }\n}\n\n\n/**\n * @typedef {Object} Text2TextGenerationSingle\n * @property {string} generated_text The generated text.\n * @typedef {Text2TextGenerationSingle[]} Text2TextGenerationOutput\n * \n * @callback Text2TextGenerationPipelineCallback Generate the output text(s) using text(s) given as inputs.\n * @param {string|string[]} texts Input text for the encoder.\n * @param {Partial<import('./generation/configuration_utils.js').GenerationConfig>} [options] Additional keyword arguments to pass along to the generate method of the model.\n * @returns {Promise<Text2TextGenerationOutput|Text2TextGenerationOutput[]>}\n * \n * @typedef {TextPipelineConstructorArgs & Text2TextGenerationPipelineCallback & Disposable} Text2TextGenerationPipelineType\n */\n\n/**\n * Text2TextGenerationPipeline class for generating text using a model that performs text-to-text generation tasks.\n * \n * **Example:** Text-to-text generation w/ `Xenova/LaMini-Flan-T5-783M`.\n * ```javascript\n * const generator = await pipeline('text2text-generation', 'Xenova/LaMini-Flan-T5-783M');\n * const output = await generator('how can I become more healthy?', {\n *   max_new_tokens: 100,\n * });\n * // [{ generated_text: \"To become more healthy, you can: 1. Eat a balanced diet with plenty of fruits, vegetables, whole grains, lean proteins, and healthy fats. 2. Stay hydrated by drinking plenty of water. 3. Get enough sleep and manage stress levels. 4. Avoid smoking and excessive alcohol consumption. 5. Regularly exercise and maintain a healthy weight. 6. Practice good hygiene and sanitation. 7. Seek medical attention if you experience any health issues.\" }]\n * ```\n */\nexport class Text2TextGenerationPipeline extends (/** @type {new (options: TextPipelineConstructorArgs) => Text2TextGenerationPipelineType} */ (Pipeline)) {\n    /** @type {'generated_text'} */\n    _key = 'generated_text';\n\n    /**\n     * Create a new Text2TextGenerationPipeline.\n     * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.\n     */\n    constructor(options) {\n        super(options);\n    }\n\n    /** @type {Text2TextGenerationPipelineCallback} */\n    async _call(texts, generate_kwargs = {}) {\n        if (!Array.isArray(texts)) {\n            texts = [texts];\n        }\n\n\n        // Add global prefix, if present\n        if (this.model.config.prefix) {\n            texts = texts.map(x => this.model.config.prefix + x)\n        }\n\n        // Handle task specific params:\n        const task_specific_params = this.model.config.task_specific_params\n        if (task_specific_params && task_specific_params[this.task]) {\n            // Add prefixes, if present\n            if (task_specific_params[this.task].prefix) {\n                texts = texts.map(x => task_specific_params[this.task].prefix + x)\n            }\n\n            // TODO update generation config\n        }\n\n        const tokenizer = this.tokenizer;\n        const tokenizer_options = {\n            padding: true,\n            truncation: true,\n        }\n        let inputs;\n        if (this instanceof TranslationPipeline && '_build_translation_inputs' in tokenizer) {\n            // TODO: move to Translation pipeline?\n            // Currently put here to avoid code duplication\n            // @ts-ignore\n            inputs = tokenizer._build_translation_inputs(texts, tokenizer_options, generate_kwargs);\n\n        } else {\n            inputs = tokenizer(texts, tokenizer_options);\n        }\n\n        const outputTokenIds = await this.model.generate({ ...inputs, ...generate_kwargs });\n        return tokenizer.batch_decode(/** @type {Tensor} */(outputTokenIds), {\n            skip_special_tokens: true,\n        }).map(text => ({ [this._key]: text }));\n    }\n}\n\n\n/**\n * @typedef {Object} SummarizationSingle\n * @property {string} summary_text The summary text.\n * @typedef {SummarizationSingle[]} SummarizationOutput\n * \n * @callback SummarizationPipelineCallback Summarize the text(s) given as inputs.\n * @param {string|string[]} texts One or several articles (or one list of articles) to summarize.\n * @param {import('./generation/configuration_utils.js').GenerationConfig} [options] Additional keyword arguments to pass along to the generate method of the model.\n * @returns {Promise<SummarizationOutput|SummarizationOutput[]>}\n * \n * @typedef {TextPipelineConstructorArgs & SummarizationPipelineCallback & Disposable} SummarizationPipelineType\n */\n\n/**\n * A pipeline for summarization tasks, inheriting from Text2TextGenerationPipeline.\n * \n * **Example:** Summarization w/ `Xenova/distilbart-cnn-6-6`.\n * ```javascript\n * const generator = await pipeline('summarization', 'Xenova/distilbart-cnn-6-6');\n * const text = 'The tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building, ' +\n *   'and the tallest structure in Paris. Its base is square, measuring 125 metres (410 ft) on each side. ' +\n *   'During its construction, the Eiffel Tower surpassed the Washington Monument to become the tallest ' +\n *   'man-made structure in the world, a title it held for 41 years until the Chrysler Building in New ' +\n *   'York City was finished in 1930. It was the first structure to reach a height of 300 metres. Due to ' +\n *   'the addition of a broadcasting aerial at the top of the tower in 1957, it is now taller than the ' +\n *   'Chrysler Building by 5.2 metres (17 ft). Excluding transmitters, the Eiffel Tower is the second ' +\n *   'tallest free-standing structure in France after the Millau Viaduct.';\n * const output = await generator(text, {\n *   max_new_tokens: 100,\n * });\n * // [{ summary_text: ' The Eiffel Tower is about the same height as an 81-storey building and the tallest structure in Paris. It is the second tallest free-standing structure in France after the Millau Viaduct.' }]\n * ```\n */\nexport class SummarizationPipeline extends (/** @type {new (options: TextPipelineConstructorArgs) => SummarizationPipelineType} */ (/** @type {any} */ (Text2TextGenerationPipeline))) {\n    /** @type {'summary_text'} */\n    _key = 'summary_text';\n\n    /**\n     * Create a new SummarizationPipeline.\n     * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.\n     */\n    constructor(options) {\n        super(options);\n    }\n}\n\n\n/**\n * @typedef {Object} TranslationSingle\n * @property {string} translation_text The translated text.\n * @typedef {TranslationSingle[]} TranslationOutput\n * \n * @callback TranslationPipelineCallback Translate the text(s) given as inputs.\n * @param {string|string[]} texts Texts to be translated.\n * @param {import('./generation/configuration_utils.js').GenerationConfig} [options] Additional keyword arguments to pass along to the generate method of the model.\n * @returns {Promise<TranslationOutput|TranslationOutput[]>}\n * \n * @typedef {TextPipelineConstructorArgs & TranslationPipelineCallback & Disposable} TranslationPipelineType\n */\n\n/**\n * Translates text from one language to another.\n * \n * **Example:** Multilingual translation w/ `Xenova/nllb-200-distilled-600M`.\n * \n * See [here](https://github.com/facebookresearch/flores/blob/main/flores200/README.md#languages-in-flores-200)\n * for the full list of languages and their corresponding codes.\n * \n * ```javascript\n * const translator = await pipeline('translation', 'Xenova/nllb-200-distilled-600M');\n * const output = await translator('जीवन एक चॉकलेट बॉक्स की तरह है।', {\n *   src_lang: 'hin_Deva', // Hindi\n *   tgt_lang: 'fra_Latn', // French\n * });\n * // [{ translation_text: 'La vie est comme une boîte à chocolat.' }]\n * ```\n * \n * **Example:** Multilingual translation w/ `Xenova/m2m100_418M`.\n * \n * See [here](https://huggingface.co/facebook/m2m100_418M#languages-covered)\n * for the full list of languages and their corresponding codes.\n * \n * ```javascript\n * const translator = await pipeline('translation', 'Xenova/m2m100_418M');\n * const output = await translator('生活就像一盒巧克力。', {\n *   src_lang: 'zh', // Chinese\n *   tgt_lang: 'en', // English\n * });\n * // [{ translation_text: 'Life is like a box of chocolate.' }]\n * ```\n * \n * **Example:** Multilingual translation w/ `Xenova/mbart-large-50-many-to-many-mmt`.\n * \n * See [here](https://huggingface.co/facebook/mbart-large-50-many-to-many-mmt#languages-covered)\n * for the full list of languages and their corresponding codes.\n * \n * ```javascript\n * const translator = await pipeline('translation', 'Xenova/mbart-large-50-many-to-many-mmt');\n * const output = await translator('संयुक्त राष्ट्र के प्रमुख का कहना है कि सीरिया में कोई सैन्य समाधान नहीं है', {\n *   src_lang: 'hi_IN', // Hindi\n *   tgt_lang: 'fr_XX', // French\n * });\n * // [{ translation_text: 'Le chef des Nations affirme qu 'il n 'y a military solution in Syria.' }]\n * ```\n */\nexport class TranslationPipeline extends (/** @type {new (options: TextPipelineConstructorArgs) => TranslationPipelineType} */ (/** @type {any} */ (Text2TextGenerationPipeline))) {\n    /** @type {'translation_text'} */\n    _key = 'translation_text';\n\n    /**\n     * Create a new TranslationPipeline.\n     * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.\n     */\n    constructor(options) {\n        super(options);\n    }\n}\n\nfunction isChat(x) {\n    return Array.isArray(x) && x.every(x => 'role' in x && 'content' in x);\n}\n\n/**\n * @typedef {import('./tokenizers.js').Message[]} Chat\n * \n * @typedef {Object} TextGenerationSingle\n * @property {string|Chat} generated_text The generated text.\n * @typedef {TextGenerationSingle[]} TextGenerationOutput\n * \n * @typedef {Object} TextGenerationSpecificParams Parameters specific to text-generation pipelines.\n * @property {boolean} [add_special_tokens] Whether or not to add special tokens when tokenizing the sequences.\n * @property {boolean} [return_full_text=true] If set to `false` only added text is returned, otherwise the full text is returned.\n * @typedef {import('./generation/configuration_utils.js').GenerationConfig & TextGenerationSpecificParams} TextGenerationConfig\n * \n * @callback TextGenerationPipelineCallback Complete the prompt(s) given as inputs.\n * @param {string|string[]|Chat|Chat[]} texts One or several prompts (or one list of prompts) to complete.\n * @param {Partial<TextGenerationConfig>} [options] Additional keyword arguments to pass along to the generate method of the model.\n * @returns {Promise<TextGenerationOutput|TextGenerationOutput[]>} An array or object containing the generated texts.\n * \n * @typedef {TextPipelineConstructorArgs & TextGenerationPipelineCallback & Disposable} TextGenerationPipelineType\n */\n\n/**\n * Language generation pipeline using any `ModelWithLMHead` or `ModelForCausalLM`.\n * This pipeline predicts the words that will follow a specified text prompt.\n * NOTE: For the full list of generation parameters, see [`GenerationConfig`](./utils/generation#module_utils/generation.GenerationConfig).\n * \n * **Example:** Text generation with `Xenova/distilgpt2` (default settings).\n * ```javascript\n * const generator = await pipeline('text-generation', 'Xenova/distilgpt2');\n * const text = 'I enjoy walking with my cute dog,';\n * const output = await generator(text);\n * // [{ generated_text: \"I enjoy walking with my cute dog, and I love to play with the other dogs.\" }]\n * ```\n * \n * **Example:** Text generation with `Xenova/distilgpt2` (custom settings).\n * ```javascript\n * const generator = await pipeline('text-generation', 'Xenova/distilgpt2');\n * const text = 'Once upon a time, there was';\n * const output = await generator(text, {\n *   temperature: 2,\n *   max_new_tokens: 10,\n *   repetition_penalty: 1.5,\n *   no_repeat_ngram_size: 2,\n *   num_beams: 2,\n *   num_return_sequences: 2,\n * });\n * // [{\n * //   \"generated_text\": \"Once upon a time, there was an abundance of information about the history and activities that\"\n * // }, {\n * //   \"generated_text\": \"Once upon a time, there was an abundance of information about the most important and influential\"\n * // }]\n * ```\n * \n * **Example:** Run code generation with `Xenova/codegen-350M-mono`.\n * ```javascript\n * const generator = await pipeline('text-generation', 'Xenova/codegen-350M-mono');\n * const text = 'def fib(n):';\n * const output = await generator(text, {\n *   max_new_tokens: 44,\n * });\n * // [{\n * //   generated_text: 'def fib(n):\\n' +\n * //     '    if n == 0:\\n' +\n * //     '        return 0\\n' +\n * //     '    elif n == 1:\\n' +\n * //     '        return 1\\n' +\n * //     '    else:\\n' +\n * //     '        return fib(n-1) + fib(n-2)\\n'\n * // }]\n * ```\n */\nexport class TextGenerationPipeline extends (/** @type {new (options: TextPipelineConstructorArgs) => TextGenerationPipelineType} */ (Pipeline)) {\n\n    /**\n     * Create a new TextGenerationPipeline.\n     * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.\n     */\n    constructor(options) {\n        super(options);\n    }\n\n    /** @type {TextGenerationPipelineCallback} */\n    async _call(texts, generate_kwargs = {}) {\n        let isBatched = false;\n        let isChatInput = false;\n\n        // Normalize inputs\n        /** @type {string[]} */\n        let inputs;\n        if (typeof texts === 'string') {\n            inputs = texts = [texts];\n        } else if (Array.isArray(texts) && texts.every(x => typeof x === 'string')) {\n            isBatched = true;\n            inputs = /** @type {string[]} */(texts);\n        } else {\n            if (isChat(texts)) {\n                texts = [/** @type {Chat} */(texts)];\n            } else if (Array.isArray(texts) && texts.every(isChat)) {\n                isBatched = true;\n            } else {\n                throw new Error('Input must be a string, an array of strings, a Chat, or an array of Chats');\n            }\n            isChatInput = true;\n\n            // If the input is a chat, we need to apply the chat template\n            inputs = /** @type {string[]} */(/** @type {Chat[]} */ (texts).map(\n                x => this.tokenizer.apply_chat_template(x, {\n                    tokenize: false,\n                    add_generation_prompt: true,\n                })\n            ));\n        }\n\n        // By default, do not add special tokens\n        const add_special_tokens = generate_kwargs.add_special_tokens ?? false;\n\n        // By default, return full text\n        const return_full_text = isChatInput\n            ? false\n            : generate_kwargs.return_full_text ?? true;\n\n        this.tokenizer.padding_side = 'left';\n        const text_inputs = this.tokenizer(inputs, {\n            add_special_tokens,\n            padding: true,\n            truncation: true,\n        });\n\n        const outputTokenIds = /** @type {Tensor} */(await this.model.generate({\n            ...text_inputs,\n            ...generate_kwargs\n        }));\n\n        const decoded = this.tokenizer.batch_decode(outputTokenIds, {\n            skip_special_tokens: true,\n        });\n\n        let promptLengths;\n        if (!return_full_text && text_inputs.input_ids.dims.at(-1) > 0) {\n            promptLengths = this.tokenizer.batch_decode(text_inputs.input_ids, {\n                skip_special_tokens: true,\n            }).map(x => x.length);\n        }\n\n        /** @type {TextGenerationOutput[]} */\n        const toReturn = Array.from({ length: texts.length }, _ => []);\n        for (let i = 0; i < decoded.length; ++i) {\n            const textIndex = Math.floor(i / outputTokenIds.dims[0] * texts.length);\n\n            if (promptLengths) {\n                // Trim the decoded text to only include the generated part\n                decoded[i] = decoded[i].slice(promptLengths[textIndex]);\n            }\n            toReturn[textIndex].push({\n                generated_text: isChatInput\n                    ? [\n                        ...((/** @type {Chat[]} */(texts)[textIndex])),\n                        { role: 'assistant', content: decoded[i] },\n                    ]\n                    : decoded[i]\n            });\n        }\n        return (!isBatched && toReturn.length === 1) ? toReturn[0] : toReturn;\n    }\n}\n\n/**\n * @typedef {Object} ZeroShotClassificationOutput\n * @property {string} sequence The sequence for which this is the output.\n * @property {string[]} labels The labels sorted by order of likelihood.\n * @property {number[]} scores The probabilities for each of the labels.\n * \n * @typedef {Object} ZeroShotClassificationPipelineOptions Parameters specific to zero-shot classification pipelines.\n * @property {string} [hypothesis_template=\"This example is {}.\"] The template used to turn each\n * candidate label into an NLI-style hypothesis. The candidate label will replace the {} placeholder.\n * @property {boolean} [multi_label=false] Whether or not multiple candidate labels can be true.\n * If `false`, the scores are normalized such that the sum of the label likelihoods for each sequence\n * is 1. If `true`, the labels are considered independent and probabilities are normalized for each\n * candidate by doing a softmax of the entailment score vs. the contradiction score.\n * \n * @callback ZeroShotClassificationPipelineCallback Classify the sequence(s) given as inputs.\n * @param {string|string[]} texts The sequence(s) to classify, will be truncated if the model input is too large.\n * @param {string|string[]} candidate_labels The set of possible class labels to classify each sequence into.\n * Can be a single label, a string of comma-separated labels, or a list of labels.\n * @param {ZeroShotClassificationPipelineOptions} [options] The options to use for zero-shot classification.\n * @returns {Promise<ZeroShotClassificationOutput|ZeroShotClassificationOutput[]>} An array or object containing the predicted labels and scores.\n * \n * @typedef {TextPipelineConstructorArgs & ZeroShotClassificationPipelineCallback & Disposable} ZeroShotClassificationPipelineType\n */\n\n/**\n * NLI-based zero-shot classification pipeline using a `ModelForSequenceClassification`\n * trained on NLI (natural language inference) tasks. Equivalent of `text-classification`\n * pipelines, but these models don't require a hardcoded number of potential classes, they\n * can be chosen at runtime. It usually means it's slower but it is **much** more flexible.\n * \n * **Example:** Zero shot classification with `Xenova/mobilebert-uncased-mnli`.\n * ```javascript\n * const classifier = await pipeline('zero-shot-classification', 'Xenova/mobilebert-uncased-mnli');\n * const text = 'Last week I upgraded my iOS version and ever since then my phone has been overheating whenever I use your app.';\n * const labels = [ 'mobile', 'billing', 'website', 'account access' ];\n * const output = await classifier(text, labels);\n * // {\n * //   sequence: 'Last week I upgraded my iOS version and ever since then my phone has been overheating whenever I use your app.',\n * //   labels: [ 'mobile', 'website', 'billing', 'account access' ],\n * //   scores: [ 0.5562091040482018, 0.1843621307860853, 0.13942646639336376, 0.12000229877234923 ]\n * // }\n * ```\n * \n * **Example:** Zero shot classification with `Xenova/nli-deberta-v3-xsmall` (multi-label).\n * ```javascript\n * const classifier = await pipeline('zero-shot-classification', 'Xenova/nli-deberta-v3-xsmall');\n * const text = 'I have a problem with my iphone that needs to be resolved asap!';\n * const labels = [ 'urgent', 'not urgent', 'phone', 'tablet', 'computer' ];\n * const output = await classifier(text, labels, { multi_label: true });\n * // {\n * //   sequence: 'I have a problem with my iphone that needs to be resolved asap!',\n * //   labels: [ 'urgent', 'phone', 'computer', 'tablet', 'not urgent' ],\n * //   scores: [ 0.9958870956360275, 0.9923963400697035, 0.002333537946160235, 0.0015134138567598765, 0.0010699384208377163 ]\n * // }\n * ```\n */\nexport class ZeroShotClassificationPipeline extends (/** @type {new (options: TextPipelineConstructorArgs) => ZeroShotClassificationPipelineType} */ (Pipeline)) {\n    /**\n     * Create a new ZeroShotClassificationPipeline.\n     * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.\n     */\n    constructor(options) {\n        super(options);\n\n        // Use model config to get label2id mapping\n        this.label2id = Object.fromEntries(\n            Object.entries((/** @type {any} */(this).model).config.label2id).map(\n                ([k, v]) => [k.toLowerCase(), v]\n            )\n        );\n\n        this.entailment_id = this.label2id['entailment'];\n        if (this.entailment_id === undefined) {\n            console.warn(\"Could not find 'entailment' in label2id mapping. Using 2 as entailment_id.\");\n            this.entailment_id = 2;\n        }\n\n        this.contradiction_id = this.label2id['contradiction'] ?? this.label2id['not_entailment'];\n        if (this.contradiction_id === undefined) {\n            console.warn(\"Could not find 'contradiction' in label2id mapping. Using 0 as contradiction_id.\");\n            this.contradiction_id = 0;\n        }\n    }\n\n    /** @type {ZeroShotClassificationPipelineCallback} */\n    async _call(texts, candidate_labels, {\n        hypothesis_template = \"This example is {}.\",\n        multi_label = false,\n    } = {}) {\n\n        const isBatched = Array.isArray(texts);\n        if (!isBatched) {\n            texts = [/** @type {string} */ (texts)];\n        }\n        if (!Array.isArray(candidate_labels)) {\n            candidate_labels = [candidate_labels];\n        }\n\n        // Insert labels into hypothesis template\n        const hypotheses = candidate_labels.map(\n            x => hypothesis_template.replace('{}', x)\n        );\n\n        // How to perform the softmax over the logits:\n        //  - true:  softmax over the entailment vs. contradiction dim for each label independently\n        //  - false: softmax the \"entailment\" logits over all candidate labels\n        const softmaxEach = multi_label || candidate_labels.length === 1;\n\n        /** @type {ZeroShotClassificationOutput[]} */\n        const toReturn = [];\n        for (const premise of texts) {\n            const entails_logits = [];\n\n            for (const hypothesis of hypotheses) {\n                const inputs = this.tokenizer(premise, {\n                    text_pair: hypothesis,\n                    padding: true,\n                    truncation: true,\n                })\n                const outputs = await this.model(inputs)\n\n                if (softmaxEach) {\n                    entails_logits.push([\n                        outputs.logits.data[this.contradiction_id],\n                        outputs.logits.data[this.entailment_id]\n                    ])\n                } else {\n                    entails_logits.push(outputs.logits.data[this.entailment_id])\n                }\n            }\n\n            /** @type {number[]} */\n            const scores = softmaxEach\n                ? entails_logits.map(x => softmax(x)[1])\n                : softmax(entails_logits);\n\n            // Sort by scores (desc) and return scores with indices\n            const scores_sorted = scores\n                .map((x, i) => [x, i])\n                .sort((a, b) => (b[0] - a[0]));\n\n            toReturn.push({\n                sequence: premise,\n                labels: scores_sorted.map(x => candidate_labels[x[1]]),\n                scores: scores_sorted.map(x => x[0]),\n            });\n        }\n        return isBatched ? toReturn : toReturn[0];\n    }\n}\n\n/**\n * @typedef {Object} FeatureExtractionPipelineOptions Parameters specific to feature extraction pipelines.\n * @property {'none'|'mean'|'cls'} [pooling=\"none\"] The pooling method to use.\n * @property {boolean} [normalize=false] Whether or not to normalize the embeddings in the last dimension.\n * @property {boolean} [quantize=false] Whether or not to quantize the embeddings.\n * @property {'binary'|'ubinary'} [precision='binary'] The precision to use for quantization. \n * \n * @callback FeatureExtractionPipelineCallback Extract the features of the input(s).\n * @param {string|string[]} texts One or several texts (or one list of texts) to get the features of.\n * @param {FeatureExtractionPipelineOptions} [options] The options to use for feature extraction.\n * @returns {Promise<Tensor>} The features computed by the model.\n * \n * @typedef {TextPipelineConstructorArgs & FeatureExtractionPipelineCallback & Disposable} FeatureExtractionPipelineType\n */\n\n/**\n * Feature extraction pipeline using no model head. This pipeline extracts the hidden\n * states from the base transformer, which can be used as features in downstream tasks.\n * \n * **Example:** Run feature extraction with `bert-base-uncased` (without pooling/normalization).\n * ```javascript\n * const extractor = await pipeline('feature-extraction', 'Xenova/bert-base-uncased', { revision: 'default' });\n * const output = await extractor('This is a simple test.');\n * // Tensor {\n * //   type: 'float32',\n * //   data: Float32Array [0.05939924716949463, 0.021655935794115067, ...],\n * //   dims: [1, 8, 768]\n * // }\n * ```\n * \n * **Example:** Run feature extraction with `bert-base-uncased` (with pooling/normalization).\n * ```javascript\n * const extractor = await pipeline('feature-extraction', 'Xenova/bert-base-uncased', { revision: 'default' });\n * const output = await extractor('This is a simple test.', { pooling: 'mean', normalize: true });\n * // Tensor {\n * //   type: 'float32',\n * //   data: Float32Array [0.03373778983950615, -0.010106077417731285, ...],\n * //   dims: [1, 768]\n * // }\n * ```\n * \n * **Example:** Calculating embeddings with `sentence-transformers` models.\n * ```javascript\n * const extractor = await pipeline('feature-extraction', 'Xenova/all-MiniLM-L6-v2');\n * const output = await extractor('This is a simple test.', { pooling: 'mean', normalize: true });\n * // Tensor {\n * //   type: 'float32',\n * //   data: Float32Array [0.09094982594251633, -0.014774246141314507, ...],\n * //   dims: [1, 384]\n * // }\n * ```\n * **Example:** Calculating binary embeddings with `sentence-transformers` models.\n * ```javascript\n * const extractor = await pipeline('feature-extraction', 'Xenova/all-MiniLM-L6-v2');\n * const output = await extractor('This is a simple test.', { pooling: 'mean', quantize: true, precision: 'binary' });\n * // Tensor {\n * //   type: 'int8',\n * //   data: Int8Array [49, 108, 24, ...],\n * //   dims: [1, 48]\n * // }\n * ```\n */\nexport class FeatureExtractionPipeline extends (/** @type {new (options: TextPipelineConstructorArgs) => FeatureExtractionPipelineType} */ (Pipeline)) {\n    /**\n     * Create a new FeatureExtractionPipeline.\n     * @param {TextPipelineConstructorArgs} options An object used to instantiate the pipeline.\n     */\n    constructor(options) {\n        super(options);\n    }\n\n    /** @type {FeatureExtractionPipelineCallback} */\n    async _call(texts, {\n        pooling = /** @type {'none'} */('none'),\n        normalize = false,\n        quantize = false,\n        precision = /** @type {'binary'} */('binary'),\n    } = {}) {\n\n        // Run tokenization\n        const model_inputs = this.tokenizer(texts, {\n            padding: true,\n            truncation: true,\n        });\n\n        // Run model\n        const outputs = await this.model(model_inputs)\n\n        // TODO: Provide warning to the user that they might be using model which was not exported\n        // specifically for feature extraction\n        // console.log(this.model.config)\n        // console.log(outputs)\n\n        /** @type {Tensor} */\n        let result = outputs.last_hidden_state ?? outputs.logits ?? outputs.token_embeddings;\n        if (pooling === 'none') {\n            // Skip pooling\n        } else if (pooling === 'mean') {\n            result = mean_pooling(result, model_inputs.attention_mask);\n        } else if (pooling === 'cls') {\n            result = result.slice(null, 0);\n        } else {\n            throw Error(`Pooling method '${pooling}' not supported.`);\n        }\n\n        if (normalize) {\n            result = result.normalize(2, -1);\n        }\n\n        if (quantize) {\n            result = quantize_embeddings(result, precision);\n        }\n\n        return result;\n    }\n}\n\n\n/**\n * @typedef {Object} ImageFeatureExtractionPipelineOptions Parameters specific to image feature extraction pipelines.\n * @property {boolean} [pool=null] Whether or not to return the pooled output. If set to `false`, the model will return the raw hidden states.\n * \n * @callback ImageFeatureExtractionPipelineCallback Extract the features of the input(s).\n * @param {ImagePipelineInputs} images One or several images (or one list of images) to get the features of.\n * @param {ImageFeatureExtractionPipelineOptions} [options] The options to use for image feature extraction.\n * @returns {Promise<Tensor>} The image features computed by the model.\n * \n * @typedef {ImagePipelineConstructorArgs & ImageFeatureExtractionPipelineCallback & Disposable} ImageFeatureExtractionPipelineType\n */\n\n/**\n * Image feature extraction pipeline using no model head. This pipeline extracts the hidden\n * states from the base transformer, which can be used as features in downstream tasks.\n * \n * **Example:** Perform image feature extraction with `Xenova/vit-base-patch16-224-in21k`.\n * ```javascript\n * const image_feature_extractor = await pipeline('image-feature-extraction', 'Xenova/vit-base-patch16-224-in21k');\n * const url = 'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/cats.png';\n * const features = await image_feature_extractor(url);\n * // Tensor {\n * //   dims: [ 1, 197, 768 ],\n * //   type: 'float32',\n * //   data: Float32Array(151296) [ ... ],\n * //   size: 151296\n * // }\n * ```\n * \n * **Example:** Compute image embeddings with `Xenova/clip-vit-base-patch32`.\n * ```javascript\n * const image_feature_extractor = await pipeline('image-feature-extraction', 'Xenova/clip-vit-base-patch32');\n * const url = 'https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/cats.png';\n * const features = await image_feature_extractor(url);\n * // Tensor {\n * //   dims: [ 1, 512 ],\n * //   type: 'float32',\n * //   data: Float32Array(512) [ ... ],\n * //   size: 512\n * // }\n * ```\n */\nexport class ImageFeatureExtractionPipeline extends (/** @type {new (options: ImagePipelineConstructorArgs) => ImageFeatureExtractionPipelineType} */ (Pipeline)) {\n    /**\n     * Create a new ImageFeatureExtractionPipeline.\n     * @param {ImagePipelineConstructorArgs} options An object used to instantiate the pipeline.\n     */\n    constructor(options) {\n        super(options);\n    }\n\n    /** @type {ImageFeatureExtractionPipelineCallback} */\n    async _call(images, {\n        pool = null,\n    } = {}) {\n\n        const preparedImages = await prepareImages(images);\n        const { pixel_values } = await this.processor(preparedImages);\n        const outputs = await this.model({ pixel_values });\n\n        /** @type {Tensor} */\n        let result;\n        if (pool) {\n            if (!('pooler_output' in outputs)) {\n                throw Error(`No pooled output was returned. Make sure the model has a 'pooler' layer when using the 'pool' option.`);\n            }\n            result = outputs.pooler_output;\n\n        } else {\n            result = outputs.last_hidden_state ?? outputs.logits ?? outputs.image_embeds;\n        }\n        return result;\n    }\n}\n\n// TODO\n// export class SentenceSimilarityPipeline extends Pipeline {\n// }\n\n/**\n * @typedef {Object} AudioClassificationSingle\n * @property {string} label The label predicted.\n * @property {number} score The corresponding probability.\n * @typedef {AudioClassificationSingle[]} AudioClassificationOutput\n * \n * @typedef {Object} AudioClassificationPipelineOptions Parameters specific to audio classification pipelines.\n * @property {number} [top_k=5] The number of top labels that will be returned by the pipeline.\n * If the provided number is `null` or higher than the number of labels available in the model configuration,\n * it will default to the number of labels.\n * \n * @callback AudioClassificationPipelineCallback Classify the sequence(s) given as inputs.\n * @param {AudioPipelineInputs} audio The input audio file(s) to be classified. The input is either:\n * - `string` or `URL` that is the filename/URL of the audio file, the file will be read at the processor's sampling rate\n * to get the waveform using the [`AudioContext`](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext) API.\n * If `AudioContext` is not available, you should pass the raw waveform in as a Float32Array of shape `(n, )`.\n * - `Float32Array` or `Float64Array` of shape `(n, )`, representing the raw audio at the correct sampling rate (no further check will be done).\n * @param {AudioClassificationPipelineOptions} [options] The options to use for audio classification.\n * @returns {Promise<AudioClassificationOutput|AudioClassificationOutput[]>} An array or object containing the predicted labels and scores.\n * \n * @typedef {AudioPipelineConstructorArgs & AudioClassificationPipelineCallback & Disposable} AudioClassificationPipelineType\n */\n\n/**\n * Audio classification pipeline using any `AutoModelForAudioClassification`.\n * This pipeline predicts the class of a raw waveform or an audio file.\n * \n * **Example:** Perform audio classification with `Xenova/wav2vec2-large-xlsr-53-gender-recognition-librispeech`.\n * ```javascript\n * const classifier = await pipeline('audio-classification', 'Xenova/wav2vec2-large-xlsr-53-gender-recognition-librispeech');\n * const url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/jfk.wav';\n * const output = await classifier(url);\n * // [\n * //   { label: 'male', score: 0.9981542229652405 },\n * //   { label: 'female', score: 0.001845747814513743 }\n * // ]\n * ```\n * \n * **Example:** Perform audio classification with `Xenova/ast-finetuned-audioset-10-10-0.4593` and return top 4 results.\n * ```javascript\n * const classifier = await pipeline('audio-classification', 'Xenova/ast-finetuned-audioset-10-10-0.4593');\n * const url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/cat_meow.wav';\n * const output = await classifier(url, { top_k: 4 });\n * // [\n * //   { label: 'Meow', score: 0.5617874264717102 },\n * //   { label: 'Cat', score: 0.22365376353263855 },\n * //   { label: 'Domestic animals, pets', score: 0.1141069084405899 },\n * //   { label: 'Animal', score: 0.08985692262649536 },\n * // ]\n * ```\n */\nexport class AudioClassificationPipeline extends (/** @type {new (options: AudioPipelineConstructorArgs) => AudioClassificationPipelineType} */ (Pipeline)) {\n\n    /**\n     * Create a new AudioClassificationPipeline.\n     * @param {AudioPipelineConstructorArgs} options An object used to instantiate the pipeline.\n     */\n    constructor(options) {\n        super(options);\n    }\n\n    /** @type {AudioClassificationPipelineCallback} */\n    async _call(audio, {\n        top_k = 5\n    } = {}) {\n\n        const sampling_rate = this.processor.feature_extractor.config.sampling_rate;\n        const preparedAudios = await prepareAudios(audio, sampling_rate);\n\n        const id2label = this.model.config.id2label;\n\n        const toReturn = [];\n        for (const aud of preparedAudios) {\n            const inputs = await this.processor(aud);\n            const output = await this.model(inputs);\n            const logits = output.logits[0];\n\n            const scores = await topk(new Tensor(\n                'float32',\n                softmax(logits.data),\n                logits.dims,\n            ), top_k);\n\n            const values = scores[0].tolist();\n            const indices = scores[1].tolist();\n\n            const vals = indices.map((x, i) => ({\n                label: /** @type {string} */ (id2label ? id2label[x] : `LABEL_${x}`),\n                score: /** @type {number} */ (values[i]),\n            }));\n\n            toReturn.push(vals);\n        };\n        return Array.isArray(audio) ? toReturn : toReturn[0];\n    }\n}\n\n/**\n * @typedef {Object} ZeroShotAudioClassificationOutput\n * @property {string} label The label identified by the model. It is one of the suggested `candidate_label`.\n * @property {number} score The score attributed by the model for that label (between 0 and 1).\n * \n * @typedef {Object} ZeroShotAudioClassificationPipelineOptions Parameters specific to zero-shot audio classification pipelines.\n * @property {string} [hypothesis_template=\"This is a sound of {}.\"] The sentence used in conjunction with `candidate_labels`\n * to attempt the audio classification by replacing the placeholder with the candidate_labels.\n * Then likelihood is estimated by using `logits_per_audio`.\n * \n * @callback ZeroShotAudioClassificationPipelineCallback Classify the sequence(s) given as inputs.\n * @param {AudioPipelineInputs} audio The input audio file(s) to be classified. The input is either:\n * - `string` or `URL` that is the filename/URL of the audio file, the file will be read at the processor's sampling rate\n * to get the waveform using the [`AudioContext`](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext) API.\n * If `AudioContext` is not available, you should pass the raw waveform in as a Float32Array of shape `(n, )`.\n * - `Float32Array` or `Float64Array` of shape `(n, )`, representing the raw audio at the correct sampling rate (no further check will be done).\n * @param {string[]} candidate_labels The candidate labels for this audio.\n * @param {ZeroShotAudioClassificationPipelineOptions} [options] The options to use for zero-shot audio classification.\n * @returns {Promise<ZeroShotAudioClassificationOutput[]|ZeroShotAudioClassificationOutput[][]>} An array of objects containing the predicted labels and scores.\n * \n * @typedef {TextAudioPipelineConstructorArgs & ZeroShotAudioClassificationPipelineCallback & Disposable} ZeroShotAudioClassificationPipelineType\n */\n\n/**\n * Zero shot audio classification pipeline using `ClapModel`. This pipeline predicts the class of an audio when you\n * provide an audio and a set of `candidate_labels`.\n * \n * **Example**: Perform zero-shot audio classification with `Xenova/clap-htsat-unfused`.\n * ```javascript\n * const classifier = await pipeline('zero-shot-audio-classification', 'Xenova/clap-htsat-unfused');\n * const audio = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/dog_barking.wav';\n * const candidate_labels = ['dog', 'vaccum cleaner'];\n * const scores = await classifier(audio, candidate_labels);\n * // [\n * //   { score: 0.9993992447853088, label: 'dog' },\n * //   { score: 0.0006007603369653225, label: 'vaccum cleaner' }\n * // ]\n * ```\n */\nexport class ZeroShotAudioClassificationPipeline extends (/** @type {new (options: TextAudioPipelineConstructorArgs) => ZeroShotAudioClassificationPipelineType} */ (Pipeline)) {\n\n    /**\n     * Create a new ZeroShotAudioClassificationPipeline.\n     * @param {TextAudioPipelineConstructorArgs} options An object used to instantiate the pipeline.\n     */\n    constructor(options) {\n        super(options);\n    }\n\n    /** @type {ZeroShotAudioClassificationPipelineCallback} */\n    async _call(audio, candidate_labels, {\n        hypothesis_template = \"This is a sound of {}.\"\n    } = {}) {\n\n        const single = !Array.isArray(audio);\n        if (single) {\n            audio = [/** @type {AudioInput} */ (audio)];\n        }\n\n        // Insert label into hypothesis template \n        const texts = candidate_labels.map(\n            x => hypothesis_template.replace('{}', x)\n        );\n\n        // Run tokenization\n        const text_inputs = this.tokenizer(texts, {\n            padding: true,\n            truncation: true,\n        });\n\n        const sampling_rate = this.processor.feature_extractor.config.sampling_rate;\n        const preparedAudios = await prepareAudios(audio, sampling_rate);\n\n        const toReturn = [];\n        for (const aud of preparedAudios) {\n            const audio_inputs = await this.processor(aud);\n\n            // Run model with both text and audio inputs\n            const output = await this.model({ ...text_inputs, ...audio_inputs });\n\n            // Compute softmax per audio\n            const probs = softmax(output.logits_per_audio.data);\n\n            toReturn.push([...probs].map((x, i) => ({\n                score: x,\n                label: candidate_labels[i]\n            })));\n        }\n        return single ? toReturn[0] : toReturn;\n    }\n}\n\n/**\n * @typedef {Object} Chunk\n * @property {[number, number]} timestamp The start and end timestamp of the chunk in seconds.\n * @property {string} text The recognized text.\n */\n\n/**\n * @typedef {Object} AutomaticSpeechRecognitionOutput\n * @property {string} text The recognized text.\n * @property {Chunk[]} [chunks] When using `return_timestamps`, the `chunks` will become a list\n * containing all the various text chunks identified by the model.\n * \n * @typedef {Object} AutomaticSpeechRecognitionSpecificParams Parameters specific to automatic-speech-recognition pipelines.\n * @property {boolean|'word'} [return_timestamps] Whether to return timestamps or not. Default is `false`.\n * @property {number} [chunk_length_s] The length of audio chunks to process in seconds. Default is 0 (no chunking).\n * @property {number} [stride_length_s] The length of overlap between consecutive audio chunks in seconds. If not provided, defaults to `chunk_length_s / 6`.\n * @property {boolean} [force_full_sequences] Whether to force outputting full sequences or not. Default is `false`.\n * @property {string} [language] The source language. Default is `null`, meaning it should be auto-detected. Use this to potentially improve performance if the source language is known.\n * @property {string} [task] The task to perform. Default is `null`, meaning it should be auto-detected.\n * @property {number} [num_frames] The number of frames in the input audio.\n * @typedef {import('./generation/configuration_utils.js').GenerationConfig & AutomaticSpeechRecognitionSpecificParams} AutomaticSpeechRecognitionConfig\n * \n * @callback AutomaticSpeechRecognitionPipelineCallback Transcribe the audio sequence(s) given as inputs to text.\n * @param {AudioPipelineInputs} audio The input audio file(s) to be transcribed. The input is either:\n * - `string` or `URL` that is the filename/URL of the audio file, the file will be read at the processor's sampling rate\n * to get the waveform using the [`AudioContext`](https://developer.mozilla.org/en-US/docs/Web/API/AudioContext) API.\n * If `AudioContext` is not available, you should pass the raw waveform in as a Float32Array of shape `(n, )`.\n * - `Float32Array` or `Float64Array` of shape `(n, )`, representing the raw audio at the correct sampling rate (no further check will be done).\n * @param {Partial<AutomaticSpeechRecognitionConfig>} [options] Additional keyword arguments to pass along to the generate method of the model.\n * @returns {Promise<AutomaticSpeechRecognitionOutput|AutomaticSpeechRecognitionOutput[]>} An object containing the transcription text and optionally timestamps if `return_timestamps` is `true`.\n * \n * @typedef {TextAudioPipelineConstructorArgs & AutomaticSpeechRecognitionPipelineCallback & Disposable} AutomaticSpeechRecognitionPipelineType\n */\n\n/**\n * Pipeline that aims at extracting spoken text contained within some audio.\n *\n * **Example:** Transcribe English.\n * ```javascript\n * const transcriber = await pipeline('automatic-speech-recognition', 'Xenova/whisper-tiny.en');\n * const url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/jfk.wav';\n * const output = await transcriber(url);\n * // { text: \" And so my fellow Americans ask not what your country can do for you, ask what you can do for your country.\" }\n * ```\n * \n * **Example:** Transcribe English w/ timestamps.\n * ```javascript\n * const transcriber = await pipeline('automatic-speech-recognition', 'Xenova/whisper-tiny.en');\n * const url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/jfk.wav';\n * const output = await transcriber(url, { return_timestamps: true });\n * // {\n * //   text: \" And so my fellow Americans ask not what your country can do for you, ask what you can do for your country.\"\n * //   chunks: [\n * //     { timestamp: [0, 8],  text: \" And so my fellow Americans ask not what your country can do for you\" }\n * //     { timestamp: [8, 11], text: \" ask what you can do for your country.\" }\n * //   ]\n * // }\n * ```\n * \n * **Example:** Transcribe English w/ word-level timestamps.\n * ```javascript\n * const transcriber = await pipeline('automatic-speech-recognition', 'Xenova/whisper-tiny.en');\n * const url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/jfk.wav';\n * const output = await transcriber(url, { return_timestamps: 'word' });\n * // {\n * //   \"text\": \" And so my fellow Americans ask not what your country can do for you ask what you can do for your country.\",\n * //   \"chunks\": [\n * //     { \"text\": \" And\", \"timestamp\": [0, 0.78] },\n * //     { \"text\": \" so\", \"timestamp\": [0.78, 1.06] },\n * //     { \"text\": \" my\", \"timestamp\": [1.06, 1.46] },\n * //     ...\n * //     { \"text\": \" for\", \"timestamp\": [9.72, 9.92] },\n * //     { \"text\": \" your\", \"timestamp\": [9.92, 10.22] },\n * //     { \"text\": \" country.\", \"timestamp\": [10.22, 13.5] }\n * //   ]\n * // }\n * ```\n * \n * **Example:** Transcribe French.\n * ```javascript\n * const transcriber = await pipeline('automatic-speech-recognition', 'Xenova/whisper-small');\n * const url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/french-audio.mp3';\n * const output = await transcriber(url, { language: 'french', task: 'transcribe' });\n * // { text: \" J'adore, j'aime, je n'aime pas, je déteste.\" }\n * ```\n * \n * **Example:** Translate French to English.\n * ```javascript\n * const transcriber = await pipeline('automatic-speech-recognition', 'Xenova/whisper-small');\n * const url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/french-audio.mp3';\n * const output = await transcriber(url, { language: 'french', task: 'translate' });\n * // { text: \" I love, I like, I don't like, I hate.\" }\n * ```\n * \n * **Example:** Transcribe/translate audio longer than 30 seconds.\n * ```javascript\n * const transcriber = await pipeline('automatic-speech-recognition', 'Xenova/whisper-tiny.en');\n * const url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/ted_60.wav';\n * const output = await transcriber(url, { chunk_length_s: 30, stride_length_s: 5 });\n * // { text: \" So in college, I was a government major, which means [...] So I'd start off light and I'd bump it up\" }\n * ```\n */\nexport class AutomaticSpeechRecognitionPipeline extends (/** @type {new (options: TextAudioPipelineConstructorArgs) => AutomaticSpeechRecognitionPipelineType} */ (Pipeline)) {\n\n    /**\n     * Create a new AutomaticSpeechRecognitionPipeline.\n     * @param {TextAudioPipelineConstructorArgs} options An object used to instantiate the pipeline.\n     */\n    constructor(options) {\n        super(options);\n    }\n\n    /** @type {AutomaticSpeechRecognitionPipelineCallback} */\n    async _call(audio, kwargs = {}) {\n        switch (this.model.config.model_type) {\n            case 'whisper':\n                return this._call_whisper(audio, kwargs)\n            case 'wav2vec2':\n            case 'wav2vec2-bert':\n            case 'unispeech':\n            case 'unispeech-sat':\n            case 'hubert':\n                return this._call_wav2vec2(audio, kwargs)\n            default:\n                throw new Error(`AutomaticSpeechRecognitionPipeline does not support model type '${this.model.config.model_type}'.`)\n        }\n    }\n\n    /**\n     * @type {AutomaticSpeechRecognitionPipelineCallback}\n     * @private\n     */\n    async _call_wav2vec2(audio, kwargs) {\n        // TODO use kwargs\n\n        if (kwargs.language) {\n            console.warn('`language` parameter is not yet supported for `wav2vec2` models, defaulting to \"English\".');\n        }\n        if (kwargs.task) {\n            console.warn('`task` parameter is not yet supported for `wav2vec2` models, defaulting to \"transcribe\".');\n        }\n\n        const single = !Array.isArray(audio);\n        if (single) {\n            audio = [/** @type {AudioInput} */ (audio)];\n        }\n\n        const sampling_rate = this.processor.feature_extractor.config.sampling_rate;\n        const preparedAudios = await prepareAudios(audio, sampling_rate);\n\n        const toReturn = [];\n        for (const aud of preparedAudios) {\n            const inputs = await this.processor(aud);\n            const output = await this.model(inputs);\n            const logits = output.logits[0];\n\n            const predicted_ids = [];\n            for (const item of logits) {\n                predicted_ids.push(max(item.data)[1])\n            }\n            const predicted_sentences = this.tokenizer.decode(predicted_ids)\n            toReturn.push({ text: predicted_sentences })\n        }\n        return single ? toReturn[0] : toReturn;\n    }\n\n    /**\n     * @type {AutomaticSpeechRecognitionPipelineCallback}\n     * @private\n     */\n    async _call_whisper(audio, kwargs) {\n        const return_timestamps = kwargs.return_timestamps ?? false;\n        const chunk_length_s = kwargs.chunk_length_s ?? 0;\n        const force_full_sequences = kwargs.force_full_sequences ?? false;\n        let stride_length_s = kwargs.stride_length_s ?? null;\n\n        const generation_config = { ...kwargs }\n\n        if (return_timestamps === 'word') {\n            generation_config['return_token_timestamps'] = true;\n            generation_config['return_timestamps'] = false; // Do not predict timestamp tokens\n        }\n\n        const single = !Array.isArray(audio);\n        if (single) {\n            audio = [/** @type {AudioInput} */ (audio)];\n        }\n\n        const time_precision = this.processor.feature_extractor.config.chunk_length / this.model.config.max_source_positions;\n        const hop_length = this.processor.feature_extractor.config.hop_length;\n\n        const sampling_rate = this.processor.feature_extractor.config.sampling_rate;\n        const preparedAudios = await prepareAudios(audio, sampling_rate);\n\n        const toReturn = [];\n        for (const aud of preparedAudios) {\n            /** @type {{stride: number[], input_features: Tensor, is_last: boolean, tokens?: bigint[], token_timestamps?: number[]}[]} */\n            let chunks = [];\n            if (chunk_length_s > 0) {\n                if (stride_length_s === null) {\n                    stride_length_s = chunk_length_s / 6;\n                } else if (chunk_length_s <= stride_length_s) {\n                    throw Error(\"`chunk_length_s` must be larger than `stride_length_s`.\")\n                }\n\n                // TODO support different stride_length_s (for left and right)\n\n                const window = sampling_rate * chunk_length_s;\n                const stride = sampling_rate * stride_length_s;\n                const jump = window - 2 * stride;\n                let offset = 0;\n\n                // Create subarrays of audio with overlaps\n                while (true) {\n                    const offset_end = offset + window;\n                    const subarr = aud.subarray(offset, offset_end);\n                    const feature = await this.processor(subarr);\n\n                    const is_first = offset === 0;\n                    const is_last = offset_end >= aud.length;\n                    chunks.push({\n                        stride: [\n                            subarr.length,\n                            is_first ? 0 : stride,\n                            is_last ? 0 : stride\n                        ],\n                        input_features: feature.input_features,\n                        is_last,\n                    })\n                    if (is_last) break;\n                    offset += jump;\n                }\n\n            } else {\n                chunks = [{\n                    stride: [aud.length, 0, 0],\n                    input_features: (await this.processor(aud)).input_features,\n                    is_last: true\n                }]\n            }\n\n            // Generate for each set of input features\n            for (const chunk of chunks) {\n                generation_config.num_frames = Math.floor(chunk.stride[0] / hop_length);\n\n                // NOTE: doing sequentially for now\n                const data = await this.model.generate({\n                    inputs: chunk.input_features,\n                    ...generation_config\n                });\n\n                // TODO: Right now we only get top beam\n                if (return_timestamps === 'word') {\n                    chunk.tokens = data.sequences.tolist()[0];\n                    chunk.token_timestamps = data.token_timestamps.tolist()[0].map(\n                        (/** @type {number} */ x) => round(x, 2)\n                    );\n\n                } else {\n                    chunk.tokens = (/** @type {Tensor} */(data))[0].tolist();\n                }\n\n                // convert stride to seconds\n                chunk.stride = chunk.stride.map(x => x / sampling_rate);\n            }\n\n            // Merge text chunks\n            // @ts-ignore\n            const [full_text, optional] = this.tokenizer._decode_asr(chunks, {\n                time_precision, return_timestamps, force_full_sequences\n            });\n\n            toReturn.push({ text: full_text, ...optional })\n        }\n        return single ? toReturn[0] : toReturn;\n    }\n}\n\n/**\n * @typedef {Object} ImageToTextSingle\n * @property {string} generated_text The generated text.\n * @typedef {ImageToTextSingle[]} ImageToTextOutput\n * \n * @callback ImageToTextPipelineCallback Assign labels to the image(s) passed as inputs.\n * @param {ImagePipelineInputs} texts The images to be captioned.\n * @param {Partial<import('./generation/configuration_utils.js').GenerationConfig>} [options] Additional keyword arguments to pass along to the generate method of the model.\n * @returns {Promise<ImageToTextOutput|ImageToTextOutput[]>} An object (or array of objects) containing the generated text(s).\n * \n * @typedef {TextImagePipelineConstructorArgs & ImageToTextPipelineCallback & Disposable} ImageToTextPipelineType\n */\n\n/**\n * Image To Text pipeline using a `AutoModelForVision2Seq`. This pipeline predicts a caption for a given image.\n * \n * **Example:** Generate a caption for an image w/ `Xenova/vit-gpt2-image-captioning`.\n * ```javascript\n * const captioner = await pipeline('image-to-text', 'Xenova/vit-gpt2-image-captioning');\n * const url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/cats.jpg';\n * const output = await captioner(url);\n * // [{ generated_text: 'a cat laying on a couch with another cat' }]\n * ```\n * \n * **Example:** Optical Character Recognition (OCR) w/ `Xenova/trocr-small-handwritten`.\n * ```javascript\n * const captioner = await pipeline('image-to-text', 'Xenova/trocr-small-handwritten');\n * const url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/handwriting.jpg';\n * const output = await captioner(url);\n * // [{ generated_text: 'Mr. Brown commented icily.' }]\n * ```\n */\nexport class ImageToTextPipeline extends (/** @type {new (options: TextImagePipelineConstructorArgs) => ImageToTextPipelineType} */ (Pipeline)) {\n\n    /**\n     * Create a new ImageToTextPipeline.\n     * @param {TextImagePipelineConstructorArgs} options An object used to instantiate the pipeline.\n     */\n    constructor(options) {\n        super(options);\n    }\n\n    /** @type {ImageToTextPipelineCallback} */\n    async _call(images, generate_kwargs = {}) {\n\n        const isBatched = Array.isArray(images);\n        const preparedImages = await prepareImages(images);\n\n        const { pixel_values } = await this.processor(preparedImages);\n\n        const toReturn = [];\n        for (const batch of pixel_values) {\n            batch.dims = [1, ...batch.dims]\n            const output = await this.model.generate({ inputs: batch, ...generate_kwargs });\n            const decoded = this.tokenizer.batch_decode(/** @type {Tensor} */(output), {\n                skip_special_tokens: true,\n            }).map(x => ({ generated_text: x.trim() }))\n            toReturn.push(decoded);\n        }\n\n        return isBatched ? toReturn : toReturn[0];\n    }\n}\n\n/**\n * @typedef {Object} ImageClassificationSingle\n * @property {string} label The label identified by the model.\n * @property {number} score The score attributed by the model for that label.\n * @typedef {ImageClassificationSingle[]} ImageClassificationOutput\n * \n * @typedef {Object} ImageClassificationPipelineOptions Parameters specific to image classification pipelines.\n * @property {number} [top_k=1] The number of top labels that will be returned by the pipeline. \n * \n * @callback ImageClassificationPipelineCallback Assign labels to the image(s) passed as inputs.\n * @param {ImagePipelineInputs} images The input images(s) to be classified.\n * @param {ImageClassificationPipelineOptions} [options] The options to use for image classification.\n * @returns {Promise<ImageClassificationOutput|ImageClassificationOutput[]>} An array or object containing the predicted labels and scores.\n * \n * @typedef {ImagePipelineConstructorArgs & ImageClassificationPipelineCallback & Disposable} ImageClassificationPipelineType\n */\n\n/**\n * Image classification pipeline using any `AutoModelForImageClassification`.\n * This pipeline predicts the class of an image.\n * \n * **Example:** Classify an image.\n * ```javascript\n * const classifier = await pipeline('image-classification', 'Xenova/vit-base-patch16-224');\n * const url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/tiger.jpg';\n * const output = await classifier(url);\n * // [\n * //   { label: 'tiger, Panthera tigris', score: 0.632695734500885 },\n * // ]\n * ```\n * \n * **Example:** Classify an image and return top `n` classes.\n * ```javascript\n * const classifier = await pipeline('image-classification', 'Xenova/vit-base-patch16-224');\n * const url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/tiger.jpg';\n * const output = await classifier(url, { top_k: 3 });\n * // [\n * //   { label: 'tiger, Panthera tigris', score: 0.632695734500885 },\n * //   { label: 'tiger cat', score: 0.3634825646877289 },\n * //   { label: 'lion, king of beasts, Panthera leo', score: 0.00045060308184474707 },\n * // ]\n * ```\n * \n * **Example:** Classify an image and return all classes.\n * ```javascript\n * const classifier = await pipeline('image-classification', 'Xenova/vit-base-patch16-224');\n * const url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/tiger.jpg';\n * const output = await classifier(url, { top_k: 0 });\n * // [\n * //   { label: 'tiger, Panthera tigris', score: 0.632695734500885 },\n * //   { label: 'tiger cat', score: 0.3634825646877289 },\n * //   { label: 'lion, king of beasts, Panthera leo', score: 0.00045060308184474707 },\n * //   { label: 'jaguar, panther, Panthera onca, Felis onca', score: 0.00035465499968267977 },\n * //   ...\n * // ]\n * ```\n */\nexport class ImageClassificationPipeline extends (/** @type {new (options: ImagePipelineConstructorArgs) => ImageClassificationPipelineType} */ (Pipeline)) {\n\n    /**\n     * Create a new ImageClassificationPipeline.\n     * @param {ImagePipelineConstructorArgs} options An object used to instantiate the pipeline.\n     */\n    constructor(options) {\n        super(options);\n    }\n\n    /** @type {ImageClassificationPipelineCallback} */\n    async _call(images, {\n        top_k = 5\n    } = {}) {\n\n        const preparedImages = await prepareImages(images);\n\n        const { pixel_values } = await this.processor(preparedImages);\n        const output = await this.model({ pixel_values });\n\n        const id2label = this.model.config.id2label;\n\n        /** @type {ImageClassificationOutput[]} */\n        const toReturn = [];\n        for (const batch of output.logits) {\n            const scores = await topk(new Tensor(\n                'float32',\n                softmax(batch.data),\n                batch.dims,\n            ), top_k);\n\n            const values = scores[0].tolist();\n            const indices = scores[1].tolist();\n\n            const vals = indices.map((x, i) => ({\n                label: /** @type {string} */ (id2label ? id2label[x] : `LABEL_${x}`),\n                score: /** @type {number} */ (values[i]),\n            }));\n            toReturn.push(vals);\n        }\n\n        return Array.isArray(images) ? toReturn : toReturn[0];\n    }\n\n}\n\n/**\n * @typedef {Object} ImageSegmentationPipelineOutput\n * @property {string} label The label of the segment.\n * @property {number|null} score The score of the segment.\n * @property {RawImage} mask The mask of the segment.\n * \n * @typedef {Object} ImageSegmentationPipelineOptions Parameters specific to image segmentation pipelines.\n * @property {number} [threshold=0.5] Probability threshold to filter out predicted masks.\n * @property {number} [mask_threshold=0.5] Threshold to use when turning the predicted masks into binary values.\n * @property {number} [overlap_mask_area_threshold=0.8] Mask overlap threshold to eliminate small, disconnected segments.\n * @property {null|string} [subtask=null] Segmentation task to be performed. One of [`panoptic`, `instance`, and `semantic`],\n * depending on model capabilities. If not set, the pipeline will attempt to resolve (in that order).\n * @property {number[]} [label_ids_to_fuse=null] List of label ids to fuse. If not set, do not fuse any labels.\n * @property {number[][]} [target_sizes=null] List of target sizes for the input images. If not set, use the original image sizes.\n * \n * @callback ImageSegmentationPipelineCallback Segment the input images.\n * @param {ImagePipelineInputs} images The input images.\n * @param {ImageSegmentationPipelineOptions} [options] The options to use for image segmentation.\n * @returns {Promise<ImageSegmentationPipelineOutput[]>} The annotated segments.\n * \n * @typedef {ImagePipelineConstructorArgs & ImageSegmentationPipelineCallback & Disposable} ImageSegmentationPipelineType\n */\n\n/**\n * Image segmentation pipeline using any `AutoModelForXXXSegmentation`.\n * This pipeline predicts masks of objects and their classes.\n * \n * **Example:** Perform image segmentation with `Xenova/detr-resnet-50-panoptic`.\n * ```javascript\n * const segmenter = await pipeline('image-segmentation', 'Xenova/detr-resnet-50-panoptic');\n * const url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/cats.jpg';\n * const output = await segmenter(url);\n * // [\n * //   { label: 'remote', score: 0.9984649419784546, mask: RawImage { ... } },\n * //   { label: 'cat', score: 0.9994316101074219, mask: RawImage { ... } }\n * // ]\n * ```\n */\nexport class ImageSegmentationPipeline extends (/** @type {new (options: ImagePipelineConstructorArgs) => ImageSegmentationPipelineType} */ (Pipeline)) {\n    /**\n     * Create a new ImageSegmentationPipeline.\n     * @param {ImagePipelineConstructorArgs} options An object used to instantiate the pipeline.\n     */\n    constructor(options) {\n        super(options);\n\n        this.subtasks_mapping = {\n            // Mapping of subtasks to their corresponding post-processing function names.\n            panoptic: 'post_process_panoptic_segmentation',\n            instance: 'post_process_instance_segmentation',\n            semantic: 'post_process_semantic_segmentation'\n        }\n    }\n\n    /** @type {ImageSegmentationPipelineCallback} */\n    async _call(images, {\n        threshold = 0.5,\n        mask_threshold = 0.5,\n        overlap_mask_area_threshold = 0.8,\n        label_ids_to_fuse = null,\n        target_sizes = null,\n        subtask = null,\n    } = {}) {\n        const isBatched = Array.isArray(images);\n\n        if (isBatched && images.length !== 1) {\n            throw Error(\"Image segmentation pipeline currently only supports a batch size of 1.\");\n        }\n\n        const preparedImages = await prepareImages(images);\n        const imageSizes = preparedImages.map(x => [x.height, x.width]);\n\n        const { pixel_values, pixel_mask } = await this.processor(preparedImages);\n        const output = await this.model({ pixel_values, pixel_mask });\n\n        let fn = null;\n        if (subtask !== null) {\n            fn = this.subtasks_mapping[subtask];\n        } else {\n            for (let [task, func] of Object.entries(this.subtasks_mapping)) {\n                if (func in this.processor.feature_extractor) {\n                    fn = this.processor.feature_extractor[func].bind(this.processor.feature_extractor);\n                    subtask = task;\n                    break;\n                }\n            }\n        }\n\n        const id2label = this.model.config.id2label;\n\n        /** @type {ImageSegmentationPipelineOutput[]} */\n        const annotation = [];\n        if (subtask === 'panoptic' || subtask === 'instance') {\n            const processed = fn(\n                output,\n                threshold,\n                mask_threshold,\n                overlap_mask_area_threshold,\n                label_ids_to_fuse,\n                target_sizes ?? imageSizes, // TODO FIX?\n            )[0];\n\n            const segmentation = processed.segmentation;\n\n            for (const segment of processed.segments_info) {\n                const maskData = new Uint8ClampedArray(segmentation.data.length);\n                for (let i = 0; i < segmentation.data.length; ++i) {\n                    if (segmentation.data[i] === segment.id) {\n                        maskData[i] = 255;\n                    }\n                }\n\n                const mask = new RawImage(maskData, segmentation.dims[1], segmentation.dims[0], 1)\n\n                annotation.push({\n                    score: segment.score,\n                    label: id2label[segment.label_id],\n                    mask: mask\n                })\n            }\n\n        } else if (subtask === 'semantic') {\n            const { segmentation, labels } = fn(output, target_sizes ?? imageSizes)[0];\n\n            for (const label of labels) {\n                const maskData = new Uint8ClampedArray(segmentation.data.length);\n                for (let i = 0; i < segmentation.data.length; ++i) {\n                    if (segmentation.data[i] === label) {\n                        maskData[i] = 255;\n                    }\n                }\n\n                const mask = new RawImage(maskData, segmentation.dims[1], segmentation.dims[0], 1);\n\n                annotation.push({\n                    score: null,\n                    label: id2label[label],\n                    mask: mask\n                });\n            }\n        } else {\n            throw Error(`Subtask ${subtask} not supported.`);\n        }\n\n        return annotation;\n    }\n}\n\n/**\n * @typedef {Object} ZeroShotImageClassificationOutput\n * @property {string} label The label identified by the model. It is one of the suggested `candidate_label`.\n * @property {number} score The score attributed by the model for that label (between 0 and 1).\n * \n * @typedef {Object} ZeroShotImageClassificationPipelineOptions Parameters specific to zero-shot image classification pipelines.\n * @property {string} [hypothesis_template=\"This is a photo of {}\"] The sentence used in conjunction with `candidate_labels`\n * to attempt the image classification by replacing the placeholder with the candidate_labels.\n * Then likelihood is estimated by using `logits_per_image`.\n * \n * @callback ZeroShotImageClassificationPipelineCallback Assign labels to the image(s) passed as inputs.\n * @param {ImagePipelineInputs} images The input images.\n * @param {string[]} candidate_labels The candidate labels for this image.\n * @param {ZeroShotImageClassificationPipelineOptions} [options] The options to use for zero-shot image classification.\n * @returns {Promise<ZeroShotImageClassificationOutput[]|ZeroShotImageClassificationOutput[][]>} An array of objects containing the predicted labels and scores.\n * \n * @typedef {TextImagePipelineConstructorArgs & ZeroShotImageClassificationPipelineCallback & Disposable} ZeroShotImageClassificationPipelineType\n */\n\n/**\n * Zero shot image classification pipeline. This pipeline predicts the class of\n * an image when you provide an image and a set of `candidate_labels`.\n * \n * **Example:** Zero shot image classification w/ `Xenova/clip-vit-base-patch32`.\n * ```javascript\n * const classifier = await pipeline('zero-shot-image-classification', 'Xenova/clip-vit-base-patch32');\n * const url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/tiger.jpg';\n * const output = await classifier(url, ['tiger', 'horse', 'dog']);\n * // [\n * //   { score: 0.9993917942047119, label: 'tiger' },\n * //   { score: 0.0003519294841680676, label: 'horse' },\n * //   { score: 0.0002562698791734874, label: 'dog' }\n * // ]\n * ```\n */\nexport class ZeroShotImageClassificationPipeline extends (/** @type {new (options: TextImagePipelineConstructorArgs) => ZeroShotImageClassificationPipelineType} */ (Pipeline)) {\n    /**\n     * Create a new ZeroShotImageClassificationPipeline.\n     * @param {TextImagePipelineConstructorArgs} options An object used to instantiate the pipeline.\n     */\n    constructor(options) {\n        super(options);\n    }\n\n    /** @type {ZeroShotImageClassificationPipelineCallback} */\n    async _call(images, candidate_labels, {\n        hypothesis_template = \"This is a photo of {}\"\n    } = {}) {\n\n        const isBatched = Array.isArray(images);\n        const preparedImages = await prepareImages(images);\n\n        // Insert label into hypothesis template \n        const texts = candidate_labels.map(\n            x => hypothesis_template.replace('{}', x)\n        );\n\n        // Run tokenization\n        const text_inputs = this.tokenizer(texts, {\n            padding: this.model.config.model_type === 'siglip' ? 'max_length' : true,\n            truncation: true,\n        });\n\n        // Run processor\n        const { pixel_values } = await this.processor(preparedImages);\n\n        // Run model with both text and pixel inputs\n        const output = await this.model({ ...text_inputs, pixel_values });\n\n        const function_to_apply =\n            this.model.config.model_type === 'siglip'\n                ? batch => batch.sigmoid().data\n                : batch => softmax(batch.data);\n\n        // Compare each image with each candidate label\n        const toReturn = [];\n        for (const batch of output.logits_per_image) {\n            // Compute softmax per image\n            const probs = function_to_apply(batch);\n\n            const result = [...probs].map((x, i) => ({\n                score: x,\n                label: candidate_labels[i]\n            }));\n            result.sort((a, b) => b.score - a.score); // sort by score in descending order\n            toReturn.push(result);\n        }\n\n        return isBatched ? toReturn : toReturn[0];\n    }\n}\n\n\n/**\n * @typedef {Object} ObjectDetectionPipelineSingle\n * @property {string} label The class label identified by the model.\n * @property {number} score The score attributed by the model for that label.\n * @property {BoundingBox} box The bounding box of detected object in image's original size, or as a percentage if `percentage` is set to true.\n * @typedef {ObjectDetectionPipelineSingle[]} ObjectDetectionPipelineOutput\n * \n * @typedef {Object} ObjectDetectionPipelineOptions Parameters specific to object detection pipelines.\n * @property {number} [threshold=0.9] The threshold used to filter boxes by score.\n * @property {boolean} [percentage=false] Whether to return the boxes coordinates in percentage (true) or in pixels (false).\n * \n * @callback ObjectDetectionPipelineCallback Detect objects (bounding boxes & classes) in the image(s) passed as inputs.\n * @param {ImagePipelineInputs} images The input images.\n * @param {ObjectDetectionPipelineOptions} [options] The options to use for object detection.\n * @returns {Promise<ObjectDetectionPipelineOutput|ObjectDetectionPipelineOutput[]>} A list of objects or a list of list of objects. \n * \n * @typedef {ImagePipelineConstructorArgs & ObjectDetectionPipelineCallback & Disposable} ObjectDetectionPipelineType\n */\n\n/**\n * Object detection pipeline using any `AutoModelForObjectDetection`.\n * This pipeline predicts bounding boxes of objects and their classes.\n * \n * **Example:** Run object-detection with `Xenova/detr-resnet-50`.\n * ```javascript\n * const detector = await pipeline('object-detection', 'Xenova/detr-resnet-50');\n * const img = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/cats.jpg';\n * const output = await detector(img, { threshold: 0.9 });\n * // [{\n * //   score: 0.9976370930671692,\n * //   label: \"remote\",\n * //   box: { xmin: 31, ymin: 68, xmax: 190, ymax: 118 }\n * // },\n * // ...\n * // {\n * //   score: 0.9984092116355896,\n * //   label: \"cat\",\n * //   box: { xmin: 331, ymin: 19, xmax: 649, ymax: 371 }\n * // }]\n * ```\n */\nexport class ObjectDetectionPipeline extends (/** @type {new (options: ImagePipelineConstructorArgs) => ObjectDetectionPipelineType} */ (Pipeline)) {\n\n    /**\n     * Create a new ObjectDetectionPipeline.\n     * @param {ImagePipelineConstructorArgs} options An object used to instantiate the pipeline.\n     */\n    constructor(options) {\n        super(options);\n    }\n\n    /** @type {ObjectDetectionPipelineCallback} */\n    async _call(images, {\n        threshold = 0.9,\n        percentage = false,\n    } = {}) {\n\n        const isBatched = Array.isArray(images);\n\n        if (isBatched && images.length !== 1) {\n            throw Error(\"Object detection pipeline currently only supports a batch size of 1.\");\n        }\n        const preparedImages = await prepareImages(images);\n\n        const imageSizes = percentage ? null : preparedImages.map(x => [x.height, x.width]);\n\n        const { pixel_values, pixel_mask } = await this.processor(preparedImages);\n        const output = await this.model({ pixel_values, pixel_mask });\n\n        // @ts-ignore\n        const processed = this.processor.feature_extractor.post_process_object_detection(output, threshold, imageSizes);\n\n        // Add labels\n        const id2label = this.model.config.id2label;\n\n        // Format output\n        /** @type {ObjectDetectionPipelineOutput[]} */\n        const result = processed.map(batch => (\n            batch.boxes.map((box, i) => ({\n                score: batch.scores[i],\n                label: id2label[batch.classes[i]],\n                box: get_bounding_box(box, !percentage),\n            }))\n        ))\n\n        return isBatched ? result : result[0];\n    }\n}\n\n\n/**\n * @typedef {Object} ZeroShotObjectDetectionOutput\n * @property {string} label Text query corresponding to the found object.\n * @property {number} score Score corresponding to the object (between 0 and 1).\n * @property {BoundingBox} box Bounding box of the detected object in image's original size, or as a percentage if `percentage` is set to true.\n * \n * @typedef {Object} ZeroShotObjectDetectionPipelineOptions Parameters specific to zero-shot object detection pipelines.\n * @property {number} [threshold=0.1] The probability necessary to make a prediction.\n * @property {number} [top_k=null] The number of top predictions that will be returned by the pipeline.\n * If the provided number is `null` or higher than the number of predictions available, it will default\n * to the number of predictions.\n * @property {boolean} [percentage=false] Whether to return the boxes coordinates in percentage (true) or in pixels (false).\n * \n * @callback ZeroShotObjectDetectionPipelineCallback Detect objects (bounding boxes & classes) in the image(s) passed as inputs.\n * @param {ImagePipelineInputs} images The input images.\n * @param {string[]} candidate_labels What the model should recognize in the image.\n * @param {ZeroShotObjectDetectionPipelineOptions} [options] The options to use for zero-shot object detection.\n * @returns {Promise<ZeroShotObjectDetectionOutput[]|ZeroShotObjectDetectionOutput[][]>} An array of objects containing the predicted labels, scores, and bounding boxes.\n * \n * @typedef {TextImagePipelineConstructorArgs & ZeroShotObjectDetectionPipelineCallback & Disposable} ZeroShotObjectDetectionPipelineType\n */\n\n/**\n * Zero-shot object detection pipeline. This pipeline predicts bounding boxes of\n * objects when you provide an image and a set of `candidate_labels`.\n * \n * **Example:** Zero-shot object detection w/ `Xenova/owlvit-base-patch32`.\n * ```javascript\n * const detector = await pipeline('zero-shot-object-detection', 'Xenova/owlvit-base-patch32');\n * const url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/astronaut.png';\n * const candidate_labels = ['human face', 'rocket', 'helmet', 'american flag'];\n * const output = await detector(url, candidate_labels);\n * // [\n * //   {\n * //     score: 0.24392342567443848,\n * //     label: 'human face',\n * //     box: { xmin: 180, ymin: 67, xmax: 274, ymax: 175 }\n * //   },\n * //   {\n * //     score: 0.15129457414150238,\n * //     label: 'american flag',\n * //     box: { xmin: 0, ymin: 4, xmax: 106, ymax: 513 }\n * //   },\n * //   {\n * //     score: 0.13649864494800568,\n * //     label: 'helmet',\n * //     box: { xmin: 277, ymin: 337, xmax: 511, ymax: 511 }\n * //   },\n * //   {\n * //     score: 0.10262022167444229,\n * //     label: 'rocket',\n * //     box: { xmin: 352, ymin: -1, xmax: 463, ymax: 287 }\n * //   }\n * // ]\n * ```\n * \n * **Example:** Zero-shot object detection w/ `Xenova/owlvit-base-patch32` (returning top 4 matches and setting a threshold).\n * ```javascript\n * const detector = await pipeline('zero-shot-object-detection', 'Xenova/owlvit-base-patch32');\n * const url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/beach.png';\n * const candidate_labels = ['hat', 'book', 'sunglasses', 'camera'];\n * const output = await detector(url, candidate_labels, { top_k: 4, threshold: 0.05 });\n * // [\n * //   {\n * //     score: 0.1606510728597641,\n * //     label: 'sunglasses',\n * //     box: { xmin: 347, ymin: 229, xmax: 429, ymax: 264 }\n * //   },\n * //   {\n * //     score: 0.08935828506946564,\n * //     label: 'hat',\n * //     box: { xmin: 38, ymin: 174, xmax: 258, ymax: 364 }\n * //   },\n * //   {\n * //     score: 0.08530698716640472,\n * //     label: 'camera',\n * //     box: { xmin: 187, ymin: 350, xmax: 260, ymax: 411 }\n * //   },\n * //   {\n * //     score: 0.08349756896495819,\n * //     label: 'book',\n * //     box: { xmin: 261, ymin: 280, xmax: 494, ymax: 425 }\n * //   }\n * // ]\n * ```\n */\nexport class ZeroShotObjectDetectionPipeline extends (/** @type {new (options: TextImagePipelineConstructorArgs) => ZeroShotObjectDetectionPipelineType} */ (Pipeline)) {\n\n    /**\n     * Create a new ZeroShotObjectDetectionPipeline.\n     * @param {TextImagePipelineConstructorArgs} options An object used to instantiate the pipeline.\n     */\n    constructor(options) {\n        super(options);\n    }\n\n    /** @type {ZeroShotObjectDetectionPipelineCallback} */\n    async _call(images, candidate_labels, {\n        threshold = 0.1,\n        top_k = null,\n        percentage = false,\n    } = {}) {\n\n        const isBatched = Array.isArray(images);\n        const preparedImages = await prepareImages(images);\n\n        // Run tokenization\n        const text_inputs = this.tokenizer(candidate_labels, {\n            padding: true,\n            truncation: true,\n        });\n\n        // Run processor\n        const model_inputs = await this.processor(preparedImages);\n\n        // Since non-maximum suppression is performed for exporting, we need to\n        // process each image separately. For more information, see:\n        // https://github.com/huggingface/optimum/blob/e3b7efb1257c011db907ef40ab340e795cc5684c/optimum/exporters/onnx/model_configs.py#L1028-L1032\n        const toReturn = [];\n        for (let i = 0; i < preparedImages.length; ++i) {\n            const image = preparedImages[i];\n            const imageSize = percentage ? null : [[image.height, image.width]];\n            const pixel_values = model_inputs.pixel_values[i].unsqueeze_(0);\n\n            // Run model with both text and pixel inputs\n            const output = await this.model({ ...text_inputs, pixel_values });\n\n            // @ts-ignore\n            const processed = this.processor.feature_extractor.post_process_object_detection(output, threshold, imageSize, true)[0];\n            let result = processed.boxes.map((box, i) => ({\n                score: processed.scores[i],\n                label: candidate_labels[processed.classes[i]],\n                box: get_bounding_box(box, !percentage),\n            })).sort((a, b) => b.score - a.score);\n            if (top_k !== null) {\n                result = result.slice(0, top_k);\n            }\n            toReturn.push(result)\n        }\n\n        return isBatched ? toReturn : toReturn[0];\n    }\n}\n\n/**\n * @typedef {Object} DocumentQuestionAnsweringSingle\n * @property {string} answer The generated text.\n * @typedef {DocumentQuestionAnsweringSingle[]} DocumentQuestionAnsweringOutput\n * \n * @callback DocumentQuestionAnsweringPipelineCallback Answer the question given as input by using the document.\n * @param {ImageInput} image The image of the document to use.\n * @param {string} question A question to ask of the document.\n * @param {Partial<import('./generation/configuration_utils.js').GenerationConfig>} [options] Additional keyword arguments to pass along to the generate method of the model.\n * @returns {Promise<DocumentQuestionAnsweringOutput|DocumentQuestionAnsweringOutput[]>} An object (or array of objects) containing the answer(s).\n * \n * @typedef {TextImagePipelineConstructorArgs & DocumentQuestionAnsweringPipelineCallback & Disposable} DocumentQuestionAnsweringPipelineType\n */\n\n/**\n * Document Question Answering pipeline using any `AutoModelForDocumentQuestionAnswering`.\n * The inputs/outputs are similar to the (extractive) question answering pipeline; however,\n * the pipeline takes an image (and optional OCR'd words/boxes) as input instead of text context.\n * \n * **Example:** Answer questions about a document with `Xenova/donut-base-finetuned-docvqa`.\n * ```javascript\n * const qa_pipeline = await pipeline('document-question-answering', 'Xenova/donut-base-finetuned-docvqa');\n * const image = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/invoice.png';\n * const question = 'What is the invoice number?';\n * const output = await qa_pipeline(image, question);\n * // [{ answer: 'us-001' }]\n * ```\n */\nexport class DocumentQuestionAnsweringPipeline extends (/** @type {new (options: TextImagePipelineConstructorArgs) => DocumentQuestionAnsweringPipelineType} */ (Pipeline)) {\n\n    /**\n     * Create a new DocumentQuestionAnsweringPipeline.\n     * @param {TextImagePipelineConstructorArgs} options An object used to instantiate the pipeline.\n     */\n    constructor(options) {\n        super(options);\n    }\n\n    /** @type {DocumentQuestionAnsweringPipelineCallback} */\n    async _call(image, question, generate_kwargs = {}) {\n        throw new Error('This pipeline is not yet supported in Transformers.js v3.'); // TODO: Remove when implemented\n\n        // NOTE: For now, we only support a batch size of 1\n\n        // Preprocess image\n        const preparedImage = (await prepareImages(image))[0];\n        const { pixel_values } = await this.processor(preparedImage);\n\n        // Run tokenization\n        const task_prompt = `<s_docvqa><s_question>${question}</s_question><s_answer>`;\n        const decoder_input_ids = this.tokenizer(task_prompt, {\n            add_special_tokens: false,\n            padding: true,\n            truncation: true,\n        }).input_ids;\n\n        // Run model\n        const output = await this.model.generate({\n            inputs: pixel_values,\n            max_length: this.model.config.decoder.max_position_embeddings,\n            decoder_input_ids,\n            ...generate_kwargs,\n        });\n\n        // Decode output\n        const decoded = this.tokenizer.batch_decode(/** @type {Tensor} */(output))[0];\n\n        // Parse answer\n        const match = decoded.match(/<s_answer>(.*?)<\\/s_answer>/);\n        let answer = null;\n        if (match && match.length >= 2) {\n            answer = match[1].trim();\n        }\n        return [{ answer }];\n    }\n}\n\n\n/**\n * @typedef {Object} VocoderOptions\n * @property {PreTrainedModel} [vocoder] The vocoder used by the pipeline (if the model uses one). If not provided, use the default HifiGan vocoder.\n * @typedef {TextAudioPipelineConstructorArgs & VocoderOptions} TextToAudioPipelineConstructorArgs\n */\n\n/**\n * @typedef {Object} TextToAudioOutput\n * @property {Float32Array} audio The generated audio waveform.\n * @property {number} sampling_rate The sampling rate of the generated audio waveform.\n * \n * @typedef {Object} TextToAudioPipelineOptions Parameters specific to text-to-audio pipelines.\n * @property {Tensor|Float32Array|string|URL} [speaker_embeddings=null] The speaker embeddings (if the model requires it).\n * \n * @callback TextToAudioPipelineCallback Generates speech/audio from the inputs.\n * @param {string|string[]} texts The text(s) to generate.\n * @param {TextToAudioPipelineOptions} options Parameters passed to the model generation/forward method.\n * @returns {Promise<TextToAudioOutput>} An object containing the generated audio and sampling rate.\n * \n * @typedef {TextToAudioPipelineConstructorArgs & TextToAudioPipelineCallback & Disposable} TextToAudioPipelineType\n */\n\n/**\n * Text-to-audio generation pipeline using any `AutoModelForTextToWaveform` or `AutoModelForTextToSpectrogram`.\n * This pipeline generates an audio file from an input text and optional other conditional inputs.\n * \n * **Example:** Generate audio from text with `Xenova/speecht5_tts`.\n * ```javascript\n * const synthesizer = await pipeline('text-to-speech', 'Xenova/speecht5_tts', { quantized: false });\n * const speaker_embeddings = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/speaker_embeddings.bin';\n * const out = await synthesizer('Hello, my dog is cute', { speaker_embeddings });\n * // {\n * //   audio: Float32Array(26112) [-0.00005657337896991521, 0.00020583874720614403, ...],\n * //   sampling_rate: 16000\n * // }\n * ```\n * \n * You can then save the audio to a .wav file with the `wavefile` package:\n * ```javascript\n * import wavefile from 'wavefile';\n * import fs from 'fs';\n * \n * const wav = new wavefile.WaveFile();\n * wav.fromScratch(1, out.sampling_rate, '32f', out.audio);\n * fs.writeFileSync('out.wav', wav.toBuffer());\n * ```\n * \n * **Example:** Multilingual speech generation with `Xenova/mms-tts-fra`. See [here](https://huggingface.co/models?pipeline_tag=text-to-speech&other=vits&sort=trending) for the full list of available languages (1107).\n * ```javascript\n * const synthesizer = await pipeline('text-to-speech', 'Xenova/mms-tts-fra');\n * const out = await synthesizer('Bonjour');\n * // {\n * //   audio: Float32Array(23808) [-0.00037693005288019776, 0.0003325853613205254, ...],\n * //   sampling_rate: 16000\n * // }\n * ```\n */\nexport class TextToAudioPipeline extends (/** @type {new (options: TextToAudioPipelineConstructorArgs) => TextToAudioPipelineType} */ (Pipeline)) {\n    DEFAULT_VOCODER_ID = \"Xenova/speecht5_hifigan\"\n\n    /**\n     * Create a new TextToAudioPipeline.\n     * @param {TextToAudioPipelineConstructorArgs} options An object used to instantiate the pipeline.\n     */\n    constructor(options) {\n        super(options);\n\n        // TODO: Find a better way for `pipeline` to set the default vocoder\n        this.vocoder = options.vocoder ?? null;\n    }\n\n\n    /** @type {TextToAudioPipelineCallback} */\n    async _call(text_inputs, {\n        speaker_embeddings = null,\n    } = {}) {\n\n        // If this.processor is not set, we are using a `AutoModelForTextToWaveform` model\n        if (this.processor) {\n            return this._call_text_to_spectrogram(text_inputs, { speaker_embeddings });\n        } else {\n            return this._call_text_to_waveform(text_inputs);\n        }\n    }\n\n    async _call_text_to_waveform(text_inputs) {\n\n        // Run tokenization\n        const inputs = this.tokenizer(text_inputs, {\n            padding: true,\n            truncation: true,\n        });\n\n        // Generate waveform\n        const { waveform } = await this.model(inputs);\n\n        const sampling_rate = this.model.config.sampling_rate;\n        return {\n            audio: waveform.data,\n            sampling_rate,\n        }\n    }\n\n    async _call_text_to_spectrogram(text_inputs, { speaker_embeddings }) {\n\n        // Load vocoder, if not provided\n        if (!this.vocoder) {\n            console.log('No vocoder specified, using default HifiGan vocoder.');\n            this.vocoder = await AutoModel.from_pretrained(this.DEFAULT_VOCODER_ID, { dtype: 'fp32' });\n        }\n\n        // Load speaker embeddings as Float32Array from path/URL\n        if (typeof speaker_embeddings === 'string' || speaker_embeddings instanceof URL) {\n            // Load from URL with fetch\n            speaker_embeddings = new Float32Array(\n                await (await fetch(speaker_embeddings)).arrayBuffer()\n            );\n        }\n\n        if (speaker_embeddings instanceof Float32Array) {\n            speaker_embeddings = new Tensor(\n                'float32',\n                speaker_embeddings,\n                [1, speaker_embeddings.length]\n            )\n        } else if (!(speaker_embeddings instanceof Tensor)) {\n            throw new Error(\"Speaker embeddings must be a `Tensor`, `Float32Array`, `string`, or `URL`.\")\n        }\n\n        // Run tokenization\n        const { input_ids } = this.tokenizer(text_inputs, {\n            padding: true,\n            truncation: true,\n        });\n\n        // NOTE: At this point, we are guaranteed that `speaker_embeddings` is a `Tensor`\n        // @ts-ignore\n        const { waveform } = await this.model.generate_speech(input_ids, speaker_embeddings, { vocoder: this.vocoder });\n\n        const sampling_rate = this.processor.feature_extractor.config.sampling_rate;\n        return {\n            audio: waveform.data,\n            sampling_rate,\n        }\n    }\n}\n\n/**\n * @callback ImageToImagePipelineCallback Transform the image(s) passed as inputs.\n * @param {ImagePipelineInputs} images The images to transform.\n * @returns {Promise<RawImage|RawImage[]>} The transformed image or list of images.\n * \n * @typedef {ImagePipelineConstructorArgs & ImageToImagePipelineCallback & Disposable} ImageToImagePipelineType\n */\n\n/**\n * Image to Image pipeline using any `AutoModelForImageToImage`. This pipeline generates an image based on a previous image input.\n * \n * **Example:** Super-resolution w/ `Xenova/swin2SR-classical-sr-x2-64`\n * ```javascript\n * const upscaler = await pipeline('image-to-image', 'Xenova/swin2SR-classical-sr-x2-64');\n * const url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/butterfly.jpg';\n * const output = await upscaler(url);\n * // RawImage {\n * //   data: Uint8Array(786432) [ 41, 31, 24,  43, ... ],\n * //   width: 512,\n * //   height: 512,\n * //   channels: 3\n * // }\n * ```\n */\nexport class ImageToImagePipeline extends (/** @type {new (options: ImagePipelineConstructorArgs) => ImageToImagePipelineType} */ (Pipeline)) {\n    /**\n     * Create a new ImageToImagePipeline.\n     * @param {ImagePipelineConstructorArgs} options An object used to instantiate the pipeline.\n     */\n    constructor(options) {\n        super(options);\n    }\n\n    /** @type {ImageToImagePipelineCallback} */\n    async _call(images) {\n\n        const preparedImages = await prepareImages(images);\n        const inputs = await this.processor(preparedImages);\n        const outputs = await this.model(inputs);\n\n        /** @type {RawImage[]} */\n        const toReturn = [];\n        for (const batch of outputs.reconstruction) {\n            const output = batch.squeeze().clamp_(0, 1).mul_(255).round_().to('uint8');\n            toReturn.push(RawImage.fromTensor(output));\n        }\n\n        return toReturn.length > 1 ? toReturn : toReturn[0];\n    }\n}\n\n/**\n * @typedef {Object} DepthEstimationPipelineOutput\n * @property {Tensor} predicted_depth The raw depth map predicted by the model.\n * @property {RawImage} depth The processed depth map as an image (with the same size as the input image).\n * \n * @callback DepthEstimationPipelineCallback Predicts the depth for the image(s) passed as inputs.\n * @param {ImagePipelineInputs} images The images to compute depth for.\n * @returns {Promise<DepthEstimationPipelineOutput|DepthEstimationPipelineOutput[]>} An image or a list of images containing result(s).\n * \n * @typedef {ImagePipelineConstructorArgs & DepthEstimationPipelineCallback & Disposable} DepthEstimationPipelineType\n */\n\n/**\n * Depth estimation pipeline using any `AutoModelForDepthEstimation`. This pipeline predicts the depth of an image.\n * \n * **Example:** Depth estimation w/ `Xenova/dpt-hybrid-midas`\n * ```javascript\n * const depth_estimator = await pipeline('depth-estimation', 'Xenova/dpt-hybrid-midas');\n * const url = 'https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/cats.jpg';\n * const out = await depth_estimator(url);\n * // {\n * //   predicted_depth: Tensor {\n * //     dims: [ 384, 384 ],\n * //     type: 'float32',\n * //     data: Float32Array(147456) [ 542.859130859375, 545.2833862304688, 546.1649169921875, ... ],\n * //     size: 147456\n * //   },\n * //   depth: RawImage {\n * //     data: Uint8Array(307200) [ 86, 86, 86, ... ],\n * //     width: 640,\n * //     height: 480,\n * //     channels: 1\n * //   }\n * // }\n * ```\n */\nexport class DepthEstimationPipeline extends (/** @type {new (options: ImagePipelineConstructorArgs) => DepthEstimationPipelineType} */ (Pipeline)) {\n    /**\n     * Create a new DepthEstimationPipeline.\n     * @param {ImagePipelineConstructorArgs} options An object used to instantiate the pipeline.\n     */\n    constructor(options) {\n        super(options);\n    }\n\n    /** @type {DepthEstimationPipelineCallback} */\n    async _call(images) {\n\n        const preparedImages = await prepareImages(images);\n\n        const inputs = await this.processor(preparedImages);\n        const { predicted_depth } = await this.model(inputs);\n\n        const toReturn = [];\n        for (let i = 0; i < preparedImages.length; ++i) {\n            const prediction = interpolate(predicted_depth[i], preparedImages[i].size.reverse(), 'bilinear', false);\n            const formatted = prediction.mul_(255 / max(prediction.data)[0]).to('uint8');\n            toReturn.push({\n                predicted_depth: predicted_depth[i],\n                depth: RawImage.fromTensor(formatted),\n            });\n        }\n\n        return toReturn.length > 1 ? toReturn : toReturn[0];\n    }\n}\n\nconst SUPPORTED_TASKS = Object.freeze({\n    \"text-classification\": {\n        \"tokenizer\": AutoTokenizer,\n        \"pipeline\": TextClassificationPipeline,\n        \"model\": AutoModelForSequenceClassification,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"distilbert-base-uncased-finetuned-sst-2-english\",\n            \"model\": \"Xenova/distilbert-base-uncased-finetuned-sst-2-english\",\n        },\n        \"type\": \"text\",\n    },\n    \"token-classification\": {\n        \"tokenizer\": AutoTokenizer,\n        \"pipeline\": TokenClassificationPipeline,\n        \"model\": AutoModelForTokenClassification,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"Davlan/bert-base-multilingual-cased-ner-hrl\",\n            \"model\": \"Xenova/bert-base-multilingual-cased-ner-hrl\",\n        },\n        \"type\": \"text\",\n    },\n    \"question-answering\": {\n        \"tokenizer\": AutoTokenizer,\n        \"pipeline\": QuestionAnsweringPipeline,\n        \"model\": AutoModelForQuestionAnswering,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"distilbert-base-cased-distilled-squad\",\n            \"model\": \"Xenova/distilbert-base-cased-distilled-squad\",\n        },\n        \"type\": \"text\",\n    },\n\n    \"fill-mask\": {\n        \"tokenizer\": AutoTokenizer,\n        \"pipeline\": FillMaskPipeline,\n        \"model\": AutoModelForMaskedLM,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"bert-base-uncased\",\n            \"model\": \"Xenova/bert-base-uncased\",\n        },\n        \"type\": \"text\",\n    },\n    \"summarization\": {\n        \"tokenizer\": AutoTokenizer,\n        \"pipeline\": SummarizationPipeline,\n        \"model\": AutoModelForSeq2SeqLM,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"sshleifer/distilbart-cnn-6-6\",\n            \"model\": \"Xenova/distilbart-cnn-6-6\",\n        },\n        \"type\": \"text\",\n    },\n    \"translation\": {\n        \"tokenizer\": AutoTokenizer,\n        \"pipeline\": TranslationPipeline,\n        \"model\": AutoModelForSeq2SeqLM,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"t5-small\",\n            \"model\": \"Xenova/t5-small\",\n        },\n        \"type\": \"text\",\n    },\n    \"text2text-generation\": {\n        \"tokenizer\": AutoTokenizer,\n        \"pipeline\": Text2TextGenerationPipeline,\n        \"model\": AutoModelForSeq2SeqLM,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"google/flan-t5-small\",\n            \"model\": \"Xenova/flan-t5-small\",\n        },\n        \"type\": \"text\",\n    },\n    \"text-generation\": {\n        \"tokenizer\": AutoTokenizer,\n        \"pipeline\": TextGenerationPipeline,\n        \"model\": AutoModelForCausalLM,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"gpt2\",\n            \"model\": \"Xenova/gpt2\",\n        },\n        \"type\": \"text\",\n    },\n    \"zero-shot-classification\": {\n        \"tokenizer\": AutoTokenizer,\n        \"pipeline\": ZeroShotClassificationPipeline,\n        \"model\": AutoModelForSequenceClassification,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"typeform/distilbert-base-uncased-mnli\",\n            \"model\": \"Xenova/distilbert-base-uncased-mnli\",\n        },\n        \"type\": \"text\",\n    },\n    \"audio-classification\": {\n        \"pipeline\": AudioClassificationPipeline,\n        \"model\": AutoModelForAudioClassification,\n        \"processor\": AutoProcessor,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"superb/wav2vec2-base-superb-ks\",\n            \"model\": \"Xenova/wav2vec2-base-superb-ks\",\n        },\n        \"type\": \"audio\",\n    },\n    \"zero-shot-audio-classification\": {\n        \"tokenizer\": AutoTokenizer,\n        \"pipeline\": ZeroShotAudioClassificationPipeline,\n        \"model\": AutoModel,\n        \"processor\": AutoProcessor,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"laion/clap-htsat-fused\",\n            \"model\": \"Xenova/clap-htsat-unfused\",\n        },\n        \"type\": \"multimodal\",\n    },\n    \"automatic-speech-recognition\": {\n        \"tokenizer\": AutoTokenizer,\n        \"pipeline\": AutomaticSpeechRecognitionPipeline,\n        \"model\": [AutoModelForSpeechSeq2Seq, AutoModelForCTC],\n        \"processor\": AutoProcessor,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"openai/whisper-tiny.en\",\n            \"model\": \"Xenova/whisper-tiny.en\",\n        },\n        \"type\": \"multimodal\",\n    },\n    \"text-to-audio\": {\n        \"tokenizer\": AutoTokenizer,\n        \"pipeline\": TextToAudioPipeline,\n        \"model\": [AutoModelForTextToWaveform, AutoModelForTextToSpectrogram],\n        \"processor\": [AutoProcessor, /* Some don't use a processor */ null],\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"microsoft/speecht5_tts\",\n            \"model\": \"Xenova/speecht5_tts\",\n        },\n        \"type\": \"text\",\n    },\n    \"image-to-text\": {\n        \"tokenizer\": AutoTokenizer,\n        \"pipeline\": ImageToTextPipeline,\n        \"model\": AutoModelForVision2Seq,\n        \"processor\": AutoProcessor,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"nlpconnect/vit-gpt2-image-captioning\",\n            \"model\": \"Xenova/vit-gpt2-image-captioning\",\n        },\n        \"type\": \"multimodal\",\n    },\n\n    \"image-classification\": {\n        // no tokenizer\n        \"pipeline\": ImageClassificationPipeline,\n        \"model\": AutoModelForImageClassification,\n        \"processor\": AutoProcessor,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"google/vit-base-patch16-224\",\n            \"model\": \"Xenova/vit-base-patch16-224\",\n        },\n        \"type\": \"multimodal\",\n    },\n\n    \"image-segmentation\": {\n        // no tokenizer\n        \"pipeline\": ImageSegmentationPipeline,\n        \"model\": [AutoModelForImageSegmentation, AutoModelForSemanticSegmentation],\n        \"processor\": AutoProcessor,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"facebook/detr-resnet-50-panoptic\",\n            \"model\": \"Xenova/detr-resnet-50-panoptic\",\n        },\n        \"type\": \"multimodal\",\n    },\n\n    \"zero-shot-image-classification\": {\n        \"tokenizer\": AutoTokenizer,\n        \"pipeline\": ZeroShotImageClassificationPipeline,\n        \"model\": AutoModel,\n        \"processor\": AutoProcessor,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"openai/clip-vit-base-patch32\",\n            \"model\": \"Xenova/clip-vit-base-patch32\",\n        },\n        \"type\": \"multimodal\",\n    },\n\n    \"object-detection\": {\n        // no tokenizer\n        \"pipeline\": ObjectDetectionPipeline,\n        \"model\": AutoModelForObjectDetection,\n        \"processor\": AutoProcessor,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"facebook/detr-resnet-50\",\n            \"model\": \"Xenova/detr-resnet-50\",\n        },\n        \"type\": \"multimodal\",\n    },\n    \"zero-shot-object-detection\": {\n        \"tokenizer\": AutoTokenizer,\n        \"pipeline\": ZeroShotObjectDetectionPipeline,\n        \"model\": AutoModelForZeroShotObjectDetection,\n        \"processor\": AutoProcessor,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"google/owlvit-base-patch32\",\n            \"model\": \"Xenova/owlvit-base-patch32\",\n        },\n        \"type\": \"multimodal\",\n    },\n    \"document-question-answering\": {\n        \"tokenizer\": AutoTokenizer,\n        \"pipeline\": DocumentQuestionAnsweringPipeline,\n        \"model\": AutoModelForDocumentQuestionAnswering,\n        \"processor\": AutoProcessor,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"naver-clova-ix/donut-base-finetuned-docvqa\",\n            \"model\": \"Xenova/donut-base-finetuned-docvqa\",\n        },\n        \"type\": \"multimodal\",\n    },\n    \"image-to-image\": {\n        // no tokenizer\n        \"pipeline\": ImageToImagePipeline,\n        \"model\": AutoModelForImageToImage,\n        \"processor\": AutoProcessor,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"caidas/swin2SR-classical-sr-x2-64\",\n            \"model\": \"Xenova/swin2SR-classical-sr-x2-64\",\n        },\n        \"type\": \"image\",\n    },\n    \"depth-estimation\": {\n        // no tokenizer\n        \"pipeline\": DepthEstimationPipeline,\n        \"model\": AutoModelForDepthEstimation,\n        \"processor\": AutoProcessor,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"Intel/dpt-large\",\n            \"model\": \"Xenova/dpt-large\",\n        },\n        \"type\": \"image\",\n    },\n\n    // This task serves as a useful interface for dealing with sentence-transformers (https://huggingface.co/sentence-transformers).\n    \"feature-extraction\": {\n        \"tokenizer\": AutoTokenizer,\n        \"pipeline\": FeatureExtractionPipeline,\n        \"model\": AutoModel,\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"sentence-transformers/all-MiniLM-L6-v2\",\n            \"model\": \"Xenova/all-MiniLM-L6-v2\",\n        },\n        \"type\": \"text\",\n    },\n    \"image-feature-extraction\": {\n        \"processor\": AutoProcessor,\n        \"pipeline\": ImageFeatureExtractionPipeline,\n        \"model\": [AutoModelForImageFeatureExtraction, AutoModel],\n        \"default\": {\n            // TODO: replace with original\n            // \"model\": \"google/vit-base-patch16-224\",\n            \"model\": \"Xenova/vit-base-patch16-224-in21k\",\n        },\n        \"type\": \"image\",\n    },\n})\n\n\n// TODO: Add types for TASK_ALIASES\nconst TASK_ALIASES = Object.freeze({\n    \"sentiment-analysis\": \"text-classification\",\n    \"ner\": \"token-classification\",\n    // \"vqa\": \"visual-question-answering\", // TODO: Add\n    \"asr\": \"automatic-speech-recognition\",\n    \"text-to-speech\": \"text-to-audio\",\n\n    // Add for backwards compatibility\n    \"embeddings\": \"feature-extraction\",\n});\n\n/**\n * @typedef {keyof typeof SUPPORTED_TASKS} TaskType\n * @typedef {keyof typeof TASK_ALIASES} AliasType\n * @typedef {TaskType | AliasType} PipelineType All possible pipeline types.\n * @typedef {{[K in TaskType]: InstanceType<typeof SUPPORTED_TASKS[K][\"pipeline\"]>}} SupportedTasks A mapping of pipeline names to their corresponding pipeline classes.\n * @typedef {{[K in AliasType]: InstanceType<typeof SUPPORTED_TASKS[TASK_ALIASES[K]][\"pipeline\"]>}} AliasTasks A mapping from pipeline aliases to their corresponding pipeline classes.\n * @typedef {SupportedTasks & AliasTasks} AllTasks A mapping from all pipeline names and aliases to their corresponding pipeline classes.\n */\n\n/**\n * Utility factory method to build a `Pipeline` object.\n * \n * @template {PipelineType} T The type of pipeline to return.\n * @param {T} task The task defining which pipeline will be returned. Currently accepted tasks are:\n *  - `\"audio-classification\"`: will return a `AudioClassificationPipeline`.\n *  - `\"automatic-speech-recognition\"`: will return a `AutomaticSpeechRecognitionPipeline`.\n *  - `\"depth-estimation\"`: will return a `DepthEstimationPipeline`.\n *  - `\"document-question-answering\"`: will return a `DocumentQuestionAnsweringPipeline`.\n *  - `\"feature-extraction\"`: will return a `FeatureExtractionPipeline`.\n *  - `\"fill-mask\"`: will return a `FillMaskPipeline`.\n *  - `\"image-classification\"`: will return a `ImageClassificationPipeline`.\n *  - `\"image-segmentation\"`: will return a `ImageSegmentationPipeline`.\n *  - `\"image-to-text\"`: will return a `ImageToTextPipeline`.\n *  - `\"object-detection\"`: will return a `ObjectDetectionPipeline`.\n *  - `\"question-answering\"`: will return a `QuestionAnsweringPipeline`.\n *  - `\"summarization\"`: will return a `SummarizationPipeline`.\n *  - `\"text2text-generation\"`: will return a `Text2TextGenerationPipeline`.\n *  - `\"text-classification\"` (alias \"sentiment-analysis\" available): will return a `TextClassificationPipeline`.\n *  - `\"text-generation\"`: will return a `TextGenerationPipeline`.\n *  - `\"token-classification\"` (alias \"ner\" available): will return a `TokenClassificationPipeline`.\n *  - `\"translation\"`: will return a `TranslationPipeline`.\n *  - `\"translation_xx_to_yy\"`: will return a `TranslationPipeline`.\n *  - `\"zero-shot-classification\"`: will return a `ZeroShotClassificationPipeline`.\n *  - `\"zero-shot-audio-classification\"`: will return a `ZeroShotAudioClassificationPipeline`.\n *  - `\"zero-shot-image-classification\"`: will return a `ZeroShotImageClassificationPipeline`.\n *  - `\"zero-shot-object-detection\"`: will return a `ZeroShotObjectDetectionPipeline`.\n * @param {string} [model=null] The name of the pre-trained model to use. If not specified, the default model for the task will be used.\n * @param {import('./utils/hub.js').PretrainedModelOptions} [options] Optional parameters for the pipeline.\n * @returns {Promise<AllTasks[T]>} A Pipeline object for the specified task.\n * @throws {Error} If an unsupported pipeline is requested.\n */\nexport async function pipeline(\n    task,\n    model = null,\n    {\n        progress_callback = null,\n        config = null,\n        cache_dir = null,\n        local_files_only = false,\n        revision = 'main',\n        device = null,\n        dtype = null,\n        model_file_name = null,\n        session_options = {},\n    } = {}\n) {\n    // Helper method to construct pipeline\n\n    // Apply aliases\n    // @ts-ignore\n    task = TASK_ALIASES[task] ?? task;\n\n    // Get pipeline info\n    const pipelineInfo = SUPPORTED_TASKS[task.split('_', 1)[0]];\n    if (!pipelineInfo) {\n        throw Error(`Unsupported pipeline: ${task}. Must be one of [${Object.keys(SUPPORTED_TASKS)}]`)\n    }\n\n    // Use model if specified, otherwise, use default\n    if (!model) {\n        model = pipelineInfo.default.model\n        console.log(`No model specified. Using default model: \"${model}\".`);\n    }\n\n    const pretrainedOptions = {\n        progress_callback,\n        config,\n        cache_dir,\n        local_files_only,\n        revision,\n        device,\n        dtype,\n        model_file_name,\n        session_options,\n    }\n\n    const classes = new Map([\n        ['tokenizer', pipelineInfo.tokenizer],\n        ['model', pipelineInfo.model],\n        ['processor', pipelineInfo.processor],\n    ]);\n\n    // Load model, tokenizer, and processor (if they exist)\n    const results = await loadItems(classes, model, pretrainedOptions);\n    results.task = task;\n\n    dispatchCallback(progress_callback, {\n        'status': 'ready',\n        'task': task,\n        'model': model,\n    });\n\n    const pipelineClass = pipelineInfo.pipeline;\n    return new pipelineClass(results);\n}\n\n\n/**\n * Helper function to get applicable model, tokenizer, or processor classes for a given model.\n * @param {Map<string, any>} mapping The mapping of names to classes, arrays of classes, or null.\n * @param {string} model The name of the model to load.\n * @param {import('./utils/hub.js').PretrainedOptions} pretrainedOptions The options to pass to the `from_pretrained` method.\n * @private\n */\nasync function loadItems(mapping, model, pretrainedOptions) {\n\n    const result = Object.create(null);\n\n    /**@type {Promise[]} */\n    const promises = [];\n    for (let [name, cls] of mapping.entries()) {\n        if (!cls) continue;\n\n        /**@type {Promise} */\n        let promise;\n        if (Array.isArray(cls)) {\n            promise = new Promise(async (resolve, reject) => {\n                let e;\n                for (let c of cls) {\n                    if (c === null) {\n                        // If null, we resolve it immediately, meaning the relevant\n                        // class was not found, but it is optional.\n                        resolve(null);\n                        return;\n                    }\n                    try {\n                        resolve(await c.from_pretrained(model, pretrainedOptions));\n                        return;\n                    } catch (err) {\n                        if (err.message?.includes('Unsupported model type')) {\n                            // If the error is due to an unsupported model type, we\n                            // save the error and try the next class.\n                            e = err;\n                        } else if (err.message?.includes('Could not locate file')) {\n                            e = err;\n                        } else {\n                            reject(err);\n                            return;\n                        }\n\n                    }\n                }\n                reject(e);\n            })\n        } else {\n            promise = cls.from_pretrained(model, pretrainedOptions);\n        }\n\n        result[name] = promise;\n        promises.push(promise);\n    }\n\n    // Wait for all promises to resolve (in parallel)\n    await Promise.all(promises);\n\n    // Then assign to result\n    for (let [name, promise] of Object.entries(result)) {\n        result[name] = await promise;\n    }\n\n    return result;\n}","\n/**\n * @file Processors are used to prepare non-textual inputs (e.g., image or audio) for a model.\n * \n * **Example:** Using a `WhisperProcessor` to prepare an audio input for a model.\n * ```javascript\n * import { AutoProcessor, read_audio } from '@huggingface/transformers';\n *\n * let processor = await AutoProcessor.from_pretrained('openai/whisper-tiny.en');\n * let audio = await read_audio('https://huggingface.co/datasets/Narsil/asr_dummy/resolve/main/mlk.flac', 16000);\n * let { input_features } = await processor(audio);\n * // Tensor {\n * //   data: Float32Array(240000) [0.4752984642982483, 0.5597258806228638, 0.56434166431427, ...],\n * //   dims: [1, 80, 3000],\n * //   type: 'float32',\n * //   size: 240000,\n * // }\n * ```\n * \n * @module processors\n */\nimport {\n    Callable,\n} from './utils/generic.js';\n\nimport {\n    calculateDimensions,\n    calculateReflectOffset,\n} from './utils/core.js';\n\nimport {\n    getModelJSON,\n} from './utils/hub.js';\n\nimport {\n    min,\n    max,\n    softmax,\n    bankers_round,\n} from './utils/maths.js';\n\n\nimport { Tensor, cat, interpolate, stack, interpolate_4d } from './utils/tensor.js';\n\nimport { RawImage } from './utils/image.js';\nimport {\n    window_function,\n    spectrogram,\n    mel_filter_bank,\n} from './utils/audio.js';\n\n\n// Helper functions\n\n/**\n * Converts bounding boxes from center format to corners format.\n * \n * @param {number[]} arr The coordinate for the center of the box and its width, height dimensions (center_x, center_y, width, height)\n * @returns {number[]} The coodinates for the top-left and bottom-right corners of the box (top_left_x, top_left_y, bottom_right_x, bottom_right_y)\n */\nfunction center_to_corners_format([centerX, centerY, width, height]) {\n    return [\n        centerX - width / 2,\n        centerY - height / 2,\n        centerX + width / 2,\n        centerY + height / 2\n    ];\n}\n\n/**\n * Post-processes the outputs of the model (for object detection).\n * @param {Object} outputs The outputs of the model that must be post-processed\n * @param {Tensor} outputs.logits The logits\n * @param {Tensor} outputs.pred_boxes The predicted boxes.\n * @param {number} [threshold=0.5] The threshold to use for the scores.\n * @param {number[][]} [target_sizes=null] The sizes of the original images.\n * @param {boolean} [is_zero_shot=false] Whether zero-shot object detection was performed.\n * @return {Object[]} An array of objects containing the post-processed outputs.\n * @private\n */\nfunction post_process_object_detection(outputs, threshold = 0.5, target_sizes = null, is_zero_shot = false) {\n    const out_logits = outputs.logits;\n    const out_bbox = outputs.pred_boxes;\n    const [batch_size, num_boxes, num_classes] = out_logits.dims;\n\n    if (target_sizes !== null && target_sizes.length !== batch_size) {\n        throw Error(\"Make sure that you pass in as many target sizes as the batch dimension of the logits\")\n    }\n    let toReturn = [];\n    for (let i = 0; i < batch_size; ++i) {\n        let target_size = target_sizes !== null ? target_sizes[i] : null;\n        let info = {\n            boxes: [],\n            classes: [],\n            scores: []\n        }\n        let logits = out_logits[i];\n        let bbox = out_bbox[i];\n\n        for (let j = 0; j < num_boxes; ++j) {\n            let logit = logits[j];\n\n            let indices = [];\n            let probs;\n            if (is_zero_shot) {\n                // Get indices of classes with high enough probability\n                probs = logit.sigmoid().data;\n                for (let k = 0; k < probs.length; ++k) {\n                    if (probs[k] > threshold) {\n                        indices.push(k);\n                    }\n                }\n\n            } else {\n                // Get most probable class\n                let maxIndex = max(logit.data)[1];\n\n                if (maxIndex === num_classes - 1) {\n                    // This is the background class, skip it\n                    continue;\n                }\n                // Compute softmax over classes\n                probs = softmax(logit.data);\n\n                if (probs[maxIndex] < threshold) {\n                    continue;\n                }\n                indices.push(maxIndex);\n            }\n\n            for (const index of indices) {\n\n                // Some class has a high enough probability\n                /** @type {number[]} */\n                let box = bbox[j].data;\n\n                // convert to [x0, y0, x1, y1] format\n                box = center_to_corners_format(box)\n                if (target_size !== null) {\n                    box = box.map((x, i) => x * target_size[(i + 1) % 2])\n                }\n\n                info.boxes.push(box);\n                info.classes.push(index);\n                info.scores.push(probs[index]);\n            }\n        }\n        toReturn.push(info);\n    }\n    return toReturn;\n}\n\n/**\n * Named tuple to indicate the order we are using is (height x width), even though\n * the Graphics’ industry standard is (width x height).\n * @typedef {[height: number, width: number]} HeightWidth\n */\n\n/**\n * Helper function to validate audio inputs.\n * @param {any} audio The audio data.\n * @param {string} feature_extractor The name of the feature extractor.\n * @private\n */\nfunction validate_audio_inputs(audio, feature_extractor) {\n    if (!(audio instanceof Float32Array || audio instanceof Float64Array)) {\n        throw new Error(\n            `${feature_extractor} expects input to be a Float32Array or a Float64Array, but got ${audio?.constructor?.name ?? typeof audio} instead. ` +\n            `If using the feature extractor directly, remember to use \\`read_audio(url, sampling_rate)\\` to obtain the raw audio data of the file/url.`\n        )\n    }\n}\n\n/**\n * Helper function to constrain a value to be a multiple of a number.\n * @param {number} val The value to constrain.\n * @param {number} multiple The number to constrain to.\n * @param {number} [minVal=0] The minimum value to constrain to.\n * @param {number} [maxVal=null] The maximum value to constrain to.\n * @returns {number} The constrained value.\n * @private\n */\nfunction constraint_to_multiple_of(val, multiple, minVal = 0, maxVal = null) {\n    const a = val / multiple;\n    let x = bankers_round(a) * multiple;\n\n    if (maxVal !== null && x > maxVal) {\n        x = Math.floor(a) * multiple;\n    }\n\n    if (x < minVal) {\n        x = Math.ceil(a) * multiple;\n    }\n\n    return x;\n}\n\n/**\n * Rounds the height and width down to the closest multiple of size_divisibility\n * @param {[number, number]} size The size of the image\n * @param {number} divisor The divisor to use.\n * @returns {[number, number]} The rounded size.\n */\nfunction enforce_size_divisibility([width, height], divisor) {\n    return [\n        Math.max(Math.floor(width / divisor), 1) * divisor,\n        Math.max(Math.floor(height / divisor), 1) * divisor\n    ];\n}\n\n\n/**\n * Base class for feature extractors.\n *\n * @extends Callable\n */\nexport class FeatureExtractor extends Callable {\n    /**\n     * Constructs a new FeatureExtractor instance.\n     *\n     * @param {Object} config The configuration for the feature extractor.\n     */\n    constructor(config) {\n        super();\n        this.config = config\n    }\n}\n\n/**\n * @typedef {object} ImageFeatureExtractorResult\n * @property {Tensor} pixel_values The pixel values of the batched preprocessed images.\n * @property {HeightWidth[]} original_sizes Array of two-dimensional tuples like [[480, 640]].\n * @property {HeightWidth[]} reshaped_input_sizes Array of two-dimensional tuples like [[1000, 1330]].\n */\n\n/**\n * Feature extractor for image models.\n *\n * @extends FeatureExtractor\n */\nexport class ImageFeatureExtractor extends FeatureExtractor {\n\n    /**\n     * Constructs a new ImageFeatureExtractor instance.\n     *\n     * @param {Object} config The configuration for the feature extractor.\n     * @param {number[]} config.image_mean The mean values for image normalization.\n     * @param {number[]} config.image_std The standard deviation values for image normalization.\n     * @param {boolean} config.do_rescale Whether to rescale the image pixel values to the [0,1] range.\n     * @param {number} config.rescale_factor The factor to use for rescaling the image pixel values.\n     * @param {boolean} config.do_normalize Whether to normalize the image pixel values.\n     * @param {boolean} config.do_resize Whether to resize the image.\n     * @param {number} config.resample What method to use for resampling.\n     * @param {number|Object} config.size The size to resize the image to.\n     * @param {boolean} [config.do_flip_channel_order=false] Whether to flip the color channels from RGB to BGR.\n     * Can be overridden by the `do_flip_channel_order` parameter in the `preprocess` method.\n     */\n    constructor(config) {\n        super(config);\n\n        this.image_mean = this.config.image_mean ?? this.config.mean;\n        this.image_std = this.config.image_std ?? this.config.std;\n\n        this.resample = this.config.resample ?? 2; // 2 => bilinear\n        this.do_rescale = this.config.do_rescale ?? true;\n        this.rescale_factor = this.config.rescale_factor ?? (1 / 255);\n        this.do_normalize = this.config.do_normalize;\n\n        this.do_resize = this.config.do_resize;\n        this.do_thumbnail = this.config.do_thumbnail;\n        this.size = this.config.size;\n        this.size_divisibility = this.config.size_divisibility ?? this.config.size_divisor;\n\n        this.do_center_crop = this.config.do_center_crop;\n        this.crop_size = this.config.crop_size;\n        this.do_convert_rgb = this.config.do_convert_rgb ?? true;\n        this.do_crop_margin = this.config.do_crop_margin;\n\n        this.pad_size = this.config.pad_size;\n        this.do_pad = this.config.do_pad;\n\n        if (this.do_pad && !this.pad_size && this.size && this.size.width !== undefined && this.size.height !== undefined) {\n            // Should pad, but no pad size specified\n            // We infer the pad size from the resize size\n            this.pad_size = this.size\n        }\n\n        this.do_flip_channel_order = this.config.do_flip_channel_order ?? false;\n    }\n\n    /**\n     * Resize the image to make a thumbnail. The image is resized so that no dimension is larger than any\n     * corresponding dimension of the specified size.\n     * @param {RawImage} image The image to be resized.\n     * @param {{height:number, width:number}} size The size `{\"height\": h, \"width\": w}` to resize the image to.\n     * @param {string | 0 | 1 | 2 | 3 | 4 | 5} [resample=2] The resampling filter to use.\n     * @returns {Promise<RawImage>} The resized image.\n     */\n    async thumbnail(image, size, resample = 2) {\n        const input_height = image.height;\n        const input_width = image.width;\n\n        const output_height = size.height;\n        const output_width = size.width;\n\n        // We always resize to the smallest of either the input or output size.\n        let height = Math.min(input_height, output_height)\n        let width = Math.min(input_width, output_width)\n\n        if (height === input_height && width === input_width) {\n            return image;\n        }\n        if (input_height > input_width) {\n            width = Math.floor(input_width * height / input_height);\n        } else if (input_width > input_height) {\n            height = Math.floor(input_height * width / input_width);\n        }\n        return await image.resize(width, height, { resample });\n    }\n\n\n    /**\n     * Crops the margin of the image. Gray pixels are considered margin (i.e., pixels with a value below the threshold).\n     * @param {RawImage} image The image to be cropped.\n     * @param {number} gray_threshold Value below which pixels are considered to be gray.\n     * @returns {Promise<RawImage>} The cropped image.\n     */\n    async crop_margin(image, gray_threshold = 200) {\n\n        const gray_image = image.clone().grayscale();\n\n        const minValue = min(gray_image.data)[0];\n        const maxValue = max(gray_image.data)[0];\n        const diff = maxValue - minValue;\n\n        if (diff === 0) {\n            return image;\n        }\n\n        const threshold = gray_threshold / 255;\n\n        let x_min = gray_image.width, y_min = gray_image.height, x_max = 0, y_max = 0;\n        const gray_image_data = gray_image.data;\n        for (let j = 0; j < gray_image.height; ++j) {\n            const row = j * gray_image.width;\n            for (let i = 0; i < gray_image.width; ++i) {\n                if ((gray_image_data[row + i] - minValue) / diff < threshold) {\n                    // We have a non-zero pixel, so we update the min/max values accordingly\n                    x_min = Math.min(x_min, i);\n                    y_min = Math.min(y_min, j);\n                    x_max = Math.max(x_max, i);\n                    y_max = Math.max(y_max, j);\n                }\n            }\n        }\n\n        image = await image.crop([x_min, y_min, x_max, y_max]);\n        return image;\n    }\n\n    /**\n     * Pad the image by a certain amount.\n     * @param {Float32Array} pixelData The pixel data to pad.\n     * @param {number[]} imgDims The dimensions of the image (height, width, channels).\n     * @param {{width:number; height:number}|number} padSize The dimensions of the padded image.\n     * @param {Object} options The options for padding.\n     * @param {'constant'|'symmetric'} [options.mode='constant'] The type of padding to add.\n     * @param {boolean} [options.center=false] Whether to center the image.\n     * @param {number} [options.constant_values=0] The constant value to use for padding.\n     * @returns {[Float32Array, number[]]} The padded pixel data and image dimensions.\n     */\n    pad_image(pixelData, imgDims, padSize, {\n        mode = 'constant',\n        center = false,\n        constant_values = 0,\n    } = {}) {\n        const [imageHeight, imageWidth, imageChannels] = imgDims;\n\n        let paddedImageWidth, paddedImageHeight;\n        if (typeof padSize === 'number') {\n            paddedImageWidth = padSize;\n            paddedImageHeight = padSize;\n        } else {\n            paddedImageWidth = padSize.width;\n            paddedImageHeight = padSize.height;\n        }\n\n        // Only add padding if there is a difference in size\n        if (paddedImageWidth !== imageWidth || paddedImageHeight !== imageHeight) {\n            const paddedPixelData = new Float32Array(paddedImageWidth * paddedImageHeight * imageChannels);\n            if (Array.isArray(constant_values)) {\n                // Fill with constant values, cycling through the array\n                for (let i = 0; i < paddedPixelData.length; ++i) {\n                    paddedPixelData[i] = constant_values[i % imageChannels];\n                }\n            } else if (constant_values !== 0) {\n                paddedPixelData.fill(constant_values);\n            }\n\n            const [left, top] = center\n                ? [Math.floor((paddedImageWidth - imageWidth) / 2), Math.floor((paddedImageHeight - imageHeight) / 2)]\n                : [0, 0];\n\n            // Copy the original image into the padded image\n            for (let i = 0; i < imageHeight; ++i) {\n                const a = (i + top) * paddedImageWidth;\n                const b = i * imageWidth;\n                for (let j = 0; j < imageWidth; ++j) {\n                    const c = (a + j + left) * imageChannels;\n                    const d = (b + j) * imageChannels;\n                    for (let k = 0; k < imageChannels; ++k) {\n                        paddedPixelData[c + k] = pixelData[d + k];\n                    }\n                }\n            }\n\n            if (mode === 'symmetric') {\n                if (center) {\n                    throw new Error('`center` padding is not supported when `mode` is set to `symmetric`.');\n                    // TODO: Implement this\n                }\n                const h1 = imageHeight - 1;\n                const w1 = imageWidth - 1;\n                for (let i = 0; i < paddedImageHeight; ++i) {\n                    const a = i * paddedImageWidth;\n                    const b = calculateReflectOffset(i, h1) * imageWidth;\n\n                    for (let j = 0; j < paddedImageWidth; ++j) {\n                        if (i < imageHeight && j < imageWidth) continue; // Do not overwrite original image\n                        const c = (a + j) * imageChannels;\n                        const d = (b + calculateReflectOffset(j, w1)) * imageChannels;\n\n                        // Copy channel-wise\n                        for (let k = 0; k < imageChannels; ++k) {\n                            paddedPixelData[c + k] = pixelData[d + k];\n                        }\n                    }\n                }\n            }\n\n\n            // Update pixel data and image dimensions\n            pixelData = paddedPixelData;\n            imgDims = [paddedImageHeight, paddedImageWidth, imageChannels]\n        }\n        return [pixelData, imgDims];\n    }\n\n    /**\n     * Rescale the image' pixel values by `this.rescale_factor`.\n     * @param {Float32Array} pixelData The pixel data to rescale.\n     * @returns {void}\n     */\n    rescale(pixelData) {\n        for (let i = 0; i < pixelData.length; ++i) {\n            pixelData[i] = this.rescale_factor * pixelData[i];\n        }\n    }\n\n    /**\n     * Find the target (width, height) dimension of the output image after\n     * resizing given the input image and the desired size.\n     * @param {RawImage} image The image to resize.\n     * @param {any} size The size to use for resizing the image. \n     * @returns {[number, number]} The target (width, height) dimension of the output image after resizing.\n     */\n    get_resize_output_image_size(image, size) {\n        // `size` comes in many forms, so we need to handle them all here:\n        // 1. `size` is an integer, in which case we resize the image to be a square \n\n        const [srcWidth, srcHeight] = image.size;\n\n        let shortest_edge;\n        let longest_edge;\n\n        if (this.do_thumbnail) {\n            // NOTE: custom logic for `Donut` models\n            const { height, width } = size;\n            shortest_edge = Math.min(height, width)\n        }\n        // Support both formats for backwards compatibility\n        else if (Number.isInteger(size)) {\n            shortest_edge = size;\n            longest_edge = this.config.max_size ?? shortest_edge;\n\n        } else if (size !== undefined) {\n            // Extract known properties from `size`\n            shortest_edge = size.shortest_edge;\n            longest_edge = size.longest_edge;\n        }\n\n        // If `longest_edge` and `shortest_edge` are set, maintain aspect ratio and resize to `shortest_edge`\n        // while keeping the largest dimension <= `longest_edge`\n        if (shortest_edge !== undefined || longest_edge !== undefined) {\n            // http://opensourcehacker.com/2011/12/01/calculate-aspect-ratio-conserving-resize-for-images-in-javascript/\n            // Try resize so that shortest edge is `shortest_edge` (target)\n            const shortResizeFactor = shortest_edge === undefined\n                ? 1 // If `shortest_edge` is not set, don't upscale\n                : Math.max(shortest_edge / srcWidth, shortest_edge / srcHeight);\n\n            const newWidth = srcWidth * shortResizeFactor;\n            const newHeight = srcHeight * shortResizeFactor;\n\n            // The new width and height might be greater than `longest_edge`, so\n            // we downscale again to ensure the largest dimension is `longest_edge` \n            const longResizeFactor = longest_edge === undefined\n                ? 1 // If `longest_edge` is not set, don't downscale\n                : Math.min(longest_edge / newWidth, longest_edge / newHeight);\n\n            // To avoid certain floating point precision issues, we round to 2 decimal places\n            let finalWidth = Math.floor(Number((newWidth * longResizeFactor).toFixed(2)));\n            let finalHeight = Math.floor(Number((newHeight * longResizeFactor).toFixed(2)));\n\n            if (this.size_divisibility !== undefined) {\n                [finalWidth, finalHeight] = enforce_size_divisibility([finalWidth, finalHeight], this.size_divisibility)\n            }\n            return [finalWidth, finalHeight];\n\n        } else if (size !== undefined && size.width !== undefined && size.height !== undefined) {\n            // If `width` and `height` are set, resize to those dimensions\n\n            let newWidth = size.width;\n            let newHeight = size.height;\n\n            // Custom for DPT models\n            if (this.config.keep_aspect_ratio && this.config.ensure_multiple_of) {\n\n                // determine new height and width\n                let scale_height = newHeight / srcHeight;\n                let scale_width = newWidth / srcWidth;\n\n                // scale as little as possible\n                if (Math.abs(1 - scale_width) < Math.abs(1 - scale_height)) {\n                    // fit width\n                    scale_height = scale_width;\n                } else {\n                    // fit height\n                    scale_width = scale_height;\n                }\n\n                newHeight = constraint_to_multiple_of(scale_height * srcHeight, this.config.ensure_multiple_of);\n                newWidth = constraint_to_multiple_of(scale_width * srcWidth, this.config.ensure_multiple_of);\n            }\n\n            return [newWidth, newHeight];\n\n        } else if (this.size_divisibility !== undefined) {\n            return enforce_size_divisibility([srcWidth, srcHeight], this.size_divisibility);\n        } else {\n            throw new Error(`Could not resize image due to unsupported \\`this.size\\` option in config: ${JSON.stringify(size)}`);\n        }\n    }\n\n    /**\n     * Resizes the image.\n     * @param {RawImage} image The image to resize.\n     * @returns {Promise<RawImage>} The resized image.\n     */\n    async resize(image) {\n        const [newWidth, newHeight] = this.get_resize_output_image_size(image, this.size);\n        return await image.resize(newWidth, newHeight, {\n            resample: this.resample,\n        });\n    }\n\n    /**\n     * @typedef {object} PreprocessedImage\n     * @property {HeightWidth} original_size The original size of the image.\n     * @property {HeightWidth} reshaped_input_size The reshaped input size of the image.\n     * @property {Tensor} pixel_values The pixel values of the preprocessed image.\n     */\n\n    /**\n     * Preprocesses the given image.\n     *\n     * @param {RawImage} image The image to preprocess.\n     * @param {Object} overrides The overrides for the preprocessing options.\n     * @returns {Promise<PreprocessedImage>} The preprocessed image.\n     */\n    async preprocess(image, {\n        do_normalize = null,\n        do_pad = null,\n        do_convert_rgb = null,\n        do_convert_grayscale = null,\n        do_flip_channel_order = null,\n    } = {}) {\n        if (this.do_crop_margin) {\n            // NOTE: Specific to nougat processors. This is done before resizing,\n            // and can be interpreted as a pre-preprocessing step.\n            image = await this.crop_margin(image);\n        }\n\n        const [srcWidth, srcHeight] = image.size; // original image size\n\n        // Convert image to RGB if specified in config.\n        if (do_convert_rgb ?? this.do_convert_rgb) {\n            image = image.rgb();\n        } else if (do_convert_grayscale) {\n            image = image.grayscale();\n        }\n\n        // TODO:\n        // For efficiency reasons, it might be best to merge the resize and center crop operations into one.\n\n        // Resize all images\n        if (this.do_resize) {\n            image = await this.resize(image);\n        }\n\n        // Resize the image using thumbnail method.\n        if (this.do_thumbnail) {\n            image = await this.thumbnail(image, this.size, this.resample);\n        }\n\n        if (this.do_center_crop) {\n\n            let crop_width;\n            let crop_height;\n            if (Number.isInteger(this.crop_size)) {\n                crop_width = this.crop_size;\n                crop_height = this.crop_size;\n            } else {\n                crop_width = this.crop_size.width;\n                crop_height = this.crop_size.height;\n            }\n\n            image = await image.center_crop(crop_width, crop_height);\n        }\n\n        /** @type {HeightWidth} */\n        const reshaped_input_size = [image.height, image.width];\n\n        // NOTE: All pixel-level manipulation (i.e., modifying `pixelData`)\n        // occurs with data in the hwc format (height, width, channels), \n        // to emulate the behavior of the original Python code (w/ numpy).\n        let pixelData = Float32Array.from(image.data);\n        let imgDims = [image.height, image.width, image.channels];\n\n        if (this.do_rescale) {\n            this.rescale(pixelData);\n        }\n\n        if (do_normalize ?? this.do_normalize) {\n            let image_mean = this.image_mean;\n            if (!Array.isArray(this.image_mean)) {\n                image_mean = new Array(image.channels).fill(image_mean);\n            }\n\n            let image_std = this.image_std;\n            if (!Array.isArray(this.image_std)) {\n                image_std = new Array(image.channels).fill(image_mean);\n            }\n\n            if (image_mean.length !== image.channels || image_std.length !== image.channels) {\n                throw new Error(`When set to arrays, the length of \\`image_mean\\` (${image_mean.length}) and \\`image_std\\` (${image_std.length}) must match the number of channels in the image (${image.channels}).`);\n            }\n\n            for (let i = 0; i < pixelData.length; i += image.channels) {\n                for (let j = 0; j < image.channels; ++j) {\n                    pixelData[i + j] = (pixelData[i + j] - image_mean[j]) / image_std[j];\n                }\n            }\n        }\n\n        // do padding after rescaling/normalizing\n        if (do_pad ?? this.do_pad) {\n            if (this.pad_size) {\n                const padded = this.pad_image(pixelData, [image.height, image.width, image.channels], this.pad_size);\n                [pixelData, imgDims] = padded; // Update pixel data and image dimensions\n            } else if (this.size_divisibility) {\n                const [paddedWidth, paddedHeight] = enforce_size_divisibility([imgDims[1], imgDims[0]], this.size_divisibility);\n                [pixelData, imgDims] = this.pad_image(pixelData, imgDims, { width: paddedWidth, height: paddedHeight });\n            }\n        }\n\n        if (do_flip_channel_order ?? this.do_flip_channel_order) {\n            if (imgDims[2] !== 3) {\n                throw new Error('Flipping channel order is only supported for RGB images.');\n            }\n            // Convert RGB to BGR\n            for (let i = 0; i < pixelData.length; i += 3) {\n                const temp = pixelData[i];\n                pixelData[i] = pixelData[i + 2];\n                pixelData[i + 2] = temp;\n            }\n        }\n\n        const pixel_values = new Tensor('float32', pixelData, imgDims)\n            .permute(2, 0, 1); // convert to channel dimension format (hwc -> chw)\n\n        return {\n            original_size: [srcHeight, srcWidth],\n            reshaped_input_size: reshaped_input_size,\n            pixel_values,\n        }\n    }\n\n    /**\n     * Calls the feature extraction process on an array of images,\n     * preprocesses each image, and concatenates the resulting\n     * features into a single Tensor.\n     * @param {RawImage[]} images The image(s) to extract features from.\n     * @param {...any} args Additional arguments.\n     * @returns {Promise<ImageFeatureExtractorResult>} An object containing the concatenated pixel values (and other metadata) of the preprocessed images.\n     */\n    async _call(images, ...args) {\n        if (!Array.isArray(images)) {\n            images = [images];\n        }\n        /** @type {PreprocessedImage[]} */\n        const imageData = await Promise.all(images.map(x => this.preprocess(x)));\n\n        // Stack pixel values\n        const pixel_values = stack(imageData.map(x => x.pixel_values), 0);\n\n        return {\n            pixel_values,\n\n            // Original sizes of images\n            original_sizes: imageData.map(x => x.original_size),\n\n            // Reshaped sizes of images, before padding or cropping\n            reshaped_input_sizes: imageData.map(x => x.reshaped_input_size),\n        }\n    }\n\n}\n\nexport class SegformerFeatureExtractor extends ImageFeatureExtractor {\n\n    /**\n     * Converts the output of `SegformerForSemanticSegmentation` into semantic segmentation maps.\n     * @param {*} outputs Raw outputs of the model.\n     * @param {number[][]} [target_sizes=null] List of tuples corresponding to the requested final size\n     * (height, width) of each prediction. If unset, predictions will not be resized.\n     * @returns {{segmentation: Tensor; labels: number[]}[]} The semantic segmentation maps.\n     */\n    post_process_semantic_segmentation(outputs, target_sizes = null) {\n\n        const logits = outputs.logits;\n        const batch_size = logits.dims[0];\n\n        if (target_sizes !== null && target_sizes.length !== batch_size) {\n            throw Error(\"Make sure that you pass in as many target sizes as the batch dimension of the logits\")\n        }\n\n        const toReturn = [];\n        for (let i = 0; i < batch_size; ++i) {\n            const target_size = target_sizes !== null ? target_sizes[i] : null;\n\n            let data = logits[i];\n\n            // 1. If target_size is not null, we need to resize the masks to the target size\n            if (target_size !== null) {\n                // resize the masks to the target size\n                data = interpolate(data, target_size, 'bilinear', false);\n            }\n            const [height, width] = target_size ?? data.dims.slice(-2);\n\n            const segmentation = new Tensor(\n                'int32',\n                new Int32Array(height * width),\n                [height, width]\n            );\n\n            // Buffer to store current largest value\n            const buffer = data[0].data;\n            const segmentation_data = segmentation.data;\n            for (let j = 1; j < data.dims[0]; ++j) {\n                const row = data[j].data;\n                for (let k = 0; k < row.length; ++k) {\n                    if (row[k] > buffer[k]) {\n                        buffer[k] = row[k];\n                        segmentation_data[k] = j;\n                    }\n                }\n            }\n\n            // Store which objects have labels\n            // This is much more efficient that creating a set of the final values\n            const hasLabel = new Array(data.dims[0]);\n            const out = segmentation.data;\n            for (let j = 0; j < out.length; ++j) {\n                const index = out[j];\n                hasLabel[index] = index;\n            }\n            /** @type {number[]} The unique list of labels that were detected */\n            const labels = hasLabel.filter(x => x !== undefined);\n\n            toReturn.push({ segmentation, labels });\n        }\n        return toReturn;\n    }\n}\nexport class DPTFeatureExtractor extends ImageFeatureExtractor { }\nexport class DPTImageProcessor extends DPTFeatureExtractor { } // NOTE: extends DPTFeatureExtractor\nexport class BitImageProcessor extends ImageFeatureExtractor { }\nexport class GLPNFeatureExtractor extends ImageFeatureExtractor { }\nexport class CLIPFeatureExtractor extends ImageFeatureExtractor { }\nexport class CLIPImageProcessor extends CLIPFeatureExtractor { } // NOTE: extends CLIPFeatureExtractor\nexport class ChineseCLIPFeatureExtractor extends ImageFeatureExtractor { }\nexport class SiglipImageProcessor extends ImageFeatureExtractor { }\nexport class ConvNextFeatureExtractor extends ImageFeatureExtractor {\n    constructor(config) {\n        super(config);\n\n        /**\n         * Percentage of the image to crop. Only has an effect if this.size < 384.\n         */\n        this.crop_pct = this.config.crop_pct ?? (224 / 256);\n    }\n\n    async resize(image) {\n        const shortest_edge = this.size?.shortest_edge;\n        if (shortest_edge === undefined) {\n            throw new Error(`Size dictionary must contain 'shortest_edge' key.`);\n        }\n\n        if (shortest_edge < 384) {\n            // maintain same ratio, resizing shortest edge to shortest_edge/crop_pct\n            const resize_shortest_edge = Math.floor(shortest_edge / this.crop_pct);\n\n            const [newWidth, newHeight] = this.get_resize_output_image_size(image, {\n                shortest_edge: resize_shortest_edge,\n            });\n\n            image = await image.resize(newWidth, newHeight, {\n                resample: this.resample,\n            });\n\n            // then crop to (shortest_edge, shortest_edge)\n            image = await image.center_crop(shortest_edge, shortest_edge);\n        } else {\n            // warping (no cropping) when evaluated at 384 or larger\n            image = await image.resize(shortest_edge, shortest_edge, {\n                resample: this.resample,\n            });\n        }\n\n        return image;\n    }\n}\nexport class ConvNextImageProcessor extends ConvNextFeatureExtractor { }  // NOTE extends ConvNextFeatureExtractor\nexport class ViTFeatureExtractor extends ImageFeatureExtractor { }\nexport class ViTImageProcessor extends ImageFeatureExtractor { }\n\nexport class EfficientNetImageProcessor extends ImageFeatureExtractor {\n    constructor(config) {\n        super(config);\n        this.include_top = this.config.include_top ?? true;\n        if (this.include_top) {\n            this.image_std = this.image_std.map(x => x * x);\n        }\n    }\n}\n\nexport class MobileNetV1FeatureExtractor extends ImageFeatureExtractor { }\nexport class MobileNetV2FeatureExtractor extends ImageFeatureExtractor { }\nexport class MobileNetV3FeatureExtractor extends ImageFeatureExtractor { }\nexport class MobileNetV4FeatureExtractor extends ImageFeatureExtractor { }\n\nexport class MobileViTFeatureExtractor extends ImageFeatureExtractor { }\nexport class MobileViTImageProcessor extends MobileViTFeatureExtractor { } // NOTE extends MobileViTFeatureExtractor\nexport class OwlViTFeatureExtractor extends ImageFeatureExtractor {\n    /** @type {post_process_object_detection} */\n    post_process_object_detection(...args) {\n        return post_process_object_detection(...args);\n    }\n}\nexport class Owlv2ImageProcessor extends OwlViTFeatureExtractor { } // NOTE extends OwlViTFeatureExtractor\n\nexport class RTDetrImageProcessor extends ImageFeatureExtractor {\n    /** @type {post_process_object_detection} */\n    post_process_object_detection(...args) {\n        return post_process_object_detection(...args);\n    }\n}\n\nexport class DeiTFeatureExtractor extends ImageFeatureExtractor { }\nexport class BeitFeatureExtractor extends ImageFeatureExtractor { }\nexport class DonutFeatureExtractor extends ImageFeatureExtractor {\n    pad_image(pixelData, imgDims, padSize, options = {}) {\n        const [imageHeight, imageWidth, imageChannels] = imgDims;\n\n        let image_mean = this.image_mean;\n        if (!Array.isArray(this.image_mean)) {\n            image_mean = new Array(imageChannels).fill(image_mean);\n        }\n\n        let image_std = this.image_std;\n        if (!Array.isArray(image_std)) {\n            image_std = new Array(imageChannels).fill(image_mean);\n        }\n\n        const constant_values = image_mean.map((x, i) => - x / image_std[i]);\n\n        return super.pad_image(pixelData, imgDims, padSize, {\n            center: true,\n\n            // Since normalization is done after padding, we need to use certain constant values to ensure the same behaviour is observed.\n            // For more information, see https://github.com/huggingface/transformers/blob/main/src/transformers/models/donut/image_processing_donut.py#L433-L451\n            constant_values: constant_values,\n            ...options,\n        });\n    }\n}\nexport class NougatImageProcessor extends DonutFeatureExtractor { } // NOTE extends DonutFeatureExtractor\n\n/**\n * @typedef {object} DetrFeatureExtractorResultProps\n * @property {Tensor} pixel_mask\n * @typedef {ImageFeatureExtractorResult & DetrFeatureExtractorResultProps} DetrFeatureExtractorResult\n */\n\n/**\n * Detr Feature Extractor.\n *\n * @extends ImageFeatureExtractor\n */\nexport class DetrFeatureExtractor extends ImageFeatureExtractor {\n    /**\n     * Calls the feature extraction process on an array of images, preprocesses\n     * each image, and concatenates the resulting features into a single Tensor.\n     * @param {RawImage[]} images The image(s) to extract features from.\n     * @returns {Promise<DetrFeatureExtractorResult>} An object containing the concatenated pixel values of the preprocessed images.\n     */\n    async _call(images) {\n        const result = await super._call(images);\n\n        // TODO support differently-sized images, for now assume all images are the same size.\n        // TODO support different mask sizes (not just 64x64)\n        // Currently, just fill pixel mask with 1s\n        const maskSize = [result.pixel_values.dims[0], 64, 64];\n        const pixel_mask = new Tensor(\n            'int64',\n            new BigInt64Array(maskSize.reduce((a, b) => a * b)).fill(1n),\n            maskSize\n        );\n\n        return { ...result, pixel_mask };\n    }\n\n    /**\n     * Post-processes the outputs of the model (for object detection).\n     * @param {Object} outputs The outputs of the model that must be post-processed\n     * @param {Tensor} outputs.logits The logits\n     * @param {Tensor} outputs.pred_boxes The predicted boxes.\n     * @return {Object[]} An array of objects containing the post-processed outputs.\n     */\n\n    /** @type {post_process_object_detection} */\n    post_process_object_detection(...args) {\n        return post_process_object_detection(...args);\n    }\n\n    /**\n     * Binarize the given masks using `object_mask_threshold`, it returns the associated values of `masks`, `scores` and `labels`.\n     * @param {Tensor} class_logits The class logits.\n     * @param {Tensor} mask_logits The mask logits.\n     * @param {number} object_mask_threshold A number between 0 and 1 used to binarize the masks.\n     * @param {number} num_labels The number of labels.\n     * @returns {[Tensor[], number[], number[]]} The binarized masks, the scores, and the labels.\n     */\n    remove_low_and_no_objects(class_logits, mask_logits, object_mask_threshold, num_labels) {\n\n        let mask_probs_item = [];\n        let pred_scores_item = [];\n        let pred_labels_item = [];\n\n        for (let j = 0; j < class_logits.dims[0]; ++j) {\n            let cls = class_logits[j];\n            let mask = mask_logits[j];\n\n            let pred_label = max(cls.data)[1];\n            if (pred_label === num_labels) {\n                // Is the background, so we ignore it\n                continue;\n            }\n\n            let scores = softmax(cls.data);\n            let pred_score = scores[pred_label];\n            if (pred_score > object_mask_threshold) {\n                mask_probs_item.push(mask);\n                pred_scores_item.push(pred_score);\n                pred_labels_item.push(pred_label);\n            }\n        }\n\n        return [mask_probs_item, pred_scores_item, pred_labels_item];\n\n    }\n\n    /**\n     * Checks whether the segment is valid or not.\n     * @param {Int32Array} mask_labels Labels for each pixel in the mask.\n     * @param {Tensor[]} mask_probs Probabilities for each pixel in the masks.\n     * @param {number} k The class id of the segment.\n     * @param {number} mask_threshold The mask threshold.\n     * @param {number} overlap_mask_area_threshold The overlap mask area threshold.\n     * @returns {[boolean, number[]]} Whether the segment is valid or not, and the indices of the valid labels.\n     */\n    check_segment_validity(\n        mask_labels,\n        mask_probs,\n        k,\n        mask_threshold = 0.5,\n        overlap_mask_area_threshold = 0.8\n    ) {\n        // mask_k is a 1D array of indices, indicating where the mask is equal to k\n        let mask_k = [];\n        let mask_k_area = 0;\n        let original_area = 0;\n\n        const mask_probs_k_data = mask_probs[k].data;\n\n        // Compute the area of all the stuff in query k\n        for (let i = 0; i < mask_labels.length; ++i) {\n            if (mask_labels[i] === k) {\n                mask_k.push(i);\n                ++mask_k_area;\n            }\n\n            if (mask_probs_k_data[i] >= mask_threshold) {\n                ++original_area;\n            }\n        }\n        let mask_exists = mask_k_area > 0 && original_area > 0;\n\n        // Eliminate disconnected tiny segments\n        if (mask_exists) {\n            // Perform additional check\n            let area_ratio = mask_k_area / original_area;\n            mask_exists = area_ratio > overlap_mask_area_threshold;\n        }\n\n        return [mask_exists, mask_k]\n    }\n\n    /**\n     * Computes the segments.\n     * @param {Tensor[]} mask_probs The mask probabilities.\n     * @param {number[]} pred_scores The predicted scores.\n     * @param {number[]} pred_labels The predicted labels.\n     * @param {number} mask_threshold The mask threshold.\n     * @param {number} overlap_mask_area_threshold The overlap mask area threshold.\n     * @param {Set<number>} label_ids_to_fuse The label ids to fuse.\n     * @param {number[]} target_size The target size of the image.\n     * @returns {[Tensor, Array<{id: number, label_id: number, score: number}>]} The computed segments.\n     */\n    compute_segments(\n        mask_probs,\n        pred_scores,\n        pred_labels,\n        mask_threshold,\n        overlap_mask_area_threshold,\n        label_ids_to_fuse = null,\n        target_size = null,\n    ) {\n        let [height, width] = target_size ?? mask_probs[0].dims;\n\n        let segmentation = new Tensor(\n            'int32',\n            new Int32Array(height * width),\n            [height, width]\n        );\n        let segments = [];\n\n        // 1. If target_size is not null, we need to resize the masks to the target size\n        if (target_size !== null) {\n            // resize the masks to the target size\n            for (let i = 0; i < mask_probs.length; ++i) {\n                mask_probs[i] = interpolate(mask_probs[i], target_size, 'bilinear', false);\n            }\n        }\n\n        // 2. Weigh each mask by its prediction score\n        // NOTE: `mask_probs` is updated in-place\n        // \n        // Temporary storage for the best label/scores for each pixel ([height, width]):\n        let mask_labels = new Int32Array(mask_probs[0].data.length);\n        let bestScores = new Float32Array(mask_probs[0].data.length);\n\n        for (let i = 0; i < mask_probs.length; ++i) {\n            let score = pred_scores[i];\n\n            const mask_probs_i_data = mask_probs[i].data;\n\n            for (let j = 0; j < mask_probs_i_data.length; ++j) {\n                mask_probs_i_data[j] *= score\n                if (mask_probs_i_data[j] > bestScores[j]) {\n                    mask_labels[j] = i;\n                    bestScores[j] = mask_probs_i_data[j];\n                }\n            }\n        }\n\n        let current_segment_id = 0;\n\n        // let stuff_memory_list = {}\n        const segmentation_data = segmentation.data;\n        for (let k = 0; k < pred_labels.length; ++k) {\n            let pred_class = pred_labels[k];\n\n            // TODO add `should_fuse`\n            // let should_fuse = pred_class in label_ids_to_fuse\n\n            // Check if mask exists and large enough to be a segment\n            let [mask_exists, mask_k] = this.check_segment_validity(\n                mask_labels,\n                mask_probs,\n                k,\n                mask_threshold,\n                overlap_mask_area_threshold\n            )\n\n            if (!mask_exists) {\n                // Nothing to see here\n                continue;\n            }\n\n            // TODO\n            // if (pred_class in stuff_memory_list) {\n            //     current_segment_id = stuff_memory_list[pred_class]\n            // } else {\n            //     current_segment_id += 1;\n            // }\n            ++current_segment_id;\n\n\n            // Add current object segment to final segmentation map\n            for (let index of mask_k) {\n                segmentation_data[index] = current_segment_id;\n            }\n\n            segments.push({\n                id: current_segment_id,\n                label_id: pred_class,\n                // was_fused: should_fuse, TODO\n                score: pred_scores[k],\n            })\n\n            // TODO\n            // if(should_fuse){\n            //     stuff_memory_list[pred_class] = current_segment_id\n            // }\n        }\n\n        return [segmentation, segments];\n    }\n\n    /**\n     * Post-process the model output to generate the final panoptic segmentation.\n     * @param {*} outputs The model output to post process\n     * @param {number} [threshold=0.5] The probability score threshold to keep predicted instance masks.\n     * @param {number} [mask_threshold=0.5] Threshold to use when turning the predicted masks into binary values.\n     * @param {number} [overlap_mask_area_threshold=0.8] The overlap mask area threshold to merge or discard small disconnected parts within each binary instance mask.\n     * @param {Set<number>} [label_ids_to_fuse=null] The labels in this state will have all their instances be fused together.\n     * @param {number[][]} [target_sizes=null] The target sizes to resize the masks to.\n     * @returns {Array<{ segmentation: Tensor, segments_info: Array<{id: number, label_id: number, score: number}>}>}\n     */\n    post_process_panoptic_segmentation(\n        outputs,\n        threshold = 0.5,\n        mask_threshold = 0.5,\n        overlap_mask_area_threshold = 0.8,\n        label_ids_to_fuse = null,\n        target_sizes = null,\n    ) {\n        if (label_ids_to_fuse === null) {\n            console.warn(\"`label_ids_to_fuse` unset. No instance will be fused.\")\n            label_ids_to_fuse = new Set();\n        }\n\n        const class_queries_logits = outputs.logits; // [batch_size, num_queries, num_classes+1]\n        const masks_queries_logits = outputs.pred_masks; // [batch_size, num_queries, height, width]\n\n        const mask_probs = masks_queries_logits.sigmoid()  // [batch_size, num_queries, height, width]\n\n        let [batch_size, num_queries, num_labels] = class_queries_logits.dims;\n        num_labels -= 1; // Remove last class (background)\n\n        if (target_sizes !== null && target_sizes.length !== batch_size) {\n            throw Error(\"Make sure that you pass in as many target sizes as the batch dimension of the logits\")\n        }\n\n        let toReturn = [];\n        for (let i = 0; i < batch_size; ++i) {\n            let target_size = target_sizes !== null ? target_sizes[i] : null;\n\n            let class_logits = class_queries_logits[i];\n            let mask_logits = mask_probs[i];\n\n            let [mask_probs_item, pred_scores_item, pred_labels_item] = this.remove_low_and_no_objects(class_logits, mask_logits, threshold, num_labels);\n\n            if (pred_labels_item.length === 0) {\n                // No mask found\n                let [height, width] = target_size ?? mask_logits.dims.slice(-2);\n\n                let segmentation = new Tensor(\n                    'int32',\n                    new Int32Array(height * width).fill(-1),\n                    [height, width]\n                )\n                toReturn.push({\n                    segmentation: segmentation,\n                    segments_info: []\n                });\n                continue;\n            }\n\n\n            // Get segmentation map and segment information of batch item\n            let [segmentation, segments] = this.compute_segments(\n                mask_probs_item,\n                pred_scores_item,\n                pred_labels_item,\n                mask_threshold,\n                overlap_mask_area_threshold,\n                label_ids_to_fuse,\n                target_size,\n            )\n\n            toReturn.push({\n                segmentation: segmentation,\n                segments_info: segments\n            })\n        }\n\n        return toReturn;\n    }\n\n    post_process_instance_segmentation() {\n        // TODO\n        throw Error(\"Not implemented yet\");\n    }\n}\n\nexport class YolosFeatureExtractor extends ImageFeatureExtractor {\n    /** @type {post_process_object_detection} */\n    post_process_object_detection(...args) {\n        return post_process_object_detection(...args);\n    }\n}\n\n/**\n * @typedef {object} SamImageProcessorResult\n * @property {Tensor} pixel_values\n * @property {HeightWidth[]} original_sizes\n * @property {HeightWidth[]} reshaped_input_sizes\n * @property {Tensor} [input_points]\n * @property {Tensor} [input_labels]\n * @property {Tensor} [input_boxes]\n */\n\nexport class SamImageProcessor extends ImageFeatureExtractor {\n\n    /**\n     * \n     * @param {any} input_points \n     * @param {HeightWidth[]} original_sizes \n     * @param {HeightWidth[]} reshaped_input_sizes \n     * @returns {Tensor}\n     */\n    reshape_input_points(input_points, original_sizes, reshaped_input_sizes, is_bounding_box = false) {\n\n        // Make deep copy to avoid altering user's input\n        input_points = structuredClone(input_points);\n        let shape = calculateDimensions(input_points);\n\n        // TODO: add support for 2D input_points\n        if (shape.length === 3) {\n            // Correct user's input\n            if (!is_bounding_box) {\n                shape = [1, ...shape];\n            }\n            input_points = [input_points];\n        } else if (shape.length !== 4) {\n            throw Error(\"The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.\")\n        }\n\n        // Reshape input points\n        for (let i = 0; i < input_points.length; ++i) { // batch_size\n            let originalImageSize = original_sizes[i];\n            let reshapedImageSize = reshaped_input_sizes[i];\n\n            let resizeFactors = [\n                reshapedImageSize[0] / originalImageSize[0],\n                reshapedImageSize[1] / originalImageSize[1]\n            ]\n\n            for (let j = 0; j < input_points[i].length; ++j) { // point_batch_size\n                for (let k = 0; k < input_points[i][j].length; ++k) { // nb_points_per_image\n                    for (let w = 0; w < input_points[i][j][k].length; ++w) { // 2 or 4\n                        input_points[i][j][k][w] *= resizeFactors[w % 2];\n                    }\n                }\n            }\n        }\n\n        return new Tensor(\n            'float32',\n            Float32Array.from(input_points.flat(Infinity)),\n            shape\n        )\n\n    }\n\n    /**\n     * \n     * @param {any} input_labels \n     * @param {Tensor} input_points \n     * @returns {Tensor}\n     */\n    add_input_labels(input_labels, input_points) {\n        let shape = calculateDimensions(input_labels);\n        if (shape.length === 2) {\n            // Correct user's input\n            shape = [1, ...shape];\n            input_labels = [input_labels];\n        } else if (shape.length !== 3) {\n            throw Error(\"The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.\")\n        }\n\n        if (shape.some((x, i) => x !== input_points.dims[i])) {\n            throw Error(`The first ${shape.length} dimensions of 'input_points' and 'input_labels' must be the same.`)\n        }\n        return new Tensor(\n            'int64',\n            input_labels.flat(Infinity).map(BigInt),\n            shape,\n        )\n    }\n    /**\n     * @param {any[]} images The URL(s) of the image(s) to extract features from.\n     * @param {Object} [options] Additional options for the processor.\n     * @param {any} [options.input_points=null] A 3D or 4D array, representing the input points provided by the user.\n     * - 3D: `[point_batch_size, nb_points_per_image, 2]`. In this case, `batch_size` is assumed to be 1.\n     * - 4D: `[batch_size, point_batch_size, nb_points_per_image, 2]`.\n     * @param {any} [options.input_labels=null] A 2D or 3D array, representing the input labels for the points, used by the prompt encoder to encode the prompt.\n     * - 2D: `[point_batch_size, nb_points_per_image]`. In this case, `batch_size` is assumed to be 1.\n     * - 3D: `[batch_size, point_batch_size, nb_points_per_image]`.\n     * @param {number[][][]} [options.input_boxes=null] A 3D array of shape `(batch_size, num_boxes, 4)`, representing the input boxes provided by the user.\n     * This is used by the prompt encoder to encode the prompt. Generally yields to much better generated masks.\n     * The processor will generate a tensor, with each dimension corresponding respectively to the image batch size,\n     * the number of boxes per image and the coordinates of the top left and botton right point of the box.\n     * In the order (`x1`, `y1`, `x2`, `y2`):\n     * - `x1`: the x coordinate of the top left point of the input box\n     * - `y1`: the y coordinate of the top left point of the input box\n     * - `x2`: the x coordinate of the bottom right point of the input box\n     * - `y2`: the y coordinate of the bottom right point of the input box\n     * @returns {Promise<SamImageProcessorResult>}\n     */\n    async _call(images, {\n        input_points = null,\n        input_labels = null,\n        input_boxes = null\n    } = {}) {\n        // TODO allow user to use preprocessed images\n        /** @type {SamImageProcessorResult} */\n        const processed = await super._call(images);\n\n        if (input_points) {\n            processed.input_points = this.reshape_input_points(\n                input_points, processed.original_sizes, processed.reshaped_input_sizes\n            );\n        }\n\n        if (input_labels) {\n            if (!processed.input_points) {\n                throw Error(\"`input_points` must be provided if `input_labels` are provided.\")\n            }\n            processed.input_labels = this.add_input_labels(input_labels, processed.input_points);\n        }\n\n        if (input_boxes) {\n            processed.input_boxes = this.reshape_input_points(\n                input_boxes, processed.original_sizes, processed.reshaped_input_sizes, true,\n            );\n        }\n\n        return processed;\n    }\n\n    /**\n     * Remove padding and upscale masks to the original image size.\n     * @param {Tensor} masks Batched masks from the mask_decoder in (batch_size, num_channels, height, width) format.\n     * @param {[number, number][]} original_sizes The original sizes of each image before it was resized to the model's expected input shape, in (height, width) format.\n     * @param {[number, number][]} reshaped_input_sizes The size of each image as it is fed to the model, in (height, width) format. Used to remove padding.\n     * @param {Object} options Optional parameters for post-processing.\n     * @param {number} [options.mask_threshold] The threshold to use for binarizing the masks.\n     * @param {boolean} [options.binarize] Whether to binarize the masks.\n     * @param {Object} [options.pad_size] The target size the images were padded to before being passed to the model. If `null`, the target size is assumed to be the processor's `pad_size`.\n     * @param {number} [options.pad_size.height] The height the images were padded to.\n     * @param {number} [options.pad_size.width] The width the images were padded to.\n     * @returns {Promise<Tensor[]>} Batched masks in batch_size, num_channels, height, width) format, where (height, width) is given by original_size.\n     */\n    async post_process_masks(masks, original_sizes, reshaped_input_sizes, {\n        mask_threshold = 0.0,\n        binarize = true,\n        pad_size = null,\n    } = {}) {\n        // masks: [1, 1, 3, 256, 256]\n\n        const output_masks = [];\n\n        pad_size = pad_size ?? this.pad_size;\n\n        /** @type {[number, number]} */\n        const target_image_size = [pad_size.height, pad_size.width];\n\n        for (let i = 0; i < original_sizes.length; ++i) {\n            const original_size = original_sizes[i];\n            const reshaped_input_size = reshaped_input_sizes[i];\n\n            // Upscale mask to padded size\n            let interpolated_mask = (await interpolate_4d(\n                masks[i],\n                { mode: 'bilinear', size: target_image_size }\n            ));\n\n            // Crop mask\n            interpolated_mask = interpolated_mask.slice(null, null, [0, reshaped_input_size[0]], [0, reshaped_input_size[1]]);\n\n            // Downscale mask\n            interpolated_mask = (await interpolate_4d(\n                interpolated_mask,\n                { mode: 'bilinear', size: original_size }\n            ));\n\n            if (binarize) {\n                const data = interpolated_mask.data;\n                const binarizedMaskData = new Uint8Array(data.length);\n                for (let i = 0; i < data.length; ++i) {\n                    if (data[i] > mask_threshold) {\n                        binarizedMaskData[i] = 1;\n                    }\n                }\n                interpolated_mask = new Tensor(\n                    'bool',\n                    binarizedMaskData,\n                    interpolated_mask.dims\n                )\n            }\n\n            output_masks.push(interpolated_mask);\n        }\n\n        return output_masks;\n    }\n\n    /**\n     * Generates a list of crop boxes of different sizes. Each layer has (2**i)**2 boxes for the ith layer.\n     * @param {RawImage} image Input original image\n     * @param {number} target_size Target size of the resized image\n     * @param {Object} options Options for generating crop boxes \n     * @param {number} [options.crop_n_layers] If >0, mask prediction will be run again on crops of the image.\n     * Sets the number of layers to run, where each layer has 2**i_layer number of image crops.\n     * @param {number} [options.overlap_ratio] Sets the degree to which crops overlap. In the first crop layer,\n     * crops will overlap by this fraction of the image length. Later layers with more crops scale down this overlap.\n     * @param {number} [options.points_per_crop] Number of points to sample from each crop.\n     * @param {number} [options.crop_n_points_downscale_factor] The number of points-per-side sampled in layer n is\n     * scaled down by crop_n_points_downscale_factor**n.\n     * @returns {Object} An object containing the crop boxes, number of points per crop, cropped images, and input labels.\n     */\n    generate_crop_boxes(image, target_size, {\n        crop_n_layers = 0,\n        overlap_ratio = 512 / 1500,\n        points_per_crop = 32,\n        crop_n_points_downscale_factor = 1,\n    } = {}) {\n        // TODO: Implement\n        // return { crop_boxes, points_per_crop, cropped_images, input_labels }\n    }\n}\n\nexport class Swin2SRImageProcessor extends ImageFeatureExtractor {\n    pad_image(pixelData, imgDims, padSize, options = {}) {\n        // NOTE: In this case, `padSize` represents the size of the sliding window for the local attention.\n        // In other words, the image is padded so that its width and height are multiples of `padSize`.\n        const [imageHeight, imageWidth, imageChannels] = imgDims;\n\n        return super.pad_image(pixelData, imgDims, {\n            // NOTE: For Swin2SR models, the original python implementation adds padding even when the image's width/height is already\n            // a multiple of `pad_size`. However, this is most likely a bug (PR: https://github.com/mv-lab/swin2sr/pull/19).\n            // For this reason, we only add padding when the image's width/height is not a multiple of `pad_size`.\n            width: imageWidth + (padSize - imageWidth % padSize) % padSize,\n            height: imageHeight + (padSize - imageHeight % padSize) % padSize,\n        }, {\n            mode: 'symmetric',\n            center: false,\n            constant_values: -1,\n            ...options,\n        })\n    }\n}\n\nexport class VitMatteImageProcessor extends ImageFeatureExtractor {\n    /**\n     * Calls the feature extraction process on an array of images, preprocesses\n     * each image, and concatenates the resulting features into a single Tensor.\n     * @param {RawImage[]} images The image(s) to extract features from.\n     * @param {RawImage[]} trimaps The trimaps(s) to extract features from.\n     * @returns {Promise<ImageFeatureExtractorResult>} An object containing the concatenated pixel values of the preprocessed images.\n     */\n    async _call(images, trimaps) {\n        if (!Array.isArray(images)) {\n            images = [images];\n        }\n        if (!Array.isArray(trimaps)) {\n            trimaps = [trimaps];\n        }\n\n        const imageData = await Promise.all(images.map(x => this.preprocess(x)));\n        const trimapData = await Promise.all(trimaps.map(x => this.preprocess(x, {\n            do_normalize: false,\n            do_convert_rgb: false,\n            do_convert_grayscale: true,\n        })));\n\n\n        // Stack pixel values\n        const pixel_values = stack(imageData.map(\n            // Concatenate images and trimaps\n            (x, i) => cat([x.pixel_values, trimapData[i].pixel_values], 0)\n        ), 0);\n\n        return {\n            pixel_values,\n\n            // Original sizes of images\n            original_sizes: imageData.map(x => x.original_size),\n\n            // Reshaped sizes of images, before padding or cropping\n            reshaped_input_sizes: imageData.map(x => x.reshaped_input_size),\n        }\n    }\n}\n\nexport class WhisperFeatureExtractor extends FeatureExtractor {\n\n    constructor(config) {\n        super(config);\n\n        // Prefer given `mel_filters` from preprocessor_config.json, or calculate them if they don't exist.\n        this.config.mel_filters ??= mel_filter_bank(\n            Math.floor(1 + this.config.n_fft / 2), // num_frequency_bins\n            this.config.feature_size, // num_mel_filters\n            0.0, // min_frequency\n            8000.0, // max_frequency\n            this.config.sampling_rate, // sampling_rate\n            \"slaney\", // norm\n            \"slaney\", // mel_scale\n        );\n\n        this.window = window_function(this.config.n_fft, 'hann');\n    }\n\n    /**\n     * Computes the log-Mel spectrogram of the provided audio waveform.\n     * @param {Float32Array|Float64Array} waveform The audio waveform to process.\n     * @returns {Promise<Tensor>} An object containing the log-Mel spectrogram data as a Float32Array and its dimensions as an array of numbers.\n     */\n    async _extract_fbank_features(waveform) {\n        const features = await spectrogram(\n            waveform,\n            this.window, // window\n            this.config.n_fft, // frame_length\n            this.config.hop_length, // hop_length\n            {\n                power: 2.0,\n                mel_filters: this.config.mel_filters,\n                log_mel: 'log10',\n\n                // Custom\n                max_num_frames: this.config.nb_max_frames, // 3000\n            }\n        )\n\n        const data = features.data;\n        const maxValue = max(data)[0];\n\n        for (let i = 0; i < data.length; ++i) {\n            data[i] = (Math.max(data[i], maxValue - 8.0) + 4.0) / 4.0;\n        }\n\n        return features;\n    }\n\n    /**\n     * Asynchronously extracts features from a given audio using the provided configuration.\n     * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.\n     * @returns {Promise<{ input_features: Tensor }>} A Promise resolving to an object containing the extracted input features as a Tensor.\n     */\n    async _call(audio) {\n        validate_audio_inputs(audio, 'WhisperFeatureExtractor');\n\n        let waveform;\n        if (audio.length > this.config.n_samples) {\n            console.warn(\n                \"Attempting to extract features for audio longer than 30 seconds. \" +\n                \"If using a pipeline to extract transcript from a long audio clip, \" +\n                \"remember to specify `chunk_length_s` and/or `stride_length_s`.\"\n            );\n            waveform = audio.slice(0, this.config.n_samples);\n        } else {\n            // pad with zeros\n            waveform = new Float32Array(this.config.n_samples);\n            waveform.set(audio);\n        }\n\n        const features = await this._extract_fbank_features(waveform);\n\n        return {\n            input_features: features.unsqueeze_(0)\n        };\n    }\n}\n\nexport class Wav2Vec2FeatureExtractor extends FeatureExtractor {\n\n    /**\n     * @param {Float32Array} input_values \n     * @returns {Float32Array} \n     */\n    _zero_mean_unit_var_norm(input_values) {\n        // TODO support batch?\n        const sum = input_values.reduce((a, b) => a + b, 0);\n        const mean = sum / input_values.length;\n        const variance = input_values.reduce((a, b) => a + (b - mean) ** 2, 0) / input_values.length;\n        return input_values.map(x => (x - mean) / Math.sqrt(variance + 1e-7));\n    }\n\n    /**\n     * Asynchronously extracts features from a given audio using the provided configuration.\n     * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.\n     * @returns {Promise<{ input_values: Tensor; attention_mask: Tensor }>} A Promise resolving to an object containing the extracted input features and attention mask as Tensors.\n     */\n    async _call(audio) {\n        validate_audio_inputs(audio, 'Wav2Vec2FeatureExtractor');\n\n        if (audio instanceof Float64Array) {\n            audio = new Float32Array(audio);\n        }\n\n        let input_values = audio;\n\n        // zero-mean and unit-variance normalization\n        if (this.config.do_normalize) {\n            input_values = this._zero_mean_unit_var_norm(input_values);\n        }\n\n        // TODO: allow user to pass in attention mask\n        const shape = [1, input_values.length];\n        return {\n            input_values: new Tensor('float32', input_values, shape),\n            attention_mask: new Tensor('int64', new BigInt64Array(input_values.length).fill(1n), shape)\n        };\n    }\n}\n\nexport class SeamlessM4TFeatureExtractor extends FeatureExtractor {\n\n    constructor(config) {\n        super(config);\n\n        const sampling_rate = this.config.sampling_rate;\n        const mel_filters = mel_filter_bank(\n            256, // num_frequency_bins\n            this.config.num_mel_bins, // num_mel_filters\n            20, // min_frequency\n            Math.floor(sampling_rate / 2), // max_frequency\n            sampling_rate, // sampling_rate\n            null, // norm\n            \"kaldi\", // mel_scale\n            true, // triangularize_in_mel_space\n        );\n\n        // Do padding:\n        for (let i = 0; i < mel_filters.length; ++i) {\n            mel_filters[i].push(0);\n        }\n        this.mel_filters = mel_filters;\n\n        this.window = window_function(400, 'povey', {\n            periodic: false,\n        })\n    }\n\n    /**\n     * Computes the log-Mel spectrogram of the provided audio waveform.\n     * @param {Float32Array|Float64Array} waveform The audio waveform to process.\n     * @param {number} max_length The maximum number of frames to return.\n     * @returns {Promise<Tensor>} An object containing the log-Mel spectrogram data as a Float32Array and its dimensions as an array of numbers.\n     */\n    async _extract_fbank_features(waveform, max_length) {\n        // NOTE: We don't pad/truncate since that is passed in as `max_num_frames`\n\n        // Kaldi compliance: 16-bit signed integers\n        // 32768 == 2 ** 15\n        waveform = waveform.map((/** @type {number} */ x) => x * 32768)\n\n        return spectrogram(\n            waveform,\n            this.window, // window\n            400, // frame_length\n            160, // hop_length\n            {\n                fft_length: 512,\n                power: 2.0,\n                center: false,\n                preemphasis: 0.97,\n                mel_filters: this.mel_filters,\n                log_mel: 'log',\n                mel_floor: 1.192092955078125e-07,\n                remove_dc_offset: true,\n\n                // Custom\n                max_num_frames: max_length,\n                transpose: true,\n            }\n        )\n    }\n\n    /**\n     * Asynchronously extracts features from a given audio using the provided configuration.\n     * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.\n     * @param {Object} options Optional parameters for feature extraction.\n     * @param {boolean} [options.padding=true] Whether to pad the sequence to a multiple of `pad_to_multiple_of`.\n     * @param {number} [options.pad_to_multiple_of=2] The number to pad the sequence to a multiple of.\n     * @param {boolean} [options.do_normalize_per_mel_bins=true] Whether or not to zero-mean unit-variance normalize the input per mel-channel.\n     * @param {boolean} [options.return_attention_mask=true] Whether to return the attention mask.\n     * @returns {Promise<{ input_features: Tensor, attention_mask?: Tensor }>} A Promise resolving to an object containing the extracted input features and attention masks as Tensors.\n     */\n    async _call(audio, {\n        padding = true,\n        pad_to_multiple_of = 2,\n        do_normalize_per_mel_bins = true,\n        return_attention_mask = true,\n    } = {}) {\n        validate_audio_inputs(audio, 'SeamlessM4TFeatureExtractor');\n\n        let features = await this._extract_fbank_features(audio, this.config.max_length);\n\n        if (do_normalize_per_mel_bins) {\n            const [num_features, feature_size] = features.dims;\n            const data = features.data;\n            for (let i = 0; i < feature_size; ++i) {\n                let sum = 0;\n                for (let j = 0; j < num_features; ++j) {\n                    sum += data[j * feature_size + i];\n                }\n\n                const mean = sum / num_features;\n\n                let variance = 0;\n                for (let j = 0; j < num_features; ++j) {\n                    variance += (data[j * feature_size + i] - mean) ** 2;\n                }\n                variance /= num_features - 1; // NOTE: We use ddof=1\n\n                const std = Math.sqrt(variance + 1e-7);\n                for (let j = 0; j < num_features; ++j) {\n                    const index = j * feature_size + i;\n                    data[index] = (data[index] - mean) / std;\n                }\n            }\n        }\n\n        let padded_attention_mask;\n        if (padding) {\n            const [num_frames, num_channels] = features.dims;\n            const data = /** @type {Float32Array} */(features.data);\n\n            const pad_size = num_frames % pad_to_multiple_of;\n            if (pad_size > 0) {\n                const padded_data = new Float32Array(num_channels * (num_frames + pad_size));\n                padded_data.set(data)\n                padded_data.fill(this.config.padding_value, data.length)\n\n                const numPaddedFrames = num_frames + pad_size;\n                features = new Tensor(\n                    features.type,\n                    padded_data,\n                    [numPaddedFrames, num_channels],\n                )\n\n                if (return_attention_mask) {\n                    padded_attention_mask = new Tensor(\n                        'int64',\n                        new BigInt64Array(numPaddedFrames),\n                        [1, numPaddedFrames],\n                    )\n                    padded_attention_mask.data.fill(1n, 0, num_frames);\n                }\n            }\n        }\n\n        const [num_frames, num_channels] = features.dims;\n\n        const stride = this.config.stride;\n        const remainder = num_frames % stride;\n        if (remainder !== 0) {\n            throw new Error(`The number of frames (${num_frames}) must be a multiple of the stride (${stride}).`)\n        }\n\n        const input_features = features.view(\n            1,\n            Math.floor(num_frames / stride),\n            num_channels * stride,\n        );\n\n        const result = { input_features }\n\n        if (return_attention_mask) {\n            const reshapedNumFrames = input_features.dims[1];\n\n            const attention_mask_data = new BigInt64Array(reshapedNumFrames);\n\n            if (padded_attention_mask) {\n                const padded_attention_mask_data = padded_attention_mask.data;\n                for (let i = 1, j = 0; i < num_frames; i += stride, ++j) {\n                    attention_mask_data[j] = padded_attention_mask_data[i];\n                }\n            } else {\n                attention_mask_data.fill(1n);\n            }\n            result.attention_mask = new Tensor(\n                'int64',\n                attention_mask_data,\n                [1, reshapedNumFrames],\n            );\n        }\n\n        return result;\n    }\n}\n\nexport class ASTFeatureExtractor extends FeatureExtractor {\n\n\n    constructor(config) {\n        super(config);\n\n        const sampling_rate = this.config.sampling_rate;\n        const mel_filters = mel_filter_bank(\n            256, // num_frequency_bins\n            this.config.num_mel_bins, // num_mel_filters\n            20, // min_frequency\n            Math.floor(sampling_rate / 2), // max_frequency\n            sampling_rate, // sampling_rate\n            null, // norm\n            \"kaldi\", // mel_scale\n            true, // triangularize_in_mel_space\n        );\n\n        // Do padding:\n        for (let i = 0; i < mel_filters.length; ++i) {\n            mel_filters[i].push(0);\n        }\n        this.mel_filters = mel_filters;\n\n        this.window = window_function(400, 'hann', {\n            periodic: false,\n        })\n\n        this.mean = this.config.mean;\n        this.std = this.config.std;\n    }\n\n    /**\n     * Computes the log-Mel spectrogram of the provided audio waveform.\n     * @param {Float32Array|Float64Array} waveform The audio waveform to process.\n     * @param {number} max_length The maximum number of frames to return.\n     * @returns {Promise<Tensor>} An object containing the log-Mel spectrogram data as a Float32Array and its dimensions as an array of numbers.\n     */\n    async _extract_fbank_features(waveform, max_length) {\n        // NOTE: We don't pad/truncate since that is passed in as `max_num_frames`\n        return spectrogram(\n            waveform,\n            this.window, // window\n            400, // frame_length\n            160, // hop_length\n            {\n                fft_length: 512,\n                power: 2.0,\n                center: false,\n                preemphasis: 0.97,\n                mel_filters: this.mel_filters,\n                log_mel: 'log',\n                mel_floor: 1.192092955078125e-07,\n                remove_dc_offset: true,\n\n                // Custom\n                max_num_frames: max_length,\n                transpose: true,\n            }\n        )\n    }\n\n\n    /**\n     * Asynchronously extracts features from a given audio using the provided configuration.\n     * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.\n     * @returns {Promise<{ input_values: Tensor }>} A Promise resolving to an object containing the extracted input features as a Tensor.\n     */\n    async _call(audio) {\n        validate_audio_inputs(audio, 'ASTFeatureExtractor');\n\n        const features = await this._extract_fbank_features(audio, this.config.max_length);\n        if (this.config.do_normalize) {\n            // Normalize the input audio spectrogram to have mean=0, std=0.5\n            const denom = this.std * 2;\n            const features_data = features.data;\n            for (let i = 0; i < features_data.length; ++i) {\n                features_data[i] = (features_data[i] - this.mean) / denom;\n            }\n        }\n\n        return {\n            input_values: features.unsqueeze_(0)\n        };\n    }\n}\n\nexport class ClapFeatureExtractor extends FeatureExtractor {\n\n    constructor(config) {\n        super(config);\n\n        this.mel_filters = mel_filter_bank(\n            this.config.nb_frequency_bins, // num_frequency_bins\n            this.config.feature_size, // num_mel_filters\n            this.config.frequency_min, // min_frequency\n            this.config.frequency_max, // max_frequency\n            this.config.sampling_rate, // sampling_rate\n            null, // norm\n            \"htk\", // mel_scale\n        );\n\n        this.mel_filters_slaney = mel_filter_bank(\n            this.config.nb_frequency_bins, // num_frequency_bins\n            this.config.feature_size, // num_mel_filters\n            this.config.frequency_min, // min_frequency\n            this.config.frequency_max, // max_frequency\n            this.config.sampling_rate, // sampling_rate\n            \"slaney\", // norm\n            \"slaney\", // mel_scale\n        );\n\n        this.window = window_function(this.config.fft_window_size, 'hann')\n\n    }\n\n\n    /**\n     * Extracts the mel spectrogram and prepares it for the mode based on the `truncation` and `padding` arguments.\n     * \n     * Four different path are possible:\n     *   - `truncation=\"fusion\"` and the length of the waveform is greater than the max length: the mel spectrogram\n     *     will be computed on the entire audio. 3 random crops and a dowsampled version of the full mel spectrogram\n     *     are then stacked together. They will later be used for `feature_fusion`.\n     *   - `truncation=\"rand_trunc\"` and the length of the waveform is smaller than the max length: the audio is\n     *     padded based on `padding`.\n     *   - `truncation=\"fusion\"` and the length of the waveform is smaller than the max length: the audio is padded\n     *     based on `padding`, and is repeated `4` times.\n     *   - `truncation=\"rand_trunc\"` and the length of the waveform is greater than the max length: the mel\n     *     spectrogram will be computed on a random crop of the waveform.\n     * \n     * @param {Float32Array|Float64Array} waveform The input waveform.\n     * @param {number} max_length The maximum length of the waveform.\n     * @param {string} truncation The truncation strategy to use.\n     * @param {string} padding The padding strategy to use.\n     * @returns {Promise<Tensor>} An object containing the mel spectrogram data as a Float32Array, its dimensions as an array of numbers, and a boolean indicating whether the waveform was longer than the max length.\n     * @private\n     */\n    async _get_input_mel(waveform, max_length, truncation, padding) {\n\n        /** @type {Tensor} */\n        let input_mel;\n        let longer = false;\n        const diff = waveform.length - max_length;\n        if (diff > 0) {\n            if (truncation === 'rand_trunc') {\n                longer = true;\n                const idx = Math.floor(Math.random() * (diff + 1));\n                waveform = waveform.subarray(idx, idx + max_length);\n\n                input_mel = await this._extract_fbank_features(waveform, this.mel_filters_slaney, this.config.nb_max_samples);\n            } else {\n                // TODO implement fusion strategy\n                throw new Error(`Truncation strategy \"${truncation}\" not implemented`)\n            }\n        } else {\n            if (diff < 0) {\n                let padded = new Float64Array(max_length); // already padded with zeros\n                padded.set(waveform);\n\n                if (padding === 'repeat') {\n                    for (let i = waveform.length; i < max_length; i += waveform.length) {\n                        padded.set(waveform.subarray(0, Math.min(waveform.length, max_length - i)), i);\n                    }\n                } else if (padding === 'repeatpad') {\n                    for (let i = waveform.length; i < -diff; i += waveform.length) {\n                        padded.set(waveform, i);\n                    }\n                }\n                waveform = padded;\n            }\n\n            if (truncation === 'fusion') {\n                throw new Error(`Truncation strategy \"${truncation}\" not implemented`)\n            }\n\n            input_mel = await this._extract_fbank_features(waveform, this.mel_filters_slaney, this.config.nb_max_samples);\n        }\n\n        return input_mel.unsqueeze_(0);\n    }\n\n    /**\n     * Compute the log-mel spectrogram of the provided `waveform` using the Hann window.\n     * In CLAP, two different filter banks are used depending on the truncation pattern:\n     *  - `self.mel_filters`: they correspond to the default parameters of `torchaudio` which can be obtained from\n     *    calling `torchaudio.transforms.MelSpectrogram().mel_scale.fb`. These filters are used when `truncation`\n     *    is set to `\"fusion\"`.\n     *  - `self.mel_filteres_slaney` : they correspond to the default parameters of `librosa` which used\n     *    `librosa.filters.mel` when computing the mel spectrogram. These filters were only used in the original\n     *    implementation when the truncation mode is not `\"fusion\"`.\n     * \n     * @param {Float32Array|Float64Array} waveform The audio waveform to process.\n     * @param {number[][]} mel_filters The mel filters to use.\n     * @param {number} [max_length=null] The maximum number of frames to return.\n     * @returns {Promise<Tensor>} An object containing the log-Mel spectrogram data as a Float32Array and its dimensions as an array of numbers.\n     */\n    async _extract_fbank_features(waveform, mel_filters, max_length = null) {\n        // NOTE: We don't pad/truncate since that is passed in as `max_num_frames`\n        return spectrogram(\n            waveform,\n            this.window, // window\n            this.config.fft_window_size, // frame_length\n            this.config.hop_length, // hop_length\n            {\n                power: 2.0,\n                mel_filters,\n                log_mel: 'dB',\n\n                // Custom\n                max_num_frames: max_length,\n                do_pad: false,\n                transpose: true,\n            }\n        )\n    }\n\n\n    /**\n     * Asynchronously extracts features from a given audio using the provided configuration.\n     * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.\n     * @returns {Promise<{ input_features: Tensor }>} A Promise resolving to an object containing the extracted input features as a Tensor.\n     */\n    async _call(audio, {\n        max_length = null,\n    } = {}) {\n        validate_audio_inputs(audio, 'ClapFeatureExtractor');\n\n        // convert to mel spectrogram, truncate and pad if needed.\n        const padded_inputs = await this._get_input_mel(\n            audio,\n            max_length ?? this.config.nb_max_samples,\n            this.config.truncation,\n            this.config.padding,\n        );\n\n        return {\n            input_features: padded_inputs.unsqueeze_(0),\n        }\n    }\n}\n\n\nexport class PyAnnoteFeatureExtractor extends FeatureExtractor {\n    /**\n     * Asynchronously extracts features from a given audio using the provided configuration.\n     * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.\n     * @returns {Promise<{ input_values: Tensor; }>} The extracted input features.\n     */\n    async _call(audio) {\n        validate_audio_inputs(audio, 'PyAnnoteFeatureExtractor');\n\n        if (audio instanceof Float64Array) {\n            audio = new Float32Array(audio);\n        }\n\n        const shape = [\n            1,            /* batch_size */\n            1,            /* num_channels */\n            audio.length, /* num_samples */\n        ];\n        return {\n            input_values: new Tensor('float32', audio, shape),\n        };\n    }\n\n    /**\n     * NOTE: Can return fractional values. `Math.ceil` will ensure correct value.\n     * @param {number} samples The number of frames in the audio.\n     * @returns {number} The number of frames in the audio.\n     */\n    samples_to_frames(samples) {\n        return ((samples - this.config.offset) / this.config.step);\n    }\n\n    /**\n     * Post-processes the speaker diarization logits output by the model.\n     * @param {Tensor} logits The speaker diarization logits output by the model.\n     * @param {number} num_samples Number of samples in the input audio.\n     * @returns {Array<Array<{ id: number, start: number, end: number, confidence: number }>>} The post-processed speaker diarization results.\n     */\n    post_process_speaker_diarization(logits, num_samples) {\n        const ratio = (\n            num_samples / this.samples_to_frames(num_samples)\n        ) / this.config.sampling_rate;\n\n        const results = [];\n        for (const scores of logits.tolist()) {\n            const accumulated_segments = [];\n\n            let current_speaker = -1;\n            for (let i = 0; i < scores.length; ++i) {\n                const probabilities = softmax(scores[i]);\n                const [score, id] = max(probabilities);\n                const [start, end] = [i, i + 1];\n\n                if (id !== current_speaker) {\n                    // Speaker has changed\n                    current_speaker = id;\n                    accumulated_segments.push({ id, start, end, score });\n                } else {\n                    // Continue the current segment\n                    accumulated_segments.at(-1).end = end;\n                    accumulated_segments.at(-1).score += score;\n                }\n            }\n\n            results.push(accumulated_segments.map(\n                // Convert frame-space to time-space\n                // and compute the confidence\n                ({ id, start, end, score }) => ({\n                    id,\n                    start: start * ratio,\n                    end: end * ratio,\n                    confidence: score / (end - start),\n                })\n            ));\n        }\n        return results;\n    }\n\n}\n\nexport class WeSpeakerFeatureExtractor extends FeatureExtractor {\n\n    constructor(config) {\n        super(config);\n\n        const sampling_rate = this.config.sampling_rate;\n        const mel_filters = mel_filter_bank(\n            256, // num_frequency_bins\n            this.config.num_mel_bins, // num_mel_filters\n            20, // min_frequency\n            Math.floor(sampling_rate / 2), // max_frequency\n            sampling_rate, // sampling_rate\n            null, // norm\n            \"kaldi\", // mel_scale\n            true, // triangularize_in_mel_space\n        );\n\n        // Do padding:\n        for (let i = 0; i < mel_filters.length; ++i) {\n            mel_filters[i].push(0);\n        }\n        this.mel_filters = mel_filters;\n\n        this.window = window_function(400, 'hamming', {\n            periodic: false,\n        })\n        this.min_num_frames = this.config.min_num_frames;\n    }\n\n    /**\n     * Computes the log-Mel spectrogram of the provided audio waveform.\n     * @param {Float32Array|Float64Array} waveform The audio waveform to process.\n     * @returns {Promise<Tensor>} An object containing the log-Mel spectrogram data as a Float32Array and its dimensions as an array of numbers.\n     */\n    async _extract_fbank_features(waveform) {\n        // Kaldi compliance: 16-bit signed integers\n        // 32768 == 2 ** 15\n        waveform = waveform.map((/** @type {number} */ x) => x * 32768)\n\n        return spectrogram(\n            waveform,\n            this.window, // window\n            400, // frame_length\n            160, // hop_length\n            {\n                fft_length: 512,\n                power: 2.0,\n                center: false,\n                preemphasis: 0.97,\n                mel_filters: this.mel_filters,\n                log_mel: 'log',\n                mel_floor: 1.192092955078125e-07,\n                remove_dc_offset: true,\n\n                // Custom\n                transpose: true,\n                min_num_frames: this.min_num_frames,\n            }\n        )\n    }\n\n\n    /**\n     * Asynchronously extracts features from a given audio using the provided configuration.\n     * @param {Float32Array|Float64Array} audio The audio data as a Float32Array/Float64Array.\n     * @returns {Promise<{ input_features: Tensor }>} A Promise resolving to an object containing the extracted input features as a Tensor.\n     */\n    async _call(audio) {\n        validate_audio_inputs(audio, 'WeSpeakerFeatureExtractor');\n\n        const features = (await this._extract_fbank_features(audio)).unsqueeze_(0);\n\n        if (this.config.fbank_centering_span === null) {\n            // center features with global average\n            const meanData = /** @type {Float32Array} */ (features.mean(1).data);\n            const featuresData = /** @type {Float32Array} */(features.data);\n            const [batch_size, num_frames, feature_size] = features.dims;\n\n            for (let i = 0; i < batch_size; ++i) {\n                const offset1 = i * num_frames * feature_size;\n                const offset2 = i * feature_size;\n                for (let j = 0; j < num_frames; ++j) {\n                    const offset3 = offset1 + j * feature_size;\n                    for (let k = 0; k < feature_size; ++k) {\n                        featuresData[offset3 + k] -= meanData[offset2 + k];\n                    }\n                }\n            }\n        }\n\n        return {\n            input_features: features\n        };\n    }\n}\n\nexport class SpeechT5FeatureExtractor extends FeatureExtractor { }\n\n/**\n * Represents a Processor that extracts features from an input.\n * @extends Callable\n */\nexport class Processor extends Callable {\n    /**\n     * Creates a new Processor with the given feature extractor.\n     * @param {FeatureExtractor} feature_extractor The function used to extract features from the input.\n     */\n    constructor(feature_extractor) {\n        super();\n        this.feature_extractor = feature_extractor;\n        // TODO use tokenizer here?\n    }\n\n    /**\n     * Calls the feature_extractor function with the given input.\n     * @param {any} input The input to extract features from.\n     * @param {...any} args Additional arguments.\n     * @returns {Promise<any>} A Promise that resolves with the extracted features.\n     */\n    async _call(input, ...args) {\n        return await this.feature_extractor(input, ...args);\n    }\n}\n\nexport class SamProcessor extends Processor {\n    /**\n     * @borrows SamImageProcessor#_call as _call\n     */\n    async _call(...args) {\n        return await this.feature_extractor(...args);\n    }\n\n    /**\n     * @borrows SamImageProcessor#post_process_masks as post_process_masks\n     */\n    post_process_masks(...args) {\n        // @ts-ignore\n        return this.feature_extractor.post_process_masks(...args);\n    }\n    /**\n     * @borrows SamImageProcessor#reshape_input_points as reshape_input_points\n     */\n    reshape_input_points(...args) {\n        // @ts-ignore\n        return this.feature_extractor.reshape_input_points(...args);\n    }\n}\n\n/**\n * Represents a WhisperProcessor that extracts features from an audio input.\n * @extends Processor\n */\nexport class WhisperProcessor extends Processor {\n    /**\n     * Calls the feature_extractor function with the given audio input.\n     * @param {any} audio The audio input to extract features from.\n     * @returns {Promise<any>} A Promise that resolves with the extracted features.\n     */\n    async _call(audio) {\n        return await this.feature_extractor(audio)\n    }\n}\n\n\nexport class Wav2Vec2ProcessorWithLM extends Processor {\n    /**\n     * Calls the feature_extractor function with the given audio input.\n     * @param {any} audio The audio input to extract features from.\n     * @returns {Promise<any>} A Promise that resolves with the extracted features.\n     */\n    async _call(audio) {\n        return await this.feature_extractor(audio)\n    }\n}\n\nexport class PyAnnoteProcessor extends Processor {\n    /**\n     * Calls the feature_extractor function with the given audio input.\n     * @param {any} audio The audio input to extract features from.\n     * @returns {Promise<any>} A Promise that resolves with the extracted features.\n     */\n    async _call(audio) {\n        return await this.feature_extractor(audio)\n    }\n\n    post_process_speaker_diarization(...args) {\n        // @ts-ignore\n        return this.feature_extractor.post_process_speaker_diarization(...args);\n    }\n\n}\n\nexport class SpeechT5Processor extends Processor {\n    /**\n     * Calls the feature_extractor function with the given input.\n     * @param {any} input The input to extract features from.\n     * @returns {Promise<any>} A Promise that resolves with the extracted features.\n     */\n    async _call(input) {\n        return await this.feature_extractor(input)\n    }\n}\n\nexport class OwlViTProcessor extends Processor { }\n\nexport class Florence2Processor extends Processor {\n    constructor(feature_extractor) {\n        super(feature_extractor);\n\n        const {\n            tasks_answer_post_processing_type,\n            task_prompts_without_inputs,\n            task_prompts_with_input,\n        } = feature_extractor.config;\n\n        /** @type {Map<string, string>} */\n        this.tasks_answer_post_processing_type = new Map(Object.entries(tasks_answer_post_processing_type ?? {}));\n\n        /** @type {Map<string, string>} */\n        this.task_prompts_without_inputs = new Map(Object.entries(task_prompts_without_inputs ?? {}));\n\n        /** @type {Map<string, string>} */\n        this.task_prompts_with_input = new Map(Object.entries(task_prompts_with_input ?? {}));\n\n        this.regexes = {\n            quad_boxes: /(.+?)<loc_(\\d+)><loc_(\\d+)><loc_(\\d+)><loc_(\\d+)><loc_(\\d+)><loc_(\\d+)><loc_(\\d+)><loc_(\\d+)>/gm,\n            bboxes: /([^<]+)?<loc_(\\d+)><loc_(\\d+)><loc_(\\d+)><loc_(\\d+)>/gm,\n        }\n        this.size_per_bin = 1000;\n    }\n\n    /**\n     * Helper function to construct prompts from input texts\n     * @param {string|string[]} text\n     * @returns {string[]}\n     */\n    construct_prompts(text) {\n        if (typeof text === 'string') {\n            text = [text];\n        }\n\n        const prompts = [];\n        for (const t of text) {\n            // 1. fixed task prompts without additional inputs\n            if (this.task_prompts_without_inputs.has(t)) {\n                prompts.push(this.task_prompts_without_inputs.get(t));\n            }\n            // 2. task prompts with additional inputs \n            else {\n                for (const [task, prompt] of this.task_prompts_with_input) {\n                    if (t.includes(task)) {\n                        prompts.push(prompt.replaceAll('{input}', t).replaceAll(task, ''));\n                        break;\n                    }\n                }\n\n                // 3. default prompt\n                if (prompts.length !== text.length) {\n                    prompts.push(t);\n                }\n            }\n        }\n        return prompts;\n    }\n\n    /**\n     * Post-process the output of the model to each of the task outputs.\n     * @param {string} text The text to post-process.\n     * @param {string} task The task to post-process the text for.\n     * @param {[number, number]} image_size The size of the image. height x width.\n     */\n    post_process_generation(text, task, image_size) {\n        const task_answer_post_processing_type = this.tasks_answer_post_processing_type.get(task) ?? 'pure_text';\n\n        // remove the special tokens\n        text = text.replaceAll('<s>', '').replaceAll('</s>', '');\n\n        let final_answer;\n        switch (task_answer_post_processing_type) {\n            case 'pure_text':\n                final_answer = text;\n                break;\n\n            case 'description_with_bboxes':\n            case 'bboxes':\n            case 'phrase_grounding':\n            case 'ocr':\n                const key = task_answer_post_processing_type === 'ocr' ? 'quad_boxes' : 'bboxes';\n                const matches = text.matchAll(this.regexes[key]);\n                const labels = [];\n                const items = [];\n                for (const [_, label, ...locations] of matches) {\n                    // Push new label, or duplicate the last label\n                    labels.push(label ? label.trim() : labels.at(-1) ?? '');\n                    items.push(locations.map((x, i) =>\n                        // NOTE: Add 0.5 to use the center position of the bin as the coordinate.\n                        (Number(x) + 0.5) / this.size_per_bin * image_size[i % 2])\n                    );\n                }\n                final_answer = { labels, [key]: items };\n                break;\n\n            default:\n                throw new Error(`Task \"${task}\" (of type \"${task_answer_post_processing_type}\") not yet implemented.`);\n        }\n\n        return { [task]: final_answer }\n    }\n}\n\n//////////////////////////////////////////////////\n/**\n * Helper class which is used to instantiate pretrained processors with the `from_pretrained` function.\n * The chosen processor class is determined by the type specified in the processor config.\n * \n * **Example:** Load a processor using `from_pretrained`.\n * ```javascript\n * let processor = await AutoProcessor.from_pretrained('openai/whisper-tiny.en');\n * ```\n * \n * **Example:** Run an image through a processor.\n * ```javascript\n * let processor = await AutoProcessor.from_pretrained('Xenova/clip-vit-base-patch16');\n * let image = await RawImage.read('https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/football-match.jpg');\n * let image_inputs = await processor(image);\n * // {\n * //   \"pixel_values\": {\n * //     \"dims\": [ 1, 3, 224, 224 ],\n * //     \"type\": \"float32\",\n * //     \"data\": Float32Array [ -1.558687686920166, -1.558687686920166, -1.5440893173217773, ... ],\n * //     \"size\": 150528\n * //   },\n * //   \"original_sizes\": [\n * //     [ 533, 800 ]\n * //   ],\n * //   \"reshaped_input_sizes\": [\n * //     [ 224, 224 ]\n * //   ]\n * // }\n * ```\n */\nexport class AutoProcessor {\n    static FEATURE_EXTRACTOR_CLASS_MAPPING = {\n        ImageFeatureExtractor,\n        WhisperFeatureExtractor,\n        ViTFeatureExtractor,\n        MobileViTFeatureExtractor,\n        MobileViTImageProcessor,\n        MobileNetV1FeatureExtractor,\n        MobileNetV2FeatureExtractor,\n        MobileNetV3FeatureExtractor,\n        MobileNetV4FeatureExtractor,\n        OwlViTFeatureExtractor,\n        Owlv2ImageProcessor,\n        CLIPFeatureExtractor,\n        CLIPImageProcessor,\n        Florence2Processor,\n        ChineseCLIPFeatureExtractor,\n        SiglipImageProcessor,\n        ConvNextFeatureExtractor,\n        ConvNextImageProcessor,\n        SegformerFeatureExtractor,\n        BitImageProcessor,\n        DPTImageProcessor,\n        DPTFeatureExtractor,\n        GLPNFeatureExtractor,\n        BeitFeatureExtractor,\n        DeiTFeatureExtractor,\n        DetrFeatureExtractor,\n        RTDetrImageProcessor,\n        YolosFeatureExtractor,\n        DonutFeatureExtractor,\n        NougatImageProcessor,\n        EfficientNetImageProcessor,\n\n        ViTImageProcessor,\n        VitMatteImageProcessor,\n        SamImageProcessor,\n        Swin2SRImageProcessor,\n        Wav2Vec2FeatureExtractor,\n        SeamlessM4TFeatureExtractor,\n        SpeechT5FeatureExtractor,\n        ASTFeatureExtractor,\n        ClapFeatureExtractor,\n        PyAnnoteFeatureExtractor,\n        WeSpeakerFeatureExtractor,\n    }\n\n    static PROCESSOR_CLASS_MAPPING = {\n        WhisperProcessor,\n        Wav2Vec2ProcessorWithLM,\n        PyAnnoteProcessor,\n        SamProcessor,\n        SpeechT5Processor,\n        OwlViTProcessor,\n        Florence2Processor,\n    }\n\n    /**\n     * Instantiate one of the processor classes of the library from a pretrained model.\n     * \n     * The processor class to instantiate is selected based on the `feature_extractor_type` property of the config object\n     * (either passed as an argument or loaded from `pretrained_model_name_or_path` if possible)\n     * \n     * @param {string} pretrained_model_name_or_path The name or path of the pretrained model. Can be either:\n     * - A string, the *model id* of a pretrained processor hosted inside a model repo on huggingface.co.\n     *   Valid model ids can be located at the root-level, like `bert-base-uncased`, or namespaced under a\n     *   user or organization name, like `dbmdz/bert-base-german-cased`.\n     * - A path to a *directory* containing processor files, e.g., `./my_model_directory/`.\n     * @param {import('./utils/hub.js').PretrainedOptions} options Additional options for loading the processor.\n     * \n     * @returns {Promise<Processor>} A new instance of the Processor class.\n     */\n    static async from_pretrained(pretrained_model_name_or_path, {\n        progress_callback = null,\n        config = null,\n        cache_dir = null,\n        local_files_only = false,\n        revision = 'main',\n    } = {}) {\n\n        let preprocessorConfig = config ?? await getModelJSON(pretrained_model_name_or_path, 'preprocessor_config.json', true, {\n            progress_callback,\n            config,\n            cache_dir,\n            local_files_only,\n            revision,\n        })\n\n        // Determine feature extractor class\n        // TODO: Ensure backwards compatibility with old configs\n        let key = preprocessorConfig.feature_extractor_type ?? preprocessorConfig.image_processor_type;\n        let feature_extractor_class = this.FEATURE_EXTRACTOR_CLASS_MAPPING[key];\n\n        if (!feature_extractor_class) {\n            if (preprocessorConfig.size !== undefined) {\n                // Assume ImageFeatureExtractor\n                console.warn(`Feature extractor type \"${key}\" not found, assuming ImageFeatureExtractor due to size parameter in config.`);\n                feature_extractor_class = ImageFeatureExtractor;\n            } else {\n                throw new Error(`Unknown Feature Extractor type: ${key}`);\n            }\n        }\n\n        // If no associated processor class, use default\n        let processor_class = this.PROCESSOR_CLASS_MAPPING[preprocessorConfig.processor_class] ?? Processor;\n\n        // Instantiate processor and feature extractor\n        let feature_extractor = new feature_extractor_class(preprocessorConfig);\n        return new processor_class(feature_extractor);\n    }\n}\n//////////////////////////////////////////////////\n\n","\n/**\n * @file Tokenizers are used to prepare textual inputs for a model.\n * \n * **Example:** Create an `AutoTokenizer` and use it to tokenize a sentence.\n * This will automatically detect the tokenizer type based on the tokenizer class defined in `tokenizer.json`.\n * ```javascript\n * import { AutoTokenizer } from '@huggingface/transformers';\n * \n * const tokenizer = await AutoTokenizer.from_pretrained('Xenova/bert-base-uncased');\n * const { input_ids } = await tokenizer('I love transformers!');\n * // Tensor {\n * //   data: BigInt64Array(6) [101n, 1045n, 2293n, 19081n, 999n, 102n],\n * //   dims: [1, 6],\n * //   type: 'int64',\n * //   size: 6,\n * // }\n * ```\n * \n * @module tokenizers\n */\nimport {\n    Callable,\n} from './utils/generic.js';\n\nimport {\n    reverseDictionary,\n    escapeRegExp,\n    isIntegralNumber,\n    mergeArrays,\n} from './utils/core.js';\n\nimport {\n    getModelJSON,\n} from './utils/hub.js';\n\nimport { max, min, round } from './utils/maths.js';\nimport { Tensor } from './utils/tensor.js';\n\nimport {\n    PriorityQueue,\n    TokenLattice,\n    CharTrie,\n} from './utils/data-structures.js';\n\nimport { Template } from '@huggingface/jinja';\n\nimport {\n    WHISPER_LANGUAGE_MAPPING,\n    whisper_language_to_code,\n} from './models/whisper/common_whisper.js';\nimport { GITHUB_ISSUE_URL } from './utils/constants.js';\n\n/**\n * @typedef {Object} TokenizerProperties Additional tokenizer-specific properties.\n * @property {boolean} [legacy=false] Whether or not the `legacy` behavior of the tokenizer should be used.\n * @typedef {import('./utils/hub.js').PretrainedOptions & TokenizerProperties} PretrainedTokenizerOptions\n */\n\n/**\n * Loads a tokenizer from the specified path.\n * @param {string} pretrained_model_name_or_path The path to the tokenizer directory.\n * @param {PretrainedTokenizerOptions} options Additional options for loading the tokenizer.\n * @returns {Promise<any[]>} A promise that resolves with information about the loaded tokenizer.\n */\nasync function loadTokenizer(pretrained_model_name_or_path, options) {\n\n    const info = await Promise.all([\n        getModelJSON(pretrained_model_name_or_path, 'tokenizer.json', true, options),\n        getModelJSON(pretrained_model_name_or_path, 'tokenizer_config.json', true, options),\n    ])\n\n    // Override legacy option if `options.legacy` is not null\n    if (options.legacy !== null) {\n        info[1].legacy = options.legacy;\n    }\n    return info;\n}\n\n\n/**\n * Helper function to split a string on a regex, but keep the delimiters.\n * This is required, because the JavaScript `.split()` method does not keep the delimiters,\n * and wrapping in a capturing group causes issues with existing capturing groups (due to nesting).\n * @param {string} text The text to split.\n * @param {RegExp} regex The regex to split on.\n * @returns {string[]} The split string.\n */\nfunction regexSplit(text, regex) {\n    const result = [];\n    let prev = 0;\n    for (const match of text.matchAll(regex)) {\n        const fullMatch = match[0];\n        if (prev < match.index) {\n            result.push(text.slice(prev, match.index));\n        }\n        if (fullMatch.length > 0) {\n            result.push(fullMatch);\n        }\n        prev = match.index + fullMatch.length;\n    }\n    if (prev < text.length) {\n        result.push(text.slice(prev));\n    }\n    return result;\n}\n\n\n/**\n * Helper method to construct a pattern from a config object.\n * @param {Object} pattern The pattern object.\n * @param {boolean} invert Whether to invert the pattern.\n * @returns {RegExp|null} The compiled pattern.\n */\nfunction createPattern(pattern, invert = true) {\n\n    if (pattern.Regex !== undefined) {\n        // In certain cases, the pattern may contain unnecessary escape sequences (e.g., \\# or \\& or \\~).\n        // i.e., valid in Python (where the patterns are exported from) but invalid in JavaScript (where the patterns are parsed).\n        // This isn't an issue when creating the regex w/o the 'u' flag, but it is when the 'u' flag is used.\n        // For this reason, it is necessary to remove these backslashes before creating the regex.\n        // See https://stackoverflow.com/a/63007777/13989043 for more information\n        let regex = pattern.Regex.replace(/\\\\([#&~])/g, '$1'); // TODO: add more characters to this list if necessary\n\n        // We also handle special cases where the regex contains invalid (non-JS compatible) syntax.\n        for (const [key, value] of PROBLEMATIC_REGEX_MAP) {\n            regex = regex.replaceAll(key, value);\n        }\n\n        return new RegExp(regex, 'gu');\n\n    } else if (pattern.String !== undefined) {\n        const escaped = escapeRegExp(pattern.String);\n        // NOTE: if invert is true, we wrap the pattern in a group so that it is kept when performing .split()\n        return new RegExp(invert ? escaped : `(${escaped})`, 'gu');\n\n    } else {\n        console.warn('Unknown pattern type:', pattern)\n        return null;\n    }\n}\n\n/**\n * Helper function to convert an Object to a Map\n * @param {Object} obj The object to convert.\n * @returns {Map<string, any>} The map.\n */\nfunction objectToMap(obj) {\n    return new Map(Object.entries(obj));\n}\n\n/**\n * Helper function to convert a tensor to a list before decoding.\n * @param {Tensor} tensor The tensor to convert.\n * @returns {number[]} The tensor as a list.\n */\nfunction prepareTensorForDecode(tensor) {\n    const dims = tensor.dims;\n    switch (dims.length) {\n        case 1:\n            return tensor.tolist();\n        case 2:\n            if (dims[0] !== 1) {\n                throw new Error('Unable to decode tensor with `batch size !== 1`. Use `tokenizer.batch_decode(...)` for batched inputs.');\n            }\n            return tensor.tolist()[0];\n        default:\n            throw new Error(`Expected tensor to have 1-2 dimensions, got ${dims.length}.`)\n    }\n}\n\n/**\n * Clean up a list of simple English tokenization artifacts like spaces before punctuations and abbreviated forms\n * @param {string} text The text to clean up.\n * @returns {string} The cleaned up text.\n */\nfunction clean_up_tokenization(text) {\n    // Clean up a list of simple English tokenization artifacts\n    // like spaces before punctuations and abbreviated forms\n    return text.replace(/ \\./g, '.')\n        .replace(/ \\?/g, '?')\n        .replace(/ \\!/g, '!')\n        .replace(/ ,/g, ',')\n        .replace(/ \\' /g, \"'\")\n        .replace(/ n\\'t/g, \"n't\")\n        .replace(/ \\'m/g, \"'m\")\n        .replace(/ \\'s/g, \"'s\")\n        .replace(/ \\'ve/g, \"'ve\")\n        .replace(/ \\'re/g, \"'re\");\n}\n\n/**\n * Helper function to remove accents from a string.\n * @param {string} text The text to remove accents from.\n * @returns {string} The text with accents removed.\n */\nfunction remove_accents(text) {\n    return text.replace(/[\\u0300-\\u036f]/g, '');\n}\n\n/**\n * Helper function to lowercase a string and remove accents.\n * @param {string} text The text to lowercase and remove accents from.\n * @returns {string} The lowercased text with accents removed.\n */\nfunction lowercase_and_remove_accent(text) {\n    return remove_accents(text.toLowerCase());\n}\n\n\n/**\n * Checks whether the given Unicode codepoint represents a CJK (Chinese, Japanese, or Korean) character.\n *\n * A \"chinese character\" is defined as anything in the CJK Unicode block:\n * https://en.wikipedia.org/wiki/CJK_Unified_Ideographs_(Unicode_block)\n *\n * Note that the CJK Unicode block is NOT all Japanese and Korean characters, despite its name.\n * The modern Korean Hangul alphabet is a different block, as is Japanese Hiragana and Katakana.\n * Those alphabets are used to write space-separated words, so they are not treated specially\n * and are handled like all other languages.\n *\n * @param {number|bigint} cp The Unicode codepoint to check.\n * @returns {boolean} True if the codepoint represents a CJK character, false otherwise.\n */\nexport function is_chinese_char(cp) {\n    return (\n        (cp >= 0x4E00 && cp <= 0x9FFF)\n        || (cp >= 0x3400 && cp <= 0x4DBF)\n        || (cp >= 0x20000 && cp <= 0x2A6DF)\n        || (cp >= 0x2A700 && cp <= 0x2B73F)\n        || (cp >= 0x2B740 && cp <= 0x2B81F)\n        || (cp >= 0x2B820 && cp <= 0x2CEAF)\n        || (cp >= 0xF900 && cp <= 0xFAFF)\n        || (cp >= 0x2F800 && cp <= 0x2FA1F)\n    )\n}\n\n/**\n * Helper function to fuse consecutive values in an array equal to the specified value.\n * @param {string[]} arr The input array\n * @param {any} value The value to fuse on.\n * @param {Map<string, any>} mapping The mapping from input domain to value.\n */\nfunction fuse(arr, value, mapping) {\n    const fused = [];\n    let i = 0;\n    while (i < arr.length) {\n        fused.push(arr[i])\n        if ((mapping.get(arr[i]) ?? value) !== value) {\n            ++i;\n            continue;\n        }\n\n        while (i < arr.length && (mapping.get(arr[i]) ?? value) === value) {\n            ++i;\n        }\n    }\n\n    return fused;\n}\n\n/**\n * Split a string on whitespace.\n * @param {string} text The text to split.\n * @returns {string[]} The split string.\n */\nfunction whitespace_split(text) {\n    return text.match(/\\S+/g) || [];\n}\n\nconst PUNCTUATION_REGEX = '\\\\p{P}\\\\u0021-\\\\u002F\\\\u003A-\\\\u0040\\\\u005B-\\\\u0060\\\\u007B-\\\\u007E';\nconst PUNCTUATION_ONLY_REGEX = new RegExp(`^[${PUNCTUATION_REGEX}]+$`, 'gu');\n\n// A mapping of regex patterns to their equivalent (but longer) JS-compatible versions.\nconst PROBLEMATIC_REGEX_MAP = new Map([\n    // This uses the case insensitive group modifier, which is not supported in JavaScript.\n    // When parsing the regex, an \"Invalid group\" error is thrown.\n    [\"(?i:'s|'t|'re|'ve|'m|'ll|'d)\", \"(?:'([sS]|[tT]|[rR][eE]|[vV][eE]|[mM]|[lL][lL]|[dD]))\"],\n])\n\n\n/**\n * Represent a token added by the user on top of the existing Model vocabulary.\n * AddedToken can be configured to specify the behavior they should have in various situations like:\n *   - Whether they should only match single words\n *   - Whether to include any whitespace on its left or right\n */\nclass AddedToken {\n    /**\n     * Creates a new instance of AddedToken.\n     * @param {Object} config Added token configuration object.\n     * @param {string} config.content The content of the added token.\n     * @param {number} config.id The id of the added token.\n     * @param {boolean} [config.single_word=false] Whether this token must be a single word or can break words.\n     * @param {boolean} [config.lstrip=false] Whether this token should strip whitespaces on its left.\n     * @param {boolean} [config.rstrip=false] Whether this token should strip whitespaces on its right.\n     * @param {boolean} [config.normalized=false] Whether this token should be normalized.\n     * @param {boolean} [config.special=false] Whether this token is special.\n     */\n    constructor(config) {\n        this.content = config.content;\n        this.id = config.id;\n        this.single_word = config.single_word ?? false;\n        this.lstrip = config.lstrip ?? false;\n        this.rstrip = config.rstrip ?? false;\n        this.special = config.special ?? false;\n        this.normalized = config.normalized ?? null;\n    }\n}\n\n/**\n * Abstract base class for tokenizer models.\n *\n * @extends Callable\n */\nexport class TokenizerModel extends Callable {\n    /**\n     * Creates a new instance of TokenizerModel.\n     * @param {Object} config The configuration object for the TokenizerModel.\n     */\n    constructor(config) {\n        super();\n        this.config = config;\n\n        /** @type {string[]} */\n        this.vocab = [];\n\n        /**\n         * A mapping of tokens to ids.\n         * @type {Map<string, number>}\n         */\n        this.tokens_to_ids = new Map();\n\n        this.unk_token_id = undefined;\n        this.unk_token = undefined;\n        this.end_of_word_suffix = undefined;\n\n        /** @type {boolean} Whether to fuse unknown tokens when encoding. Defaults to false. */\n        this.fuse_unk = this.config.fuse_unk ?? false;\n    }\n\n    /**\n     * Instantiates a new TokenizerModel instance based on the configuration object provided.\n     * @param {Object} config The configuration object for the TokenizerModel.\n     * @param {...*} args Optional arguments to pass to the specific TokenizerModel constructor.\n     * @returns {TokenizerModel} A new instance of a TokenizerModel.\n     * @throws Will throw an error if the TokenizerModel type in the config is not recognized.\n     */\n    static fromConfig(config, ...args) {\n        switch (config.type) {\n            case 'WordPiece':\n                return new WordPieceTokenizer(config);\n            case 'Unigram':\n                // @ts-ignore\n                return new Unigram(config, ...args);\n\n            case 'BPE':\n                return new BPE(config);\n\n            default:\n                if (config.vocab) {\n                    // @ts-ignore\n                    return new LegacyTokenizerModel(config, ...args);\n                }\n                throw new Error(`Unknown TokenizerModel type: ${config.type}`);\n        }\n    }\n\n    /**\n     * Internal function to call the TokenizerModel instance.\n     * @param {string[]} tokens The tokens to encode.\n     * @returns {string[]} The encoded token IDs.\n     */\n    _call(tokens) {\n        let ids = this.encode(tokens);\n        if (this.fuse_unk) {\n            // Fuse unknown tokens\n            ids = fuse(ids, this.unk_token_id, this.tokens_to_ids);\n        }\n        return ids;\n    }\n\n    /**\n     * Encodes a list of tokens into a list of token IDs.\n     * @param {string[]} tokens The tokens to encode.\n     * @returns {string[]} The encoded tokens.\n     * @throws Will throw an error if not implemented in a subclass.\n     */\n    encode(tokens) {\n        throw Error(\"encode should be implemented in subclass.\")\n    }\n\n    /**\n     * Converts a list of tokens into a list of token IDs.\n     * @param {string[]} tokens The tokens to convert.\n     * @returns {number[]} The converted token IDs.\n     */\n    convert_tokens_to_ids(tokens) {\n        return tokens.map(t => this.tokens_to_ids.get(t) ?? this.unk_token_id);\n    }\n\n    /**\n     * Converts a list of token IDs into a list of tokens.\n     * @param {number[]|bigint[]} ids The token IDs to convert.\n     * @returns {string[]} The converted tokens.\n     */\n    convert_ids_to_tokens(ids) {\n        return ids.map(i => this.vocab[i] ?? this.unk_token);\n    }\n}\n\n/**\n * A subclass of TokenizerModel that uses WordPiece encoding to encode tokens.\n * @extends TokenizerModel\n */\nclass WordPieceTokenizer extends TokenizerModel {\n    /**\n     * @param {Object} config The configuration object.\n     * @param {Object} config.vocab A mapping of tokens to ids.\n     * @param {string} config.unk_token The unknown token string.\n     * @param {string} config.continuing_subword_prefix The prefix to use for continuing subwords.\n     * @param {number} [config.max_input_chars_per_word=100] The maximum number of characters per word.\n     */\n    constructor(config) {\n        super(config);\n        /**\n         * A mapping of tokens to ids.\n         * @type {Map<string, number>}\n         */\n        this.tokens_to_ids = objectToMap(config.vocab);\n\n        /**\n         * The id of the unknown token.\n         * @type {number}\n         */\n        this.unk_token_id = this.tokens_to_ids.get(config.unk_token);\n\n        /**\n         * The unknown token string.\n         * @type {string}\n         */\n        this.unk_token = config.unk_token;\n\n        /**\n         * The maximum number of characters allowed per word.\n         * @type {number}\n         */\n        this.max_input_chars_per_word = config.max_input_chars_per_word ?? 100;\n\n        /**\n         * An array of tokens.\n         * @type {string[]}\n         */\n        this.vocab = new Array(this.tokens_to_ids.size);\n        for (const [key, value] of this.tokens_to_ids) {\n            this.vocab[value] = key;\n        }\n    }\n\n    /**\n     * Encodes an array of tokens using WordPiece encoding.\n     * @param {string[]} tokens The tokens to encode.\n     * @returns {string[]} An array of encoded tokens.\n     */\n    encode(tokens) {\n        const outputTokens = [];\n        for (const token of tokens) {\n            const chars = [...token];\n            if (chars.length > this.max_input_chars_per_word) {\n                outputTokens.push(this.unk_token);\n                continue;\n            }\n\n            let isUnknown = false;\n            let start = 0;\n            const subTokens = [];\n\n            while (start < chars.length) {\n                let end = chars.length;\n                let currentSubstring = null;\n                while (start < end) {\n                    let substr = chars.slice(start, end).join('');\n\n                    if (start > 0) {\n                        substr = this.config.continuing_subword_prefix + substr;\n                    }\n                    if (this.tokens_to_ids.has(substr)) {\n                        currentSubstring = substr;\n                        break;\n                    }\n\n                    --end;\n                }\n                if (currentSubstring === null) {\n                    isUnknown = true;\n                    break;\n                }\n                subTokens.push(currentSubstring);\n                start = end;\n            }\n            if (isUnknown) {\n                outputTokens.push(this.unk_token);\n            } else {\n                outputTokens.push(...subTokens);\n            }\n        }\n\n        return outputTokens;\n    }\n\n}\n\n/**\n * Class representing a Unigram tokenizer model.\n * @extends TokenizerModel\n */\nclass Unigram extends TokenizerModel {\n    /**\n     * Create a new Unigram tokenizer model.\n     * @param {Object} config The configuration object for the Unigram model.\n     * @param {number} config.unk_id The ID of the unknown token\n     * @param {any[][]} config.vocab A 2D array representing a mapping of tokens to scores.\n     * @param {Object} moreConfig Additional configuration object for the Unigram model.\n     */\n    constructor(config, moreConfig) {\n        super(config);\n\n        const vocabSize = config.vocab.length;\n        this.vocab = new Array(vocabSize);\n        this.scores = new Array(vocabSize);\n        for (let i = 0; i < vocabSize; ++i) {\n            const piece = config.vocab[i];\n            this.vocab[i] = piece[0];\n            this.scores[i] = piece[1];\n        }\n\n        this.unk_token_id = config.unk_id;\n        this.unk_token = this.vocab[config.unk_id];\n\n        this.tokens_to_ids = new Map(this.vocab.map((x, i) => [x, i]));\n        this.bosToken = ' '; // beginning of a sentence token\n\n        this.bosTokenId = this.tokens_to_ids.get(this.bosToken); // NOTE: may be undefined\n        this.eosToken = moreConfig.eos_token;\n\n        this.eosTokenId = this.tokens_to_ids.get(this.eosToken);\n        this.unkToken = this.vocab[this.unk_token_id];\n\n        this.minScore = min(this.scores)[0];\n\n        this.unkScore = this.minScore - 10.0;\n        this.scores[this.unk_token_id] = this.unkScore;\n\n        this.trie = new CharTrie();\n        this.trie.extend(this.vocab);\n\n        // NOTE: `fuse_unk` is hardcoded to true for Unigram models\n        // See: https://github.com/huggingface/tokenizers/blob/b58227c7f1ccf8b73ee2268354336da56d91e492/tokenizers/src/models/unigram/model.rs#L119\n        this.fuse_unk = true;\n    }\n\n    /**\n     * Populates lattice nodes.\n     * @param {TokenLattice} lattice The token lattice to populate with nodes.\n     */\n    populateNodes(lattice) {\n        const sentence = lattice.sentence;\n        const len = sentence.length;\n        let beginPos = 0;\n        while (beginPos < len) {\n            const mblen = 1;\n            let hasSingleNode = false;\n            const tokens = [];\n\n            for (let token of this.trie.commonPrefixSearch(sentence.slice(beginPos))) {\n                tokens.push(token);\n                const tokenId = this.tokens_to_ids.get(token);\n                const tokenScore = this.scores[tokenId];\n                const n = token.length;\n                lattice.insert(beginPos, n, tokenScore, tokenId);\n                if (!hasSingleNode && n === mblen) {\n                    hasSingleNode = true;\n                }\n            }\n            if (!hasSingleNode) {\n                lattice.insert(beginPos, mblen, this.unkScore, this.unk_token_id);\n            }\n            beginPos += mblen;\n        }\n    }\n\n    /**\n     * Encodes an array of tokens into an array of subtokens using the unigram model.\n     *\n     * @param {string} normalized The normalized string.\n     * @returns {string[]} An array of subtokens obtained by encoding the input tokens using the unigram model.\n     */\n    tokenize(normalized) {\n        const lattice = new TokenLattice(normalized, this.bosTokenId, this.eosTokenId);\n        this.populateNodes(lattice);\n        return lattice.tokens();\n    }\n\n    /**\n     * Encodes an array of tokens using Unigram encoding.\n     * @param {string[]} tokens The tokens to encode.\n     * @returns {string[]} An array of encoded tokens.\n     */\n    encode(tokens) {\n        const toReturn = [];\n        for (const token of tokens) {\n            const tokenized = this.tokenize(token);\n            toReturn.push(...tokenized);\n        }\n        return toReturn;\n    }\n\n}\n\n/**\n * Returns list of utf-8 byte and a mapping to unicode strings.\n * Specifically avoids mapping to whitespace/control characters the BPE code barfs on.\n * @returns {Object} Object with utf-8 byte keys and unicode string values.\n */\nconst BYTES_TO_UNICODE = (() => {\n    // Returns list of utf-8 byte and a mapping to unicode strings.\n    // We specifically avoids mapping to whitespace/control characters\n    // the bpe code barfs on.\n\n    const bs = [\n        ...Array.from({ length: \"~\".charCodeAt(0) - \"!\".charCodeAt(0) + 1 }, (_, i) => i + \"!\".charCodeAt(0)),\n        ...Array.from({ length: \"¬\".charCodeAt(0) - \"¡\".charCodeAt(0) + 1 }, (_, i) => i + \"¡\".charCodeAt(0)),\n        ...Array.from({ length: \"ÿ\".charCodeAt(0) - \"®\".charCodeAt(0) + 1 }, (_, i) => i + \"®\".charCodeAt(0)),\n    ];\n    const cs = bs.slice();\n    let n = 0;\n    for (let b = 0; b < 256; ++b) {\n        if (!bs.includes(b)) {\n            bs.push(b);\n            cs.push(256 + n);\n            n += 1;\n        }\n    }\n    const ccs = cs.map(n => String.fromCharCode(n));\n    return Object.fromEntries(bs.map((b, i) => [b, ccs[i]]));\n})();\n\nconst UNICODE_TO_BYTES = reverseDictionary(BYTES_TO_UNICODE);\n\n\n/**\n * @typedef {Object} BPENode\n * @property {string} token The token associated with the node\n * @property {number} bias A positional bias for the node.\n * @property {number} [score] The score of the node.\n * @property {BPENode} [prev] The previous node in the linked list.\n * @property {BPENode} [next] The next node in the linked list.\n */\n\n/**\n * BPE class for encoding text into Byte-Pair-Encoding (BPE) tokens.\n * @extends TokenizerModel\n */\nclass BPE extends TokenizerModel {\n    /**\n     * Create a BPE instance.\n     * @param {Object} config The configuration object for BPE.\n     * @param {Object} config.vocab A mapping of tokens to ids.\n     * @param {string[]} config.merges An array of BPE merges as strings.\n     * @param {string} config.unk_token The unknown token used for out of vocabulary words.\n     * @param {string} config.end_of_word_suffix The suffix to place at the end of each word.\n     * @param {string} [config.continuing_subword_suffix] The suffix to insert between words.\n     * @param {boolean} [config.byte_fallback=false] Whether to use spm byte-fallback trick (defaults to False)\n     * @param {boolean} [config.ignore_merges=false] Whether or not to match tokens with the vocab before using merges.\n     */\n    constructor(config) {\n        super(config);\n\n        this.BPE_SPLIT_TOKEN = ' ';\n\n        /** @type {Map<string, number>} */\n        this.tokens_to_ids = objectToMap(config.vocab);\n\n        this.unk_token_id = this.tokens_to_ids.get(config.unk_token);\n        this.unk_token = config.unk_token;\n\n        this.vocab = new Array(this.tokens_to_ids.size);\n        for (const [key, value] of this.tokens_to_ids) {\n            this.vocab[value] = key;\n        }\n\n        this.bpe_ranks = new Map(config.merges.map((x, i) => [x, i]));\n        this.merges = config.merges.map(x => x.split(this.BPE_SPLIT_TOKEN));\n\n        this.end_of_word_suffix = config.end_of_word_suffix;\n\n        // NOTE: `continuing_subword_suffix` is custom (to support `BlenderbotSmallTokenizer`)\n        this.continuing_subword_suffix = config.continuing_subword_suffix ?? null;\n\n        this.byte_fallback = this.config.byte_fallback ?? false;\n\n        if (this.byte_fallback) {\n            this.text_encoder = new TextEncoder();\n        }\n\n        this.ignore_merges = this.config.ignore_merges ?? false;\n\n        /** @type {Map<string, string[]>} */\n        this.cache = new Map();\n    }\n\n    /**\n     * Apply Byte-Pair-Encoding (BPE) to a given token. Efficient heap-based priority\n     * queue implementation adapted from https://github.com/belladoreai/llama-tokenizer-js.\n     * @param {string} token The token to encode.\n     * @returns {string[]} The BPE encoded tokens.\n     */\n    bpe(token) {\n        if (token.length === 0) {\n            return [];\n        }\n\n        const cached = this.cache.get(token);\n        if (cached !== undefined) {\n            return cached;\n        }\n\n        const word = Array.from(token);\n        if (this.end_of_word_suffix) {\n            word[word.length - 1] += this.end_of_word_suffix;\n        }\n\n        let result = [];\n        if (word.length > 1) {\n            // Create a priority queue to store the nodes that will be merged.\n            // The comparator function compares the scores of the nodes.\n            const queue = new PriorityQueue((a, b) => a.score < b.score);\n\n            // Construct a doubly-linked list of nodes that will be inserted into the priority queue,\n            // starting with the individual characters. We also populate each node with a positional\n            // bias to break ties in the priority queue.\n            let startingNode = {\n                token: word[0],\n                bias: 0,\n                prev: null,\n                next: null,\n            }\n\n            let previousNode = startingNode\n            for (let i = 1; i < word.length; ++i) {\n                const currentNode = {\n                    bias: i / word.length, // Add fractional component to break ties\n                    token: word[i],\n                    prev: previousNode,\n                    next: null,\n                }\n                previousNode.next = currentNode\n                this._add_node(queue, previousNode)\n                previousNode = currentNode\n            }\n\n            while (!queue.isEmpty()) {\n                // Get the next node with the highest priority\n                const node = queue.pop();\n\n                // Check that this merge is still possible\n                if (node.deleted || !node.next || node.next.deleted) continue;\n\n                // Here, we mark the current node (left side of the merge) and the next node (right side of the merge) as deleted.\n                // This is because they will both be replaced by a new node representing the merge result.\n                node.deleted = true;\n                node.next.deleted = true;\n\n                // Next, we fix the node that comes before the current node (i.e., left side of the merge).\n                if (node.prev) {\n\n                    // Make a shallow copy of the previous node\n                    const newPreviousNode = { ...node.prev };\n\n                    // Mark the old previous node as deleted. This avoids erroneous merges later,\n                    // because there may still be references to this node in the priority queue.\n                    node.prev.deleted = true;\n                    node.prev = newPreviousNode;\n\n                    // Update the reference of the previous node, by pointing its previous node to this new previous node.\n                    if (newPreviousNode.prev) {\n                        newPreviousNode.prev.next = newPreviousNode;\n                    } else {\n                        // If the previous of the previous node does not exist, it means that\n                        // `newPreviousNode` must be the new `startingNode`.\n                        startingNode = newPreviousNode;\n                    }\n                }\n\n                // Create a new node which represents the result of the merge.\n                const merged = {\n                    token: node.token + node.next.token,\n                    bias: node.bias,\n                    prev: node.prev,\n                    next: node.next.next,\n                }\n\n                // We now consider where we can add the new merged node to the priority queue:\n                // 1. prev <-> merged\n                if (merged.prev) {\n                    merged.prev.next = merged;\n                    this._add_node(queue, merged.prev);\n                } else {\n                    // If `merged.prev` does not exist, then `merged` must be the new `startingNode`.\n                    startingNode = merged;\n                }\n\n                // 2. merged <-> next\n                if (merged.next) {\n                    merged.next.prev = merged;\n                    this._add_node(queue, merged);\n                }\n            }\n\n            // Traverse the linked list, starting from the `startingNode`, and collect the tokens.\n            for (let currentNode = startingNode; currentNode !== null; currentNode = currentNode.next) {\n                result.push(currentNode.token);\n            }\n        } else {\n            result = word;\n        }\n\n        // Possibly append suffix\n        if (this.continuing_subword_suffix) {\n            // Do not append suffix to the last token\n            for (let i = 0; i < result.length - 1; ++i) {\n                result[i] += this.continuing_subword_suffix;\n            }\n        }\n\n        // Save the result to the cache\n        this.cache.set(token, result);\n\n        return result;\n    }\n\n\n    /**\n     * Helper function to add a node to the priority queue.\n     * @param {PriorityQueue} queue \n     * @param {BPENode} node\n     * @private\n     */\n    _add_node(queue, node) {\n        // `score` is a measure of the merge priority: lower means higher priority\n        // We use the BPE rank as a measure of priority (i.e., the local of the merge in the merges list)\n        // We also add a fractional component to the score to break ties (with the earlier character having higher priority)\n        const rank = this.bpe_ranks.get(node.token + this.BPE_SPLIT_TOKEN + node.next.token);\n        if (rank !== undefined) {\n            node.score = rank + node.bias;\n            queue.push(node);\n        }\n    }\n\n    /**\n     * Encodes the input sequence of tokens using the BPE algorithm and returns the resulting subword tokens.\n     * @param {string[]} tokens The input sequence of tokens to encode.\n     * @returns {string[]} The resulting subword tokens after applying the BPE algorithm to the input sequence of tokens.\n     */\n    encode(tokens) {\n        const outputTokens = [];\n\n        for (const token of tokens) {\n            if (this.ignore_merges && this.tokens_to_ids.has(token)) {\n                outputTokens.push(token);\n                continue;\n            }\n            const bpe_token_list = this.bpe(token);\n\n            for (const t of bpe_token_list) {\n                if (this.tokens_to_ids.has(t)) {\n                    outputTokens.push(t);\n                } else {\n                    if (this.byte_fallback) {\n                        outputTokens.push(\n                            ...Array.from(this.text_encoder.encode(t))\n                                .map(x => `<0x${x.toString(16).toUpperCase().padStart(2, '0')}>`)\n                        );\n                    } else {\n                        outputTokens.push(this.unk_token);\n                    }\n                }\n            }\n        }\n\n        return outputTokens;\n    }\n\n}\n\n/**\n * Legacy tokenizer class for tokenizers with only a vocabulary.\n */\nclass LegacyTokenizerModel extends TokenizerModel {\n    /**\n     * Create a LegacyTokenizerModel instance.\n     * @param {Object} config The configuration object for LegacyTokenizerModel.\n     * @param {Object} config.vocab A (possibly nested) mapping of tokens to ids.\n     * @param {Object} moreConfig Additional configuration object for the LegacyTokenizerModel model.\n     */\n    constructor(config, moreConfig) {\n        super(config);\n\n        /**@type {Map<string, number>} */\n        this.tokens_to_ids = objectToMap(\n            moreConfig.target_lang\n                ? config.vocab[moreConfig.target_lang]\n                : config.vocab\n        );\n\n        this.bos_token = moreConfig.bos_token;\n        this.bos_token_id = this.tokens_to_ids.get(this.bos_token);\n\n        this.eos_token = moreConfig.eos_token;\n        this.eos_token_id = this.tokens_to_ids.get(this.eos_token);\n\n        this.pad_token = moreConfig.pad_token;\n        this.pad_token_id = this.tokens_to_ids.get(this.pad_token);\n\n        this.unk_token = moreConfig.unk_token;\n        this.unk_token_id = this.tokens_to_ids.get(this.unk_token);\n\n        this.vocab = new Array(this.tokens_to_ids.size);\n        for (const [key, value] of this.tokens_to_ids) {\n            this.vocab[value] = key;\n        }\n    }\n\n    encode(tokens) {\n        return tokens;\n    }\n}\n\n\n/**\n * A base class for text normalization.\n * @abstract\n */\nclass Normalizer extends Callable {\n    /**\n     * @param {Object} config The configuration object for the normalizer.\n     */\n    constructor(config) {\n        super();\n        this.config = config;\n    }\n\n    /**\n     * Factory method for creating normalizers from config objects.\n     * @static\n     * @param {Object} config The configuration object for the normalizer.\n     * @returns {Normalizer} A Normalizer object.\n     * @throws {Error} If an unknown Normalizer type is specified in the config.\n     */\n    static fromConfig(config) {\n        if (config === null) return null;\n        switch (config.type) {\n            case 'BertNormalizer':\n                return new BertNormalizer(config);\n            case 'Precompiled':\n                return new Precompiled(config);\n            case 'Sequence':\n                return new NormalizerSequence(config);\n            case 'Replace':\n                return new Replace(config);\n            case 'NFC':\n                return new NFC(config);\n            case 'NFKC':\n                return new NFKC(config);\n            case 'NFKD':\n                return new NFKD(config);\n            case 'Strip':\n                return new StripNormalizer(config);\n            case 'StripAccents':\n                return new StripAccents(config);\n            case 'Lowercase':\n                return new Lowercase(config);\n            case 'Prepend':\n                return new Prepend(config);\n            default:\n                throw new Error(`Unknown Normalizer type: ${config.type}`);\n        }\n    }\n\n    /**\n     * Normalize the input text.\n     * @abstract\n     * @param {string} text The text to normalize.\n     * @returns {string} The normalized text.\n     * @throws {Error} If this method is not implemented in a subclass.\n     */\n    normalize(text) {\n        throw Error(\"normalize should be implemented in subclass.\")\n    }\n\n    /**\n     * Alias for {@link Normalizer#normalize}.\n     * @param {string} text The text to normalize.\n     * @returns {string} The normalized text.\n     */\n    _call(text) {\n        return this.normalize(text);\n    }\n\n}\n\n/**\n * Replace normalizer that replaces occurrences of a pattern with a given string or regular expression.\n * @extends Normalizer\n */\nclass Replace extends Normalizer {\n    /**\n     * Normalize the input text by replacing the pattern with the content.\n     * @param {string} text The input text to be normalized.\n     * @returns {string} The normalized text after replacing the pattern with the content.\n     */\n    normalize(text) {\n        const pattern = createPattern(this.config.pattern);\n        return pattern === null\n            ? text\n            : text.replaceAll(pattern, this.config.content);\n    }\n}\n\n/**\n * A normalizer that applies Unicode normalization form C (NFC) to the input text.\n * @extends Normalizer\n */\nclass NFC extends Normalizer {\n    /**\n     * Normalize the input text by applying Unicode normalization form C (NFC).\n     * @param {string} text The input text to be normalized.\n     * @returns {string} The normalized text.\n     */\n    normalize(text) {\n        text = text.normalize('NFC')\n        return text;\n    }\n}\n\n/**\n * NFKC Normalizer.\n * @extends Normalizer\n */\nclass NFKC extends Normalizer {\n    /**\n     * Normalize text using NFKC normalization.\n     * @param {string} text The text to be normalized.\n     * @returns {string} The normalized text.\n     */\n    normalize(text) {\n        text = text.normalize('NFKC')\n        return text;\n    }\n}\n/**\n * NFKD Normalizer.\n * @extends Normalizer\n */\nclass NFKD extends Normalizer {\n    /**\n     * Normalize text using NFKD normalization.\n     * @param {string} text The text to be normalized.\n     * @returns {string} The normalized text.\n     */\n    normalize(text) {\n        text = text.normalize('NFKD')\n        return text;\n    }\n}\n\n/**\n * A normalizer that strips leading and/or trailing whitespace from the input text.\n */\nclass StripNormalizer extends Normalizer {\n    /**\n     * Strip leading and/or trailing whitespace from the input text.\n     * @param {string} text The input text.\n     * @returns {string} The normalized text.\n     */\n    normalize(text) {\n        if (this.config.strip_left && this.config.strip_right) {\n            // Fast path to avoid an extra trim call\n            text = text.trim();\n        } else {\n            if (this.config.strip_left) {\n                text = text.trimStart();\n            }\n            if (this.config.strip_right) {\n                text = text.trimEnd();\n            }\n        }\n        return text;\n    }\n}\n\n/**\n * StripAccents normalizer removes all accents from the text.\n * @extends Normalizer\n */\nclass StripAccents extends Normalizer {\n    /**\n     * Remove all accents from the text.\n     * @param {string} text The input text.\n     * @returns {string} The normalized text without accents.\n     */\n    normalize(text) {\n        text = remove_accents(text);\n        return text;\n    }\n}\n\n/**\n * A Normalizer that lowercases the input string.\n * @extends Normalizer\n */\nclass Lowercase extends Normalizer {\n    /**\n     * Lowercases the input string.\n     * @param {string} text The text to normalize.\n     * @returns {string} The normalized text.\n     */\n    normalize(text) {\n        text = text.toLowerCase();\n        return text;\n    }\n}\n\n/**\n * A Normalizer that prepends a string to the input string.\n * @extends Normalizer\n */\nclass Prepend extends Normalizer {\n    /**\n     * Prepends the input string.\n     * @param {string} text The text to normalize.\n     * @returns {string} The normalized text.\n     */\n    normalize(text) {\n        text = this.config.prepend + text;\n        return text;\n    }\n}\n\n/**\n * A Normalizer that applies a sequence of Normalizers.\n * @extends Normalizer\n */\nclass NormalizerSequence extends Normalizer {\n    /**\n   * Create a new instance of NormalizerSequence.\n   * @param {Object} config The configuration object.\n   * @param {Object[]} config.normalizers An array of Normalizer configuration objects.\n   */\n    constructor(config) {\n        super(config);\n        this.normalizers = config.normalizers.map(x => Normalizer.fromConfig(x));\n    }\n    /**\n    * Apply a sequence of Normalizers to the input text.\n    * @param {string} text The text to normalize.\n    * @returns {string} The normalized text.\n    */\n    normalize(text) {\n        return this.normalizers.reduce((t, normalizer) => {\n            return normalizer.normalize(t);\n        }, text);\n    }\n}\n\n/**\n * A class representing a normalizer used in BERT tokenization.\n * @extends Normalizer\n */\nclass BertNormalizer extends Normalizer {\n    /**\n     * Adds whitespace around any CJK (Chinese, Japanese, or Korean) character in the input text.\n     *\n     * @param {string} text The input text to tokenize.\n     * @returns {string} The tokenized text with whitespace added around CJK characters.\n     */\n    _tokenize_chinese_chars(text) {\n        /* Adds whitespace around any CJK character. */\n        const output = [];\n        for (let i = 0; i < text.length; ++i) {\n            const char = text[i];\n            const cp = char.charCodeAt(0);\n            if (is_chinese_char(cp)) {\n                output.push(\" \");\n                output.push(char);\n                output.push(\" \");\n            } else {\n                output.push(char);\n            }\n        }\n        return output.join(\"\");\n    }\n\n    /**\n     * Strips accents from the given text.\n     * @param {string} text The text to strip accents from.\n     * @returns {string} The text with accents removed.\n     */\n    stripAccents(text) {\n        return text.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n    }\n\n\n    /**\n     * Checks whether `char` is a control character.\n     * @param {string} char The character to check.\n     * @returns {boolean} Whether `char` is a control character.\n     * @private\n     */\n    _is_control(char) {\n        switch (char) {\n            case '\\t':\n            case '\\n':\n            case '\\r':\n                // These are technically control characters but we count them as whitespace characters.\n                return false;\n\n            default:\n                // Check if unicode category starts with C:\n                // Cc - Control\n                // Cf - Format\n                // Co - Private Use\n                // Cs - Surrogate\n                return /^\\p{Cc}|\\p{Cf}|\\p{Co}|\\p{Cs}$/u.test(char);\n        }\n    }\n\n    /**\n     * Performs invalid character removal and whitespace cleanup on text.\n     * @param {string} text The text to clean.\n     * @returns {string} The cleaned text.\n     * @private\n     */\n    _clean_text(text) {\n        const output = [];\n        for (const char of text) {\n            const cp = char.charCodeAt(0);\n            if (cp === 0 || cp === 0xFFFD || this._is_control(char)) {\n                continue;\n            }\n            if (/^\\s$/.test(char)) { // is whitespace\n                output.push(\" \");\n            } else {\n                output.push(char);\n            }\n        }\n        return output.join(\"\");\n    }\n    /**\n     * Normalizes the given text based on the configuration.\n     * @param {string} text The text to normalize.\n     * @returns {string} The normalized text.\n     */\n    normalize(text) {\n        if (this.config.clean_text) {\n            text = this._clean_text(text);\n        }\n\n        if (this.config.handle_chinese_chars) {\n            text = this._tokenize_chinese_chars(text);\n        }\n\n        if (this.config.lowercase) {\n            text = text.toLowerCase();\n\n            if (this.config.strip_accents !== false) {\n                text = this.stripAccents(text);\n            }\n        } else if (this.config.strip_accents) {\n            text = this.stripAccents(text);\n        }\n\n        return text;\n    }\n}\n\n/**\n * A callable class representing a pre-tokenizer used in tokenization. Subclasses\n * should implement the `pre_tokenize_text` method to define the specific pre-tokenization logic.\n * @extends Callable\n */\nclass PreTokenizer extends Callable {\n    /**\n   * Factory method that returns an instance of a subclass of `PreTokenizer` based on the provided configuration.\n   *\n   * @static\n   * @param {Object} config A configuration object for the pre-tokenizer.\n   * @returns {PreTokenizer} An instance of a subclass of `PreTokenizer`.\n   * @throws {Error} If the provided configuration object does not correspond to any known pre-tokenizer.\n   */\n    static fromConfig(config) {\n        if (config === null) return null;\n\n        switch (config.type) {\n            case 'BertPreTokenizer':\n                return new BertPreTokenizer(config);\n            case 'Sequence':\n                return new PreTokenizerSequence(config);\n            case 'Whitespace':\n                return new WhitespacePreTokenizer(config);\n            case 'WhitespaceSplit':\n                return new WhitespaceSplit(config);\n            case 'Metaspace':\n                return new MetaspacePreTokenizer(config);\n\n            case 'ByteLevel':\n                return new ByteLevelPreTokenizer(config);\n            case 'Split':\n                return new SplitPreTokenizer(config);\n            case 'Punctuation':\n                return new PunctuationPreTokenizer(config);\n            case 'Digits':\n                return new DigitsPreTokenizer(config);\n            case 'Replace':\n                return new ReplacePreTokenizer(config);\n            default:\n                throw new Error(`Unknown PreTokenizer type: ${config.type}`);\n        }\n    }\n\n    /**\n     * Method that should be implemented by subclasses to define the specific pre-tokenization logic.\n     *\n     * @abstract\n     * @param {string} text The text to pre-tokenize.\n     * @param {Object} [options] Additional options for the pre-tokenization logic.\n     * @returns {string[]} The pre-tokenized text.\n     * @throws {Error} If the method is not implemented in the subclass.\n     */\n    pre_tokenize_text(text, options) {\n        throw Error(\"pre_tokenize_text should be implemented in subclass.\")\n    }\n\n    /**\n     * Tokenizes the given text into pre-tokens.\n     * @param {string|string[]} text The text or array of texts to pre-tokenize.\n     * @param {Object} [options] Additional options for the pre-tokenization logic.\n     * @returns {string[]} An array of pre-tokens.\n     */\n    pre_tokenize(text, options) {\n        return (Array.isArray(text)\n            ? text.map(x => this.pre_tokenize_text(x, options))\n            : this.pre_tokenize_text(text, options)\n        ).flat();\n    }\n\n    /**\n     * Alias for {@link PreTokenizer#pre_tokenize}.\n     * @param {string|string[]} text The text or array of texts to pre-tokenize.\n     * @param {Object} [options] Additional options for the pre-tokenization logic.\n     * @returns {string[]} An array of pre-tokens.\n     */\n    _call(text, options) {\n        return this.pre_tokenize(text, options);\n    }\n}\n\n/**\n * @extends PreTokenizer\n */\nclass BertPreTokenizer extends PreTokenizer {\n    /**\n     * A PreTokenizer that splits text into wordpieces using a basic tokenization scheme\n     * similar to that used in the original implementation of BERT.\n     * \n     * @param {Object} config The configuration object.\n     */\n    constructor(config) {\n        super();\n        // Construct a pattern which matches the rust implementation:\n        // https://github.com/huggingface/tokenizers/blob/b4fcc9ce6e4ad5806e82826f816acfdfdc4fcc67/tokenizers/src/pre_tokenizers/bert.rs#L11\n        // Equivalent to removing whitespace and splitting on punctuation (both \\p{P} and other ascii characters)\n        this.pattern = new RegExp(`[^\\\\s${PUNCTUATION_REGEX}]+|[${PUNCTUATION_REGEX}]`, 'gu');\n    }\n    /**\n     * Tokenizes a single text using the BERT pre-tokenization scheme.\n     * \n     * @param {string} text The text to tokenize.\n     * @param {Object} [options] Additional options for the pre-tokenization logic.\n     * @returns {string[]} An array of tokens.\n     */\n    pre_tokenize_text(text, options) {\n        return text.trim().match(this.pattern) || [];\n    }\n}\n\n/**\n * A pre-tokenizer that splits text into Byte-Pair-Encoding (BPE) subwords.\n * @extends PreTokenizer\n */\nclass ByteLevelPreTokenizer extends PreTokenizer {\n    /**\n     * Creates a new instance of the `ByteLevelPreTokenizer` class.\n     * @param {Object} config The configuration object.\n     */\n    constructor(config) {\n        super();\n        this.config = config;\n\n        /**\n         * @type {boolean} Whether to add a leading space to the first word.\n         * This allows to treat the leading word just as any other word.\n         */\n        this.add_prefix_space = this.config.add_prefix_space;\n\n        /**\n         * @type {boolean} Whether the post processing step should trim offsets\n         * to avoid including whitespaces.\n         * @todo Use this in the pretokenization step.\n         */\n        this.trim_offsets = this.config.trim_offsets;\n\n        /**\n         * @type {boolean} Whether to use the standard GPT2 regex for whitespace splitting.\n         * Set it to False if you want to use your own splitting. Defaults to true.\n         */\n        this.use_regex = this.config.use_regex ?? true;\n        this.pattern = /'s|'t|'re|'ve|'m|'ll|'d| ?\\p{L}+| ?\\p{N}+| ?[^\\s\\p{L}\\p{N}]+|\\s+(?!\\S)|\\s+/gu;\n\n        this.byte_encoder = BYTES_TO_UNICODE;\n        this.text_encoder = new TextEncoder();\n    }\n\n    /**\n     * Tokenizes a single piece of text using byte-level tokenization.\n     * @param {string} text The text to tokenize.\n     * @param {Object} [options] Additional options for the pre-tokenization logic.\n     * @returns {string[]} An array of tokens.\n     */\n    pre_tokenize_text(text, options) {\n        // Add a leading space if the option is enabled\n        if (this.add_prefix_space && !text.startsWith(' ')) {\n            text = ' ' + text;\n        }\n\n        // Split on whitespace and punctuation\n        const tokens = this.use_regex ? (text.match(this.pattern) || []) : [text];\n\n        // Maps all our bytes to unicode strings, avoiding control tokens of the BPE (spaces in our case)\n        return tokens.map(\n            token => Array.from(this.text_encoder.encode(token), byte => this.byte_encoder[byte]).join('')\n        );\n    }\n}\n\n/**\n * @typedef {'removed'|'isolated'|'mergedWithPrevious'|'mergedWithNext'|'contiguous'} SplitDelimiterBehavior\n */\n\n/**\n * Splits text using a given pattern.\n * @extends PreTokenizer\n */\nclass SplitPreTokenizer extends PreTokenizer {\n    /**\n     * @param {Object} config The configuration options for the pre-tokenizer.\n     * @param {Object} config.pattern The pattern used to split the text. Can be a string or a regex object.\n     * @param {string|undefined} config.pattern.String The string to use for splitting. Only defined if the pattern is a string.\n     * @param {string|undefined} config.pattern.Regex The regex to use for splitting. Only defined if the pattern is a regex.\n     * @param {SplitDelimiterBehavior} config.behavior The behavior to use when splitting.\n     * @param {boolean} config.invert Whether to split (invert=false) or match (invert=true) the pattern.\n     */\n    constructor(config) {\n        super();\n        this.config = config;\n        // TODO support all behaviours (config.behavior)\n\n        this.pattern = createPattern(this.config.pattern, this.config.invert);\n    }\n\n    /**\n     * Tokenizes text by splitting it using the given pattern.\n     * @param {string} text The text to tokenize.\n     * @param {Object} [options] Additional options for the pre-tokenization logic.\n     * @returns {string[]} An array of tokens.\n     */\n    pre_tokenize_text(text, options) {\n        if (this.pattern === null) {\n            return [];\n        }\n\n        if (this.config.invert) {\n            return text.match(this.pattern) || [];\n        } else {\n            return regexSplit(text, this.pattern);\n        }\n    }\n}\n\n/**\n * Splits text based on punctuation.\n * @extends PreTokenizer\n */\nclass PunctuationPreTokenizer extends PreTokenizer {\n    /**\n     * @param {Object} config The configuration options for the pre-tokenizer.\n     * @param {SplitDelimiterBehavior} config.behavior The behavior to use when splitting.\n     */\n    constructor(config) {\n        super();\n        this.config = config;\n        this.pattern = new RegExp(`[^${PUNCTUATION_REGEX}]+|[${PUNCTUATION_REGEX}]+`, 'gu');\n    }\n\n    /**\n     * Tokenizes text by splitting it using the given pattern.\n     * @param {string} text The text to tokenize.\n     * @param {Object} [options] Additional options for the pre-tokenization logic.\n     * @returns {string[]} An array of tokens.\n     */\n    pre_tokenize_text(text, options) {\n        return text.match(this.pattern) || [];\n    }\n}\n\n\n/**\n * Splits text based on digits.\n * @extends PreTokenizer\n */\nclass DigitsPreTokenizer extends PreTokenizer {\n    /**\n     * @param {Object} config The configuration options for the pre-tokenizer.\n     * @param {boolean} config.individual_digits Whether to split on individual digits.\n     */\n    constructor(config) {\n        super();\n        this.config = config;\n\n        // Construct a pattern which matches the rust implementation:\n        const digit_pattern = `[^\\\\d]+|\\\\d${this.config.individual_digits ? '' : '+'}`;\n        this.pattern = new RegExp(digit_pattern, 'gu');\n    }\n\n    /**\n     * Tokenizes text by splitting it using the given pattern.\n     * @param {string} text The text to tokenize.\n     * @param {Object} [options] Additional options for the pre-tokenization logic.\n     * @returns {string[]} An array of tokens.\n     */\n    pre_tokenize_text(text, options) {\n        return text.match(this.pattern) || [];\n    }\n}\n\n/**\n * @typedef {Object} PostProcessedOutput\n * @property {string[]} tokens List of token produced by the post-processor.\n * @property {number[]} [token_type_ids] List of token type ids produced by the post-processor.\n */\n\n\n/**\n * @typedef {Object} EncodingSingle\n * @property {number[]} input_ids List of token ids to be fed to a model.\n * @property {number[]} attention_mask List of token type ids to be fed to a model\n * @property {number[]} [token_type_ids] List of indices specifying which tokens should be attended to by the model\n */\n\n\n/**\n * @extends Callable\n */\nclass PostProcessor extends Callable {\n\n    /**\n     * @param {Object} config The configuration for the post-processor.\n     */\n    constructor(config) {\n        super();\n        this.config = config;\n    }\n\n    /**\n     * Factory method to create a PostProcessor object from a configuration object.\n     *\n     * @param {Object} config Configuration object representing a PostProcessor.\n     * @returns {PostProcessor} A PostProcessor object created from the given configuration.\n     * @throws {Error} If an unknown PostProcessor type is encountered.\n     */\n    static fromConfig(config) {\n        if (config === null) return null;\n        switch (config.type) {\n            case 'TemplateProcessing':\n                return new TemplateProcessing(config);\n\n            case 'ByteLevel':\n                return new ByteLevelPostProcessor(config);\n\n            case 'RobertaProcessing':\n                return new RobertaProcessing(config);\n            case 'BertProcessing':\n                return new BertProcessing(config);\n\n            case 'Sequence':\n                return new PostProcessorSequence(config);\n            default:\n                throw new Error(`Unknown PostProcessor type: ${config.type}`);\n        }\n    }\n\n    /**\n     * Method to be implemented in subclass to apply post-processing on the given tokens.\n     *\n     * @param {Array} tokens The input tokens to be post-processed.\n     * @param {...*} args Additional arguments required by the post-processing logic.\n     * @returns {PostProcessedOutput} The post-processed tokens.\n     * @throws {Error} If the method is not implemented in subclass.\n     */\n    post_process(tokens, ...args) {\n        throw Error(\"post_process should be implemented in subclass.\")\n    }\n\n    /**\n     * Alias for {@link PostProcessor#post_process}.\n     * @param {Array} tokens The text or array of texts to post-process.\n     * @param {...*} args Additional arguments required by the post-processing logic.\n     * @returns {PostProcessedOutput} The post-processed tokens.\n     */\n    _call(tokens, ...args) {\n        return this.post_process(tokens, ...args);\n    }\n}\n\n/**\n * A post-processor that adds special tokens to the beginning and end of the input.\n */\nclass BertProcessing extends PostProcessor {\n    /**\n     * @param {Object} config The configuration for the post-processor.\n     * @param {string[]} config.cls The special tokens to add to the beginning of the input.\n     * @param {string[]} config.sep The special tokens to add to the end of the input.\n     */\n    constructor(config) {\n        super(config);\n        // TODO use all of config: add_prefix_space, trim_offsets\n\n        this.cls = config.cls[0];\n        this.sep = config.sep[0];\n    }\n\n    /**\n     * Adds the special tokens to the beginning and end of the input.\n     * @param {string[]} tokens The input tokens.\n     * @param {string[]} [tokens_pair=null] An optional second set of input tokens.\n     * @returns {PostProcessedOutput} The post-processed tokens with the special tokens added to the beginning and end.\n     */\n    post_process(tokens, tokens_pair = null, {\n        add_special_tokens = true,\n    } = {}) {\n        if (add_special_tokens) {\n            tokens = mergeArrays([this.cls], tokens, [this.sep]);\n        }\n\n        let token_type_ids = new Array(tokens.length).fill(0);\n        if (tokens_pair !== null) {\n            // NOTE: It is intended to add 2 EOS tokens after the first set of tokens\n            // https://github.com/huggingface/tokenizers/issues/983\n            const middle = (add_special_tokens && this instanceof RobertaProcessing)\n                ? [this.sep]\n                : [];\n            const after = add_special_tokens ? [this.sep] : [];\n\n            tokens = mergeArrays(tokens, middle, tokens_pair, after);\n            token_type_ids = mergeArrays(token_type_ids, new Array(tokens_pair.length + middle.length + after.length).fill(1));\n        }\n        return { tokens, token_type_ids };\n    }\n}\nclass RobertaProcessing extends BertProcessing { } // NOTE: extends BertProcessing\n\n/**\n * Post processor that replaces special tokens in a template with actual tokens.\n * @extends PostProcessor\n */\nclass TemplateProcessing extends PostProcessor {\n    /**\n     * Creates a new instance of `TemplateProcessing`.\n     * @param {Object} config The configuration options for the post processor.\n     * @param {Array} config.single The template for a single sequence of tokens.\n     * @param {Array} config.pair The template for a pair of sequences of tokens.\n     */\n    constructor(config) {\n        super(config);\n\n        this.single = config.single;\n        this.pair = config.pair;\n    }\n\n    /**\n     * Replaces special tokens in the template with actual tokens.\n     * @param {string[]} tokens The list of tokens for the first sequence.\n     * @param {string[]} [tokens_pair=null] The list of tokens for the second sequence (optional).\n     * @returns {PostProcessedOutput} An object containing the list of tokens with the special tokens replaced with actual tokens.\n     */\n    post_process(tokens, tokens_pair = null, {\n        add_special_tokens = true,\n    } = {}) {\n        const type = tokens_pair === null ? this.single : this.pair\n\n        let processedTokens = [];\n        let types = [];\n        for (const item of type) {\n            if ('SpecialToken' in item) {\n                if (add_special_tokens) {\n                    processedTokens.push(item.SpecialToken.id);\n                    types.push(item.SpecialToken.type_id);\n                }\n            } else if ('Sequence' in item) {\n                if (item.Sequence.id === 'A') {\n                    processedTokens = mergeArrays(processedTokens, tokens);\n                    types = mergeArrays(types, new Array(tokens.length).fill(item.Sequence.type_id));\n\n                } else if (item.Sequence.id === 'B') {\n                    processedTokens = mergeArrays(processedTokens, tokens_pair);\n                    types = mergeArrays(types, new Array(tokens_pair.length).fill(item.Sequence.type_id));\n                }\n            }\n        }\n        return { tokens: processedTokens, token_type_ids: types };\n    }\n}\n\n/**\n * A PostProcessor that returns the given tokens as is.\n * @extends PostProcessor\n */\nclass ByteLevelPostProcessor extends PostProcessor {\n    /**\n     * Post process the given tokens.\n     * @param {string[]} tokens The list of tokens for the first sequence.\n     * @param {string[]} [tokens_pair=null] The list of tokens for the second sequence (optional).\n     * @returns {PostProcessedOutput} An object containing the post-processed tokens.\n     */\n    post_process(tokens, tokens_pair = null) {\n        if (tokens_pair) {\n            tokens = mergeArrays(tokens, tokens_pair);\n        }\n        return { tokens };\n    }\n}\n\n\n/**\n * A post-processor that applies multiple post-processors in sequence.\n */\nclass PostProcessorSequence extends PostProcessor {\n\n    /**\n     * Creates a new instance of PostProcessorSequence.\n     * @param {Object} config The configuration object.\n     * @param {Object[]} config.processors The list of post-processors to apply.\n     */\n    constructor(config) {\n        super(config);\n\n        this.processors = config.processors.map(x => PostProcessor.fromConfig(x));\n    }\n\n    /**\n     * Post process the given tokens.\n     * @param {string[]} tokens The list of tokens for the first sequence.\n     * @param {string[]} [tokens_pair=null] The list of tokens for the second sequence (optional).\n     * @returns {PostProcessedOutput} An object containing the post-processed tokens.\n     */\n    post_process(tokens, tokens_pair = null, options = {}) {\n        let token_type_ids;\n        for (const processor of this.processors) {\n            if (processor instanceof ByteLevelPostProcessor) {\n                // Special case where we need to pass the tokens_pair to the post-processor\n                const output = processor.post_process(tokens);\n                tokens = output.tokens;\n                if (tokens_pair) {\n                    const pair_output = processor.post_process(tokens_pair);\n                    tokens_pair = pair_output.tokens;\n                }\n            } else {\n                const output = processor.post_process(tokens, tokens_pair, options);\n                tokens = output.tokens;\n                token_type_ids = output.token_type_ids;\n            }\n        }\n        return { tokens, token_type_ids };\n    }\n}\n\n/**\n * The base class for token decoders.\n * @extends Callable\n */\nclass Decoder extends Callable {\n\n    /**\n    * Creates an instance of `Decoder`.\n    *\n    * @param {Object} config The configuration object.\n    */\n    constructor(config) {\n        super();\n        this.config = config;\n\n        /** @type {AddedToken[]} */\n        this.added_tokens = [];\n        this.end_of_word_suffix = null;\n        this.trim_offsets = config.trim_offsets;\n    }\n\n    /**\n   * Creates a decoder instance based on the provided configuration.\n   *\n   * @param {Object} config The configuration object.\n   * @returns {Decoder} A decoder instance.\n   * @throws {Error} If an unknown decoder type is provided.\n   */\n    static fromConfig(config) {\n        if (config === null) return null;\n        switch (config.type) {\n            case 'WordPiece':\n                return new WordPieceDecoder(config);\n            case 'Metaspace':\n                return new MetaspaceDecoder(config);\n            case 'ByteLevel':\n                return new ByteLevelDecoder(config);\n\n            case 'Replace':\n                return new ReplaceDecoder(config);\n            case 'ByteFallback':\n                return new ByteFallback(config);\n            case 'Fuse':\n                return new FuseDecoder(config);\n            case 'Strip':\n                return new StripDecoder(config);\n\n            case 'Sequence':\n                return new DecoderSequence(config);\n\n            case 'CTC':\n                return new CTCDecoder(config);\n            case 'BPEDecoder':\n                return new BPEDecoder(config);\n            default:\n                throw new Error(`Unknown Decoder type: ${config.type}`);\n        }\n    }\n\n    /**\n    * Calls the `decode` method.\n    *\n    * @param {string[]} tokens The list of tokens.\n    * @returns {string} The decoded string.\n    */\n    _call(tokens) {\n        return this.decode(tokens);\n    }\n\n    /**\n    * Decodes a list of tokens.\n    * @param {string[]} tokens The list of tokens.\n    * @returns {string} The decoded string.\n    */\n    decode(tokens) {\n        return this.decode_chain(tokens).join('');\n    }\n\n    /**\n     * Apply the decoder to a list of tokens.\n     * \n     * @param {string[]} tokens The list of tokens.\n     * @returns {string[]} The decoded list of tokens.\n     * @throws {Error} If the `decode_chain` method is not implemented in the subclass.\n     */\n    decode_chain(tokens) {\n        throw Error(\"`decode_chain` should be implemented in subclass.\")\n    }\n\n}\n\nclass ReplaceDecoder extends Decoder {\n\n    /** @type {Decoder['decode_chain']} */\n    decode_chain(tokens) {\n        const pattern = createPattern(this.config.pattern);\n        return pattern === null\n            ? tokens\n            : tokens.map(token => token.replaceAll(pattern, this.config.content))\n    }\n}\n\n\nclass ByteFallback extends Decoder {\n    constructor(config) {\n        super(config);\n\n        this.text_decoder = new TextDecoder();\n    }\n\n    /** @type {Decoder['decode_chain']} */\n    decode_chain(tokens) {\n\n        const new_tokens = [];\n        let previous_byte_tokens = [];\n\n        for (const token of tokens) {\n            let bytes = null;\n            if (token.length === 6 && token.startsWith('<0x') && token.endsWith('>')) {\n                const byte = parseInt(token.slice(3, 5), 16);\n                if (!isNaN(byte)) {\n                    bytes = byte;\n                }\n            }\n            if (bytes !== null) {\n                previous_byte_tokens.push(bytes);\n            } else {\n                if (previous_byte_tokens.length > 0) {\n                    const string = this.text_decoder.decode(Uint8Array.from(previous_byte_tokens));\n                    new_tokens.push(string);\n                    previous_byte_tokens = [];\n                }\n                new_tokens.push(token);\n            }\n        }\n        if (previous_byte_tokens.length > 0) {\n            const string = this.text_decoder.decode(Uint8Array.from(previous_byte_tokens));\n            new_tokens.push(string);\n            previous_byte_tokens = [];\n        }\n\n        return new_tokens;\n    }\n}\n\n/**\n * Fuse simply fuses all tokens into one big string.\n * It's usually the last decoding step anyway, but this decoder\n * exists incase some decoders need to happen after that step\n */\nclass FuseDecoder extends Decoder {\n\n    /** @type {Decoder['decode_chain']} */\n    decode_chain(tokens) {\n        return [tokens.join('')];\n    }\n}\n\n\nclass StripDecoder extends Decoder {\n    constructor(config) {\n        super(config);\n\n        this.content = this.config.content;\n        this.start = this.config.start;\n        this.stop = this.config.stop;\n    }\n\n    /** @type {Decoder['decode_chain']} */\n    decode_chain(tokens) {\n        return tokens.map(token => {\n            let start_cut = 0;\n            for (let i = 0; i < this.start; ++i) {\n                if (token[i] === this.content) {\n                    start_cut = i + 1;\n                    continue;\n                } else {\n                    break;\n                }\n            }\n\n            let stop_cut = token.length;\n            for (let i = 0; i < this.stop; ++i) {\n                const index = token.length - i - 1;\n                if (token[index] === this.content) {\n                    stop_cut = index;\n                    continue;\n                } else {\n                    break;\n                }\n            }\n\n            return token.slice(start_cut, stop_cut)\n        });\n    }\n}\n\n/**\n * A decoder that decodes a list of WordPiece tokens into a single string.\n * @extends Decoder\n */\nclass WordPieceDecoder extends Decoder {\n\n    /**\n     * Creates a new instance of WordPieceDecoder.\n     * @param {Object} config The configuration object.\n     * @param {string} config.prefix The prefix used for WordPiece encoding.\n     * @param {boolean} config.cleanup Whether to cleanup the decoded string.\n     */\n    constructor(config) {\n        super(config);\n        this.cleanup = config.cleanup;\n    }\n\n    /** @type {Decoder['decode_chain']} */\n    decode_chain(tokens) {\n        return tokens.map((token, i) => {\n            if (i !== 0) {\n                if (token.startsWith(this.config.prefix)) {\n                    // NOTE: .replace() is intended; only replace first occurrence\n                    token = token.replace(this.config.prefix, '');\n                } else {\n                    token = ' ' + token;\n                }\n            }\n            if (this.cleanup) {\n                token = clean_up_tokenization(token)\n            }\n\n            return token;\n        });\n    }\n}\n\n/**\n * Byte-level decoder for tokenization output. Inherits from the `Decoder` class.\n * @extends Decoder\n */\nclass ByteLevelDecoder extends Decoder {\n\n    /**\n     * Create a `ByteLevelDecoder` object.\n     * @param {Object} config Configuration object.\n     */\n    constructor(config) {\n        super(config);\n\n        this.byte_decoder = UNICODE_TO_BYTES;\n        this.text_decoder = new TextDecoder(\"utf-8\", {\n            fatal: false,\n            ignoreBOM: true,\n        });\n\n        this.end_of_word_suffix = null;\n    }\n\n    /**\n     * Convert an array of tokens to string by decoding each byte.\n     * @param {string[]} tokens Array of tokens to be decoded.\n     * @returns {string} The decoded string.\n     */\n    convert_tokens_to_string(tokens) {\n        const text = tokens.join('');\n        const byteArray = new Uint8Array([...text].map(c => this.byte_decoder[c]));\n        const decoded_text = this.text_decoder.decode(byteArray);\n        return decoded_text;\n    }\n\n    /** @type {Decoder['decode_chain']} */\n    decode_chain(tokens) {\n        // TODO move to base class (like HF)\n        // tokens === filtered_tokens\n\n        // To avoid mixing byte-level and unicode for byte-level BPT\n        // we need to build string separately for added tokens and byte-level tokens\n        // cf. https://github.com/huggingface/transformers/issues/1133\n        const sub_texts = [];\n        let current_sub_text = [];\n        for (const token of tokens) {\n            // tokens sent here are already filtered, so we don't need to do this\n            // if (skip_special_tokens && this.all_special_ids.includes(token)) {\n            //     continue;\n            // }\n\n            if (this.added_tokens.find(x => x.content === token) !== undefined) {\n                if (current_sub_text.length > 0) {\n                    sub_texts.push(this.convert_tokens_to_string(current_sub_text));\n                    current_sub_text = [];\n                }\n                sub_texts.push(token);\n            } else {\n                current_sub_text.push(token);\n            }\n        }\n        if (current_sub_text.length > 0) {\n            sub_texts.push(this.convert_tokens_to_string(current_sub_text));\n        }\n\n        // TODO add spaces_between_special_tokens and clean_up_tokenization_spaces options\n\n        return sub_texts;\n    }\n}\n\n/**\n * The CTC (Connectionist Temporal Classification) decoder.\n * See https://github.com/huggingface/tokenizers/blob/bb38f390a61883fc2f29d659af696f428d1cda6b/tokenizers/src/decoders/ctc.rs\n */\nclass CTCDecoder extends Decoder {\n\n    constructor(config) {\n        super(config);\n\n        this.pad_token = this.config.pad_token;\n        this.word_delimiter_token = this.config.word_delimiter_token;\n        this.cleanup = this.config.cleanup;\n    }\n    /**\n     * Converts a connectionist-temporal-classification (CTC) output tokens into a single string.\n     * @param {string[]} tokens Array of tokens to be decoded.\n     * @returns {string} The decoded string.\n     */\n    convert_tokens_to_string(tokens) {\n        if (tokens.length === 0) return '';\n\n        // group same tokens into non-repeating tokens in CTC style decoding\n        const grouped_tokens = [tokens[0]];\n        for (let i = 1; i < tokens.length; ++i) {\n            if (tokens[i] !== grouped_tokens.at(-1)) {\n                grouped_tokens.push(tokens[i]);\n            }\n        }\n\n        // filter self.pad_token which is used as CTC-blank token\n        const filtered_tokens = grouped_tokens.filter(token => token !== this.pad_token);\n\n        let text = filtered_tokens.join('');\n        if (this.cleanup) {\n            // cleanup and replace delimiter token\n            text = clean_up_tokenization(text)\n                .replaceAll(this.word_delimiter_token, ' ')\n                .trim();\n        }\n        return text;\n    }\n\n\n    /** @type {Decoder['decode_chain']} */\n    decode_chain(tokens) {\n        return [this.convert_tokens_to_string(tokens)];\n    }\n}\n\n/**\n * Apply a sequence of decoders.\n * @extends Decoder\n */\nclass DecoderSequence extends Decoder {\n\n    /**\n     * Creates a new instance of DecoderSequence.\n     * @param {Object} config The configuration object.\n     * @param {Object[]} config.decoders The list of decoders to apply.\n     */\n    constructor(config) {\n        super(config);\n        this.decoders = config.decoders.map(x => Decoder.fromConfig(x));\n    }\n\n    /** @type {Decoder['decode_chain']} */\n    decode_chain(tokens) {\n        // Use reduce to apply each decoder to the tokens\n        return this.decoders.reduce((toks, decoder) => {\n            return decoder.decode_chain(toks);\n        }, tokens);\n    }\n\n}\n\nclass BPEDecoder extends Decoder {\n    constructor(config) {\n        super(config);\n\n        this.suffix = this.config.suffix;\n    }\n    /** @type {Decoder['decode_chain']} */\n    decode_chain(tokens) {\n        return tokens.map((token, i) => {\n            return token.replaceAll(this.suffix, (i === tokens.length - 1) ? '' : ' ')\n        });\n    }\n}\n\n// Custom decoder for VITS\nclass VitsDecoder extends Decoder {\n    /** @type {Decoder['decode_chain']} */\n    decode_chain(tokens) {\n        let decoded = '';\n        for (let i = 1; i < tokens.length; i += 2) {\n            decoded += tokens[i];\n        }\n        return [decoded];\n    }\n}\n\n\n/**\n * This PreTokenizer replaces spaces with the given replacement character, adds a prefix space if requested,\n * and returns a list of tokens.\n * @extends PreTokenizer\n */\nclass MetaspacePreTokenizer extends PreTokenizer {\n    /**\n     * @param {Object} config The configuration object for the MetaspacePreTokenizer.\n     * @param {boolean} config.add_prefix_space Whether to add a prefix space to the first token.\n     * @param {string} config.replacement The character to replace spaces with.\n     * @param {string} [config.str_rep=config.replacement] An optional string representation of the replacement character.\n     * @param {'first'|'never'|'always'} [config.prepend_scheme='always'] The metaspace prepending scheme.\n     */\n    constructor(config) {\n        super();\n\n        this.addPrefixSpace = config.add_prefix_space;\n        this.replacement = config.replacement;\n        this.strRep = config.str_rep || this.replacement;\n        this.prepend_scheme = config.prepend_scheme ?? 'always';\n    }\n\n    /**\n     * This method takes a string, replaces spaces with the replacement character,\n     * adds a prefix space if requested, and returns a new list of tokens.\n     * @param {string} text The text to pre-tokenize.\n     * @param {Object} [options] The options for the pre-tokenization.\n     * @param {number} [options.section_index] The index of the section to pre-tokenize.\n     * @returns {string[]} A new list of pre-tokenized tokens.\n     */\n    pre_tokenize_text(text, {\n        section_index = undefined,\n    } = {}) {\n\n        let normalized = text.replaceAll(' ', this.strRep);\n\n        if (\n            // We add a prefix space if:\n            //  (1) The addPrefixSpace option is enabled and the normalized\n            //      token does not already start with the replacement character.\n            (this.addPrefixSpace && !normalized.startsWith(this.replacement))\n\n            // and (2) either:\n            //  (a) prepend_scheme is 'always'\n            //  (b) prepend_scheme is 'first' and this is the first section\n            && (\n                this.prepend_scheme === 'always' ||\n                (this.prepend_scheme === 'first' && section_index === 0)\n            )\n        ) {\n            normalized = this.strRep + normalized;\n        }\n        return [normalized];\n    }\n}\n\n/**\n * MetaspaceDecoder class extends the Decoder class and decodes Metaspace tokenization.\n * @extends Decoder\n */\nclass MetaspaceDecoder extends Decoder {\n    /**\n     * Constructs a new MetaspaceDecoder object.\n     * @param {Object} config The configuration object for the MetaspaceDecoder.\n     * @param {boolean} config.add_prefix_space Whether to add a prefix space to the decoded string.\n     * @param {string} config.replacement The string to replace spaces with.\n     */\n    constructor(config) {\n        super(config);\n\n        this.addPrefixSpace = config.add_prefix_space;\n        this.replacement = config.replacement;\n    }\n\n    /** @type {Decoder['decode_chain']} */\n    decode_chain(tokens) {\n        const result = [];\n        for (let i = 0; i < tokens.length; ++i) {\n            let normalized = tokens[i].replaceAll(this.replacement, ' ');\n            if (this.addPrefixSpace && i == 0 && normalized.startsWith(' ')) {\n                normalized = normalized.substring(1);\n            }\n            result.push(normalized);\n        }\n        return result;\n    }\n}\n\n/**\n * A normalizer that applies a precompiled charsmap.\n * This is useful for applying complex normalizations in C++ and exposing them to JavaScript.\n * @extends Normalizer\n * @param {Object} config The configuration object for the Precompiled normalizer.\n * @param {Object} config.precompiled_charsmap The precompiled charsmap object.\n */\nclass Precompiled extends Normalizer {\n    /**\n     * Create a new instance of Precompiled normalizer.\n     * @param {Object} config The configuration object.\n     * @param {any} config.precompiled_charsmap Precompiled chars mapping.\n     */\n    constructor(config) {\n        super(config);\n        this.charsmap = config.precompiled_charsmap;\n    }\n\n    /**\n     * Normalizes the given text by applying the precompiled charsmap.\n     * @param {string} text The text to normalize.\n     * @returns {string} The normalized text.\n     */\n    normalize(text) {\n        // As stated in the sentencepiece normalization docs (https://github.com/google/sentencepiece/blob/master/doc/normalization.md#use-pre-defined-normalization-rule),\n        // there are 5 pre-defined normalization rules:\n        //  1. nmt_nfkc: NFKC normalization with some additional normalization around spaces. (default)\n        //  2. nfkc: original NFKC normalization.\n        //  3. nmt_nfkc_cf: nmt_nfkc + Unicode case folding (mostly lower casing)\n        //  4. nfkc_cf: nfkc + Unicode case folding.\n        //  5. identity: no normalization\n        // \n        // For now, we only implement the default (nmt_nfkc).\n        // See https://raw.githubusercontent.com/google/sentencepiece/master/data/nmt_nfkc.tsv for the full list of rules.\n        // TODO: detect when a different `this.charsmap` is used.\n\n        text = text.replace(/[\\u0001-\\u0008\\u000B\\u000E-\\u001F\\u007F\\u008F\\u009F]/gm, ''); // Remove control characters\n        text = text.replace(/[\\u0009\\u000A\\u000C\\u000D\\u1680\\u200B\\u200C\\u200E\\u200F\\u2028\\u2029\\u2581\\uFEFF\\uFFFD]/gm, '\\u0020'); // Replace certain characters with a space\n\n        if (text.includes('\\uFF5E')) {\n            // To match the sentencepiece implementation 100%, we must handle a very strange edge-case.\n            // For some reason, the \"Fullwidth Tilde\" character (\\uFF5E) should not be converted to the standard Tilde character (\\u007E).\n            // However, NFKC normalization does do this conversion. As a result, we split the string on the Fullwidth Tilde character,\n            // perform NFKC normalization on each substring, and then join them back together with the Fullwidth Tilde character.\n            const parts = text.split('\\uFF5E');\n            text = parts.map(part => part.normalize('NFKC')).join('\\uFF5E');\n        } else {\n            text = text.normalize('NFKC');\n        }\n\n        return text;\n    }\n}\n\n/**\n * A pre-tokenizer that applies a sequence of pre-tokenizers to the input text.\n * @extends PreTokenizer\n */\nclass PreTokenizerSequence extends PreTokenizer {\n    /**\n     * Creates an instance of PreTokenizerSequence.\n     * @param {Object} config The configuration object for the pre-tokenizer sequence.\n     * @param {Object[]} config.pretokenizers An array of pre-tokenizer configurations.\n     */\n    constructor(config) {\n        super();\n        this.tokenizers = config.pretokenizers.map(x => PreTokenizer.fromConfig(x));\n    }\n\n    /**\n     * Applies each pre-tokenizer in the sequence to the input text in turn.\n     * @param {string} text The text to pre-tokenize.\n     * @param {Object} [options] Additional options for the pre-tokenization logic.\n     * @returns {string[]} The pre-tokenized text.\n     */\n    pre_tokenize_text(text, options) {\n        // Use reduce to apply each tokenizer to the text\n        return this.tokenizers.reduce((preTokenizedText, tokenizer) => {\n            return tokenizer.pre_tokenize(preTokenizedText, options);\n        }, [text]);\n    }\n}\n\n/**\n * Splits on word boundaries (using the following regular expression: `\\w+|[^\\w\\s]+`).\n */\nclass WhitespacePreTokenizer extends PreTokenizer {\n    /**\n     * Creates an instance of WhitespacePreTokenizer.\n     * @param {Object} config The configuration object for the pre-tokenizer.\n     */\n    constructor(config) {\n        super();\n    }\n    /**\n     * Pre-tokenizes the input text by splitting it on word boundaries.\n     * @param {string} text The text to be pre-tokenized.\n     * @param {Object} [options] Additional options for the pre-tokenization logic.\n     * @returns {string[]} An array of tokens produced by splitting the input text on whitespace.\n     */\n    pre_tokenize_text(text, options) {\n        return text.match(/\\w+|[^\\w\\s]+/g) || [];\n    }\n}\n\n/**\n * Splits a string of text by whitespace characters into individual tokens.\n * @extends PreTokenizer\n */\nclass WhitespaceSplit extends PreTokenizer {\n    /**\n     * Creates an instance of WhitespaceSplit.\n     * @param {Object} config The configuration object for the pre-tokenizer.\n     */\n    constructor(config) {\n        super();\n    }\n    /**\n     * Pre-tokenizes the input text by splitting it on whitespace characters.\n     * @param {string} text The text to be pre-tokenized.\n     * @param {Object} [options] Additional options for the pre-tokenization logic.\n     * @returns {string[]} An array of tokens produced by splitting the input text on whitespace.\n     */\n    pre_tokenize_text(text, options) {\n        return whitespace_split(text);\n    }\n}\n\n// NOTE: `ReplacePreTokenizer` is custom (to support `BlenderbotSmallTokenizer`)\nclass ReplacePreTokenizer extends PreTokenizer {\n    /**\n     * @param {Object} config The configuration options for the pre-tokenizer.\n     * @param {Object} config.pattern The pattern used to split the text. Can be a string or a regex object.\n     * @param {string} config.content What to replace the pattern with.\n     */\n    constructor(config) {\n        super();\n        this.config = config;\n        this.pattern = createPattern(this.config.pattern);\n        this.content = this.config.content;\n    }\n\n    /**\n     * Pre-tokenizes the input text by replacing certain characters.\n     * @param {string} text The text to be pre-tokenized.\n     * @param {Object} [options] Additional options for the pre-tokenization logic.\n     * @returns {string[]} An array of tokens produced by replacing certain characters.\n     */\n    pre_tokenize_text(text, options) {\n        if (this.pattern === null) {\n            return [text];\n        }\n        return [text.replaceAll(this.pattern, this.config.content)];\n    }\n}\n\nconst SPECIAL_TOKEN_ATTRIBUTES = [\n    'bos_token',\n    'eos_token',\n    'unk_token',\n    'sep_token',\n    'pad_token',\n    'cls_token',\n    'mask_token',\n    // additional_special_tokens (TODO)\n]\n\n/**\n * \n * Helper function for padding values of an object, which are each arrays.\n * NOTE: No additional checks are made here for validity of arguments.\n * @param {Record<string, any[]>} item The input object.\n * @param {number} length The length to pad to.\n * @param {(key: string) => any} value_fn Determine the value to fill the array, based on its key.\n * @param {string} side Which side to pad the array.\n * @private\n */\nfunction padHelper(item, length, value_fn, side) {\n    for (const key of Object.keys(item)) {\n        const diff = length - item[key].length;\n        const value = value_fn(key);\n\n        const padData = new Array(diff).fill(value);\n        item[key] = side === 'right'\n            ? mergeArrays(item[key], padData)\n            : mergeArrays(padData, item[key]);\n    }\n}\n\n/**\n * Helper function for truncating values of an object, which are each arrays.\n * NOTE: No additional checks are made here for validity of arguments.\n * @param {Record<string, any[]>} item The input object.\n * @param {number} length The length to truncate to.\n * @private\n */\nfunction truncateHelper(item, length) {\n    // Setting .length to a lower value truncates the array in-place:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length\n    for (const key of Object.keys(item)) {\n        item[key].length = length;\n    }\n}\n\n\n/**\n * @typedef {Object} Message\n * @property {string} role The role of the message (e.g., \"user\" or \"assistant\" or \"system\").\n * @property {string} content The content of the message.\n */\n\nexport class PreTrainedTokenizer extends Callable {\n    return_token_type_ids = false;\n\n    padding_side = 'right';\n    /**\n     * Create a new PreTrainedTokenizer instance.\n     * @param {Object} tokenizerJSON The JSON of the tokenizer.\n     * @param {Object} tokenizerConfig The config of the tokenizer.\n     */\n    constructor(tokenizerJSON, tokenizerConfig) {\n        super();\n\n        this._tokenizer_config = tokenizerConfig;\n\n        // Construct parts of the tokenizer from the JSON\n        this.normalizer = Normalizer.fromConfig(tokenizerJSON.normalizer);\n        this.pre_tokenizer = PreTokenizer.fromConfig(tokenizerJSON.pre_tokenizer);\n        this.model = TokenizerModel.fromConfig(tokenizerJSON.model, tokenizerConfig);\n        this.post_processor = PostProcessor.fromConfig(tokenizerJSON.post_processor);\n        this.decoder = Decoder.fromConfig(tokenizerJSON.decoder);\n\n        // Add added_tokens to model\n        this.special_tokens = [];\n        this.all_special_ids = [];\n\n        /** @type {AddedToken[]} */\n        this.added_tokens = [];\n        for (const addedToken of tokenizerJSON.added_tokens) {\n            const token = new AddedToken(addedToken);\n            this.added_tokens.push(token);\n\n            this.model.tokens_to_ids.set(token.content, token.id);\n            this.model.vocab[token.id] = token.content;\n\n            if (token.special) {\n                this.special_tokens.push(token.content);\n                this.all_special_ids.push(token.id);\n            }\n        }\n\n        // Update additional_special_tokens\n        this.additional_special_tokens = tokenizerConfig.additional_special_tokens ?? [];\n        this.special_tokens.push(...this.additional_special_tokens);\n        this.special_tokens = [...new Set(this.special_tokens)]; // Remove duplicates\n\n        if (this.decoder) {\n            // Slight hack, but it prevents code duplication:\n            this.decoder.added_tokens = this.added_tokens;\n\n            // Another slight hack to add `end_of_word_suffix` (if present) to the decoder\n            // This is needed for cases where BPE model and ByteLevel decoder are used\n            // For more information, see https://github.com/xenova/transformers.js/issues/74\n            // TODO: save this to the decoder when exporting?\n            this.decoder.end_of_word_suffix = this.model.end_of_word_suffix;\n        }\n\n\n        this.added_tokens_regex = this.added_tokens.length > 0 ? new RegExp(\n            this.added_tokens\n                // Sort by length (desc) to avoid early partial matches\n                .toSorted((a, b) => b.content.length - a.content.length)\n                .map(x => `${x.lstrip ? '\\\\s*' : ''}(${escapeRegExp(x.content)})${x.rstrip ? '\\\\s*' : ''}`)\n                .join('|')\n        ) : null;\n\n        // Set mask token if present (otherwise will be undefined, which is fine)\n        this.mask_token = this.getToken('mask_token');\n        this.mask_token_id = this.model.tokens_to_ids.get(this.mask_token);\n\n        this.pad_token = this.getToken('pad_token', 'eos_token');\n        this.pad_token_id = this.model.tokens_to_ids.get(this.pad_token);\n\n        this.sep_token = this.getToken('sep_token');\n        this.sep_token_id = this.model.tokens_to_ids.get(this.sep_token);\n\n        this.unk_token = this.getToken('unk_token');\n        this.unk_token_id = this.model.tokens_to_ids.get(this.unk_token);\n\n        this.model_max_length = tokenizerConfig.model_max_length;\n\n        /** @type {boolean} Whether or not to strip the text when tokenizing (removing excess spaces before and after the string). */\n        this.remove_space = tokenizerConfig.remove_space;\n\n        this.clean_up_tokenization_spaces = tokenizerConfig.clean_up_tokenization_spaces ?? true;\n        this.do_lowercase_and_remove_accent = tokenizerConfig.do_lowercase_and_remove_accent ?? false;\n\n        if (tokenizerConfig.padding_side) {\n            this.padding_side = tokenizerConfig.padding_side;\n        }\n\n        this.legacy = false;\n\n        this.chat_template = tokenizerConfig.chat_template ?? null;\n        if (Array.isArray(this.chat_template)) {\n            // Chat templates are stored as lists of dicts with fixed key names,\n            // we reconstruct that into a single dict while loading them.\n            const chat_template = Object.create(null);\n            for (const { name, template } of this.chat_template) {\n                if (typeof name !== 'string' || typeof template !== 'string') {\n                    throw new Error('Chat template must be a list of objects with \"name\" and \"template\" properties');\n                }\n                chat_template[name] = template;\n            }\n            this.chat_template = chat_template;\n        }\n        this._compiled_template_cache = new Map();\n    }\n\n    /**\n     * Returns the value of the first matching key in the tokenizer config object.\n     * @param {...string} keys One or more keys to search for in the tokenizer config object.\n     * @returns {string|null} The value associated with the first matching key, or null if no match is found.\n     * @throws {Error} If an object is found for a matching key and its __type property is not \"AddedToken\".\n     * @private\n     */\n    getToken(...keys) {\n        for (const key of keys) {\n            const item = this._tokenizer_config[key];\n\n            if (!item) continue;\n\n            if (typeof item === 'object') {\n                if (item.__type === 'AddedToken') {\n                    return item.content;\n                } else {\n                    throw Error(`Unknown token: ${item}`);\n                }\n            } else {\n                return item;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Loads a pre-trained tokenizer from the given `pretrained_model_name_or_path`. \n     * \n     * @param {string} pretrained_model_name_or_path The path to the pre-trained tokenizer.\n     * @param {PretrainedTokenizerOptions} options Additional options for loading the tokenizer.\n     * \n     * @throws {Error} Throws an error if the tokenizer.json or tokenizer_config.json files are not found in the `pretrained_model_name_or_path`.\n     * @returns {Promise<PreTrainedTokenizer>} A new instance of the `PreTrainedTokenizer` class.\n     */\n    static async from_pretrained(pretrained_model_name_or_path, {\n        progress_callback = null,\n        config = null,\n        cache_dir = null,\n        local_files_only = false,\n        revision = 'main',\n        legacy = null,\n    } = {}) {\n\n        const info = await loadTokenizer(pretrained_model_name_or_path, {\n            progress_callback,\n            config,\n            cache_dir,\n            local_files_only,\n            revision,\n            legacy,\n        })\n\n        // @ts-ignore\n        return new this(...info);\n    }\n\n    /**\n     * @typedef {number[]|number[][]|Tensor} BatchEncodingItem\n     * \n     * @typedef {Object} BatchEncoding Holds the output of the tokenizer's call function.\n     * @property {BatchEncodingItem} input_ids List of token ids to be fed to a model.\n     * @property {BatchEncodingItem} attention_mask List of indices specifying which tokens should be attended to by the model.\n     * @property {BatchEncodingItem} [token_type_ids] List of token type ids to be fed to a model.\n     */\n\n    /**\n     * Encode/tokenize the given text(s).\n     * @param {string|string[]} text The text to tokenize.\n     * @param {Object} options An optional object containing the following properties:\n     * @param {string|string[]} [options.text_pair=null] Optional second sequence to be encoded. If set, must be the same type as text.\n     * @param {boolean|'max_length'} [options.padding=false] Whether to pad the input sequences.\n     * @param {boolean} [options.add_special_tokens=true] Whether or not to add the special tokens associated with the corresponding model.\n     * @param {boolean} [options.truncation=null] Whether to truncate the input sequences.\n     * @param {number} [options.max_length=null] Maximum length of the returned list and optionally padding length.\n     * @param {boolean} [options.return_tensor=true] Whether to return the results as Tensors or arrays.\n     * @param {boolean} [options.return_token_type_ids=null] Whether to return the token type ids.\n     * @returns {BatchEncoding} Object to be passed to the model.\n     */\n    _call(\n        // Required positional arguments\n        text,\n\n        // Optional keyword arguments\n        {\n            text_pair = null,\n            add_special_tokens = true,\n            padding = false,\n            truncation = null,\n            max_length = null,\n            return_tensor = true, // Different to HF\n            return_token_type_ids = null,\n        } = {},\n    ) {\n\n        const isBatched = Array.isArray(text);\n\n        /** @type {EncodingSingle[]} */\n        let encodedTokens;\n\n        if (isBatched) {\n            if (text.length === 0) {\n                throw Error('text array must be non-empty')\n            }\n\n            if (text_pair !== null) {\n                if (!Array.isArray(text_pair)) {\n                    throw Error('text_pair must also be an array')\n\n                } else if (text.length !== text_pair.length) {\n                    throw Error('text and text_pair must have the same length')\n                }\n\n                encodedTokens = text.map(\n                    (t, i) => this._encode_plus(t, { text_pair: text_pair[i], add_special_tokens, return_token_type_ids })\n                )\n\n            } else {\n                encodedTokens = text.map(x => this._encode_plus(x, { add_special_tokens, return_token_type_ids }));\n            }\n\n        } else {\n            if (text === null || text === undefined) {\n                throw Error('text may not be null or undefined')\n            }\n\n            if (Array.isArray(text_pair)) {\n                throw Error('When specifying `text_pair`, since `text` is a string, `text_pair` must also be a string (i.e., not an array).')\n            }\n\n            // For single input, we just wrap in an array, and then unwrap later.\n            encodedTokens = [this._encode_plus(text, { text_pair, add_special_tokens, return_token_type_ids })];\n        }\n        // At this point, tokens is batched: [batch_size, tokens]\n        // However, array may be jagged. So, we pad to max_length\n\n        if (max_length === null) {\n            if (padding === 'max_length') {\n                max_length = this.model_max_length;\n            } else {\n                // Calculate max length from sequences\n                max_length = max(encodedTokens.map(x => x.input_ids.length))[0];\n            }\n        } else {\n            if (!truncation) {\n                console.warn(`Truncation was not explicitly activated but \\`max_length\\` is provided a specific value, please use \\`truncation=true\\` to explicitly truncate examples to max length.`)\n            }\n        }\n\n        // Ensure it is less than model max length\n        max_length = Math.min(max_length, this.model_max_length ?? Infinity);\n\n        if (padding || truncation) {\n\n            // Perform padding and/or truncation\n            for (let i = 0; i < encodedTokens.length; ++i) {\n                if (encodedTokens[i].input_ids.length === max_length) {\n                    continue;\n\n                } else if (encodedTokens[i].input_ids.length > max_length) {\n                    // possibly truncate\n                    if (truncation) {\n                        truncateHelper(encodedTokens[i], max_length);\n                    }\n\n                } else { // t.length < max_length\n                    // possibly pad\n                    if (padding) {\n                        padHelper(\n                            encodedTokens[i],\n                            max_length,\n                            key => key === 'input_ids' ? this.pad_token_id : 0,\n                            this.padding_side\n                        );\n                    }\n                }\n            }\n        }\n\n        const result = {};\n\n        if (return_tensor) {\n            if (!(padding && truncation)) {\n                // Not, guaranteed that all items have same length, so\n                // we perform additional check\n\n                if (\n                    encodedTokens.some(x => {\n                        for (const key of Object.keys(x)) {\n                            if (x[key].length !== encodedTokens[0][key]?.length) {\n                                return true;\n                            }\n                        }\n                        return false;\n                    })\n                ) {\n                    throw Error(\n                        \"Unable to create tensor, you should probably activate truncation and/or padding \" +\n                        \"with 'padding=true' and 'truncation=true' to have batched tensors with the same length.\"\n                    )\n                }\n            }\n\n            // Now we actually convert to tensor\n            // NOTE: In the same way as the python library, we return a batched tensor, regardless of\n            // whether we have a single input or multiple inputs.\n            const dims = [encodedTokens.length, encodedTokens[0].input_ids.length];\n\n            for (const key of Object.keys(encodedTokens[0])) {\n                result[key] = new Tensor('int64',\n                    BigInt64Array.from(encodedTokens.flatMap(x => x[key]).map(BigInt)),\n                    dims\n                );\n            }\n\n        } else {\n            for (const key of Object.keys(encodedTokens[0])) {\n                result[key] = encodedTokens.map(x => x[key]);\n            }\n\n            // If not returning a tensor, we match the input type\n            if (!isBatched) {\n                // Input was not batched, so we unwrap\n                for (const key of Object.keys(result)) {\n                    result[key] = result[key][0];\n                }\n            }\n        }\n\n        return /** @type {BatchEncoding} */(result);\n    }\n\n    /**\n     * Encodes a single text using the preprocessor pipeline of the tokenizer.\n     *\n     * @param {string|null} text The text to encode.\n     * @returns {string[]|null} The encoded tokens.\n     */\n    _encode_text(text) {\n        if (text === null) return null;\n\n        // Actual function which does encoding, for a single text\n        // First, we take care of special tokens. Needed to avoid issues arising from\n        // normalization and/or pretokenization (which may not preserve special tokens)\n        const sections = this.added_tokens_regex ? text.split(this.added_tokens_regex).filter(x => x) : [text];\n\n        const tokens = sections.map((x, section_index) => {\n            const addedToken = this.added_tokens.find(t => t.content === x);\n            if (addedToken !== undefined) {\n                // Ignore added tokens\n                return x\n            } else {\n                if (this.remove_space === true) {\n                    x = x.trim().split(/\\s+/).join(' ');\n                }\n                if (this.do_lowercase_and_remove_accent) {\n                    x = lowercase_and_remove_accent(x);\n                }\n\n                if (this.normalizer !== null) {\n                    x = this.normalizer(x);\n                }\n\n                // If, after normalization, this section is empty (e.g., trimming whitespace),\n                // we return an empty array\n                if (x.length === 0) {\n                    return [];\n                }\n\n                const sectionTokens = (this.pre_tokenizer !== null) ? this.pre_tokenizer(x, {\n                    section_index,\n                }) : [x];\n\n                const tokens = this.model(sectionTokens);\n\n                return tokens;\n            }\n        }).flat();\n\n        return tokens;\n    }\n\n    /**\n     * Encodes a single text or a pair of texts using the model's tokenizer.\n     *\n     * @param {string} text The text to encode.\n     * @param {Object} options An optional object containing the following properties:\n     * @param {string} [options.text_pair=null] The optional second text to encode.\n     * @param {boolean} [options.add_special_tokens=true] Whether or not to add the special tokens associated with the corresponding model.\n     * @param {boolean} [options.return_token_type_ids=null] Whether to return token_type_ids.\n     * @returns {EncodingSingle} An object containing the encoded text.\n     * @private\n     */\n    _encode_plus(text, {\n        text_pair = null,\n        add_special_tokens = true,\n        return_token_type_ids = null,\n    } = {}) {\n\n        const { tokens, token_type_ids } = this._tokenize_helper(text, { pair: text_pair, add_special_tokens });\n\n        const input_ids = this.model.convert_tokens_to_ids(tokens);\n\n        const result = {\n            input_ids,\n            attention_mask: new Array(input_ids.length).fill(1),\n        }\n        if ((return_token_type_ids ?? this.return_token_type_ids) && token_type_ids) {\n            result.token_type_ids = token_type_ids;\n        }\n        return result;\n    }\n\n    /**\n     * Internal helper function to tokenize a text, and optionally a pair of texts.\n     * @param {string} text The text to tokenize.\n     * @param {Object} options An optional object containing the following properties:\n     * @param {string} [options.pair=null] The optional second text to tokenize.\n     * @param {boolean} [options.add_special_tokens=false] Whether or not to add the special tokens associated with the corresponding model.\n     * @returns {{tokens: string[], token_type_ids?: number[]}} An object containing the tokens and optionally the token type IDs.\n     */\n    _tokenize_helper(text, {\n        pair = null,\n        add_special_tokens = false,\n    } = {}) {\n        const tokens = this._encode_text(text);\n        const tokens2 = this._encode_text(pair);\n\n        return this.post_processor\n            ? this.post_processor(tokens, tokens2, { add_special_tokens })\n            : { tokens: mergeArrays(tokens ?? [], tokens2 ?? []) };\n    }\n\n    /**\n     * Converts a string into a sequence of tokens.\n     * @param {string} text The sequence to be encoded.\n     * @param {Object} options An optional object containing the following properties:\n     * @param {string} [options.pair] A second sequence to be encoded with the first.\n     * @param {boolean} [options.add_special_tokens=false] Whether or not to add the special tokens associated with the corresponding model.\n     * @returns {string[]} The list of tokens.\n     */\n    tokenize(text, {\n        pair = null,\n        add_special_tokens = false,\n    } = {}) {\n        return this._tokenize_helper(text, { pair, add_special_tokens }).tokens;\n    }\n\n    /**\n     * Encodes a single text or a pair of texts using the model's tokenizer.\n     *\n     * @param {string} text The text to encode.\n     * @param {Object} options An optional object containing the following properties:\n     * @param {string} [options.text_pair=null] The optional second text to encode.\n     * @param {boolean} [options.add_special_tokens=true] Whether or not to add the special tokens associated with the corresponding model.\n     * @param {boolean} [options.return_token_type_ids=null] Whether to return token_type_ids.\n     * @returns {number[]} An array of token IDs representing the encoded text(s).\n     */\n    encode(text, {\n        text_pair = null,\n        add_special_tokens = true,\n        return_token_type_ids = null,\n    } = {}) {\n        return this._encode_plus(text, {\n            text_pair,\n            add_special_tokens,\n            return_token_type_ids,\n        }).input_ids;\n    }\n\n    /**\n     * Decode a batch of tokenized sequences.\n     * @param {number[][]|Tensor} batch List/Tensor of tokenized input sequences.\n     * @param {Object} decode_args (Optional) Object with decoding arguments.\n     * @returns {string[]} List of decoded sequences.\n     */\n    batch_decode(batch, decode_args = {}) {\n        if (batch instanceof Tensor) {\n            batch = batch.tolist();\n        }\n        return batch.map(x => this.decode(x, decode_args));\n    }\n\n    /**\n     * Decodes a sequence of token IDs back to a string.\n     *\n     * @param {number[]|bigint[]|Tensor} token_ids List/Tensor of token IDs to decode.\n     * @param {Object} [decode_args={}]\n     * @param {boolean} [decode_args.skip_special_tokens=false] If true, special tokens are removed from the output string.\n     * @param {boolean} [decode_args.clean_up_tokenization_spaces=true] If true, spaces before punctuations and abbreviated forms are removed.\n     *\n     * @returns {string} The decoded string.\n     * @throws {Error} If `token_ids` is not a non-empty array of integers.\n     */\n    decode(\n        token_ids,\n        decode_args = {},\n    ) {\n        if (token_ids instanceof Tensor) {\n            token_ids = prepareTensorForDecode(token_ids);\n        }\n\n        if (!Array.isArray(token_ids) || token_ids.length === 0 || !isIntegralNumber(token_ids[0])) {\n            throw Error(\"token_ids must be a non-empty array of integers.\");\n        }\n\n        return this.decode_single(token_ids, decode_args)\n    }\n\n    /**\n     * Decode a single list of token ids to a string.\n     * @param {number[]|bigint[]} token_ids List of token ids to decode\n     * @param {Object} decode_args Optional arguments for decoding\n     * @param {boolean} [decode_args.skip_special_tokens=false] Whether to skip special tokens during decoding\n     * @param {boolean} [decode_args.clean_up_tokenization_spaces=null] Whether to clean up tokenization spaces during decoding.\n     * If null, the value is set to `this.decoder.cleanup` if it exists, falling back to `this.clean_up_tokenization_spaces` if it exists, falling back to `true`.\n     * @returns {string} The decoded string\n     */\n    decode_single(\n        token_ids,\n        {\n            skip_special_tokens = false,\n            clean_up_tokenization_spaces = null,\n        }\n    ) {\n        let tokens = this.model.convert_ids_to_tokens(token_ids);\n        if (skip_special_tokens) {\n            tokens = tokens.filter(x => !this.special_tokens.includes(x));\n        }\n\n        // If `this.decoder` is null, we just join tokens with a space:\n        // https://github.com/huggingface/tokenizers/blob/8edec536a737cb04494b454805be16c020abb14f/tokenizers/src/tokenizer/mod.rs#L835\n        /** @type {string} */\n        let decoded = this.decoder ? this.decoder(tokens) : tokens.join(' ');\n\n        // Slight hack, but prevents having to pass `skip_special_tokens` to\n        // each call to `decode`, which would lead to code duplication.\n        if (this.decoder && this.decoder.end_of_word_suffix) {\n            decoded = decoded.replaceAll(this.decoder.end_of_word_suffix, ' ');\n            if (skip_special_tokens) {\n                decoded = decoded.trim();\n            }\n        }\n\n        if (clean_up_tokenization_spaces ?? this.clean_up_tokenization_spaces) {\n            decoded = clean_up_tokenization(decoded);\n        }\n\n        return decoded;\n    }\n    /**\n     * Converts a list of message objects with `\"role\"` and `\"content\"` keys to a list of token\n     * ids. This method is intended for use with chat models, and will read the tokenizer's chat_template attribute to\n     * determine the format and control tokens to use when converting.\n     * \n     * See [here](https://huggingface.co/docs/transformers/chat_templating) for more information.\n     * \n     * **Example:** Applying a chat template to a conversation.\n     * \n     * ```javascript\n     * import { AutoTokenizer } from \"@huggingface/transformers\";\n     * \n     * const tokenizer = await AutoTokenizer.from_pretrained(\"Xenova/mistral-tokenizer-v1\");\n     * \n     * const chat = [\n     *   { \"role\": \"user\", \"content\": \"Hello, how are you?\" },\n     *   { \"role\": \"assistant\", \"content\": \"I'm doing great. How can I help you today?\" },\n     *   { \"role\": \"user\", \"content\": \"I'd like to show off how chat templating works!\" },\n     * ]\n     * \n     * const text = tokenizer.apply_chat_template(chat, { tokenize: false });\n     * // \"<s>[INST] Hello, how are you? [/INST]I'm doing great. How can I help you today?</s> [INST] I'd like to show off how chat templating works! [/INST]\"\n     * \n     * const input_ids = tokenizer.apply_chat_template(chat, { tokenize: true, return_tensor: false });\n     * // [1, 733, 16289, 28793, 22557, 28725, 910, 460, 368, 28804, 733, 28748, 16289, 28793, 28737, 28742, 28719, 2548, 1598, 28723, 1602, 541, 315, 1316, 368, 3154, 28804, 2, 28705, 733, 16289, 28793, 315, 28742, 28715, 737, 298, 1347, 805, 910, 10706, 5752, 1077, 3791, 28808, 733, 28748, 16289, 28793]\n     * ```\n     * \n     * @param {Message[]} conversation A list of message objects with `\"role\"` and `\"content\"` keys,\n     * representing the chat history so far.\n     * @param {Object} options An optional object containing the following properties:\n     * @param {string} [options.chat_template=null] A Jinja template to use for this conversion. If\n     * this is not passed, the model's chat template will be used instead.\n     * @param {Object[]} [options.tools=null]\n     * A list of tools (callable functions) that will be accessible to the model. If the template does not\n     * support function calling, this argument will have no effect. Each tool should be passed as a JSON Schema,\n     * giving the name, description and argument types for the tool. See our\n     * [chat templating guide](https://huggingface.co/docs/transformers/main/en/chat_templating#automated-function-conversion-for-tool-use)\n     * for more information.\n     * @param {Record<string, string>[]} [options.documents=null]\n     * A list of dicts representing documents that will be accessible to the model if it is performing RAG\n     * (retrieval-augmented generation). If the template does not support RAG, this argument will have no\n     * effect. We recommend that each document should be a dict containing \"title\" and \"text\" keys. Please\n     * see the RAG section of the [chat templating guide](https://huggingface.co/docs/transformers/main/en/chat_templating#arguments-for-RAG)\n     * for examples of passing documents with chat templates.\n     * @param {boolean} [options.add_generation_prompt=false] Whether to end the prompt with the token(s) that indicate\n     * the start of an assistant message. This is useful when you want to generate a response from the model.\n     * Note that this argument will be passed to the chat template, and so it must be supported in the\n     * template for this argument to have any effect.\n     * @param {boolean} [options.tokenize=true] Whether to tokenize the output. If false, the output will be a string.\n     * @param {boolean} [options.padding=false] Whether to pad sequences to the maximum length. Has no effect if tokenize is false.\n     * @param {boolean} [options.truncation=false] Whether to truncate sequences to the maximum length. Has no effect if tokenize is false.\n     * @param {number} [options.max_length=null] Maximum length (in tokens) to use for padding or truncation. Has no effect if tokenize is false.\n     * If not specified, the tokenizer's `max_length` attribute will be used as a default.\n     * @param {boolean} [options.return_tensor=true] Whether to return the output as a Tensor or an Array. Has no effect if tokenize is false.\n     * @param {boolean} [options.return_dict=true] Whether to return a dictionary with named outputs. Has no effect if tokenize is false.\n     * @param {Object} [options.tokenizer_kwargs={}] Additional options to pass to the tokenizer.\n     * @returns {string | Tensor | number[]| number[][]|BatchEncoding} The tokenized output.\n     */\n    apply_chat_template(conversation, {\n        tools = null,\n        documents = null,\n        chat_template = null,\n        add_generation_prompt = false,\n        tokenize = true,\n        padding = false,\n        truncation = false,\n        max_length = null,\n        return_tensor = true,\n        return_dict = false,\n        tokenizer_kwargs = {},\n        ...kwargs\n    } = {}) {\n\n        // First, handle the cases when the model has a dict of multiple templates\n        if (\n            (this.chat_template && typeof this.chat_template === 'object')\n            || this.chat_template === null\n        ) {\n            const template_dict = this.chat_template;\n\n            if (chat_template !== null && Object.hasOwn(template_dict, chat_template)) {\n                // The user can pass the name of a template to the chat template argument instead of an entire template\n                chat_template = template_dict[chat_template];\n            } else if (chat_template === null && 'default' in template_dict) {\n                chat_template = template_dict['default'];\n            } else if (chat_template === null) {\n                throw Error(\n                    `This model has multiple chat templates with no default specified! Please either pass a chat ` +\n                    `template or the name of the template you wish to use to the 'chat_template' argument. Available ` +\n                    `template names are ${Object.keys(template_dict).sort()}.`\n                )\n            }\n        } else {\n            // These are the cases when the model has a single template\n            // priority: `chat_template` argument > `tokenizer.chat_template`\n            if (this.chat_template) {\n                chat_template = this.chat_template;\n            } else {\n                throw Error(\n                    \"Cannot use apply_chat_template() because tokenizer.chat_template is not set and no template \" +\n                    \"argument was passed! For information about writing templates and setting the \" +\n                    \"tokenizer.chat_template attribute, please see the documentation at \" +\n                    \"https://huggingface.co/docs/transformers/main/en/chat_templating\"\n                )\n            }\n        }\n        if (typeof chat_template !== 'string') {\n            throw Error(`chat_template must be a string, but got ${typeof chat_template}`);\n        }\n\n        // Compilation function uses a cache to avoid recompiling the same template\n        let compiledTemplate = this._compiled_template_cache.get(chat_template);\n        if (compiledTemplate === undefined) {\n            compiledTemplate = new Template(chat_template);\n            this._compiled_template_cache.set(chat_template, compiledTemplate);\n        }\n\n        const special_tokens_map = Object.create(null);\n        for (const key of SPECIAL_TOKEN_ATTRIBUTES) {\n            const value = this.getToken(key);\n            if (value) {\n                special_tokens_map[key] = value;\n            }\n        }\n\n        const rendered = compiledTemplate.render({\n            messages: conversation,\n            add_generation_prompt,\n            tools,\n            documents,\n            ...special_tokens_map,\n            ...kwargs,\n        });\n\n        if (tokenize) {\n            const out = this._call(rendered, {\n                add_special_tokens: false,\n                padding,\n                truncation,\n                max_length,\n                return_tensor,\n                ...tokenizer_kwargs,\n            });\n            return return_dict ? out : out.input_ids;\n        }\n\n        return rendered;\n    }\n}\n\n/**\n * BertTokenizer is a class used to tokenize text for BERT models.\n * @extends PreTrainedTokenizer\n */\nexport class BertTokenizer extends PreTrainedTokenizer {\n    return_token_type_ids = true;\n}\n/**\n * Albert tokenizer\n * @extends PreTrainedTokenizer\n */\nexport class AlbertTokenizer extends PreTrainedTokenizer {\n    return_token_type_ids = true;\n}\nexport class MobileBertTokenizer extends PreTrainedTokenizer {\n    return_token_type_ids = true;\n}\nexport class SqueezeBertTokenizer extends PreTrainedTokenizer {\n    return_token_type_ids = true;\n}\nexport class DebertaTokenizer extends PreTrainedTokenizer {\n    return_token_type_ids = true;\n}\nexport class DebertaV2Tokenizer extends PreTrainedTokenizer {\n    return_token_type_ids = true;\n}\nexport class HerbertTokenizer extends PreTrainedTokenizer {\n    return_token_type_ids = true;\n}\nexport class ConvBertTokenizer extends PreTrainedTokenizer {\n    return_token_type_ids = true;\n}\nexport class RoFormerTokenizer extends PreTrainedTokenizer {\n    return_token_type_ids = true;\n}\nexport class DistilBertTokenizer extends PreTrainedTokenizer { }\nexport class CamembertTokenizer extends PreTrainedTokenizer { }\nexport class XLMTokenizer extends PreTrainedTokenizer {\n    return_token_type_ids = true;\n\n    constructor(tokenizerJSON, tokenizerConfig) {\n        super(tokenizerJSON, tokenizerConfig);\n        console.warn('WARNING: `XLMTokenizer` is not yet supported by Hugging Face\\'s \"fast\" tokenizers library. Therefore, you may experience slightly inaccurate results.')\n    }\n}\nexport class ElectraTokenizer extends PreTrainedTokenizer {\n    return_token_type_ids = true;\n}\n\nexport class T5Tokenizer extends PreTrainedTokenizer { }\nexport class GPT2Tokenizer extends PreTrainedTokenizer { }\nexport class BartTokenizer extends PreTrainedTokenizer { }\nexport class MBartTokenizer extends PreTrainedTokenizer {\n    constructor(tokenizerJSON, tokenizerConfig) {\n        super(tokenizerJSON, tokenizerConfig);\n\n        this.languageRegex = /^[a-z]{2}_[A-Z]{2}$/;\n        this.language_codes = this.special_tokens.filter(x => this.languageRegex.test(x));\n        this.lang_to_token = x => x; // Identity function\n    }\n\n    /**\n     * Helper function to build translation inputs for an `MBartTokenizer`.\n     * @param {string|string[]} raw_inputs The text to tokenize.\n     * @param {Object} tokenizer_options Options to be sent to the tokenizer\n     * @param {Object} generate_kwargs Generation options.\n     * @returns {Object} Object to be passed to the model.\n     */\n    _build_translation_inputs(raw_inputs, tokenizer_options, generate_kwargs) {\n        return _build_translation_inputs(this, raw_inputs, tokenizer_options, generate_kwargs);\n    }\n}\nexport class MBart50Tokenizer extends MBartTokenizer { } // NOTE: extends MBartTokenizer\n\nexport class RobertaTokenizer extends PreTrainedTokenizer { }\n\nexport class BloomTokenizer extends PreTrainedTokenizer {\n\n    constructor(tokenizerJSON, tokenizerConfig) {\n        // Override the default (invalid) regex of the pretokenizer.\n        // For more information, see https://github.com/xenova/transformers.js/issues/94\n        const splitChars = '.,!?\\u2026\\u3002\\uff0c\\u3001\\u0964\\u06d4\\u060c';\n        const patternObject = tokenizerJSON.pre_tokenizer?.pretokenizers[0]?.pattern;\n        if (patternObject && patternObject.Regex === ` ?[^(\\\\s|[${splitChars}])]+`) {\n            patternObject.Regex = ` ?[^\\\\s${splitChars}]+`;\n        }\n        super(tokenizerJSON, tokenizerConfig);\n    }\n}\n\nconst SPIECE_UNDERLINE = \"▁\";\n\nexport class LlamaTokenizer extends PreTrainedTokenizer {\n\n    padding_side = 'left';\n\n    constructor(tokenizerJSON, tokenizerConfig) {\n        super(tokenizerJSON, tokenizerConfig);\n\n        this.legacy = tokenizerConfig.legacy ?? true;\n        if (!this.legacy) {\n            // See https://github.com/huggingface/transformers/pull/24565 for more information\n            this.normalizer = null;\n            this.pre_tokenizer = new MetaspacePreTokenizer({\n                replacement: SPIECE_UNDERLINE,\n                add_prefix_space: true,\n                prepend_scheme: \"first\",\n            });\n        }\n    }\n\n    /**\n     * Helper function to handle legacy encoding of SPM tokenizers.\n     * Adapted from https://github.com/huggingface/transformers/blob/e6dcf8abd6f65bb4b6dfc1831b20d9ba49ce00e2/src/transformers/models/t5/tokenization_t5.py#L374-L387\n     * @param {string} text The text to encode.\n     * @returns {string[]} The encoded tokens.\n     */\n    _encode_text(text) {\n        if (text === null) return null;\n\n        if (this.legacy || text.length === 0) {\n            return super._encode_text(text);\n        }\n\n        let tokens = super._encode_text(SPIECE_UNDERLINE + text.replaceAll(SPIECE_UNDERLINE, \" \"));\n        if (tokens.length > 1 && tokens[0] === SPIECE_UNDERLINE && this.special_tokens.includes(tokens[1])) {\n            tokens = tokens.slice(1);\n        }\n        return tokens;\n    }\n}\nexport class CodeLlamaTokenizer extends PreTrainedTokenizer { }\n\nexport class XLMRobertaTokenizer extends PreTrainedTokenizer { }\nexport class MPNetTokenizer extends PreTrainedTokenizer { }\n\nexport class FalconTokenizer extends PreTrainedTokenizer { }\n\nexport class GPTNeoXTokenizer extends PreTrainedTokenizer { }\n\nexport class EsmTokenizer extends PreTrainedTokenizer { }\n\nexport class Qwen2Tokenizer extends PreTrainedTokenizer { }\n\nexport class GemmaTokenizer extends PreTrainedTokenizer { }\n\nexport class Grok1Tokenizer extends PreTrainedTokenizer { }\n\n/**\n * Helper function to build translation inputs for an `NllbTokenizer` or `M2M100Tokenizer`.\n * @param {PreTrainedTokenizer} self The tokenizer instance.\n * @param {string|string[]} raw_inputs The text to tokenize.\n * @param {Object} tokenizer_options Options to be sent to the tokenizer\n * @param {Object} generate_kwargs Generation options.\n * @returns {Object} Object to be passed to the model.\n * @private\n */\nfunction _build_translation_inputs(self, raw_inputs, tokenizer_options, generate_kwargs) {\n    if (!('language_codes' in self) || !Array.isArray(self.language_codes)) {\n        throw new Error('Tokenizer must have `language_codes` attribute set and it should be an array of language ids.')\n    }\n    if (!('languageRegex' in self) || !(self.languageRegex instanceof RegExp)) {\n        throw new Error('Tokenizer must have `languageRegex` attribute set and it should be a regular expression.')\n    }\n    if (!('lang_to_token' in self) || typeof self.lang_to_token !== 'function') {\n        throw new Error('Tokenizer must have `lang_to_token` attribute set and it should be a function.')\n    }\n    const src_lang_token = generate_kwargs.src_lang;\n    const tgt_lang_token = generate_kwargs.tgt_lang;\n\n    // Check that the target language is valid:\n    if (!self.language_codes.includes(tgt_lang_token)) {\n        throw new Error(`Target language code \"${tgt_lang_token}\" is not valid. Must be one of: {${self.language_codes.join(', ')}}`);\n    }\n\n    // Allow `src_lang` to be optional. If not set, we'll use the tokenizer's default.\n    if (src_lang_token !== undefined) {\n        // Check that the source language is valid:\n        if (!self.language_codes.includes(src_lang_token)) {\n            throw new Error(`Source language code \"${src_lang_token}\" is not valid. Must be one of: {${self.language_codes.join(', ')}}`);\n        }\n\n        // In the same way as the Python library, we override the post-processor\n        // to force the source language to be first:\n        for (const item of self.post_processor.config.single) {\n            if ('SpecialToken' in item && self.languageRegex.test(item.SpecialToken.id)) {\n                item.SpecialToken.id = self.lang_to_token(src_lang_token);\n                break;\n            }\n        }\n        // TODO: Do the same for pair?\n    }\n\n    // Override the `forced_bos_token_id` to force the correct language\n    generate_kwargs.forced_bos_token_id = self.model.convert_tokens_to_ids([self.lang_to_token(tgt_lang_token)])[0];\n\n    return self._call(raw_inputs, tokenizer_options);\n}\n\n/**\n * The NllbTokenizer class is used to tokenize text for NLLB (\"No Language Left Behind\") models.\n * \n * No Language Left Behind (NLLB) is a first-of-its-kind, AI breakthrough project\n * that open-sources models capable of delivering high-quality translations directly\n * between any pair of 200+ languages — including low-resource languages like Asturian,\n * Luganda, Urdu and more. It aims to help people communicate with anyone, anywhere,\n * regardless of their language preferences. For more information, check out their\n * [paper](https://arxiv.org/abs/2207.04672).\n * \n * For a list of supported languages (along with their language codes),\n * @see {@link https://github.com/facebookresearch/flores/blob/main/flores200/README.md#languages-in-flores-200}\n */\nexport class NllbTokenizer extends PreTrainedTokenizer {\n\n    constructor(tokenizerJSON, tokenizerConfig) {\n        super(tokenizerJSON, tokenizerConfig);\n\n        this.languageRegex = /^[a-z]{3}_[A-Z][a-z]{3}$/;\n        this.language_codes = this.special_tokens.filter(x => this.languageRegex.test(x));\n        this.lang_to_token = x => x; // Identity function\n    }\n\n    /**\n     * Helper function to build translation inputs for an `NllbTokenizer`.\n     * @param {string|string[]} raw_inputs The text to tokenize.\n     * @param {Object} tokenizer_options Options to be sent to the tokenizer\n     * @param {Object} generate_kwargs Generation options.\n     * @returns {Object} Object to be passed to the model.\n     */\n    _build_translation_inputs(raw_inputs, tokenizer_options, generate_kwargs) {\n        return _build_translation_inputs(this, raw_inputs, tokenizer_options, generate_kwargs);\n    }\n}\n\n/**\n * The M2M100Tokenizer class is used to tokenize text for M2M100 (\"Many-to-Many\") models.\n * \n * M2M100 is a multilingual encoder-decoder (seq-to-seq) model trained for Many-to-Many\n * multilingual translation. It was introduced in this [paper](https://arxiv.org/abs/2010.11125)\n * and first released in [this](https://github.com/pytorch/fairseq/tree/master/examples/m2m_100) repository.\n * \n * For a list of supported languages (along with their language codes),\n * @see {@link https://huggingface.co/facebook/m2m100_418M#languages-covered}\n */\nexport class M2M100Tokenizer extends PreTrainedTokenizer {\n    constructor(tokenizerJSON, tokenizerConfig) {\n        super(tokenizerJSON, tokenizerConfig);\n\n        this.languageRegex = /^__[a-z]{2,3}__$/;\n        this.language_codes = this.special_tokens\n            .filter(x => this.languageRegex.test(x))\n            .map(x => x.slice(2, -2));\n        this.lang_to_token = x => `__${x}__`;\n    }\n\n    /**\n     * Helper function to build translation inputs for an `M2M100Tokenizer`.\n     * @param {string|string[]} raw_inputs The text to tokenize.\n     * @param {Object} tokenizer_options Options to be sent to the tokenizer\n     * @param {Object} generate_kwargs Generation options.\n     * @returns {Object} Object to be passed to the model.\n     */\n    _build_translation_inputs(raw_inputs, tokenizer_options, generate_kwargs) {\n        return _build_translation_inputs(this, raw_inputs, tokenizer_options, generate_kwargs);\n    }\n}\n\n/**\n * WhisperTokenizer tokenizer\n * @extends PreTrainedTokenizer\n */\nexport class WhisperTokenizer extends PreTrainedTokenizer {\n\n    get timestamp_begin() {\n        return this.model.convert_tokens_to_ids([\"<|notimestamps|>\"])[0] + 1;\n    }\n\n    /**\n     * Decodes automatic speech recognition (ASR) sequences.\n     * @param {Array<{tokens: bigint[], token_timestamps?: number[], stride: number[]}>} sequences The sequences to decode.\n     * @param {Object} options The options to use for decoding.\n     * @returns {Array<string|{chunks?: undefined|Array<{language: string|null, timestamp: Array<number|null>, text: string}>}>} The decoded sequences.\n     */\n    _decode_asr(sequences, {\n        return_timestamps = false,\n        return_language = false,\n        time_precision = null,\n        force_full_sequences = true\n    } = {}) {\n        // Set force_full_sequences=false if you want streaming\n        // TODO add support for `return_language`\n\n        // Internal method meant to only be used by asr pipeline.\n        // Handles all the little quirks specific to whisper to handle\n        // the various options not allowed in other seq2seq models\n\n        // =========== Overview ============\n        // - iterate over all outputs\n        // - all tokens within output\n        // - Each token can be\n        //   - language token\n        //   - special token\n        //   - timestamp token\n        //   - text token\n        // - We accumulate the text tokens.\n        // - We split on end timestamps\n        // - Lots of complexity comes from stride and timestamps\n\n        if (time_precision === null) {\n            throw Error(\"Must specify time_precision\")\n        }\n        let last_language = null;\n\n        const returnWordTimestamps = return_timestamps === \"word\";\n\n        function new_chunk() {\n            return { \"language\": last_language, \"timestamp\": [null, null], \"text\": \"\" };\n        }\n\n        // Welcome to the state machine!\n        const chunks = [];\n        let chunk = new_chunk();\n        let time_offset = 0.0;\n        const timestamp_begin = this.timestamp_begin;\n\n        let previous_tokens = [];\n        let previous_token_timestamps = [];\n\n        let skip = false;\n        let right_stride_start = null;\n\n\n        const all_special_ids = new Set(this.all_special_ids);\n\n        for (const output of sequences) {\n            // NOTE: python version has batches, so it uses [0]\n            const token_ids = output.tokens;\n            const token_timestamps = returnWordTimestamps ? output.token_timestamps : null;\n\n            // These keep track of timestamps within strides, which need\n            // to be skipped and resolve all tokens in a single chunk.\n            let last_timestamp = null;\n            let first_timestamp = timestamp_begin;\n\n            if (\"stride\" in output) {\n                const [chunk_len, stride_left, stride_right] = output.stride;\n\n                // Offset the timings to account for the other `model_outputs`.\n                time_offset -= stride_left;\n                right_stride_start = chunk_len - stride_right;\n\n                // Keeping track of timestamps within strides\n                // We're going to NOT split on those, and delay until we're\n                // out of BOTH stride. Otherwise lots of issues occur and\n                // corner cases\n                if (stride_left) {\n                    first_timestamp = stride_left / time_precision + timestamp_begin;\n                }\n\n                if (stride_right) {\n                    for (let i = token_ids.length - 1; i >= 0; --i) {\n                        const token = Number(token_ids[i]);\n                        if (token >= timestamp_begin) {\n                            // There can be several token in the right stride\n                            // But the last one is ALWAYS going to be skipped\n                            if (last_timestamp !== null && (token - timestamp_begin) * time_precision < right_stride_start) {\n                                break;\n                            }\n                            last_timestamp = token;\n                        }\n                    }\n                }\n            }\n\n            let current_tokens = [];\n            let current_token_timestamps = [];\n\n            // - all tokens within output\n            for (let i = 0; i < token_ids.length; ++i) {\n                const token = Number(token_ids[i]);\n                // 4 possible states for each token\n                // - 1/ Language code\n                // - 2/ all other special tokens (which we ignore)\n                // - 3/ Timestamp\n                // - 4/ Regular text\n\n                if (all_special_ids.has(token)) {\n                    const text = this.decode([token]);\n                    const language = WHISPER_LANGUAGE_MAPPING.get(text.slice(2, -2));\n\n                    if (language !== undefined) {\n                        // 1/ Indeed some language\n                        // TODO Handle when language is different from the previous\n                        // one, and we cannot use timestamped tokens to create chunks\n                        if (last_language !== null && language !== last_language && !return_timestamps) {\n                            previous_tokens.push(current_tokens);\n                            const resolved_tokens = this.findLongestCommonSequence(previous_tokens)[0];\n                            const resolved_text = this.decode(resolved_tokens);\n                            chunk.text = resolved_text;\n                            chunks.push(chunk);\n\n                            // Flush all our temporary context\n                            previous_tokens = [];\n                            current_tokens = [];\n                            chunk = new_chunk();\n                        }\n\n                        last_language = chunk.language = language;\n                    } else {\n                        // 2/ This is a regular special token, ignoring it\n                    }\n                } else if (token >= timestamp_begin) {\n                    // 3/ Timestamp token\n                    const time = (token - timestamp_begin) * time_precision + time_offset;\n                    const rounded_time = round(time, 2);\n\n                    if (last_timestamp !== null && token >= last_timestamp) {\n                        // Whisper outputted a timestamp token, but it falls within\n                        // our stride, so we're going to skip it for the time being\n                        // and resolve this later\n                        // Skip is necessary because timestamp tokens always come\n                        // by pair, so we need to skip the next one too (which would mark the start of another chunk).\n                        skip = true;\n                    } else if (skip || (previous_tokens.length > 0 && token < first_timestamp)) {\n                        skip = false;\n                    } else if (chunk.timestamp[0] === null) {\n                        chunk.timestamp[0] = rounded_time;\n                    } else {\n                        // This is the end of the timestamp chunk\n                        if (rounded_time === chunk.timestamp[0]) {\n                            // This is a bug in timestamp token output\n                            // where we're taking the duplicate token\n                            // as a stop where it should be a start.\n                            // This is an issue in the underlying model output\n                            // Let's just skip it so it becomes de-factor a start agin\n                        } else {\n                            chunk.timestamp[1] = rounded_time;\n\n                            // Handling merges\n                            previous_tokens.push(current_tokens)\n\n                            if (returnWordTimestamps) {\n                                previous_token_timestamps.push(current_token_timestamps);\n                            }\n                            const [resolved_tokens, resolved_token_timestamps] = this.findLongestCommonSequence(\n                                previous_tokens, previous_token_timestamps\n                            )\n\n                            const resolved_text = this.decode(resolved_tokens)\n                            chunk.text = resolved_text\n\n                            if (returnWordTimestamps) {\n                                chunk.words = this.collateWordTimestamps(\n                                    resolved_tokens, resolved_token_timestamps, last_language,\n                                )\n                            }\n\n                            chunks.push(chunk)\n\n                            // Flush all our temporary context\n                            previous_tokens = []\n                            current_tokens = []\n                            previous_token_timestamps = []\n                            current_token_timestamps = []\n                            chunk = new_chunk()\n                        }\n                    }\n\n                } else {\n                    // 4/ Regular token\n                    // We just append to the list of all tokens so we can handle\n                    // merges later and decode into text.\n                    current_tokens.push(token)\n\n                    if (returnWordTimestamps) {\n                        let start_time = round(token_timestamps[i] + time_offset, 2);\n\n                        let end_time;\n                        if (i + 1 < token_timestamps.length) {\n                            end_time = round(token_timestamps[i + 1] + time_offset, 2);\n\n                            // Do not allow punctuation-only tokens to have a duration.\n                            // This prevents long pauses from messing up the timestamps.\n                            const decoded_text = this.decode([token]);\n                            if (PUNCTUATION_ONLY_REGEX.test(decoded_text)) {\n                                // Add `time_precision` to avoid overlapping timestamps\n                                end_time = round(Math.min(start_time + time_precision, end_time), 2);\n                            }\n                        } else {\n                            // should never happen\n                            end_time = null;\n                        }\n                        current_token_timestamps.push([start_time, end_time]);\n                    }\n\n                }\n            }\n\n            if ('stride' in output) {\n                const [chunk_len, stride_left, stride_right] = output.stride;\n                time_offset += chunk_len - stride_right\n            }\n\n            // Leftover tokens\n            if (current_tokens.length > 0) {\n                previous_tokens.push(current_tokens)\n                if (returnWordTimestamps) {\n                    previous_token_timestamps.push(current_token_timestamps);\n                }\n            } else if (previous_tokens.every(p => p.length === 0)) {\n                // Flushing previous tokens (END)\"\n                chunk = new_chunk()\n                previous_tokens = []\n                current_tokens = []\n                previous_token_timestamps = [];\n                current_token_timestamps = [];\n            }\n\n        }\n\n        if (previous_tokens.length > 0) {\n            if (force_full_sequences && return_timestamps) {\n                // Last token should always be timestamps, so there shouldn't be\n                // leftover\n                throw new Error(\n                    \"Whisper did not predict an ending timestamp, which can happen if audio is cut off in the middle of a word. \" +\n                    \"Also make sure WhisperTimeStampLogitsProcessor was used during generation.\"\n                );\n            }\n\n            // Happens when we don't use timestamps\n            const [resolved_tokens, resolved_token_timestamps] = this.findLongestCommonSequence(previous_tokens, previous_token_timestamps);\n\n            // Flushing previous tokens (FINAL)\n            const resolved_text = this.decode(resolved_tokens);\n            chunk.text = resolved_text;\n            if (returnWordTimestamps) {\n                chunk.words = this.collateWordTimestamps(\n                    resolved_tokens, resolved_token_timestamps, last_language,\n                )\n            }\n            chunks.push(chunk);\n        }\n\n        let optional = Object.create(null);\n\n        // Preparing and cleaning up the pipeline output\n        const full_text = chunks.map(chunk => chunk.text).join('');\n        if (return_timestamps || return_language) {\n            for (let i = 0; i < chunks.length; ++i) {\n                const chunk = chunks[i];\n                if (!return_timestamps) {\n                    delete chunk[\"timestamp\"];\n                }\n\n                if (!return_language) {\n                    delete chunk[\"language\"];\n                }\n            }\n            if (returnWordTimestamps) {\n                const new_chunks = [];\n                for (const chunk of chunks) {\n                    for (const word of chunk.words) {\n                        new_chunks.push(word);\n                    }\n                }\n                optional = { \"chunks\": new_chunks };\n            } else {\n                optional = { \"chunks\": chunks };\n            }\n        }\n        return [full_text, optional];\n\n    }\n\n    /**\n     * Finds the longest common sequence among the provided sequences.\n     * @param {number[][]} sequences An array of sequences of token ids to compare.\n     * @returns {number[][]} The longest common sequence found.\n     * @throws {Error} If there is a bug within the function.\n     * @private\n     */\n    findLongestCommonSequence(sequences, token_timestamp_sequences = null) {\n        // It would be much harder to do O(n) because of fault tolerance.\n        // We actually have a really good property which is that the total sequence\n        // MUST be those subsequences in order.\n        // If token_timestamp_sequences is provided, will split those sequences in\n        // exactly the same way.\n        let leftSequence = sequences[0];\n        let leftLength = leftSequence.length;\n        let totalSequence = [];\n\n        const use_token_timestamp_sequences = Array.isArray(token_timestamp_sequences) && token_timestamp_sequences.length > 0;\n        let total_token_timestamp_sequence = use_token_timestamp_sequences ? [] : null;\n        let left_token_timestamp_sequence = use_token_timestamp_sequences ? token_timestamp_sequences[0] : null;\n        for (let i = 1; i < sequences.length; ++i) {\n            const rightSequence = sequences[i];\n            let max = 0.0;\n            let maxIndices = [leftLength, leftLength, 0, 0];\n            // Here we're sliding matches\n            // [a, b, c, d]\n            //          [c, d, f]\n            // =        [c] == [d]\n\n            // [a, b, c, d]\n            //       [c, d, f]\n            // =     [c, d] == [c, d]\n\n\n            // [a, b, c, d]\n            //    [c, d, f]\n\n            // =  [b, c, d] == [c, d, f]\n\n            // [a, b, c, d]\n            // [c, d, f]\n\n            // [a, b, c] == [c, d, f]\n\n            // [a, b, c, d]\n            // [d, f]\n\n            // [a, b] == [d, f]\n\n            // [a, b, c, d]\n            // [f]\n\n            // [a] == [f]\n\n            const rightLength = rightSequence.length;\n            for (let j = 1; j < leftLength + rightLength; ++j) {\n                // Slightly convoluted because we don't want out of bound indices\n                // This will be necessary for a small conflict resolution optimization\n                // later\n                const leftStart = Math.max(0, leftLength - j);\n                const leftStop = Math.min(leftLength, leftLength + rightLength - j);\n                const left = leftSequence.slice(leftStart, leftStop);\n                const rightStart = Math.max(0, j - leftLength);\n                const rightStop = Math.min(rightLength, j);\n                const right = rightSequence.slice(rightStart, rightStop);\n                if (left.length !== right.length) {\n                    throw new Error(\"There is a bug within whisper `decode_asr` function, please report it. Dropping to prevent bad inference.\");\n                }\n\n                let matches;\n                if (use_token_timestamp_sequences) {\n                    // Get length of longest subsequence of tokens that match\n                    // and have timestamps that are in order\n                    matches = left.filter((elem, idx) => (\n                        elem === right[idx]\n                        && left_token_timestamp_sequence[leftStart + idx] <= token_timestamp_sequences[i][rightStart + idx]\n                    )).length;\n                } else {\n                    matches = left.filter((elem, idx) => elem === right[idx]).length;\n                }\n\n                // epsilon to favor long perfect matches\n                const eps = j / 10000.0;\n                const matching = matches / j + eps;\n                if (matches > 1 && matching > max) {\n                    max = matching;\n                    maxIndices = [leftStart, leftStop, rightStart, rightStop];\n                }\n            }\n            const [leftStart, leftStop, rightStart, rightStop] = maxIndices;\n            const leftMid = Math.floor((leftStop + leftStart) / 2);\n            const rightMid = Math.floor((rightStop + rightStart) / 2);\n            totalSequence.push(...leftSequence.slice(0, leftMid));\n            leftSequence = rightSequence.slice(rightMid);\n            leftLength = leftSequence.length;\n\n            if (use_token_timestamp_sequences) {\n                total_token_timestamp_sequence.push(...left_token_timestamp_sequence.slice(0, leftMid));\n                left_token_timestamp_sequence = token_timestamp_sequences[i].slice(rightMid);\n            }\n        }\n        totalSequence.push(...leftSequence);\n\n        if (use_token_timestamp_sequences) {\n            total_token_timestamp_sequence.push(...left_token_timestamp_sequence);\n            return [totalSequence, total_token_timestamp_sequence];\n        } else {\n            return [totalSequence, []];\n        }\n    }\n\n    /** @private */\n    collateWordTimestamps(tokens, token_timestamps, language) {\n\n        const [words, _, token_indices] = this.combineTokensIntoWords(tokens, language);\n\n        const timings = [];\n        for (let i = 0; i < words.length; ++i) {\n            const indices = token_indices[i];\n            timings.push({\n                text: words[i],\n                timestamp: [\n                    token_timestamps[indices.at(0)][0],\n                    token_timestamps[indices.at(-1)][1],\n                ],\n            });\n        }\n        return timings;\n    }\n\n    /**\n     * Groups tokens by word. Returns a tuple containing a list of strings with the words,\n     * and a list of `token_id` sequences with the tokens making up each word.\n     * @param {number[]} tokens \n     * @param {string} [language] \n     * @param {string} prepend_punctionations \n     * @param {string} append_punctuations \n     * \n     * @private\n     */\n    combineTokensIntoWords(tokens, language, prepend_punctionations = \"\\\"'“¡¿([{-\", append_punctuations = \"\\\"'.。,，!！?？:：”)]}、\") {\n        language = language ?? 'english';\n\n        let words, word_tokens, token_indices;\n\n        if ([\"chinese\", \"japanese\", \"thai\", \"lao\", \"myanmar\"].includes(language)) {\n            // These languages don't typically use spaces.\n            [words, word_tokens, token_indices] = this.splitTokensOnUnicode(tokens)\n        } else {\n            [words, word_tokens, token_indices] = this.splitTokensOnSpaces(tokens)\n        }\n\n        return this.mergePunctuations(words, word_tokens, token_indices, prepend_punctionations, append_punctuations);\n    }\n\n    /** @type {PreTrainedTokenizer['decode']} */\n    decode(\n        token_ids,\n        decode_args,\n    ) {\n        let text;\n        // @ts-ignore\n        if (decode_args?.decode_with_timestamps) {\n            if (token_ids instanceof Tensor) {\n                token_ids = prepareTensorForDecode(token_ids);\n            }\n            text = this.decodeWithTimestamps(token_ids, decode_args);\n        } else {\n            text = super.decode(token_ids, decode_args);\n        }\n        // TODO: implement offsets\n        // if (decode_args.output_offsets) {\n        //     let offsets = this.computeOffsets\n        // }\n        return text;\n    }\n\n    /**\n     * @param {number[]|bigint[]} token_ids List of token IDs to decode.\n     * @param {Object} decode_args Optional arguments for decoding\n     * @private\n     */\n    decodeWithTimestamps(token_ids, decode_args) {\n        const time_precision = decode_args?.time_precision ?? 0.02;\n\n        const timestamp_begin = Array.from(this.all_special_ids).at(-1) + 1;\n        /**@type {Array} */\n        let outputs = [[]];\n        for (let token of token_ids) {\n            token = Number(token);\n            if (token >= timestamp_begin) {\n                const timestamp = ((token - timestamp_begin) * time_precision).toFixed(2);\n                outputs.push(`<|${timestamp}|>`);\n                outputs.push([]);\n            } else {\n                outputs[outputs.length - 1].push(token);\n            }\n        }\n        outputs = outputs.map(\n            s => typeof s === 'string' ? s : super.decode(s, decode_args)\n        )\n\n        return outputs.join('');\n    }\n\n    /**\n     * Combine tokens into words by splitting at any position where the tokens are decoded as valid unicode points.\n     * @param {number[]} tokens \n     * @returns {*}\n     * @private\n     */\n    splitTokensOnUnicode(tokens) {\n        const decoded_full = this.decode(tokens, {\n            // @ts-ignore\n            decode_with_timestamps: true,\n        });\n        const replacement_char = '\\uFFFD';\n\n        const words = []\n        const word_tokens = []\n        const token_indices = []\n        let current_tokens = []\n        let current_indices = []\n        let unicode_offset = 0\n\n        for (let token_idx = 0; token_idx < tokens.length; ++token_idx) {\n            const token = tokens[token_idx];\n\n            current_tokens.push(token);\n            current_indices.push(token_idx);\n\n            const decoded = this.decode(current_tokens, {\n                // @ts-ignore\n                decode_with_timestamps: true,\n            });\n\n            if (!decoded.includes(replacement_char) || decoded_full[unicode_offset + decoded.indexOf(replacement_char)] === replacement_char) {\n                words.push(decoded)\n                word_tokens.push(current_tokens)\n                token_indices.push(current_indices)\n                current_tokens = []\n                current_indices = []\n                unicode_offset += decoded.length;\n            }\n\n        }\n\n        return [words, word_tokens, token_indices]\n    }\n\n    /**\n     * Combine tokens into words by splitting at whitespace and punctuation tokens.\n     * @param {number[]} tokens \n     * @private\n     */\n    splitTokensOnSpaces(tokens) {\n\n        const [subwords, subword_tokens_list, subword_indices_list] = this.splitTokensOnUnicode(tokens);\n\n        const words = []\n        const word_tokens = []\n        const token_indices = []\n\n        const punctuationRegex = new RegExp(`^[${PUNCTUATION_REGEX}]$`, 'gu');\n\n        for (let i = 0; i < subwords.length; ++i) {\n\n            const subword = subwords[i];\n            const subword_tokens = subword_tokens_list[i];\n            const subword_indices = subword_indices_list[i];\n\n            // @ts-ignore\n            const special = subword_tokens[0] >= this.model.tokens_to_ids.get('<|endoftext|>');\n            const with_space = subword.startsWith(' ');\n            const trimmed = subword.trim();\n            const punctuation = punctuationRegex.test(trimmed);\n\n            if (special || with_space || punctuation || words.length === 0) {\n                words.push(subword);\n                word_tokens.push(subword_tokens);\n                token_indices.push(subword_indices);\n            } else {\n                const ix = words.length - 1;\n                words[ix] += subword;\n                word_tokens[ix].push(...subword_tokens);\n                token_indices[ix].push(...subword_indices);\n            }\n        }\n\n        return [words, word_tokens, token_indices];\n\n    }\n\n    /**\n     * Merges punctuation tokens with neighboring words.\n     * @param {string[]} words \n     * @param {number[][]} tokens \n     * @param {number[][]} indices \n     * @param {string} prepended \n     * @param {string} appended \n     * @private\n     */\n    mergePunctuations(words, tokens, indices, prepended, appended) {\n\n        const newWords = structuredClone(words);\n        const newTokens = structuredClone(tokens);\n        const newIndices = structuredClone(indices);\n\n\n        // prepend punctuations\n        let i = newWords.length - 2;\n        let j = newWords.length - 1;\n\n        while (i >= 0) {\n            if (newWords[i].startsWith(' ') && prepended.includes(newWords[i].trim())) {\n                newWords[j] = newWords[i] + newWords[j];\n                newTokens[j] = mergeArrays(newTokens[i], newTokens[j]);\n                newIndices[j] = mergeArrays(newIndices[i], newIndices[j]);\n                newWords[i] = '';\n                newTokens[i] = [];\n                newIndices[i] = [];\n            } else {\n                j = i;\n            }\n            --i;\n        }\n\n        // append punctuations\n        i = 0;\n        j = 1;\n        while (j < newWords.length) {\n            if (!newWords[i].endsWith(' ') && appended.includes(newWords[j])) {\n                newWords[i] += newWords[j];\n                newTokens[i] = mergeArrays(newTokens[i], newTokens[j]);\n                newIndices[i] = mergeArrays(newIndices[i], newIndices[j]);\n                newWords[j] = '';\n                newTokens[j] = [];\n                newIndices[j] = [];\n            } else {\n                i = j;\n            }\n            ++j;\n        }\n\n        return [\n            newWords.filter(x => x),\n            newTokens.filter(x => x.length > 0),\n            newIndices.filter(x => x.length > 0),\n        ]\n    }\n\n    /**\n     * Helper function to build translation inputs for a `WhisperTokenizer`,\n     * depending on the language, task, and whether to predict timestamp tokens.\n     * \n     * Used to override the prefix tokens appended to the start of the label sequence.\n     * \n     * **Example: Get ids for a language**\n     * ```javascript\n     * // instantiate the tokenizer and set the prefix token to Spanish\n     * const tokenizer = await WhisperTokenizer.from_pretrained('Xenova/whisper-tiny');\n     * const forced_decoder_ids = tokenizer.get_decoder_prompt_ids({ language: 'spanish' });\n     * // [(1, 50262), (2, 50363)]\n     * ```\n     * \n     * @param {Object} options Options to generate the decoder prompt.\n     * @param {string} [options.language] The language of the transcription text.\n     * The corresponding language id token is appended to the start of the sequence for multilingual\n     * speech recognition and speech translation tasks, e.g. for \"Spanish\" the token \"<|es|>\" is appended\n     * to the start of sequence.\n     * @param {string} [options.task] Task identifier to append at the start of sequence (if any).\n     * This should be used for mulitlingual fine-tuning, with \"transcribe\" for speech recognition and\n     * \"translate\" for speech translation.\n     * @param {boolean} [options.no_timestamps] Whether to add the <|notimestamps|> token at the start of the sequence.\n     * @returns {number[][]} The decoder prompt ids.\n     */\n    get_decoder_prompt_ids({\n        language = null,\n        task = null,\n        no_timestamps = true,\n    } = {}) {\n\n        // <|lang_id|> <|task|> <|notimestamps|>\n\n        const forced_decoder_ids = [];\n\n        if (language) {\n            // User wishes to specify the language\n            const language_code = whisper_language_to_code(language);\n            const language_token_id = this.model.tokens_to_ids.get(`<|${language_code}|>`);\n            if (language_token_id === undefined) {\n                throw new Error(`Unable to find language \"${language_code}\" in model vocabulary. Please report this issue at ${GITHUB_ISSUE_URL}.`)\n            }\n\n            forced_decoder_ids.push(language_token_id);\n        } else {\n            // No token will be forced, which leaves the model to predict the language\n            forced_decoder_ids.push(null);\n        }\n\n        if (task) {\n            task = task.toLowerCase();\n            if (task !== 'transcribe' && task !== 'translate') {\n                throw new Error(`Task \"${task}\" is not supported. Must be one of: [\"transcribe\", \"translate\"]`);\n            }\n\n            const task_token_id = this.model.tokens_to_ids.get(`<|${task}|>`);\n            if (task_token_id === undefined) {\n                throw new Error(`Unable to find task \"${task}\" in model vocabulary. Please report this issue at ${GITHUB_ISSUE_URL}.`)\n            }\n\n            forced_decoder_ids.push(task_token_id);\n        } else {\n            // No token will be forced, which leaves the model to predict the task\n            forced_decoder_ids.push(null);\n        }\n\n        if (no_timestamps) {\n            const no_timestamps_id = this.model.tokens_to_ids.get(`<|notimestamps|>`);\n            if (no_timestamps_id === undefined) {\n                throw new Error(`Unable to find \"<|notimestamps|>\" in model vocabulary. Please report this issue at ${GITHUB_ISSUE_URL}.`);\n            }\n\n            forced_decoder_ids.push(no_timestamps_id);\n        }\n\n        return forced_decoder_ids.map((x, i) => [i + 1, x]).filter(x => x[1] !== null);\n\n    }\n}\nexport class CodeGenTokenizer extends PreTrainedTokenizer { }\nexport class CLIPTokenizer extends PreTrainedTokenizer { }\nexport class SiglipTokenizer extends PreTrainedTokenizer { }\n\n/**\n * @todo This model is not yet supported by Hugging Face's \"fast\" tokenizers library (https://github.com/huggingface/tokenizers).\n * Therefore, this implementation (which is based on fast tokenizers) may produce slightly inaccurate results.\n */\nexport class MarianTokenizer extends PreTrainedTokenizer {\n    /**\n     * Create a new MarianTokenizer instance.\n     * @param {Object} tokenizerJSON The JSON of the tokenizer.\n     * @param {Object} tokenizerConfig The config of the tokenizer.\n     */\n    constructor(tokenizerJSON, tokenizerConfig) {\n        super(tokenizerJSON, tokenizerConfig);\n\n        this.languageRegex = /^(>>\\w+<<)\\s*/g;\n\n        this.supported_language_codes = this.model.vocab.filter(\n            x => this.languageRegex.test(x)\n        );\n\n        console.warn('WARNING: `MarianTokenizer` is not yet supported by Hugging Face\\'s \"fast\" tokenizers library. Therefore, you may experience slightly inaccurate results.')\n    }\n\n    /**\n     * Encodes a single text. Overriding this method is necessary since the language codes\n     * must be removed before encoding with sentencepiece model.\n     * @see https://github.com/huggingface/transformers/blob/12d51db243a00726a548a43cc333390ebae731e3/src/transformers/models/marian/tokenization_marian.py#L204-L213\n     *\n     * @param {string|null} text The text to encode.\n     * @returns {Array} The encoded tokens.\n     */\n    _encode_text(text) {\n        if (text === null) return null;\n\n        // Check if text starts with language code:\n        const [matchInfo, ...remainder] = text.trim().split(this.languageRegex);\n\n        if (remainder.length === 0) {\n            // No language code, encode normally\n            return super._encode_text(matchInfo);\n\n        } else if (remainder.length === 2) {\n            // Text starts with language code, so we do not encode it with sentencepiece.\n            const [language, text] = remainder;\n\n            if (!this.supported_language_codes.includes(language)) {\n                console.warn(`Unsupported language code \"${language}\" detected, which may lead to unexpected behavior. Should be one of: ${JSON.stringify(this.supported_language_codes)}`)\n            }\n            return mergeArrays([language], super._encode_text(text));\n        }\n    }\n\n}\n\nexport class Wav2Vec2CTCTokenizer extends PreTrainedTokenizer { }\n\nexport class BlenderbotTokenizer extends PreTrainedTokenizer { }\nexport class BlenderbotSmallTokenizer extends PreTrainedTokenizer { }\n\nexport class SpeechT5Tokenizer extends PreTrainedTokenizer { }\n\nexport class NougatTokenizer extends PreTrainedTokenizer { }\n\nexport class VitsTokenizer extends PreTrainedTokenizer {\n\n    constructor(tokenizerJSON, tokenizerConfig) {\n        super(tokenizerJSON, tokenizerConfig);\n\n        // Custom decoder function\n        this.decoder = new VitsDecoder({});\n    }\n}\n\nexport class CohereTokenizer extends PreTrainedTokenizer { }\n\n/**\n * Helper class which is used to instantiate pretrained tokenizers with the `from_pretrained` function.\n * The chosen tokenizer class is determined by the type specified in the tokenizer config.\n * \n * @example\n * const tokenizer = await AutoTokenizer.from_pretrained('Xenova/bert-base-uncased');\n */\nexport class AutoTokenizer {\n    static TOKENIZER_CLASS_MAPPING = {\n        T5Tokenizer,\n        DistilBertTokenizer,\n        CamembertTokenizer,\n        DebertaTokenizer,\n        DebertaV2Tokenizer,\n        BertTokenizer,\n        HerbertTokenizer,\n        ConvBertTokenizer,\n        RoFormerTokenizer,\n        XLMTokenizer,\n        ElectraTokenizer,\n        MobileBertTokenizer,\n        SqueezeBertTokenizer,\n        AlbertTokenizer,\n        GPT2Tokenizer,\n        BartTokenizer,\n        MBartTokenizer,\n        MBart50Tokenizer,\n        RobertaTokenizer,\n        WhisperTokenizer,\n        CodeGenTokenizer,\n        CLIPTokenizer,\n        SiglipTokenizer,\n        MarianTokenizer,\n        BloomTokenizer,\n        NllbTokenizer,\n        M2M100Tokenizer,\n        LlamaTokenizer,\n        CodeLlamaTokenizer,\n        XLMRobertaTokenizer,\n        MPNetTokenizer,\n        FalconTokenizer,\n        GPTNeoXTokenizer,\n        EsmTokenizer,\n        Wav2Vec2CTCTokenizer,\n        BlenderbotTokenizer,\n        BlenderbotSmallTokenizer,\n        SpeechT5Tokenizer,\n        NougatTokenizer,\n        VitsTokenizer,\n        Qwen2Tokenizer,\n        GemmaTokenizer,\n        Grok1Tokenizer,\n        CohereTokenizer,\n\n        // Base case:\n        PreTrainedTokenizer,\n    }\n\n\n    /**\n     * Instantiate one of the tokenizer classes of the library from a pretrained model.\n     * \n     * The tokenizer class to instantiate is selected based on the `tokenizer_class` property of the config object\n     * (either passed as an argument or loaded from `pretrained_model_name_or_path` if possible)\n     * \n     * @param {string} pretrained_model_name_or_path The name or path of the pretrained model. Can be either:\n     * - A string, the *model id* of a pretrained tokenizer hosted inside a model repo on huggingface.co.\n     *   Valid model ids can be located at the root-level, like `bert-base-uncased`, or namespaced under a\n     *   user or organization name, like `dbmdz/bert-base-german-cased`.\n     * - A path to a *directory* containing tokenizer files, e.g., `./my_model_directory/`.\n     * @param {PretrainedTokenizerOptions} options Additional options for loading the tokenizer.\n     * \n     * @returns {Promise<PreTrainedTokenizer>} A new instance of the PreTrainedTokenizer class.\n     */\n    static async from_pretrained(pretrained_model_name_or_path, {\n        progress_callback = null,\n        config = null,\n        cache_dir = null,\n        local_files_only = false,\n        revision = 'main',\n        legacy = null,\n    } = {}) {\n\n        const [tokenizerJSON, tokenizerConfig] = await loadTokenizer(pretrained_model_name_or_path, {\n            progress_callback,\n            config,\n            cache_dir,\n            local_files_only,\n            revision,\n            legacy,\n        })\n\n        // Some tokenizers are saved with the \"Fast\" suffix, so we remove that if present.\n        const tokenizerName = tokenizerConfig.tokenizer_class?.replace(/Fast$/, '') ?? 'PreTrainedTokenizer';\n\n        let cls = this.TOKENIZER_CLASS_MAPPING[tokenizerName];\n        if (!cls) {\n            console.warn(`Unknown tokenizer class \"${tokenizerName}\", attempting to construct from base class.`);\n            cls = PreTrainedTokenizer;\n        }\n        return new cls(tokenizerJSON, tokenizerConfig);\n    }\n}\n","/**\n * @file Helper module for audio processing. \n * \n * These functions and classes are only used internally, \n * meaning an end-user shouldn't need to access anything here.\n * \n * @module utils/audio\n */\n\nimport {\n    getFile,\n} from './hub.js';\nimport { FFT, max } from './maths.js';\nimport {\n    calculateReflectOffset,\n} from './core.js';\nimport { Tensor, matmul } from './tensor.js';\n\n\n/**\n * Helper function to read audio from a path/URL.\n * @param {string|URL} url The path/URL to load the audio from.\n * @param {number} sampling_rate The sampling rate to use when decoding the audio.\n * @returns {Promise<Float32Array>} The decoded audio as a `Float32Array`.\n */\nexport async function read_audio(url, sampling_rate) {\n    if (typeof AudioContext === 'undefined') {\n        // Running in node or an environment without AudioContext\n        throw Error(\n            \"Unable to load audio from path/URL since `AudioContext` is not available in your environment. \" +\n            \"Instead, audio data should be passed directly to the pipeline/processor. \" +\n            \"For more information and some example code, see https://huggingface.co/docs/transformers.js/guides/node-audio-processing.\"\n        )\n    }\n\n    const response = await (await getFile(url)).arrayBuffer();\n    const audioCTX = new AudioContext({ sampleRate: sampling_rate });\n    if (typeof sampling_rate === 'undefined') {\n        console.warn(`No sampling rate provided, using default of ${audioCTX.sampleRate}Hz.`)\n    }\n    const decoded = await audioCTX.decodeAudioData(response);\n\n    /** @type {Float32Array} */\n    let audio;\n\n    // We now replicate HuggingFace's `ffmpeg_read` method:\n    if (decoded.numberOfChannels === 2) {\n        // When downmixing a stereo audio file to mono using the -ac 1 option in FFmpeg,\n        // the audio signal is summed across both channels to create a single mono channel.\n        // However, if the audio is at full scale (i.e. the highest possible volume level),\n        // the summing of the two channels can cause the audio signal to clip or distort.\n\n        // To prevent this clipping, FFmpeg applies a scaling factor of 1/sqrt(2) (~ 0.707)\n        // to the audio signal before summing the two channels. This scaling factor ensures\n        // that the combined audio signal will not exceed the maximum possible level, even\n        // if both channels are at full scale.\n\n        // After applying this scaling factor, the audio signal from both channels is summed\n        // to create a single mono channel. It's worth noting that this scaling factor is\n        // only applied when downmixing stereo audio to mono using the -ac 1 option in FFmpeg.\n        // If you're using a different downmixing method, or if you're not downmixing the\n        // audio at all, this scaling factor may not be needed.\n        const SCALING_FACTOR = Math.sqrt(2);\n\n        const left = decoded.getChannelData(0);\n        const right = decoded.getChannelData(1);\n\n        audio = new Float32Array(left.length);\n        for (let i = 0; i < decoded.length; ++i) {\n            audio[i] = SCALING_FACTOR * (left[i] + right[i]) / 2;\n        }\n\n    } else {\n        // If the audio is not stereo, we can just use the first channel:\n        audio = decoded.getChannelData(0);\n    }\n\n    return audio;\n}\n\n/**\n * Helper function to generate windows that are special cases of the generalized cosine window.\n * See https://www.mathworks.com/help/signal/ug/generalized-cosine-windows.html for more information.\n * @param {number} M Number of points in the output window. If zero or less, an empty array is returned.\n * @param {number} a_0 Offset for the generalized cosine window.\n * @returns {Float64Array} The generated window.\n */\nfunction generalized_cosine_window(M, a_0) {\n    if (M < 1) {\n        return new Float64Array();\n    }\n    if (M === 1) {\n        return new Float64Array([1]);\n    }\n\n    const a_1 = 1 - a_0;\n    const factor = 2 * Math.PI / (M - 1);\n\n    const cos_vals = new Float64Array(M);\n    for (let i = 0; i < M; ++i) {\n        cos_vals[i] = a_0 - a_1 * Math.cos(i * factor);\n    }\n    return cos_vals;\n}\n\n/**\n * Generates a Hanning window of length M.\n * See https://numpy.org/doc/stable/reference/generated/numpy.hanning.html for more information.\n *\n * @param {number} M The length of the Hanning window to generate.\n * @returns {Float64Array} The generated Hanning window.\n */\nexport function hanning(M) {\n    return generalized_cosine_window(M, 0.5);\n}\n\n\n/**\n * Generates a Hamming window of length M.\n * See https://numpy.org/doc/stable/reference/generated/numpy.hamming.html for more information.\n *\n * @param {number} M The length of the Hamming window to generate.\n * @returns {Float64Array} The generated Hamming window.\n */\nexport function hamming(M) {\n    return generalized_cosine_window(M, 0.54);\n}\n\n\nconst HERTZ_TO_MEL_MAPPING = {\n    \"htk\": (/** @type {number} */ freq) => 2595.0 * Math.log10(1.0 + (freq / 700.0)),\n    \"kaldi\": (/** @type {number} */ freq) => 1127.0 * Math.log(1.0 + (freq / 700.0)),\n    \"slaney\": (/** @type {number} */ freq, min_log_hertz = 1000.0, min_log_mel = 15.0, logstep = 27.0 / Math.log(6.4)) =>\n        freq >= min_log_hertz\n            ? min_log_mel + Math.log(freq / min_log_hertz) * logstep\n            : 3.0 * freq / 200.0,\n}\n\n/**\n * @template {Float32Array|Float64Array|number} T \n * @param {T} freq \n * @param {string} [mel_scale]\n * @returns {T}\n */\nfunction hertz_to_mel(freq, mel_scale = \"htk\") {\n    const fn = HERTZ_TO_MEL_MAPPING[mel_scale];\n    if (!fn) {\n        throw new Error('mel_scale should be one of \"htk\", \"slaney\" or \"kaldi\".');\n    }\n\n    return typeof freq === 'number' ? fn(freq) : freq.map(x => fn(x));\n}\n\nconst MEL_TO_HERTZ_MAPPING = {\n    \"htk\": (/** @type {number} */ mels) => 700.0 * (10.0 ** (mels / 2595.0) - 1.0),\n    \"kaldi\": (/** @type {number} */ mels) => 700.0 * (Math.exp(mels / 1127.0) - 1.0),\n    \"slaney\": (/** @type {number} */ mels, min_log_hertz = 1000.0, min_log_mel = 15.0, logstep = Math.log(6.4) / 27.0) => mels >= min_log_mel\n        ? min_log_hertz * Math.exp(logstep * (mels - min_log_mel))\n        : 200.0 * mels / 3.0,\n}\n\n/**\n * @template {Float32Array|Float64Array|number} T \n * @param {T} mels \n * @param {string} [mel_scale]\n * @returns {T}\n */\nfunction mel_to_hertz(mels, mel_scale = \"htk\") {\n    const fn = MEL_TO_HERTZ_MAPPING[mel_scale];\n    if (!fn) {\n        throw new Error('mel_scale should be one of \"htk\", \"slaney\" or \"kaldi\".');\n    }\n\n    return typeof mels === 'number' ? fn(mels) : mels.map(x => fn(x));\n}\n\n/**\n* Creates a triangular filter bank.\n*\n* Adapted from torchaudio and librosa.\n*\n* @param {Float64Array} fft_freqs Discrete frequencies of the FFT bins in Hz, of shape `(num_frequency_bins,)`.\n* @param {Float64Array} filter_freqs Center frequencies of the triangular filters to create, in Hz, of shape `(num_mel_filters,)`.\n* @returns {number[][]} of shape `(num_frequency_bins, num_mel_filters)`.\n*/\nfunction _create_triangular_filter_bank(fft_freqs, filter_freqs) {\n    const filter_diff = Float64Array.from(\n        { length: filter_freqs.length - 1 },\n        (_, i) => filter_freqs[i + 1] - filter_freqs[i]\n    );\n\n    const slopes = Array.from({\n        length: fft_freqs.length\n    }, () => new Array(filter_freqs.length));\n\n    for (let j = 0; j < fft_freqs.length; ++j) {\n        const slope = slopes[j];\n        for (let i = 0; i < filter_freqs.length; ++i) {\n            slope[i] = filter_freqs[i] - fft_freqs[j];\n        }\n    }\n\n    const numFreqs = filter_freqs.length - 2;\n    const ret = Array.from({ length: numFreqs }, () => new Array(fft_freqs.length));\n\n    for (let j = 0; j < fft_freqs.length; ++j) { // 201\n        const slope = slopes[j];\n        for (let i = 0; i < numFreqs; ++i) { // 80\n            const down = -slope[i] / filter_diff[i];\n            const up = slope[i + 2] / filter_diff[i + 1];\n            ret[i][j] = Math.max(0, Math.min(down, up));\n        }\n    }\n    return ret;\n}\n\n/**\n * Return evenly spaced numbers over a specified interval.\n * @param {number} start The starting value of the sequence.\n * @param {number} end The end value of the sequence.\n * @param {number} num Number of samples to generate.\n * @returns `num` evenly spaced samples, calculated over the interval `[start, stop]`.\n */\nfunction linspace(start, end, num) {\n    const step = (end - start) / (num - 1);\n    return Float64Array.from({ length: num }, (_, i) => start + step * i);\n}\n\n/**\n * Creates a frequency bin conversion matrix used to obtain a mel spectrogram. This is called a *mel filter bank*, and\n * various implementation exist, which differ in the number of filters, the shape of the filters, the way the filters\n * are spaced, the bandwidth of the filters, and the manner in which the spectrum is warped. The goal of these\n * features is to approximate the non-linear human perception of the variation in pitch with respect to the frequency.\n * @param {number} num_frequency_bins Number of frequencies used to compute the spectrogram (should be the same as in `stft`).\n * @param {number} num_mel_filters Number of mel filters to generate.\n * @param {number} min_frequency Lowest frequency of interest in Hz.\n * @param {number} max_frequency Highest frequency of interest in Hz. This should not exceed `sampling_rate / 2`.\n * @param {number} sampling_rate Sample rate of the audio waveform.\n * @param {string} [norm] If `\"slaney\"`, divide the triangular mel weights by the width of the mel band (area normalization).\n * @param {string} [mel_scale] The mel frequency scale to use, `\"htk\"` or `\"slaney\"`.\n * @param {boolean} [triangularize_in_mel_space] If this option is enabled, the triangular filter is applied in mel space rather than frequency space.\n * This should be set to `true` in order to get the same results as `torchaudio` when computing mel filters.\n * @returns {number[][]} Triangular filter bank matrix, which is a 2D array of shape (`num_frequency_bins`, `num_mel_filters`).\n * This is a projection matrix to go from a spectrogram to a mel spectrogram.\n */\nexport function mel_filter_bank(\n    num_frequency_bins,\n    num_mel_filters,\n    min_frequency,\n    max_frequency,\n    sampling_rate,\n    norm = null,\n    mel_scale = \"htk\",\n    triangularize_in_mel_space = false,\n) {\n    if (norm !== null && norm !== \"slaney\") {\n        throw new Error('norm must be one of null or \"slaney\"');\n    }\n\n    const mel_min = hertz_to_mel(min_frequency, mel_scale);\n    const mel_max = hertz_to_mel(max_frequency, mel_scale);\n    const mel_freqs = linspace(mel_min, mel_max, num_mel_filters + 2);\n\n    let filter_freqs = mel_to_hertz(mel_freqs, mel_scale);\n    let fft_freqs; // frequencies of FFT bins in Hz\n\n    if (triangularize_in_mel_space) {\n        const fft_bin_width = sampling_rate / (num_frequency_bins * 2);\n        fft_freqs = hertz_to_mel(Float64Array.from({ length: num_frequency_bins }, (_, i) => i * fft_bin_width), mel_scale);\n        filter_freqs = mel_freqs;\n    } else {\n        fft_freqs = linspace(0, Math.floor(sampling_rate / 2), num_frequency_bins);\n    }\n\n    const mel_filters = _create_triangular_filter_bank(fft_freqs, filter_freqs);\n\n    if (norm !== null && norm === \"slaney\") {\n        // Slaney-style mel is scaled to be approx constant energy per channel\n        for (let i = 0; i < num_mel_filters; ++i) {\n            const filter = mel_filters[i];\n            const enorm = 2.0 / (filter_freqs[i + 2] - filter_freqs[i]);\n            for (let j = 0; j < num_frequency_bins; ++j) {\n                // Apply this enorm to all frequency bins\n                filter[j] *= enorm;\n            }\n        }\n    }\n\n    // TODO warn if there is a zero row\n\n    return mel_filters;\n\n}\n\n/**\n * @template {Float32Array|Float64Array} T\n * Pads an array with a reflected version of itself on both ends.\n * @param {T} array The array to pad.\n * @param {number} left The amount of padding to add to the left.\n * @param {number} right The amount of padding to add to the right.\n * @returns {T} The padded array.\n */\nfunction padReflect(array, left, right) {\n    // @ts-ignore\n    const padded = new array.constructor(array.length + left + right);\n    const w = array.length - 1;\n\n    for (let i = 0; i < array.length; ++i) {\n        padded[left + i] = array[i];\n    }\n\n    for (let i = 1; i <= left; ++i) {\n        padded[left - i] = array[calculateReflectOffset(i, w)];\n    }\n\n    for (let i = 1; i <= right; ++i) {\n        padded[w + left + i] = array[calculateReflectOffset(w - i, w)];\n    }\n\n    return padded;\n}\n\n/**\n * Helper function to compute `amplitude_to_db` and `power_to_db`.\n * @template {Float32Array|Float64Array} T\n * @param {T} spectrogram \n * @param {number} factor \n * @param {number} reference \n * @param {number} min_value \n * @param {number} db_range \n * @returns {T}\n */\nfunction _db_conversion_helper(spectrogram, factor, reference, min_value, db_range) {\n    if (reference <= 0) {\n        throw new Error('reference must be greater than zero');\n    }\n\n    if (min_value <= 0) {\n        throw new Error('min_value must be greater than zero');\n    }\n\n    reference = Math.max(min_value, reference);\n\n    const logReference = Math.log10(reference);\n    for (let i = 0; i < spectrogram.length; ++i) {\n        spectrogram[i] = factor * Math.log10(Math.max(min_value, spectrogram[i]) - logReference)\n    }\n\n    if (db_range !== null) {\n        if (db_range <= 0) {\n            throw new Error('db_range must be greater than zero');\n        }\n        const maxValue = max(spectrogram)[0] - db_range;\n        for (let i = 0; i < spectrogram.length; ++i) {\n            spectrogram[i] = Math.max(spectrogram[i], maxValue);\n        }\n    }\n\n    return spectrogram;\n}\n\n/**\n * Converts an amplitude spectrogram to the decibel scale. This computes `20 * log10(spectrogram / reference)`,\n * using basic logarithm properties for numerical stability. NOTE: Operates in-place.\n * \n * The motivation behind applying the log function on the (mel) spectrogram is that humans do not hear loudness on a\n * linear scale. Generally to double the perceived volume of a sound we need to put 8 times as much energy into it.\n * This means that large variations in energy may not sound all that different if the sound is loud to begin with.\n * This compression operation makes the (mel) spectrogram features match more closely what humans actually hear.\n * \n * @template {Float32Array|Float64Array} T\n * @param {T} spectrogram The input amplitude (mel) spectrogram.\n * @param {number} [reference=1.0] Sets the input spectrogram value that corresponds to 0 dB.\n * For example, use `np.max(spectrogram)` to set the loudest part to 0 dB. Must be greater than zero.\n * @param {number} [min_value=1e-5] The spectrogram will be clipped to this minimum value before conversion to decibels,\n * to avoid taking `log(0)`. The default of `1e-5` corresponds to a minimum of -100 dB. Must be greater than zero.\n * @param {number} [db_range=null] Sets the maximum dynamic range in decibels. For example, if `db_range = 80`, the\n * difference between the peak value and the smallest value will never be more than 80 dB. Must be greater than zero.\n * @returns {T} The modified spectrogram in decibels.\n */\nfunction amplitude_to_db(spectrogram, reference = 1.0, min_value = 1e-5, db_range = null) {\n    return _db_conversion_helper(spectrogram, 20.0, reference, min_value, db_range);\n}\n\n/**\n * Converts a power spectrogram to the decibel scale. This computes `10 * log10(spectrogram / reference)`,\n * using basic logarithm properties for numerical stability. NOTE: Operates in-place.\n * \n * The motivation behind applying the log function on the (mel) spectrogram is that humans do not hear loudness on a\n * linear scale. Generally to double the perceived volume of a sound we need to put 8 times as much energy into it.\n * This means that large variations in energy may not sound all that different if the sound is loud to begin with.\n * This compression operation makes the (mel) spectrogram features match more closely what humans actually hear.\n * \n * Based on the implementation of `librosa.power_to_db`.\n * \n * @template {Float32Array|Float64Array} T\n * @param {T} spectrogram The input power (mel) spectrogram. Note that a power spectrogram has the amplitudes squared!\n * @param {number} [reference=1.0] Sets the input spectrogram value that corresponds to 0 dB.\n * For example, use `np.max(spectrogram)` to set the loudest part to 0 dB. Must be greater than zero.\n * @param {number} [min_value=1e-10] The spectrogram will be clipped to this minimum value before conversion to decibels,\n * to avoid taking `log(0)`. The default of `1e-10` corresponds to a minimum of -100 dB. Must be greater than zero.\n * @param {number} [db_range=null] Sets the maximum dynamic range in decibels. For example, if `db_range = 80`, the\n * difference between the peak value and the smallest value will never be more than 80 dB. Must be greater than zero.\n * @returns {T} The modified spectrogram in decibels.\n */\nfunction power_to_db(spectrogram, reference = 1.0, min_value = 1e-10, db_range = null) {\n    return _db_conversion_helper(spectrogram, 10.0, reference, min_value, db_range);\n}\n\n/**\n * Calculates a spectrogram over one waveform using the Short-Time Fourier Transform.\n * \n * This function can create the following kinds of spectrograms:\n *   - amplitude spectrogram (`power = 1.0`)\n *   - power spectrogram (`power = 2.0`)\n *   - complex-valued spectrogram (`power = None`)\n *   - log spectrogram (use `log_mel` argument)\n *   - mel spectrogram (provide `mel_filters`)\n *   - log-mel spectrogram (provide `mel_filters` and `log_mel`)\n *\n * In this implementation, the window is assumed to be zero-padded to have the same size as the analysis frame.\n * A padded window can be obtained from `window_function()`. The FFT input buffer may be larger than the analysis frame, \n * typically the next power of two.\n * \n * @param {Float32Array|Float64Array} waveform The input waveform of shape `(length,)`. This must be a single real-valued, mono waveform.\n * @param {Float32Array|Float64Array} window The windowing function to apply of shape `(frame_length,)`, including zero-padding if necessary. The actual window length may be\n * shorter than `frame_length`, but we're assuming the array has already been zero-padded.\n * @param {number} frame_length The length of the analysis frames in samples (a.k.a., `fft_length`).\n * @param {number} hop_length The stride between successive analysis frames in samples.\n * @param {Object} options\n * @param {number} [options.fft_length=null] The size of the FFT buffer in samples. This determines how many frequency bins the spectrogram will have.\n * For optimal speed, this should be a power of two. If `null`, uses `frame_length`.\n * @param {number} [options.power=1.0] If 1.0, returns the amplitude spectrogram. If 2.0, returns the power spectrogram. If `null`, returns complex numbers.\n * @param {boolean} [options.center=true] Whether to pad the waveform so that frame `t` is centered around time `t * hop_length`. If `false`, frame\n * `t` will start at time `t * hop_length`.\n * @param {string} [options.pad_mode=\"reflect\"] Padding mode used when `center` is `true`. Possible values are: `\"constant\"` (pad with zeros),\n * `\"edge\"` (pad with edge values), `\"reflect\"` (pads with mirrored values).\n * @param {boolean} [options.onesided=true] If `true`, only computes the positive frequencies and returns a spectrogram containing `fft_length // 2 + 1`\n * frequency bins. If `false`, also computes the negative frequencies and returns `fft_length` frequency bins.\n * @param {number} [options.preemphasis=null] Coefficient for a low-pass filter that applies pre-emphasis before the DFT.\n * @param {number[][]} [options.mel_filters=null] The mel filter bank of shape `(num_freq_bins, num_mel_filters)`.\n * If supplied, applies this filter bank to create a mel spectrogram.\n * @param {number} [options.mel_floor=1e-10] Minimum value of mel frequency banks.\n * @param {string} [options.log_mel=null] How to convert the spectrogram to log scale. Possible options are:\n * `null` (don't convert), `\"log\"` (take the natural logarithm) `\"log10\"` (take the base-10 logarithm), `\"dB\"` (convert to decibels).\n * Can only be used when `power` is not `null`.\n * @param {number} [options.reference=1.0] Sets the input spectrogram value that corresponds to 0 dB. For example, use `max(spectrogram)[0]` to set\n * the loudest part to 0 dB. Must be greater than zero.\n * @param {number} [options.min_value=1e-10] The spectrogram will be clipped to this minimum value before conversion to decibels, to avoid taking `log(0)`.\n * For a power spectrogram, the default of `1e-10` corresponds to a minimum of -100 dB. For an amplitude spectrogram, the value `1e-5` corresponds to -100 dB.\n * Must be greater than zero.\n * @param {number} [options.db_range=null] Sets the maximum dynamic range in decibels. For example, if `db_range = 80`, the difference between the\n * peak value and the smallest value will never be more than 80 dB. Must be greater than zero.\n * @param {boolean} [options.remove_dc_offset=null] Subtract mean from waveform on each frame, applied before pre-emphasis. This should be set to `true` in\n * order to get the same results as `torchaudio.compliance.kaldi.fbank` when computing mel filters.\n * @param {number} [options.max_num_frames=null] If provided, limits the number of frames to compute to this value.\n * @param {number} [options.min_num_frames=null] If provided, ensures the number of frames to compute is at least this value.\n * @param {boolean} [options.do_pad=true] If `true`, pads the output spectrogram to have `max_num_frames` frames.\n * @param {boolean} [options.transpose=false] If `true`, the returned spectrogram will have shape `(num_frames, num_frequency_bins/num_mel_filters)`. If `false`, the returned spectrogram will have shape `(num_frequency_bins/num_mel_filters, num_frames)`.\n * @returns {Promise<Tensor>} Spectrogram of shape `(num_frequency_bins, length)` (regular spectrogram) or shape `(num_mel_filters, length)` (mel spectrogram).\n */\nexport async function spectrogram(\n    waveform,\n    window,\n    frame_length,\n    hop_length,\n    {\n        fft_length = null,\n        power = 1.0,\n        center = true,\n        pad_mode = \"reflect\",\n        onesided = true,\n        preemphasis = null,\n        mel_filters = null,\n        mel_floor = 1e-10,\n        log_mel = null,\n        reference = 1.0,\n        min_value = 1e-10,\n        db_range = null,\n        remove_dc_offset = null,\n\n        // Custom parameters for efficiency reasons\n        min_num_frames = null,\n        max_num_frames = null,\n        do_pad = true,\n        transpose = false,\n    } = {}\n) {\n    const window_length = window.length;\n    if (fft_length === null) {\n        fft_length = frame_length;\n    }\n    if (frame_length > fft_length) {\n        throw Error(`frame_length (${frame_length}) may not be larger than fft_length (${fft_length})`)\n    }\n\n    if (window_length !== frame_length) {\n        throw new Error(`Length of the window (${window_length}) must equal frame_length (${frame_length})`);\n    }\n\n    if (hop_length <= 0) {\n        throw new Error(\"hop_length must be greater than zero\");\n    }\n\n    if (power === null && mel_filters !== null) {\n        throw new Error(\n            \"You have provided `mel_filters` but `power` is `None`. Mel spectrogram computation is not yet supported for complex-valued spectrogram. \" +\n            \"Specify `power` to fix this issue.\"\n        );\n    }\n\n    if (center) {\n        if (pad_mode !== 'reflect') {\n            throw new Error(`pad_mode=\"${pad_mode}\" not implemented yet.`)\n        }\n        const half_window = Math.floor((fft_length - 1) / 2) + 1;\n        waveform = padReflect(waveform, half_window, half_window);\n    }\n\n    // split waveform into frames of frame_length size\n    let num_frames = Math.floor(1 + Math.floor((waveform.length - frame_length) / hop_length))\n    if (min_num_frames !== null && num_frames < min_num_frames) {\n        num_frames = min_num_frames\n    }\n    const num_frequency_bins = onesided ? Math.floor(fft_length / 2) + 1 : fft_length\n\n    let d1 = num_frames;\n    let d1Max = num_frames;\n\n    // If maximum number of frames is provided, we must either pad or truncate\n    if (max_num_frames !== null) {\n        if (max_num_frames > num_frames) { // input is too short, so we pad\n            if (do_pad) {\n                d1Max = max_num_frames;\n            }\n        } else { // input is too long, so we truncate\n            d1Max = d1 = max_num_frames;\n        }\n    }\n\n    // Preallocate arrays to store output.\n    const fft = new FFT(fft_length);\n    const inputBuffer = new Float64Array(fft_length);\n    const outputBuffer = new Float64Array(fft.outputBufferSize);\n    const transposedMagnitudeData = new Float32Array(num_frequency_bins * d1Max);\n\n    for (let i = 0; i < d1; ++i) {\n        // Populate buffer with waveform data\n        const offset = i * hop_length;\n        const buffer_size = Math.min(waveform.length - offset, frame_length);\n        if (buffer_size !== frame_length) {\n            // The full buffer is not needed, so we need to reset it (avoid overflow from previous iterations)\n            // NOTE: We don't need to reset the buffer if it's full since we overwrite the first\n            // `frame_length` values and the rest (`fft_length - frame_length`) remains zero.\n            inputBuffer.fill(0, 0, frame_length);\n        }\n\n        for (let j = 0; j < buffer_size; ++j) {\n            inputBuffer[j] = waveform[offset + j];\n        }\n\n        if (remove_dc_offset) {\n            let sum = 0;\n            for (let j = 0; j < buffer_size; ++j) {\n                sum += inputBuffer[j];\n            }\n            const mean = sum / buffer_size;\n            for (let j = 0; j < buffer_size; ++j) {\n                inputBuffer[j] -= mean;\n            }\n        }\n\n        if (preemphasis !== null) {\n            // Done in reverse to avoid copies and distructive modification\n            for (let j = buffer_size - 1; j >= 1; --j) {\n                inputBuffer[j] -= preemphasis * inputBuffer[j - 1];\n            }\n            inputBuffer[0] *= 1 - preemphasis;\n        }\n\n        // Apply window function\n        for (let j = 0; j < window.length; ++j) {\n            inputBuffer[j] *= window[j];\n        }\n\n        fft.realTransform(outputBuffer, inputBuffer);\n\n        // compute magnitudes\n        for (let j = 0; j < num_frequency_bins; ++j) {\n            const j2 = j << 1;\n\n            // NOTE: We transpose the data here to avoid doing it later\n            transposedMagnitudeData[j * d1Max + i] = outputBuffer[j2] ** 2 + outputBuffer[j2 + 1] ** 2;\n        }\n    }\n\n    if (power !== null && power !== 2) {\n        // slight optimization to not sqrt\n        const pow = 2 / power; // we use 2 since we already squared\n        for (let i = 0; i < transposedMagnitudeData.length; ++i) {\n            transposedMagnitudeData[i] **= pow;\n        }\n    }\n\n    // TODO: What if `mel_filters` is null?\n    const num_mel_filters = mel_filters.length;\n\n    // Perform matrix muliplication:\n    // mel_spec = mel_filters @ magnitudes.T\n    //  - mel_filters.shape=(80, 201)\n    //  - magnitudes.shape=(3000, 201) => magnitudes.T.shape=(201, 3000)\n    //  - mel_spec.shape=(80, 3000)\n    let mel_spec = await matmul(\n        // TODO: Make `mel_filters` a Tensor during initialization\n        new Tensor('float32', mel_filters.flat(), [num_mel_filters, num_frequency_bins]),\n        new Tensor('float32', transposedMagnitudeData, [num_frequency_bins, d1Max]),\n    );\n    if (transpose) {\n        mel_spec = mel_spec.transpose(1, 0);\n    }\n\n    const mel_spec_data = /** @type {Float32Array} */(mel_spec.data);\n    for (let i = 0; i < mel_spec_data.length; ++i) {\n        mel_spec_data[i] = Math.max(mel_floor, mel_spec_data[i]);\n    }\n\n    if (power !== null && log_mel !== null) {\n        const o = Math.min(mel_spec_data.length, d1 * num_mel_filters);\n        // NOTE: operates in-place\n        switch (log_mel) {\n            case 'log':\n                for (let i = 0; i < o; ++i) {\n                    mel_spec_data[i] = Math.log(mel_spec_data[i]);\n                }\n                break;\n            case 'log10':\n                for (let i = 0; i < o; ++i) {\n                    mel_spec_data[i] = Math.log10(mel_spec_data[i]);\n                }\n                break;\n            case 'dB':\n                if (power === 1.0) {\n                    amplitude_to_db(mel_spec_data, reference, min_value, db_range);\n                } else if (power === 2.0) {\n                    power_to_db(mel_spec_data, reference, min_value, db_range);\n                } else {\n                    throw new Error(`Cannot use log_mel option '${log_mel}' with power ${power}`)\n                }\n                break;\n            default:\n                throw new Error(`log_mel must be one of null, 'log', 'log10' or 'dB'. Got '${log_mel}'`);\n        }\n    }\n\n    return mel_spec;\n}\n\n/**\n * Returns an array containing the specified window.\n * @param {number} window_length The length of the window in samples.\n * @param {string} name The name of the window function.\n * @param {Object} options Additional options.\n * @param {boolean} [options.periodic=true] Whether the window is periodic or symmetric.\n * @param {number} [options.frame_length=null] The length of the analysis frames in samples.\n * Provide a value for `frame_length` if the window is smaller than the frame length, so that it will be zero-padded.\n * @param {boolean} [options.center=true] Whether to center the window inside the FFT buffer. Only used when `frame_length` is provided.\n * @returns {Float64Array} The window of shape `(window_length,)` or `(frame_length,)`.\n */\nexport function window_function(window_length, name, {\n    periodic = true,\n    frame_length = null,\n    center = true,\n} = {}) {\n    const length = periodic ? window_length + 1 : window_length;\n    let window;\n    switch (name) {\n        case 'boxcar':\n            window = new Float64Array(length).fill(1.0);\n            break;\n        case 'hann':\n        case 'hann_window':\n            window = hanning(length);\n            break;\n        case 'hamming':\n            window = hamming(length);\n            break;\n        case 'povey':\n            window = hanning(length).map(x => Math.pow(x, 0.85));\n            break;\n        default:\n            throw new Error(`Unknown window type ${name}.`);\n    }\n    if (periodic) {\n        window = window.subarray(0, window_length);\n    }\n    if (frame_length === null) {\n        return window;\n    }\n    if (window_length > frame_length) {\n        throw new Error(`Length of the window (${window_length}) may not be larger than frame_length (${frame_length})`);\n    }\n\n    return window;\n}\n","\nexport const GITHUB_ISSUE_URL = 'https://github.com/xenova/transformers.js/issues/new/choose';","\n/**\n * @file Core utility functions/classes for Transformers.js.\n * \n * These are only used internally, meaning an end-user shouldn't\n * need to access anything here.\n * \n * @module utils/core\n */\n\n/**\n * Helper function to dispatch progress callbacks.\n *\n * @param {Function} progress_callback The progress callback function to dispatch.\n * @param {any} data The data to pass to the progress callback function.\n * @returns {void}\n * @private\n */\nexport function dispatchCallback(progress_callback, data) {\n    if (progress_callback) progress_callback(data);\n}\n\n/**\n * Reverses the keys and values of an object.\n *\n * @param {Object} data The object to reverse.\n * @returns {Object} The reversed object.\n * @see https://ultimatecourses.com/blog/reverse-object-keys-and-values-in-javascript\n */\nexport function reverseDictionary(data) {\n    // https://ultimatecourses.com/blog/reverse-object-keys-and-values-in-javascript\n    return Object.fromEntries(Object.entries(data).map(([key, value]) => [value, key]));\n}\n\n/**\n * Escapes regular expression special characters from a string by replacing them with their escaped counterparts.\n *\n * @param {string} string The string to escape.\n * @returns {string} The escaped string.\n */\nexport function escapeRegExp(string) {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\n/**\n * Check if a value is a typed array.\n * @param {*} val The value to check.\n * @returns {boolean} True if the value is a `TypedArray`, false otherwise.\n * \n * Adapted from https://stackoverflow.com/a/71091338/13989043\n */\nexport function isTypedArray(val) {\n    return val?.prototype?.__proto__?.constructor?.name === 'TypedArray';\n}\n\n\n/**\n * Check if a value is an integer.\n * @param {*} x The value to check.\n * @returns {boolean} True if the value is a string, false otherwise.\n */\nexport function isIntegralNumber(x) {\n    return Number.isInteger(x) || typeof x === 'bigint'\n}\n\n/**\n * Calculates the dimensions of a nested array.\n *\n * @param {any[]} arr The nested array to calculate dimensions for.\n * @returns {number[]} An array containing the dimensions of the input array.\n */\nexport function calculateDimensions(arr) {\n    const dimensions = [];\n    let current = arr;\n    while (Array.isArray(current)) {\n        dimensions.push(current.length);\n        current = current[0];\n    }\n    return dimensions;\n}\n\n/**\n * Replicate python's .pop() method for objects.\n * @param {Object} obj The object to pop from.\n * @param {string} key The key to pop.\n * @param {*} defaultValue The default value to return if the key does not exist.\n * @returns {*} The value of the popped key.\n * @throws {Error} If the key does not exist and no default value is provided.\n */\nexport function pop(obj, key, defaultValue = undefined) {\n    const value = obj[key];\n    if (value !== undefined) {\n        delete obj[key];\n        return value;\n    }\n    if (defaultValue === undefined) {\n        throw Error(`Key ${key} does not exist in object.`)\n    }\n    return defaultValue;\n}\n\n/**\n * Efficiently merge arrays, creating a new copy.\n * Adapted from https://stackoverflow.com/a/6768642/13989043\n * @param  {Array[]} arrs Arrays to merge.\n * @returns {Array} The merged array.\n */\nexport function mergeArrays(...arrs) {\n    return Array.prototype.concat.apply([], arrs);\n}\n\n/**\n * Compute the Cartesian product of given arrays\n * @param {...Array} a Arrays to compute the product\n * @returns {Array} Returns the computed Cartesian product as an array\n * @private\n */\nexport function product(...a) {\n    // Cartesian product of items\n    // Adapted from https://stackoverflow.com/a/43053803\n    return a.reduce((a, b) => a.flatMap(d => b.map(e => [d, e])));\n}\n\n/**\n * Calculates the index offset for a given index and window size.\n * @param {number} i The index.\n * @param {number} w The window size.\n * @returns {number} The index offset.\n */\nexport function calculateReflectOffset(i, w) {\n    return Math.abs((i + w) % (2 * w) - w);\n}\n\n/**\n * \n * @param {Object} o \n * @param {string[]} props \n * @returns {Object}\n */\nexport function pick(o, props) {\n    return Object.assign(\n        {},\n        ...props.map((prop) => {\n            if (o[prop] !== undefined) {\n                return { [prop]: o[prop] };\n            }\n        })\n    );\n}\n","\n/**\n * @file Custom data structures.\n * \n * These are only used internally, meaning an end-user shouldn't\n * need to access anything here.\n * \n * @module utils/data-structures\n */\n\n\n/**\n * Efficient Heap-based Implementation of a Priority Queue.\n * It uses an array-based binary heap, where the root is at index `0`, and the\n * children of node `i` are located at indices `2i + 1` and `2i + 2`, respectively.\n * \n * Adapted from the following sources:\n * - https://stackoverflow.com/a/42919752/13989043 (original)\n * - https://github.com/belladoreai/llama-tokenizer-js (minor improvements)\n */\nexport class PriorityQueue {\n\n    /**\n     * Create a new PriorityQueue.\n     * @param {function(any, any): boolean} comparator Comparator function to determine priority. Defaults to a MaxHeap.\n     */\n    constructor(comparator = (a, b) => a > b, maxSize = Infinity) {\n        this._heap = [];\n        this._comparator = comparator;\n        this._maxSize = maxSize;\n    }\n\n    /**\n     * The size of the queue\n     */\n    get size() {\n        return this._heap.length;\n    }\n\n    /**\n     * Check if the queue is empty.\n     * @returns {boolean} `true` if the queue is empty, `false` otherwise.\n     */\n    isEmpty() {\n        return this.size === 0;\n    }\n\n    /**\n     * Return the element with the highest priority in the queue.\n     * @returns {any} The highest priority element in the queue.\n     */\n    peek() {\n        return this._heap[0];\n    }\n\n    /**\n     * Add one or more elements to the queue.\n     * @param  {...any} values The values to push into the queue.\n     * @returns {number} The new size of the queue.\n     */\n    push(...values) {\n        return this.extend(values);\n    }\n\n    /**\n     * Add multiple elements to the queue.\n     * @param {any[]} values The values to push into the queue.\n     * @returns {number} The new size of the queue.\n     */\n    extend(values) {\n        for (const value of values) {\n            if (this.size < this._maxSize) {\n                this._heap.push(value);\n                this._siftUp();\n            } else {\n                // Get index of value with the lowest priority\n                const smallest = this._smallest();\n\n                // If the new value has higher priority than the smallest value in the heap\n                // then replace the smallest value with the new value and update the heap\n                if (this._comparator(value, this._heap[smallest])) {\n                    this._heap[smallest] = value;\n                    this._siftUpFrom(smallest);\n                }\n            }\n        }\n        return this.size;\n    }\n\n    /**\n     * Remove and return the element with the highest priority in the queue.\n     * @returns {any} The element with the highest priority in the queue.\n     */\n    pop() {\n        const poppedValue = this.peek();\n        const bottom = this.size - 1;\n        if (bottom > 0) {\n            this._swap(0, bottom);\n        }\n        this._heap.pop();\n        this._siftDown();\n        return poppedValue;\n    }\n\n    /**\n     * Replace the element with the highest priority in the queue with a new value.\n     * @param {*} value The new value.\n     * @returns {*} The replaced value.\n     */\n    replace(value) {\n        const replacedValue = this.peek();\n        this._heap[0] = value;\n        this._siftDown();\n        return replacedValue;\n    }\n\n    /**\n     * Compute the index for the parent of the node at index `i`.\n     * @param {number} i The index of the node to get the parent of.\n     * @returns {number} The index of the parent node.\n     * @private\n     */\n    _parent(i) {\n        return ((i + 1) >>> 1) - 1;\n    }\n\n    /**\n     * Compute the index for the left child of the node at index `i`.\n     * @param {number} i The index of the node to get the left child of.\n     * @returns {number} The index of the left child.\n     * @private\n     */\n    _left(i) {\n        return (i << 1) + 1;\n    }\n\n    /**\n     * Compute the index for the right child of the node at index `i`.\n     * @param {number} i The index of the node to get the right child of.\n     * @returns {number} The index of the right child.\n     * @private\n     */\n    _right(i) {\n        return (i + 1) << 1;\n    }\n\n    /**\n     * Check if the element at index `i` is greater than the element at index `j`.\n     * @param {number} i The index of the first element to compare.\n     * @param {number} j The index of the second element to compare.\n     * @returns {boolean} `true` if the element at index `i` is greater than the element at index `j`, `false` otherwise.\n     * @private\n     */\n    _greater(i, j) {\n        return this._comparator(this._heap[i], this._heap[j]);\n    }\n\n    /**\n     * Swap the elements at indices `i` and `j`.\n     * @param {number} i The index of the first element to swap.\n     * @param {number} j The index of the second element to swap.\n     * @private\n     */\n    _swap(i, j) {\n        const temp = this._heap[i];\n        this._heap[i] = this._heap[j];\n        this._heap[j] = temp;\n    }\n\n    /**\n     * Maintain the heap property by updating positions in the heap,\n     * starting at the last element and moving up the heap.\n     * @private\n     */\n    _siftUp() {\n        this._siftUpFrom(this.size - 1);\n    }\n\n    /**\n     * Helper function to sift up from a given node.\n     * @param {number} node The index of the node to start sifting up from.\n     */\n    _siftUpFrom(node) {\n        while (node > 0 && this._greater(node, this._parent(node))) {\n            this._swap(node, this._parent(node));\n            node = this._parent(node);\n        }\n    }\n\n    /**\n     * Maintain the heap property by updating positions in the heap,\n     * starting at the first element and moving down the heap.\n     * @private\n     */\n    _siftDown() {\n        let node = 0;\n        while (\n            (this._left(node) < this.size && this._greater(this._left(node), node)) ||\n            (this._right(node) < this.size && this._greater(this._right(node), node))\n        ) {\n            const maxChild = (this._right(node) < this.size && this._greater(this._right(node), this._left(node)))\n                ? this._right(node)\n                : this._left(node);\n            this._swap(node, maxChild);\n            node = maxChild;\n        }\n    }\n\n    /**\n     * Get the index of the smallest element in the heap. Since we use an array-based heap,\n     * the index can be computed without needing to traverse the heap.\n     * @private\n     */\n    _smallest() {\n        return (2 ** (Math.floor(Math.log2(this.size))) - 1);\n    }\n}\n\n/**\n * A trie structure to efficiently store and search for strings.\n */\nexport class CharTrie {\n    constructor() {\n        this.root = CharTrieNode.default();\n    }\n\n    /**\n     * Adds one or more `texts` to the trie.\n     * @param {string[]} texts The strings to add to the trie.\n     */\n    extend(texts) {\n        for (let text of texts) {\n            this.push(text);\n        }\n    }\n\n    /**\n     * Adds text to the trie.\n     * @param {string} text The string to add to the trie.\n     */\n    push(text) {\n        let node = this.root;\n        for (let ch of text) {\n            let child = node.children.get(ch);\n            if (child === undefined) {\n                child = CharTrieNode.default();\n                node.children.set(ch, child);\n            }\n            node = child;\n        }\n        node.isLeaf = true;\n    }\n\n    /**\n     * Searches the trie for all strings with a common prefix of `text`.\n     * @param {string} text The common prefix to search for.\n     * @yields {string} Each string in the trie that has `text` as a prefix.\n     */\n    *commonPrefixSearch(text) {\n        let node = this.root;\n        let prefix = \"\";\n        for (let i = 0; i < text.length && node !== undefined; ++i) {\n            const ch = text[i];\n            prefix += ch;\n            node = node.children.get(ch);\n            if (node !== undefined && node.isLeaf) {\n                yield prefix;\n            }\n        }\n    }\n}\n\n/**\n * Represents a node in a character trie.\n */\nclass CharTrieNode {\n    /**\n     * Create a new CharTrieNode.\n     * @param {boolean} isLeaf Whether the node is a leaf node or not.\n     * @param {Map<string, CharTrieNode>} children A map containing the node's children, where the key is a character and the value is a `CharTrieNode`.\n     */\n    constructor(isLeaf, children) {\n        this.isLeaf = isLeaf;\n        this.children = children;\n    }\n\n    /**\n     * Returns a new `CharTrieNode` instance with default values.\n     * @returns {CharTrieNode} A new `CharTrieNode` instance with `isLeaf` set to `false` and an empty `children` map.\n     */\n    static default() {\n        return new CharTrieNode(false, new Map());\n    }\n}\n\n/**\n * A lattice data structure to be used for tokenization.\n */\nexport class TokenLattice {\n    /**\n     * Creates a new TokenLattice instance.\n     *\n     * @param {string} sentence The input sentence to be tokenized.\n     * @param {number} bosTokenId The beginning-of-sequence token ID.\n     * @param {number} eosTokenId The end-of-sequence token ID.\n     */\n    constructor(sentence, bosTokenId, eosTokenId) {\n        this.sentence = sentence;\n        this.len = sentence.length;\n        this.bosTokenId = bosTokenId;\n        this.eosTokenId = eosTokenId;\n        this.nodes = [];\n        this.beginNodes = Array.from({ length: this.len + 1 }, () => []);\n        this.endNodes = Array.from({ length: this.len + 1 }, () => []);\n\n        const bos = new TokenLatticeNode(this.bosTokenId, 0, 0, 0, 0.0);\n        const eos = new TokenLatticeNode(this.eosTokenId, 1, this.len, 0, 0.0);\n        this.nodes.push(bos.clone());\n        this.nodes.push(eos.clone());\n        this.beginNodes[this.len].push(eos);\n        this.endNodes[0].push(bos);\n    }\n\n    /**\n     * Inserts a new token node into the token lattice.\n     *\n     * @param {number} pos The starting position of the token.\n     * @param {number} length The length of the token.\n     * @param {number} score The score of the token.\n     * @param {number} tokenId The token ID of the token.\n     */\n    insert(pos, length, score, tokenId) {\n        const nodeId = this.nodes.length;\n        const node = new TokenLatticeNode(tokenId, nodeId, pos, length, score);\n        this.beginNodes[pos].push(node);\n        this.endNodes[pos + length].push(node);\n        this.nodes.push(node);\n    }\n\n    /**\n     * Implements the Viterbi algorithm to compute the most likely sequence of tokens.\n     *\n     * @returns {TokenLatticeNode[]} The array of nodes representing the most likely sequence of tokens.\n     */\n    viterbi() {\n        const len = this.len;\n        let pos = 0;\n        while (pos <= len) {\n            if (this.beginNodes[pos].length == 0) {\n                return [];\n            }\n            for (let rnode of this.beginNodes[pos]) {\n                rnode.prev = null;\n                let bestScore = 0.0;\n                let bestNode = null;\n                for (let lnode of this.endNodes[pos]) {\n                    const score = lnode.backtraceScore + rnode.score;\n                    if (bestNode === null || score > bestScore) {\n                        bestNode = lnode.clone();\n                        bestScore = score;\n                    }\n                }\n\n                if (bestNode !== null) {\n                    rnode.prev = bestNode;\n                    rnode.backtraceScore = bestScore;\n                } else {\n                    return [];\n                }\n            }\n            ++pos;\n        }\n\n        const results = [];\n        const root = this.beginNodes[len][0];\n        const prev = root.prev;\n        if (prev === null) {\n            return [];\n        }\n\n        let node = prev.clone();\n        while (node.prev !== null) {\n            results.push(node.clone());\n            const n = node.clone();\n            node = n.prev.clone();\n        }\n\n        results.reverse();\n        return results;\n    }\n\n    /**\n     * @param {TokenLatticeNode} node\n     * @returns {string} The array of nodes representing the most likely sequence of tokens.\n     */\n    piece(node) {\n        return this.sentence.slice(node.pos, node.pos + node.length);\n    }\n\n    /**\n     * @returns {Array} The array of nodes representing the most likely sequence of tokens.\n     */\n    tokens() {\n        const nodes = this.viterbi();\n        return nodes.map(x => this.piece(x));\n    }\n\n    /**\n     * @returns {Array} The array of nodes representing the most likely sequence of tokens.\n     */\n    tokenIds() {\n        const nodes = this.viterbi();\n        return nodes.map(x => x.tokenId);\n    }\n}\nclass TokenLatticeNode {\n    /**\n     * Represents a node in a token lattice for a given sentence.\n     * @param {number} tokenId The ID of the token associated with this node.\n     * @param {number} nodeId The ID of this node.\n     * @param {number} pos The starting position of the token in the sentence.\n     * @param {number} length The length of the token.\n     * @param {number} score The score associated with the token.\n     */\n    constructor(tokenId, nodeId, pos, length, score) {\n        this.tokenId = tokenId;\n        this.nodeId = nodeId;\n        this.pos = pos;\n        this.length = length;\n        this.score = score;\n        this.prev = null;\n        this.backtraceScore = 0.0;\n    }\n\n    /**\n     * Returns a clone of this node.\n     * @returns {TokenLatticeNode} A clone of this node.\n     */\n    clone() {\n        const n = new TokenLatticeNode(this.tokenId, this.nodeId, this.pos, this.length, this.score);\n        n.prev = this.prev;\n        n.backtraceScore = this.backtraceScore;\n        return n;\n    }\n}\n","\nexport const DEVICE_TYPES = Object.freeze({\n    cpu: 'cpu',\n    gpu: 'gpu',\n    wasm: 'wasm',\n    webgpu: 'webgpu',\n});\n\n/**\n * @typedef {keyof typeof DEVICE_TYPES} DeviceType\n */\n","import { apis } from \"../env.js\";\n\nimport { DEVICE_TYPES } from \"./devices.js\";\n\n// TODO: Use the adapter from `env.backends.onnx.webgpu.adapter` to check for `shader-f16` support,\n// when available in https://github.com/microsoft/onnxruntime/pull/19940.\n// For more information, see https://github.com/microsoft/onnxruntime/pull/19857#issuecomment-1999984753\n\n/**\n * Checks if WebGPU fp16 support is available in the current environment.\n */\nexport const isWebGpuFp16Supported = (function () {\n    /** @type {boolean} */\n    let cachedResult;\n\n    return async function () {\n        if (cachedResult === undefined) {\n            if (!apis.IS_WEBGPU_AVAILABLE) {\n                cachedResult = false;\n            } else {\n                try {\n                    const adapter = await navigator.gpu.requestAdapter();\n                    cachedResult = adapter.features.has('shader-f16');\n                } catch (e) {\n                    cachedResult = false;\n                }\n            }\n        }\n        return cachedResult;\n    };\n})();\n\nexport const DATA_TYPES = Object.freeze({\n    fp32: 'fp32',\n    fp16: 'fp16',\n    q8: 'q8',\n    int8: 'int8',\n    uint8: 'uint8',\n    q4: 'q4',\n    bnb4: 'bnb4',\n    q4f16: 'q4f16', // fp16 model with int4 block weight quantization\n});\n/** @typedef {keyof typeof DATA_TYPES} DataType */\n\nexport const DEFAULT_DEVICE_DTYPE_MAPPING = Object.freeze({\n    [DEVICE_TYPES.cpu]: DATA_TYPES.q8,\n    [DEVICE_TYPES.gpu]: DATA_TYPES.fp32,\n    [DEVICE_TYPES.wasm]: DATA_TYPES.q8,\n    [DEVICE_TYPES.webgpu]: DATA_TYPES.fp32,\n});\n\n/** @type {Record<DataType, string>} */\nexport const DEFAULT_DTYPE_SUFFIX_MAPPING = Object.freeze({\n    [DATA_TYPES.fp32]: '',\n    [DATA_TYPES.fp16]: '_fp16',\n    [DATA_TYPES.int8]: '_int8',\n    [DATA_TYPES.uint8]: '_uint8',\n    [DATA_TYPES.q8]: '_quantized',\n    [DATA_TYPES.q4]: '_q4',\n    [DATA_TYPES.q4f16]: '_q4f16',\n    [DATA_TYPES.bnb4]: '_bnb4',\n});\n","\n/**\n * A base class for creating callable objects.\n * See [here](https://stackoverflow.com/q/76073890) for more information.\n * \n * @type {new () => {(...args: any[]): any, _call(...args: any[]): any}}\n */\nexport const Callable = /** @type {any} */ (class {\n    /**\n    * Creates a new instance of the Callable class.\n    */\n    constructor() {\n        /**\n         * Creates a closure that delegates to a private method '_call' with the given arguments.\n         * @type {any}\n         * @param {...any} args Zero or more arguments to pass to the '_call' method.\n         * @returns {*} The result of calling the '_call' method.\n         */\n        let closure = function (...args) {\n            return closure._call(...args)\n        }\n        return Object.setPrototypeOf(closure, new.target.prototype)\n    }\n\n    /**\n     * This method should be implemented in subclasses to provide the\n     * functionality of the callable object.\n     *\n     * @param {any[]} args\n     * @throws {Error} If the subclass does not implement the `_call` method.\n     */\n    _call(...args) {\n        throw Error('Must implement _call method in subclass')\n    }\n});\n","\n/**\n * @file Utility functions to interact with the Hugging Face Hub (https://huggingface.co/models)\n * \n * @module utils/hub\n */\n\nimport fs from 'fs';\nimport path from 'path';\n\nimport { env } from '../env.js';\nimport { dispatchCallback } from './core.js';\n\n/**\n * @typedef {Object} PretrainedOptions Options for loading a pretrained model.     \n * @property {function} [progress_callback=null] If specified, this function will be called during model construction, to provide the user with progress updates.\n * @property {Object} [config=null] Configuration for the model to use instead of an automatically loaded configuration. Configuration can be automatically loaded when:\n * - The model is a model provided by the library (loaded with the *model id* string of a pretrained model).\n * - The model is loaded by supplying a local directory as `pretrained_model_name_or_path` and a configuration JSON file named *config.json* is found in the directory.\n * @property {string} [cache_dir=null] Path to a directory in which a downloaded pretrained model configuration should be cached if the standard cache should not be used.\n * @property {boolean} [local_files_only=false] Whether or not to only look at local files (e.g., not try downloading the model).\n * @property {string} [revision='main'] The specific model version to use. It can be a branch name, a tag name, or a commit id,\n * since we use a git-based system for storing models and other artifacts on huggingface.co, so `revision` can be any identifier allowed by git.\n * NOTE: This setting is ignored for local requests.\n */\n\n/**\n * @typedef {Object} ModelSpecificPretrainedOptions Options for loading a pretrained model.\n * @property {string} [subfolder='onnx'] In case the relevant files are located inside a subfolder of the model repo on huggingface.co,\n * you can specify the folder name here.\n * @property {string} [model_file_name=null] If specified, load the model with this name (excluding the .onnx suffix). Currently only valid for encoder- or decoder-only models.\n * @property {import(\"./devices.js\").DeviceType|Record<string, import(\"./devices.js\").DeviceType>} [device=null] The device to run the model on. If not specified, the device will be chosen from the environment settings.\n * @property {import(\"./dtypes.js\").DataType|Record<string, import(\"./dtypes.js\").DataType>} [dtype=null] The data type to use for the model. If not specified, the data type will be chosen from the environment settings.\n * @property {boolean|Record<string, boolean>} [use_external_data_format=false] Whether to load the model using the external data format (used for models >= 2GB in size).\n * @property {Object} [session_options] (Optional) User-specified session options passed to the runtime. If not provided, suitable defaults will be chosen.\n */\n\n/**\n * @typedef {PretrainedOptions & ModelSpecificPretrainedOptions} PretrainedModelOptions Options for loading a pretrained model.\n */\n\nclass FileResponse {\n    /**\n     * Mapping from file extensions to MIME types.\n     */\n    _CONTENT_TYPE_MAP = {\n        'txt': 'text/plain',\n        'html': 'text/html',\n        'css': 'text/css',\n        'js': 'text/javascript',\n        'json': 'application/json',\n        'png': 'image/png',\n        'jpg': 'image/jpeg',\n        'jpeg': 'image/jpeg',\n        'gif': 'image/gif',\n    }\n    /**\n     * Creates a new `FileResponse` object.\n     * @param {string|URL} filePath\n     */\n    constructor(filePath) {\n        this.filePath = filePath;\n        this.headers = new Headers();\n\n        this.exists = fs.existsSync(filePath);\n        if (this.exists) {\n            this.status = 200;\n            this.statusText = 'OK';\n\n            let stats = fs.statSync(filePath);\n            this.headers.set('content-length', stats.size.toString());\n\n            this.updateContentType();\n\n            let self = this;\n            this.body = new ReadableStream({\n                start(controller) {\n                    self.arrayBuffer().then(buffer => {\n                        controller.enqueue(new Uint8Array(buffer));\n                        controller.close();\n                    })\n                }\n            });\n        } else {\n            this.status = 404;\n            this.statusText = 'Not Found';\n            this.body = null;\n        }\n    }\n\n    /**\n     * Updates the 'content-type' header property of the response based on the extension of\n     * the file specified by the filePath property of the current object.\n     * @returns {void}\n     */\n    updateContentType() {\n        // Set content-type header based on file extension\n        const extension = this.filePath.toString().split('.').pop().toLowerCase();\n        this.headers.set('content-type', this._CONTENT_TYPE_MAP[extension] ?? 'application/octet-stream');\n    }\n\n    /**\n     * Clone the current FileResponse object.\n     * @returns {FileResponse} A new FileResponse object with the same properties as the current object.\n     */\n    clone() {\n        let response = new FileResponse(this.filePath);\n        response.exists = this.exists;\n        response.status = this.status;\n        response.statusText = this.statusText;\n        response.headers = new Headers(this.headers);\n        return response;\n    }\n\n    /**\n     * Reads the contents of the file specified by the filePath property and returns a Promise that\n     * resolves with an ArrayBuffer containing the file's contents.\n     * @returns {Promise<ArrayBuffer>} A Promise that resolves with an ArrayBuffer containing the file's contents.\n     * @throws {Error} If the file cannot be read.\n     */\n    async arrayBuffer() {\n        const data = await fs.promises.readFile(this.filePath);\n        return data.buffer;\n    }\n\n    /**\n     * Reads the contents of the file specified by the filePath property and returns a Promise that\n     * resolves with a Blob containing the file's contents.\n     * @returns {Promise<Blob>} A Promise that resolves with a Blob containing the file's contents.\n     * @throws {Error} If the file cannot be read.\n     */\n    async blob() {\n        const data = await fs.promises.readFile(this.filePath);\n        return new Blob([data], { type: this.headers.get('content-type') });\n    }\n\n    /**\n     * Reads the contents of the file specified by the filePath property and returns a Promise that\n     * resolves with a string containing the file's contents.\n     * @returns {Promise<string>} A Promise that resolves with a string containing the file's contents.\n     * @throws {Error} If the file cannot be read.\n     */\n    async text() {\n        const data = await fs.promises.readFile(this.filePath, 'utf8');\n        return data;\n    }\n\n    /**\n     * Reads the contents of the file specified by the filePath property and returns a Promise that\n     * resolves with a parsed JavaScript object containing the file's contents.\n     * \n     * @returns {Promise<Object>} A Promise that resolves with a parsed JavaScript object containing the file's contents.\n     * @throws {Error} If the file cannot be read.\n     */\n    async json() {\n        return JSON.parse(await this.text());\n    }\n}\n\n/**\n * Determines whether the given string is a valid URL.\n * @param {string|URL} string The string to test for validity as an URL.\n * @param {string[]} [protocols=null] A list of valid protocols. If specified, the protocol must be in this list.\n * @param {string[]} [validHosts=null] A list of valid hostnames. If specified, the URL's hostname must be in this list.\n * @returns {boolean} True if the string is a valid URL, false otherwise.\n */\nfunction isValidUrl(string, protocols = null, validHosts = null) {\n    let url;\n    try {\n        url = new URL(string);\n    } catch (_) {\n        return false;\n    }\n    if (protocols && !protocols.includes(url.protocol)) {\n        return false;\n    }\n    if (validHosts && !validHosts.includes(url.hostname)) {\n        return false;\n    }\n    return true;\n}\n\n/**\n * Helper function to get a file, using either the Fetch API or FileSystem API.\n *\n * @param {URL|string} urlOrPath The URL/path of the file to get.\n * @returns {Promise<FileResponse|Response>} A promise that resolves to a FileResponse object (if the file is retrieved using the FileSystem API), or a Response object (if the file is retrieved using the Fetch API).\n */\nexport async function getFile(urlOrPath) {\n\n    if (env.useFS && !isValidUrl(urlOrPath, ['http:', 'https:', 'blob:'])) {\n        return new FileResponse(urlOrPath);\n\n    } else if (typeof process !== 'undefined' && process?.release?.name === 'node') {\n        const IS_CI = !!process.env?.TESTING_REMOTELY;\n        const version = env.version;\n\n        const headers = new Headers();\n        headers.set('User-Agent', `transformers.js/${version}; is_ci/${IS_CI};`);\n\n        // Check whether we are making a request to the Hugging Face Hub.\n        const isHFURL = isValidUrl(urlOrPath, ['http:', 'https:'], ['huggingface.co', 'hf.co']);\n        if (isHFURL) {\n            // If an access token is present in the environment variables,\n            // we add it to the request headers.\n            // NOTE: We keep `HF_ACCESS_TOKEN` for backwards compatibility (as a fallback).\n            const token = process.env?.HF_TOKEN ?? process.env?.HF_ACCESS_TOKEN;\n            if (token) {\n                headers.set('Authorization', `Bearer ${token}`);\n            }\n        }\n        return fetch(urlOrPath, { headers });\n    } else {\n        // Running in a browser-environment, so we use default headers\n        // NOTE: We do not allow passing authorization headers in the browser,\n        // since this would require exposing the token to the client.\n        return fetch(urlOrPath);\n    }\n}\n\nconst ERROR_MAPPING = {\n    // 4xx errors (https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#client_error_responses)\n    400: 'Bad request error occurred while trying to load file',\n    401: 'Unauthorized access to file',\n    403: 'Forbidden access to file',\n    404: 'Could not locate file',\n    408: 'Request timeout error occurred while trying to load file',\n\n    // 5xx errors (https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#server_error_responses)\n    500: 'Internal server error error occurred while trying to load file',\n    502: 'Bad gateway error occurred while trying to load file',\n    503: 'Service unavailable error occurred while trying to load file',\n    504: 'Gateway timeout error occurred while trying to load file',\n}\n/**\n * Helper method to handle fatal errors that occur while trying to load a file from the Hugging Face Hub.\n * @param {number} status The HTTP status code of the error.\n * @param {string} remoteURL The URL of the file that could not be loaded.\n * @param {boolean} fatal Whether to raise an error if the file could not be loaded.\n * @returns {null} Returns `null` if `fatal = true`.\n * @throws {Error} If `fatal = false`.\n */\nfunction handleError(status, remoteURL, fatal) {\n    if (!fatal) {\n        // File was not loaded correctly, but it is optional.\n        // TODO in future, cache the response?\n        return null;\n    }\n\n    const message = ERROR_MAPPING[status] ?? `Error (${status}) occurred while trying to load file`;\n    throw Error(`${message}: \"${remoteURL}\".`);\n}\n\nclass FileCache {\n    /**\n     * Instantiate a `FileCache` object.\n     * @param {string} path \n     */\n    constructor(path) {\n        this.path = path;\n    }\n\n    /**\n     * Checks whether the given request is in the cache.\n     * @param {string} request \n     * @returns {Promise<FileResponse | undefined>}\n     */\n    async match(request) {\n\n        let filePath = path.join(this.path, request);\n        let file = new FileResponse(filePath);\n\n        if (file.exists) {\n            return file;\n        } else {\n            return undefined;\n        }\n    }\n\n    /**\n     * Adds the given response to the cache.\n     * @param {string} request \n     * @param {Response|FileResponse} response \n     * @returns {Promise<void>}\n     */\n    async put(request, response) {\n        const buffer = Buffer.from(await response.arrayBuffer());\n\n        let outputPath = path.join(this.path, request);\n\n        try {\n            await fs.promises.mkdir(path.dirname(outputPath), { recursive: true });\n            await fs.promises.writeFile(outputPath, buffer);\n\n        } catch (err) {\n            console.warn('An error occurred while writing the file to cache:', err)\n        }\n    }\n\n    // TODO add the rest?\n    // addAll(requests: RequestInfo[]): Promise<void>;\n    // delete(request: RequestInfo | URL, options?: CacheQueryOptions): Promise<boolean>;\n    // keys(request?: RequestInfo | URL, options?: CacheQueryOptions): Promise<ReadonlyArray<Request>>;\n    // match(request: RequestInfo | URL, options?: CacheQueryOptions): Promise<Response | undefined>;\n    // matchAll(request?: RequestInfo | URL, options?: CacheQueryOptions): Promise<ReadonlyArray<Response>>;\n}\n\n/**\n * \n * @param {FileCache|Cache} cache The cache to search\n * @param {string[]} names The names of the item to search for\n * @returns {Promise<FileResponse|Response|undefined>} The item from the cache, or undefined if not found.\n */\nasync function tryCache(cache, ...names) {\n    for (let name of names) {\n        try {\n            let result = await cache.match(name);\n            if (result) return result;\n        } catch (e) {\n            continue;\n        }\n    }\n    return undefined;\n}\n\n/**\n * \n * Retrieves a file from either a remote URL using the Fetch API or from the local file system using the FileSystem API.\n * If the filesystem is available and `env.useCache = true`, the file will be downloaded and cached.\n * \n * @param {string} path_or_repo_id This can be either:\n * - a string, the *model id* of a model repo on huggingface.co.\n * - a path to a *directory* potentially containing the file.\n * @param {string} filename The name of the file to locate in `path_or_repo`.\n * @param {boolean} [fatal=true] Whether to throw an error if the file is not found.\n * @param {PretrainedOptions} [options] An object containing optional parameters.\n * \n * @throws Will throw an error if the file is not found and `fatal` is true.\n * @returns {Promise<Uint8Array>} A Promise that resolves with the file content as a buffer.\n */\nexport async function getModelFile(path_or_repo_id, filename, fatal = true, options = {}) {\n\n    if (!env.allowLocalModels) {\n        // User has disabled local models, so we just make sure other settings are correct.\n\n        if (options.local_files_only) {\n            throw Error(\"Invalid configuration detected: local models are disabled (`env.allowLocalModels=false`) but you have requested to only use local models (`local_files_only=true`).\")\n        } else if (!env.allowRemoteModels) {\n            throw Error(\"Invalid configuration detected: both local and remote models are disabled. Fix by setting `env.allowLocalModels` or `env.allowRemoteModels` to `true`.\")\n        }\n    }\n\n    // Initiate file retrieval\n    dispatchCallback(options.progress_callback, {\n        status: 'initiate',\n        name: path_or_repo_id,\n        file: filename\n    })\n\n    // First, check if the a caching backend is available\n    // If no caching mechanism available, will download the file every time\n    let cache;\n    if (!cache && env.useBrowserCache) {\n        if (typeof caches === 'undefined') {\n            throw Error('Browser cache is not available in this environment.')\n        }\n        try {\n            // In some cases, the browser cache may be visible, but not accessible due to security restrictions.\n            // For example, when running an application in an iframe, if a user attempts to load the page in\n            // incognito mode, the following error is thrown: `DOMException: Failed to execute 'open' on 'CacheStorage':\n            // An attempt was made to break through the security policy of the user agent.`\n            // So, instead of crashing, we just ignore the error and continue without using the cache.\n            cache = await caches.open('transformers-cache');\n        } catch (e) {\n            console.warn('An error occurred while opening the browser cache:', e);\n        }\n    }\n\n    if (!cache && env.useFSCache) {\n        // TODO throw error if not available\n\n        // If `cache_dir` is not specified, use the default cache directory\n        cache = new FileCache(options.cache_dir ?? env.cacheDir);\n    }\n\n    if (!cache && env.useCustomCache) {\n        // Allow the user to specify a custom cache system.\n        if (!env.customCache) {\n            throw Error('`env.useCustomCache=true`, but `env.customCache` is not defined.')\n        }\n\n        // Check that the required methods are defined:\n        if (!env.customCache.match || !env.customCache.put) {\n            throw new Error(\n                \"`env.customCache` must be an object which implements the `match` and `put` functions of the Web Cache API. \" +\n                \"For more information, see https://developer.mozilla.org/en-US/docs/Web/API/Cache\"\n            )\n        }\n        cache = env.customCache;\n    }\n\n    const revision = options.revision ?? 'main';\n\n    let requestURL = pathJoin(path_or_repo_id, filename);\n    let localPath = pathJoin(env.localModelPath, requestURL);\n\n    let remoteURL = pathJoin(\n        env.remoteHost,\n        env.remotePathTemplate\n            .replaceAll('{model}', path_or_repo_id)\n            .replaceAll('{revision}', encodeURIComponent(revision)),\n        filename\n    );\n\n    // Choose cache key for filesystem cache\n    // When using the main revision (default), we use the request URL as the cache key.\n    // If a specific revision is requested, we account for this in the cache key.\n    let fsCacheKey = revision === 'main' ? requestURL : pathJoin(path_or_repo_id, revision, filename);\n\n    /** @type {string} */\n    let cacheKey;\n    let proposedCacheKey = cache instanceof FileCache ? fsCacheKey : remoteURL;\n\n    // Whether to cache the final response in the end.\n    let toCacheResponse = false;\n\n    /** @type {Response|FileResponse|undefined} */\n    let response;\n\n    if (cache) {\n        // A caching system is available, so we try to get the file from it.\n        //  1. We first try to get from cache using the local path. In some environments (like deno),\n        //     non-URL cache keys are not allowed. In these cases, `response` will be undefined.\n        //  2. If no response is found, we try to get from cache using the remote URL or file system cache.\n        response = await tryCache(cache, localPath, proposedCacheKey);\n    }\n\n    const cacheHit = response !== undefined;\n\n    if (response === undefined) {\n        // Caching not available, or file is not cached, so we perform the request\n\n        if (env.allowLocalModels) {\n            // Accessing local models is enabled, so we try to get the file locally.\n            // If request is a valid HTTP URL, we skip the local file check. Otherwise, we try to get the file locally.\n            const isURL = isValidUrl(requestURL, ['http:', 'https:']);\n            if (!isURL) {\n                try {\n                    response = await getFile(localPath);\n                    cacheKey = localPath; // Update the cache key to be the local path\n                } catch (e) {\n                    // Something went wrong while trying to get the file locally.\n                    // NOTE: error handling is done in the next step (since `response` will be undefined)\n                    console.warn(`Unable to load from local path \"${localPath}\": \"${e}\"`);\n                }\n            } else if (options.local_files_only) {\n                throw new Error(`\\`local_files_only=true\\`, but attempted to load a remote file from: ${requestURL}.`);\n            } else if (!env.allowRemoteModels) {\n                throw new Error(`\\`env.allowRemoteModels=false\\`, but attempted to load a remote file from: ${requestURL}.`);\n            }\n        }\n\n        if (response === undefined || response.status === 404) {\n            // File not found locally. This means either:\n            // - The user has disabled local file access (`env.allowLocalModels=false`)\n            // - the path is a valid HTTP url (`response === undefined`)\n            // - the path is not a valid HTTP url and the file is not present on the file system or local server (`response.status === 404`)\n\n            if (options.local_files_only || !env.allowRemoteModels) {\n                // User requested local files only, but the file is not found locally.\n                if (fatal) {\n                    throw Error(`\\`local_files_only=true\\` or \\`env.allowRemoteModels=false\\` and file was not found locally at \"${localPath}\".`);\n                } else {\n                    // File not found, but this file is optional.\n                    // TODO in future, cache the response?\n                    return null;\n                }\n            }\n\n            // File not found locally, so we try to download it from the remote server\n            response = await getFile(remoteURL);\n\n            if (response.status !== 200) {\n                return handleError(response.status, remoteURL, fatal);\n            }\n\n            // Success! We use the proposed cache key from earlier\n            cacheKey = proposedCacheKey;\n        }\n\n        // Only cache the response if:\n        toCacheResponse =\n            cache                              // 1. A caching system is available\n            && typeof Response !== 'undefined' // 2. `Response` is defined (i.e., we are in a browser-like environment)\n            && response instanceof Response    // 3. result is a `Response` object (i.e., not a `FileResponse`)\n            && response.status === 200         // 4. request was successful (status code 200)\n    }\n\n    // Start downloading\n    dispatchCallback(options.progress_callback, {\n        status: 'download',\n        name: path_or_repo_id,\n        file: filename\n    })\n\n    const progressInfo = {\n        status: 'progress',\n        name: path_or_repo_id,\n        file: filename\n    }\n\n    /** @type {Uint8Array} */\n    let buffer;\n\n    if (!options.progress_callback) {\n        // If no progress callback is specified, we can use the `.arrayBuffer()`\n        // method to read the response.\n        buffer = new Uint8Array(await response.arrayBuffer());\n\n    } else if (\n        cacheHit // The item is being read from the cache\n        &&\n        typeof navigator !== 'undefined' && /firefox/i.test(navigator.userAgent) // We are in Firefox\n    ) {\n        // Due to bug in Firefox, we cannot display progress when loading from cache.\n        // Fortunately, since this should be instantaneous, this should not impact users too much.\n        buffer = new Uint8Array(await response.arrayBuffer());\n\n        // For completeness, we still fire the final progress callback\n        dispatchCallback(options.progress_callback, {\n            ...progressInfo,\n            progress: 100,\n            loaded: buffer.length,\n            total: buffer.length,\n        })\n    } else {\n        buffer = await readResponse(response, data => {\n            dispatchCallback(options.progress_callback, {\n                ...progressInfo,\n                ...data,\n            })\n        })\n    }\n\n    if (\n        // Only cache web responses\n        // i.e., do not cache FileResponses (prevents duplication)\n        toCacheResponse && cacheKey\n        &&\n        // Check again whether request is in cache. If not, we add the response to the cache\n        (await cache.match(cacheKey) === undefined)\n    ) {\n        // NOTE: We use `new Response(buffer, ...)` instead of `response.clone()` to handle LFS files\n        await cache.put(cacheKey, new Response(buffer, {\n            headers: response.headers\n        }))\n            .catch(err => {\n                // Do not crash if unable to add to cache (e.g., QuotaExceededError).\n                // Rather, log a warning and proceed with execution.\n                console.warn(`Unable to add response to browser cache: ${err}.`);\n            });\n\n    }\n\n    dispatchCallback(options.progress_callback, {\n        status: 'done',\n        name: path_or_repo_id,\n        file: filename\n    });\n\n    return buffer;\n}\n\n/**\n * Fetches a JSON file from a given path and file name.\n *\n * @param {string} modelPath The path to the directory containing the file.\n * @param {string} fileName The name of the file to fetch.\n * @param {boolean} [fatal=true] Whether to throw an error if the file is not found.\n * @param {PretrainedOptions} [options] An object containing optional parameters.\n * @returns {Promise<Object>} The JSON data parsed into a JavaScript object.\n * @throws Will throw an error if the file is not found and `fatal` is true.\n */\nexport async function getModelJSON(modelPath, fileName, fatal = true, options = {}) {\n    let buffer = await getModelFile(modelPath, fileName, fatal, options);\n    if (buffer === null) {\n        // Return empty object\n        return {}\n    }\n\n    let decoder = new TextDecoder('utf-8');\n    let jsonData = decoder.decode(buffer);\n\n    return JSON.parse(jsonData);\n}\n\n/**\n * Read and track progress when reading a Response object\n *\n * @param {any} response The Response object to read\n * @param {function} progress_callback The function to call with progress updates\n * @returns {Promise<Uint8Array>} A Promise that resolves with the Uint8Array buffer\n */\nasync function readResponse(response, progress_callback) {\n\n    const contentLength = response.headers.get('Content-Length');\n    if (contentLength === null) {\n        console.warn('Unable to determine content-length from response headers. Will expand buffer when needed.')\n    }\n    let total = parseInt(contentLength ?? '0');\n    let buffer = new Uint8Array(total);\n    let loaded = 0;\n\n    const reader = response.body.getReader();\n    async function read() {\n        const { done, value } = await reader.read();\n        if (done) return;\n\n        let newLoaded = loaded + value.length;\n        if (newLoaded > total) {\n            total = newLoaded;\n\n            // Adding the new data will overflow buffer.\n            // In this case, we extend the buffer\n            let newBuffer = new Uint8Array(total);\n\n            // copy contents\n            newBuffer.set(buffer);\n\n            buffer = newBuffer;\n        }\n        buffer.set(value, loaded)\n        loaded = newLoaded;\n\n        const progress = (loaded / total) * 100;\n\n        // Call your function here\n        progress_callback({\n            progress: progress,\n            loaded: loaded,\n            total: total,\n        })\n\n        return read();\n    }\n\n    // Actually read\n    await read();\n\n    return buffer;\n}\n\n/**\n * Joins multiple parts of a path into a single path, while handling leading and trailing slashes.\n *\n * @param {...string} parts Multiple parts of a path.\n * @returns {string} A string representing the joined path.\n */\nfunction pathJoin(...parts) {\n    // https://stackoverflow.com/a/55142565\n    parts = parts.map((part, index) => {\n        if (index) {\n            part = part.replace(new RegExp('^/'), '');\n        }\n        if (index !== parts.length - 1) {\n            part = part.replace(new RegExp('/$'), '');\n        }\n        return part;\n    })\n    return parts.join('/');\n}\n","\n/**\n * @file Helper module for image processing. \n * \n * These functions and classes are only used internally, \n * meaning an end-user shouldn't need to access anything here.\n * \n * @module utils/image\n */\n\nimport { getFile } from './hub.js';\nimport { env } from '../env.js';\nimport { Tensor } from './tensor.js';\n\n// Will be empty (or not used) if running in browser or web-worker\nimport sharp from 'sharp';\n\nconst BROWSER_ENV = typeof self !== 'undefined';\nconst WEBWORKER_ENV = BROWSER_ENV && self.constructor.name === 'DedicatedWorkerGlobalScope';\n\nlet createCanvasFunction;\nlet ImageDataClass;\nlet loadImageFunction;\nif (BROWSER_ENV) {\n    // Running in browser or web-worker\n    createCanvasFunction = (/** @type {number} */ width, /** @type {number} */ height) => {\n        if (!self.OffscreenCanvas) {\n            throw new Error('OffscreenCanvas not supported by this browser.');\n        }\n        return new self.OffscreenCanvas(width, height)\n    };\n    loadImageFunction = self.createImageBitmap;\n    ImageDataClass = self.ImageData;\n\n} else if (sharp) {\n    // Running in Node.js, electron, or other non-browser environment\n\n    loadImageFunction = async (/**@type {sharp.Sharp}*/img) => {\n        const metadata = await img.metadata();\n        const rawChannels = metadata.channels;\n\n        const { data, info } = await img.rotate().raw().toBuffer({ resolveWithObject: true });\n\n        const newImage = new RawImage(new Uint8ClampedArray(data), info.width, info.height, info.channels);\n        if (rawChannels !== undefined && rawChannels !== info.channels) {\n            // Make sure the new image has the same number of channels as the input image.\n            // This is necessary for grayscale images.\n            newImage.convert(rawChannels);\n        }\n        return newImage;\n    }\n\n} else {\n    throw new Error('Unable to load image processing library.');\n}\n\n\n// Defined here: https://github.com/python-pillow/Pillow/blob/a405e8406b83f8bfb8916e93971edc7407b8b1ff/src/libImaging/Imaging.h#L262-L268\nconst RESAMPLING_MAPPING = {\n    0: 'nearest',\n    1: 'lanczos',\n    2: 'bilinear',\n    3: 'bicubic',\n    4: 'box',\n    5: 'hamming',\n}\n\n/**\n * Mapping from file extensions to MIME types.\n */\nconst CONTENT_TYPE_MAP = new Map([\n    ['png', 'image/png'],\n    ['jpg', 'image/jpeg'],\n    ['jpeg', 'image/jpeg'],\n    ['gif', 'image/gif'],\n]);\n\nexport class RawImage {\n\n    /**\n     * Create a new `RawImage` object.\n     * @param {Uint8ClampedArray|Uint8Array} data The pixel data.\n     * @param {number} width The width of the image.\n     * @param {number} height The height of the image.\n     * @param {1|2|3|4} channels The number of channels.\n     */\n    constructor(data, width, height, channels) {\n        this.data = data;\n        this.width = width;\n        this.height = height;\n        this.channels = channels;\n    }\n\n    /** \n     * Returns the size of the image (width, height).\n     * @returns {[number, number]} The size of the image (width, height).\n     */\n    get size() {\n        return [this.width, this.height];\n    }\n\n    /**\n     * Helper method for reading an image from a variety of input types.\n     * @param {RawImage|string|URL} input \n     * @returns The image object.\n     * \n     * **Example:** Read image from a URL.\n     * ```javascript\n     * let image = await RawImage.read('https://huggingface.co/datasets/Xenova/transformers.js-docs/resolve/main/football-match.jpg');\n     * // RawImage {\n     * //   \"data\": Uint8ClampedArray [ 25, 25, 25, 19, 19, 19, ... ],\n     * //   \"width\": 800,\n     * //   \"height\": 533,\n     * //   \"channels\": 3\n     * // }\n     * ```\n     */\n    static async read(input) {\n        if (input instanceof RawImage) {\n            return input;\n        } else if (typeof input === 'string' || input instanceof URL) {\n            return await this.fromURL(input);\n        } else {\n            throw new Error(`Unsupported input type: ${typeof input}`);\n        }\n    }\n\n    /**\n     * Read an image from a canvas.\n     * @param {HTMLCanvasElement|OffscreenCanvas} canvas The canvas to read the image from.\n     * @returns {RawImage} The image object.\n     */\n    static fromCanvas(canvas) {\n        if (!BROWSER_ENV) {\n            throw new Error('fromCanvas() is only supported in browser environments.')\n        }\n\n        const ctx = canvas.getContext('2d');\n        const data = ctx.getImageData(0, 0, canvas.width, canvas.height).data;\n        return new RawImage(data, canvas.width, canvas.height, 4);\n    }\n\n    /**\n     * Read an image from a URL or file path.\n     * @param {string|URL} url The URL or file path to read the image from.\n     * @returns {Promise<RawImage>} The image object.\n     */\n    static async fromURL(url) {\n        const response = await getFile(url);\n        if (response.status !== 200) {\n            throw new Error(`Unable to read image from \"${url}\" (${response.status} ${response.statusText})`);\n        }\n        const blob = await response.blob();\n        return this.fromBlob(blob);\n    }\n\n    /**\n     * Helper method to create a new Image from a blob.\n     * @param {Blob} blob The blob to read the image from.\n     * @returns {Promise<RawImage>} The image object.\n     */\n    static async fromBlob(blob) {\n        if (BROWSER_ENV) {\n            // Running in environment with canvas\n            const img = await loadImageFunction(blob);\n\n            const ctx = createCanvasFunction(img.width, img.height).getContext('2d');\n\n            // Draw image to context\n            ctx.drawImage(img, 0, 0);\n\n            return new this(ctx.getImageData(0, 0, img.width, img.height).data, img.width, img.height, 4);\n\n        } else {\n            // Use sharp.js to read (and possible resize) the image.\n            const img = sharp(await blob.arrayBuffer());\n\n            return await loadImageFunction(img);\n        }\n    }\n\n    /**\n     * Helper method to create a new Image from a tensor\n     * @param {Tensor} tensor \n     */\n    static fromTensor(tensor, channel_format = 'CHW') {\n        if (tensor.dims.length !== 3) {\n            throw new Error(`Tensor should have 3 dimensions, but has ${tensor.dims.length} dimensions.`);\n        }\n\n        if (channel_format === 'CHW') {\n            tensor = tensor.transpose(1, 2, 0);\n        } else if (channel_format === 'HWC') {\n            // Do nothing\n        } else {\n            throw new Error(`Unsupported channel format: ${channel_format}`);\n        }\n        if (!(tensor.data instanceof Uint8ClampedArray || tensor.data instanceof Uint8Array)) {\n            throw new Error(`Unsupported tensor type: ${tensor.type}`);\n        }\n        switch (tensor.dims[2]) {\n            case 1:\n            case 2:\n            case 3:\n            case 4:\n                return new RawImage(tensor.data, tensor.dims[1], tensor.dims[0], tensor.dims[2]);\n            default:\n                throw new Error(`Unsupported number of channels: ${tensor.dims[2]}`);\n        }\n    }\n\n    /**\n     * Convert the image to grayscale format.\n     * @returns {RawImage} `this` to support chaining.\n     */\n    grayscale() {\n        if (this.channels === 1) {\n            return this;\n        }\n\n        const newData = new Uint8ClampedArray(this.width * this.height * 1);\n        switch (this.channels) {\n            case 3: // rgb to grayscale\n            case 4: // rgba to grayscale\n                for (let i = 0, offset = 0; i < this.data.length; i += this.channels) {\n                    const red = this.data[i];\n                    const green = this.data[i + 1];\n                    const blue = this.data[i + 2];\n\n                    newData[offset++] = Math.round(0.2989 * red + 0.5870 * green + 0.1140 * blue);\n                }\n                break;\n            default:\n                throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`);\n        }\n        return this._update(newData, this.width, this.height, 1);\n    }\n\n    /**\n     * Convert the image to RGB format.\n     * @returns {RawImage} `this` to support chaining.\n     */\n    rgb() {\n        if (this.channels === 3) {\n            return this;\n        }\n\n        const newData = new Uint8ClampedArray(this.width * this.height * 3);\n\n        switch (this.channels) {\n            case 1: // grayscale to rgb\n                for (let i = 0, offset = 0; i < this.data.length; ++i) {\n                    newData[offset++] = this.data[i];\n                    newData[offset++] = this.data[i];\n                    newData[offset++] = this.data[i];\n                }\n                break;\n            case 4: // rgba to rgb\n                for (let i = 0, offset = 0; i < this.data.length; i += 4) {\n                    newData[offset++] = this.data[i];\n                    newData[offset++] = this.data[i + 1];\n                    newData[offset++] = this.data[i + 2];\n                }\n                break;\n            default:\n                throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`);\n        }\n        return this._update(newData, this.width, this.height, 3);\n\n    }\n\n    /**\n     * Convert the image to RGBA format.\n     * @returns {RawImage} `this` to support chaining.\n     */\n    rgba() {\n        if (this.channels === 4) {\n            return this;\n        }\n\n        const newData = new Uint8ClampedArray(this.width * this.height * 4);\n\n        switch (this.channels) {\n            case 1: // grayscale to rgba\n                for (let i = 0, offset = 0; i < this.data.length; ++i) {\n                    newData[offset++] = this.data[i];\n                    newData[offset++] = this.data[i];\n                    newData[offset++] = this.data[i];\n                    newData[offset++] = 255;\n                }\n                break;\n            case 3: // rgb to rgba\n                for (let i = 0, offset = 0; i < this.data.length; i += 3) {\n                    newData[offset++] = this.data[i];\n                    newData[offset++] = this.data[i + 1];\n                    newData[offset++] = this.data[i + 2];\n                    newData[offset++] = 255;\n                }\n                break;\n            default:\n                throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`);\n        }\n\n        return this._update(newData, this.width, this.height, 4);\n    }\n\n    /**\n     * Resize the image to the given dimensions. This method uses the canvas API to perform the resizing.\n     * @param {number} width The width of the new image.\n     * @param {number} height The height of the new image.\n     * @param {Object} options Additional options for resizing.\n     * @param {0|1|2|3|4|5|string} [options.resample] The resampling method to use.\n     * @returns {Promise<RawImage>} `this` to support chaining.\n     */\n    async resize(width, height, {\n        resample = 2,\n    } = {}) {\n\n        // Ensure resample method is a string\n        let resampleMethod = RESAMPLING_MAPPING[resample] ?? resample;\n\n        if (BROWSER_ENV) {\n            // TODO use `resample` in browser environment\n\n            // Store number of channels before resizing\n            const numChannels = this.channels;\n\n            // Create canvas object for this image\n            const canvas = this.toCanvas();\n\n            // Actually perform resizing using the canvas API\n            const ctx = createCanvasFunction(width, height).getContext('2d');\n\n            // Draw image to context, resizing in the process\n            ctx.drawImage(canvas, 0, 0, width, height);\n\n            // Create image from the resized data\n            const resizedImage = new RawImage(ctx.getImageData(0, 0, width, height).data, width, height, 4);\n\n            // Convert back so that image has the same number of channels as before\n            return resizedImage.convert(numChannels);\n\n        } else {\n            // Create sharp image from raw data, and resize\n            let img = this.toSharp();\n\n            switch (resampleMethod) {\n                case 'box':\n                case 'hamming':\n                    if (resampleMethod === 'box' || resampleMethod === 'hamming') {\n                        console.warn(`Resampling method ${resampleMethod} is not yet supported. Using bilinear instead.`);\n                        resampleMethod = 'bilinear';\n                    }\n\n                case 'nearest':\n                case 'bilinear':\n                case 'bicubic':\n                    // Perform resizing using affine transform. \n                    // This matches how the python Pillow library does it.\n                    img = img.affine([width / this.width, 0, 0, height / this.height], {\n                        interpolator: resampleMethod\n                    });\n                    break;\n\n                case 'lanczos':\n                    // https://github.com/python-pillow/Pillow/discussions/5519\n                    // https://github.com/lovell/sharp/blob/main/docs/api-resize.md\n                    img = img.resize({\n                        width, height,\n                        fit: 'fill',\n                        kernel: 'lanczos3', // PIL Lanczos uses a kernel size of 3 \n                    });\n                    break;\n\n                default:\n                    throw new Error(`Resampling method ${resampleMethod} is not supported.`);\n            }\n\n            return await loadImageFunction(img);\n        }\n\n    }\n\n    async pad([left, right, top, bottom]) {\n        left = Math.max(left, 0);\n        right = Math.max(right, 0);\n        top = Math.max(top, 0);\n        bottom = Math.max(bottom, 0);\n\n        if (left === 0 && right === 0 && top === 0 && bottom === 0) {\n            // No padding needed\n            return this;\n        }\n\n        if (BROWSER_ENV) {\n            // Store number of channels before padding\n            const numChannels = this.channels;\n\n            // Create canvas object for this image\n            const canvas = this.toCanvas();\n\n            const newWidth = this.width + left + right;\n            const newHeight = this.height + top + bottom;\n\n            // Create a new canvas of the desired size.\n            const ctx = createCanvasFunction(newWidth, newHeight).getContext('2d');\n\n            // Draw image to context, padding in the process\n            ctx.drawImage(canvas,\n                0, 0, this.width, this.height,\n                left, top, newWidth, newHeight\n            );\n\n            // Create image from the padded data\n            const paddedImage = new RawImage(\n                ctx.getImageData(0, 0, newWidth, newHeight).data,\n                newWidth, newHeight, 4);\n\n            // Convert back so that image has the same number of channels as before\n            return paddedImage.convert(numChannels);\n\n        } else {\n            const img = this.toSharp().extend({ left, right, top, bottom });\n            return await loadImageFunction(img);\n        }\n    }\n\n    async crop([x_min, y_min, x_max, y_max]) {\n        // Ensure crop bounds are within the image\n        x_min = Math.max(x_min, 0);\n        y_min = Math.max(y_min, 0);\n        x_max = Math.min(x_max, this.width - 1);\n        y_max = Math.min(y_max, this.height - 1);\n\n        // Do nothing if the crop is the entire image\n        if (x_min === 0 && y_min === 0 && x_max === this.width - 1 && y_max === this.height - 1) {\n            return this;\n        }\n\n        const crop_width = x_max - x_min + 1;\n        const crop_height = y_max - y_min + 1;\n\n        if (BROWSER_ENV) {\n            // Store number of channels before resizing\n            const numChannels = this.channels;\n\n            // Create canvas object for this image\n            const canvas = this.toCanvas();\n\n            // Create a new canvas of the desired size. This is needed since if the \n            // image is too small, we need to pad it with black pixels.\n            const ctx = createCanvasFunction(crop_width, crop_height).getContext('2d');\n\n            // Draw image to context, cropping in the process\n            ctx.drawImage(canvas,\n                x_min, y_min, crop_width, crop_height,\n                0, 0, crop_width, crop_height\n            );\n\n            // Create image from the resized data\n            const resizedImage = new RawImage(ctx.getImageData(0, 0, crop_width, crop_height).data, crop_width, crop_height, 4);\n\n            // Convert back so that image has the same number of channels as before\n            return resizedImage.convert(numChannels);\n\n        } else {\n            // Create sharp image from raw data\n            const img = this.toSharp().extract({\n                left: x_min,\n                top: y_min,\n                width: crop_width,\n                height: crop_height,\n            });\n\n            return await loadImageFunction(img);\n        }\n\n    }\n\n    async center_crop(crop_width, crop_height) {\n        // If the image is already the desired size, return it\n        if (this.width === crop_width && this.height === crop_height) {\n            return this;\n        }\n\n        // Determine bounds of the image in the new canvas\n        const width_offset = (this.width - crop_width) / 2;\n        const height_offset = (this.height - crop_height) / 2;\n\n\n        if (BROWSER_ENV) {\n            // Store number of channels before resizing\n            const numChannels = this.channels;\n\n            // Create canvas object for this image\n            const canvas = this.toCanvas();\n\n            // Create a new canvas of the desired size. This is needed since if the \n            // image is too small, we need to pad it with black pixels.\n            const ctx = createCanvasFunction(crop_width, crop_height).getContext('2d');\n\n            let sourceX = 0;\n            let sourceY = 0;\n            let destX = 0;\n            let destY = 0;\n\n            if (width_offset >= 0) {\n                sourceX = width_offset;\n            } else {\n                destX = -width_offset;\n            }\n\n            if (height_offset >= 0) {\n                sourceY = height_offset;\n            } else {\n                destY = -height_offset;\n            }\n\n            // Draw image to context, cropping in the process\n            ctx.drawImage(canvas,\n                sourceX, sourceY, crop_width, crop_height,\n                destX, destY, crop_width, crop_height\n            );\n\n            // Create image from the resized data\n            const resizedImage = new RawImage(ctx.getImageData(0, 0, crop_width, crop_height).data, crop_width, crop_height, 4);\n\n            // Convert back so that image has the same number of channels as before\n            return resizedImage.convert(numChannels);\n\n        } else {\n            // Create sharp image from raw data\n            let img = this.toSharp();\n\n            if (width_offset >= 0 && height_offset >= 0) {\n                // Cropped image lies entirely within the original image\n                img = img.extract({\n                    left: Math.floor(width_offset),\n                    top: Math.floor(height_offset),\n                    width: crop_width,\n                    height: crop_height,\n                })\n            } else if (width_offset <= 0 && height_offset <= 0) {\n                // Cropped image lies entirely outside the original image,\n                // so we add padding\n                const top = Math.floor(-height_offset);\n                const left = Math.floor(-width_offset);\n                img = img.extend({\n                    top: top,\n                    left: left,\n\n                    // Ensures the resulting image has the desired dimensions\n                    right: crop_width - this.width - left,\n                    bottom: crop_height - this.height - top,\n                });\n            } else {\n                // Cropped image lies partially outside the original image.\n                // We first pad, then crop.\n\n                let y_padding = [0, 0];\n                let y_extract = 0;\n                if (height_offset < 0) {\n                    y_padding[0] = Math.floor(-height_offset);\n                    y_padding[1] = crop_height - this.height - y_padding[0];\n                } else {\n                    y_extract = Math.floor(height_offset);\n                }\n\n                let x_padding = [0, 0];\n                let x_extract = 0;\n                if (width_offset < 0) {\n                    x_padding[0] = Math.floor(-width_offset);\n                    x_padding[1] = crop_width - this.width - x_padding[0];\n                } else {\n                    x_extract = Math.floor(width_offset);\n                }\n\n                img = img.extend({\n                    top: y_padding[0],\n                    bottom: y_padding[1],\n                    left: x_padding[0],\n                    right: x_padding[1],\n                }).extract({\n                    left: x_extract,\n                    top: y_extract,\n                    width: crop_width,\n                    height: crop_height,\n                })\n            }\n\n            return await loadImageFunction(img);\n        }\n    }\n\n    async toBlob(type = 'image/png', quality = 1) {\n        if (!BROWSER_ENV) {\n            throw new Error('toBlob() is only supported in browser environments.')\n        }\n\n        const canvas = this.toCanvas();\n        return await canvas.convertToBlob({ type, quality });\n    }\n\n    toTensor(channel_format = 'CHW') {\n        let tensor = new Tensor(\n            'uint8',\n            new Uint8Array(this.data),\n            [this.height, this.width, this.channels]\n        );\n\n        if (channel_format === 'HWC') {\n            // Do nothing\n        } else if (channel_format === 'CHW') { // hwc -> chw\n            tensor = tensor.permute(2, 0, 1);\n        } else {\n            throw new Error(`Unsupported channel format: ${channel_format}`);\n        }\n        return tensor;\n    }\n\n    toCanvas() {\n        if (!BROWSER_ENV) {\n            throw new Error('toCanvas() is only supported in browser environments.')\n        }\n\n        // Clone, and convert data to RGBA before drawing to canvas.\n        // This is because the canvas API only supports RGBA\n        const cloned = this.clone().rgba();\n\n        // Create canvas object for the cloned image\n        const clonedCanvas = createCanvasFunction(cloned.width, cloned.height);\n\n        // Draw image to context\n        const data = new ImageDataClass(cloned.data, cloned.width, cloned.height);\n        clonedCanvas.getContext('2d').putImageData(data, 0, 0);\n\n        return clonedCanvas;\n    }\n\n    /**\n     * Helper method to update the image data.\n     * @param {Uint8ClampedArray} data The new image data.\n     * @param {number} width The new width of the image.\n     * @param {number} height The new height of the image.\n     * @param {1|2|3|4|null} [channels] The new number of channels of the image.\n     * @private\n     */\n    _update(data, width, height, channels = null) {\n        this.data = data;\n        this.width = width;\n        this.height = height;\n        if (channels !== null) {\n            this.channels = channels;\n        }\n        return this;\n    }\n\n    /**\n     * Clone the image\n     * @returns {RawImage} The cloned image\n     */\n    clone() {\n        return new RawImage(this.data.slice(), this.width, this.height, this.channels);\n    }\n\n    /**\n     * Helper method for converting image to have a certain number of channels\n     * @param {number} numChannels The number of channels. Must be 1, 3, or 4.\n     * @returns {RawImage} `this` to support chaining.\n     */\n    convert(numChannels) {\n        if (this.channels === numChannels) return this; // Already correct number of channels\n\n        switch (numChannels) {\n            case 1:\n                this.grayscale();\n                break;\n            case 3:\n                this.rgb();\n                break;\n            case 4:\n                this.rgba();\n                break;\n            default:\n                throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`);\n        }\n        return this;\n    }\n\n    /**\n     * Save the image to the given path.\n     * @param {string} path The path to save the image to.\n     */\n    async save(path) {\n\n        if (BROWSER_ENV) {\n            if (WEBWORKER_ENV) {\n                throw new Error('Unable to save an image from a Web Worker.')\n            }\n\n            const extension = path.split('.').pop().toLowerCase();\n            const mime = CONTENT_TYPE_MAP.get(extension) ?? 'image/png';\n\n            // Convert image to Blob\n            const blob = await this.toBlob(mime);\n\n            // Convert the canvas content to a data URL\n            const dataURL = URL.createObjectURL(blob);\n\n            // Create an anchor element with the data URL as the href attribute\n            const downloadLink = document.createElement('a');\n            downloadLink.href = dataURL;\n\n            // Set the download attribute to specify the desired filename for the downloaded image\n            downloadLink.download = path;\n\n            // Trigger the download\n            downloadLink.click();\n\n            // Clean up: remove the anchor element from the DOM\n            downloadLink.remove();\n\n        } else if (!env.useFS) {\n            throw new Error('Unable to save the image because filesystem is disabled in this environment.')\n\n        } else {\n            const img = this.toSharp();\n            return await img.toFile(path);\n        }\n    }\n\n    toSharp() {\n        if (BROWSER_ENV) {\n            throw new Error('toSharp() is only supported in server-side environments.')\n        }\n\n        return sharp(this.data, {\n            raw: {\n                width: this.width,\n                height: this.height,\n                channels: this.channels\n            }\n        });\n    }\n}","\n/**\n * @file Helper module for mathematical processing. \n * \n * These functions and classes are only used internally, \n * meaning an end-user shouldn't need to access anything here.\n * \n * @module utils/maths\n */\n\n/**\n * @typedef {Int8Array | Uint8Array | Uint8ClampedArray | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array} TypedArray\n * @typedef {BigInt64Array | BigUint64Array} BigTypedArray\n * @typedef {TypedArray | BigTypedArray} AnyTypedArray\n */\n\n/**\n * @param {TypedArray} input\n */\nexport function interpolate_data(input, [in_channels, in_height, in_width], [out_height, out_width], mode = 'bilinear', align_corners = false) {\n    // TODO use mode and align_corners\n\n    // Output image dimensions\n    const x_scale = out_width / in_width;\n    const y_scale = out_height / in_height;\n\n    // Output image\n    // @ts-ignore\n    const out_img = new input.constructor(out_height * out_width * in_channels);\n\n    // Pre-calculate strides\n    const inStride = in_height * in_width;\n    const outStride = out_height * out_width;\n\n    for (let i = 0; i < out_height; ++i) {\n        for (let j = 0; j < out_width; ++j) {\n            // Calculate output offset\n            const outOffset = i * out_width + j;\n\n            // Calculate input pixel coordinates\n            const x = (j + 0.5) / x_scale - 0.5;\n            const y = (i + 0.5) / y_scale - 0.5;\n\n            // Calculate the four nearest input pixels\n            // We also check if the input pixel coordinates are within the image bounds\n            let x1 = Math.floor(x);\n            let y1 = Math.floor(y);\n            const x2 = Math.min(x1 + 1, in_width - 1);\n            const y2 = Math.min(y1 + 1, in_height - 1);\n\n            x1 = Math.max(x1, 0);\n            y1 = Math.max(y1, 0);\n\n\n            // Calculate the fractional distances between the input pixel and the four nearest pixels\n            const s = x - x1;\n            const t = y - y1;\n\n            // Perform bilinear interpolation\n            const w1 = (1 - s) * (1 - t);\n            const w2 = s * (1 - t);\n            const w3 = (1 - s) * t;\n            const w4 = s * t;\n\n            // Calculate the four nearest input pixel indices\n            const yStride = y1 * in_width;\n            const xStride = y2 * in_width;\n            const idx1 = yStride + x1;\n            const idx2 = yStride + x2;\n            const idx3 = xStride + x1;\n            const idx4 = xStride + x2;\n\n            for (let k = 0; k < in_channels; ++k) {\n                // Calculate channel offset\n                const cOffset = k * inStride;\n\n                out_img[k * outStride + outOffset] =\n                    w1 * input[cOffset + idx1] +\n                    w2 * input[cOffset + idx2] +\n                    w3 * input[cOffset + idx3] +\n                    w4 * input[cOffset + idx4];\n            }\n        }\n    }\n\n    return out_img;\n}\n\n\n/**\n * Helper method to permute a `AnyTypedArray` directly\n * @template {AnyTypedArray} T \n * @param {T} array \n * @param {number[]} dims \n * @param {number[]} axes \n * @returns {[T, number[]]} The permuted array and the new shape.\n */\nexport function permute_data(array, dims, axes) {\n    // Calculate the new shape of the permuted array\n    // and the stride of the original array\n    const shape = new Array(axes.length);\n    const stride = new Array(axes.length);\n\n    for (let i = axes.length - 1, s = 1; i >= 0; --i) {\n        stride[i] = s;\n        shape[i] = dims[axes[i]];\n        s *= shape[i];\n    }\n\n    // Precompute inverse mapping of stride\n    const invStride = axes.map((_, i) => stride[axes.indexOf(i)]);\n\n    // Create the permuted array with the new shape\n    // @ts-ignore\n    const permutedData = new array.constructor(array.length);\n\n    // Permute the original array to the new array\n    for (let i = 0; i < array.length; ++i) {\n        let newIndex = 0;\n        for (let j = dims.length - 1, k = i; j >= 0; --j) {\n            newIndex += (k % dims[j]) * invStride[j];\n            k = Math.floor(k / dims[j]);\n        }\n        permutedData[newIndex] = array[i];\n    }\n\n    return [permutedData, shape];\n}\n\n\n/**\n * Compute the softmax of an array of numbers.\n * @template {TypedArray|number[]} T\n * @param {T} arr The array of numbers to compute the softmax of.\n * @returns {T} The softmax array.\n */\nexport function softmax(arr) {\n    // Compute the maximum value in the array\n    const maxVal = max(arr)[0];\n\n    // Compute the exponentials of the array values\n    const exps = arr.map(x => Math.exp(x - maxVal));\n\n    // Compute the sum of the exponentials\n    // @ts-ignore\n    const sumExps = exps.reduce((acc, val) => acc + val, 0);\n\n    // Compute the softmax values\n    const softmaxArr = exps.map(x => x / sumExps);\n\n    return /** @type {T} */(softmaxArr);\n}\n\n/**\n * Calculates the logarithm of the softmax function for the input array.\n * @template {TypedArray|number[]} T\n * @param {T} arr The input array to calculate the log_softmax function for.\n * @returns {T} The resulting log_softmax array.\n */\nexport function log_softmax(arr) {\n    // Compute the softmax values\n    const softmaxArr = softmax(arr);\n\n    // Apply log formula to each element\n    const logSoftmaxArr = softmaxArr.map(x => Math.log(x));\n\n    return /** @type {T} */(logSoftmaxArr);\n}\n\n/**\n * Calculates the dot product of two arrays.\n * @param {number[]} arr1 The first array.\n * @param {number[]} arr2 The second array.\n * @returns {number} The dot product of arr1 and arr2.\n */\nexport function dot(arr1, arr2) {\n    let result = 0;\n    for (let i = 0; i < arr1.length; ++i) {\n        result += arr1[i] * arr2[i];\n    }\n    return result;\n}\n\n/**\n * Computes the cosine similarity between two arrays.\n *\n * @param {number[]} arr1 The first array.\n * @param {number[]} arr2 The second array.\n * @returns {number} The cosine similarity between the two arrays.\n */\nexport function cos_sim(arr1, arr2) {\n    // Calculate dot product of the two arrays\n    const dotProduct = dot(arr1, arr2);\n\n    // Calculate the magnitude of the first array\n    const magnitudeA = magnitude(arr1);\n\n    // Calculate the magnitude of the second array\n    const magnitudeB = magnitude(arr2);\n\n    // Calculate the cosine similarity\n    const cosineSimilarity = dotProduct / (magnitudeA * magnitudeB);\n\n    return cosineSimilarity;\n}\n\n/**\n * Calculates the magnitude of a given array.\n * @param {number[]} arr The array to calculate the magnitude of.\n * @returns {number} The magnitude of the array.\n */\nexport function magnitude(arr) {\n    return Math.sqrt(arr.reduce((acc, val) => acc + val * val, 0));\n}\n\n\n/**\n * Returns the value and index of the minimum element in an array.\n * @param {number[]|TypedArray} arr array of numbers.\n * @returns {number[]} the value and index of the minimum element, of the form: [valueOfMin, indexOfMin]\n * @throws {Error} If array is empty.\n */\nexport function min(arr) {\n    if (arr.length === 0) throw Error('Array must not be empty');\n    let min = arr[0];\n    let indexOfMin = 0;\n    for (let i = 1; i < arr.length; ++i) {\n        if (arr[i] < min) {\n            min = arr[i];\n            indexOfMin = i;\n        }\n    }\n    return [min, indexOfMin];\n}\n\n\n/**\n * Returns the value and index of the maximum element in an array.\n * @param {number[]|AnyTypedArray} arr array of numbers.\n * @returns {[number, number]} the value and index of the maximum element, of the form: [valueOfMax, indexOfMax]\n * @throws {Error} If array is empty.\n */\nexport function max(arr) {\n    if (arr.length === 0) throw Error('Array must not be empty');\n    let max = arr[0];\n    let indexOfMax = 0;\n    for (let i = 1; i < arr.length; ++i) {\n        if (arr[i] > max) {\n            max = arr[i];\n            indexOfMax = i;\n        }\n    }\n    return [Number(max), indexOfMax];\n}\n\nfunction isPowerOfTwo(number) {\n    // Check if the number is greater than 0 and has only one bit set to 1\n    return (number > 0) && ((number & (number - 1)) === 0);\n}\n\n/**\n * Implementation of Radix-4 FFT.\n * \n * P2FFT class provides functionality for performing Fast Fourier Transform on arrays\n * which are a power of two in length.\n * Code adapted from https://www.npmjs.com/package/fft.js\n */\nclass P2FFT {\n    /**\n     * @param {number} size The size of the input array. Must be a power of two larger than 1.\n     * @throws {Error} FFT size must be a power of two larger than 1.\n     */\n    constructor(size) {\n        this.size = size | 0; // convert to a 32-bit signed integer\n        if (this.size <= 1 || !isPowerOfTwo(this.size))\n            throw new Error('FFT size must be a power of two larger than 1');\n\n        this._csize = size << 1;\n\n        this.table = new Float64Array(this.size * 2);\n        for (let i = 0; i < this.table.length; i += 2) {\n            const angle = Math.PI * i / this.size;\n            this.table[i] = Math.cos(angle);\n            this.table[i + 1] = -Math.sin(angle);\n        }\n\n        // Find size's power of two\n        let power = 0;\n        for (let t = 1; this.size > t; t <<= 1)\n            ++power;\n\n        // Calculate initial step's width:\n        //   * If we are full radix-4, it is 2x smaller to give inital len=8\n        //   * Otherwise it is the same as `power` to give len=4\n        this._width = power % 2 === 0 ? power - 1 : power;\n\n        // Pre-compute bit-reversal patterns\n        this._bitrev = new Int32Array(1 << this._width);\n        for (let j = 0; j < this._bitrev.length; ++j) {\n            this._bitrev[j] = 0;\n            for (let shift = 0; shift < this._width; shift += 2) {\n                const revShift = this._width - shift - 2;\n                this._bitrev[j] |= ((j >>> shift) & 3) << revShift;\n            }\n        }\n    }\n\n    /**\n     * Create a complex number array with size `2 * size`\n     *\n     * @returns {Float64Array} A complex number array with size `2 * size`\n     */\n    createComplexArray() {\n        return new Float64Array(this._csize);\n    }\n\n    /**\n     * Converts a complex number representation stored in a Float64Array to an array of real numbers.\n     * \n     * @param {Float64Array} complex The complex number representation to be converted.\n     * @param {number[]} [storage] An optional array to store the result in.\n     * @returns {number[]} An array of real numbers representing the input complex number representation.\n     */\n    fromComplexArray(complex, storage) {\n        const res = storage || new Array(complex.length >>> 1);\n        for (let i = 0; i < complex.length; i += 2)\n            res[i >>> 1] = complex[i];\n        return res;\n    }\n\n    /**\n     * Convert a real-valued input array to a complex-valued output array.\n     * @param {Float64Array} input The real-valued input array.\n     * @param {Float64Array} [storage] Optional buffer to store the output array.\n     * @returns {Float64Array} The complex-valued output array.\n     */\n    toComplexArray(input, storage) {\n        const res = storage || this.createComplexArray();\n        for (let i = 0; i < res.length; i += 2) {\n            res[i] = input[i >>> 1];\n            res[i + 1] = 0;\n        }\n        return res;\n    }\n\n    /**\n     * Performs a Fast Fourier Transform (FFT) on the given input data and stores the result in the output buffer.\n     * \n     * @param {Float64Array} out The output buffer to store the result.\n     * @param {Float64Array} data The input data to transform.\n     * \n     * @throws {Error} Input and output buffers must be different.\n     * \n     * @returns {void}\n     */\n    transform(out, data) {\n        if (out === data)\n            throw new Error('Input and output buffers must be different');\n\n        this._transform4(out, data, 1 /* DONE */);\n    }\n\n    /**\n     * Performs a real-valued forward FFT on the given input buffer and stores the result in the given output buffer.\n     * The input buffer must contain real values only, while the output buffer will contain complex values. The input and\n     * output buffers must be different.\n     *\n     * @param {Float64Array} out The output buffer.\n     * @param {Float64Array} data The input buffer containing real values.\n     *\n     * @throws {Error} If the input and output buffers are the same.\n     */\n    realTransform(out, data) {\n        if (out === data)\n            throw new Error('Input and output buffers must be different');\n\n        this._realTransform4(out, data, 1 /* DONE */);\n    }\n\n    /**\n     * Performs an inverse FFT transformation on the given `data` array, and stores the result in `out`.\n     * The `out` array must be a different buffer than the `data` array. The `out` array will contain the\n     * result of the transformation. The `data` array will not be modified.\n     * \n     * @param {Float64Array} out The output buffer for the transformed data.\n     * @param {Float64Array} data The input data to transform.\n     * @throws {Error} If `out` and `data` refer to the same buffer.\n     * @returns {void}\n     */\n    inverseTransform(out, data) {\n        if (out === data)\n            throw new Error('Input and output buffers must be different');\n\n        this._transform4(out, data, -1 /* DONE */);\n        for (let i = 0; i < out.length; ++i)\n            out[i] /= this.size;\n    }\n\n    /**\n     * Performs a radix-4 implementation of a discrete Fourier transform on a given set of data.\n     *\n     * @param {Float64Array} out The output buffer for the transformed data.\n     * @param {Float64Array} data The input buffer of data to be transformed.\n     * @param {number} inv A scaling factor to apply to the transform.\n     * @returns {void}\n     */\n    _transform4(out, data, inv) {\n        // radix-4 implementation\n\n        const size = this._csize;\n\n        // Initial step (permute and transform)\n        const width = this._width;\n        let step = 1 << width;\n        let len = (size / step) << 1;\n\n        let outOff;\n        let t;\n        const bitrev = this._bitrev;\n        if (len === 4) {\n            for (outOff = 0, t = 0; outOff < size; outOff += len, ++t) {\n                const off = bitrev[t];\n                this._singleTransform2(data, out, outOff, off, step);\n            }\n        } else {\n            // len === 8\n            for (outOff = 0, t = 0; outOff < size; outOff += len, ++t) {\n                const off = bitrev[t];\n                this._singleTransform4(data, out, outOff, off, step, inv);\n            }\n        }\n\n        // Loop through steps in decreasing order\n        const table = this.table;\n        for (step >>= 2; step >= 2; step >>= 2) {\n            len = (size / step) << 1;\n            const quarterLen = len >>> 2;\n\n            // Loop through offsets in the data\n            for (outOff = 0; outOff < size; outOff += len) {\n                // Full case\n                const limit = outOff + quarterLen - 1;\n                for (let i = outOff, k = 0; i < limit; i += 2, k += step) {\n                    const A = i;\n                    const B = A + quarterLen;\n                    const C = B + quarterLen;\n                    const D = C + quarterLen;\n\n                    // Original values\n                    const Ar = out[A];\n                    const Ai = out[A + 1];\n                    const Br = out[B];\n                    const Bi = out[B + 1];\n                    const Cr = out[C];\n                    const Ci = out[C + 1];\n                    const Dr = out[D];\n                    const Di = out[D + 1];\n\n                    const tableBr = table[k];\n                    const tableBi = inv * table[k + 1];\n                    const MBr = Br * tableBr - Bi * tableBi;\n                    const MBi = Br * tableBi + Bi * tableBr;\n\n                    const tableCr = table[2 * k];\n                    const tableCi = inv * table[2 * k + 1];\n                    const MCr = Cr * tableCr - Ci * tableCi;\n                    const MCi = Cr * tableCi + Ci * tableCr;\n\n                    const tableDr = table[3 * k];\n                    const tableDi = inv * table[3 * k + 1];\n                    const MDr = Dr * tableDr - Di * tableDi;\n                    const MDi = Dr * tableDi + Di * tableDr;\n\n                    // Pre-Final values\n                    const T0r = Ar + MCr;\n                    const T0i = Ai + MCi;\n                    const T1r = Ar - MCr;\n                    const T1i = Ai - MCi;\n                    const T2r = MBr + MDr;\n                    const T2i = MBi + MDi;\n                    const T3r = inv * (MBr - MDr);\n                    const T3i = inv * (MBi - MDi);\n\n                    // Final values\n                    out[A] = T0r + T2r;\n                    out[A + 1] = T0i + T2i;\n                    out[B] = T1r + T3i;\n                    out[B + 1] = T1i - T3r;\n                    out[C] = T0r - T2r;\n                    out[C + 1] = T0i - T2i;\n                    out[D] = T1r - T3i;\n                    out[D + 1] = T1i + T3r;\n                }\n            }\n        }\n    }\n\n    /**\n     * Performs a radix-2 implementation of a discrete Fourier transform on a given set of data.\n     *\n     * @param {Float64Array} data The input buffer of data to be transformed.\n     * @param {Float64Array} out The output buffer for the transformed data.\n     * @param {number} outOff The offset at which to write the output data.\n     * @param {number} off The offset at which to begin reading the input data.\n     * @param {number} step The step size for indexing the input data.\n     * @returns {void}\n     */\n    _singleTransform2(data, out, outOff, off, step) {\n        // radix-2 implementation\n        // NOTE: Only called for len=4\n\n        const evenR = data[off];\n        const evenI = data[off + 1];\n        const oddR = data[off + step];\n        const oddI = data[off + step + 1];\n\n        out[outOff] = evenR + oddR;\n        out[outOff + 1] = evenI + oddI;\n        out[outOff + 2] = evenR - oddR;\n        out[outOff + 3] = evenI - oddI;\n    }\n\n    /**\n     * Performs radix-4 transformation on input data of length 8\n     *\n     * @param {Float64Array} data Input data array of length 8\n     * @param {Float64Array} out Output data array of length 8\n     * @param {number} outOff Index of output array to start writing from\n     * @param {number} off Index of input array to start reading from\n     * @param {number} step Step size between elements in input array\n     * @param {number} inv Scaling factor for inverse transform\n     * \n     * @returns {void}\n     */\n    _singleTransform4(data, out, outOff, off, step, inv) {\n        // radix-4\n        // NOTE: Only called for len=8\n        const step2 = step * 2;\n        const step3 = step * 3;\n\n        // Original values\n        const Ar = data[off];\n        const Ai = data[off + 1];\n        const Br = data[off + step];\n        const Bi = data[off + step + 1];\n        const Cr = data[off + step2];\n        const Ci = data[off + step2 + 1];\n        const Dr = data[off + step3];\n        const Di = data[off + step3 + 1];\n\n        // Pre-Final values\n        const T0r = Ar + Cr;\n        const T0i = Ai + Ci;\n        const T1r = Ar - Cr;\n        const T1i = Ai - Ci;\n        const T2r = Br + Dr;\n        const T2i = Bi + Di;\n        const T3r = inv * (Br - Dr);\n        const T3i = inv * (Bi - Di);\n\n        // Final values\n        out[outOff] = T0r + T2r;\n        out[outOff + 1] = T0i + T2i;\n        out[outOff + 2] = T1r + T3i;\n        out[outOff + 3] = T1i - T3r;\n        out[outOff + 4] = T0r - T2r;\n        out[outOff + 5] = T0i - T2i;\n        out[outOff + 6] = T1r - T3i;\n        out[outOff + 7] = T1i + T3r;\n    }\n\n    /**\n     * Real input radix-4 implementation\n     * @param {Float64Array} out Output array for the transformed data\n     * @param {Float64Array} data Input array of real data to be transformed\n     * @param {number} inv The scale factor used to normalize the inverse transform\n     */\n    _realTransform4(out, data, inv) {\n        // Real input radix-4 implementation\n        const size = this._csize;\n\n        // Initial step (permute and transform)\n        const width = this._width;\n        let step = 1 << width;\n        let len = (size / step) << 1;\n\n        let outOff;\n        let t;\n        const bitrev = this._bitrev;\n        if (len === 4) {\n            for (outOff = 0, t = 0; outOff < size; outOff += len, ++t) {\n                const off = bitrev[t];\n                this._singleRealTransform2(data, out, outOff, off >>> 1, step >>> 1);\n            }\n        } else {\n            // len === 8\n            for (outOff = 0, t = 0; outOff < size; outOff += len, ++t) {\n                const off = bitrev[t];\n                this._singleRealTransform4(data, out, outOff, off >>> 1, step >>> 1, inv);\n            }\n        }\n\n        // Loop through steps in decreasing order\n        const table = this.table;\n        for (step >>= 2; step >= 2; step >>= 2) {\n            len = (size / step) << 1;\n            const halfLen = len >>> 1;\n            const quarterLen = halfLen >>> 1;\n            const hquarterLen = quarterLen >>> 1;\n\n            // Loop through offsets in the data\n            for (outOff = 0; outOff < size; outOff += len) {\n                for (let i = 0, k = 0; i <= hquarterLen; i += 2, k += step) {\n                    const A = outOff + i;\n                    const B = A + quarterLen;\n                    const C = B + quarterLen;\n                    const D = C + quarterLen;\n\n                    // Original values\n                    const Ar = out[A];\n                    const Ai = out[A + 1];\n                    const Br = out[B];\n                    const Bi = out[B + 1];\n                    const Cr = out[C];\n                    const Ci = out[C + 1];\n                    const Dr = out[D];\n                    const Di = out[D + 1];\n\n                    // Middle values\n                    const MAr = Ar;\n                    const MAi = Ai;\n\n                    const tableBr = table[k];\n                    const tableBi = inv * table[k + 1];\n                    const MBr = Br * tableBr - Bi * tableBi;\n                    const MBi = Br * tableBi + Bi * tableBr;\n\n                    const tableCr = table[2 * k];\n                    const tableCi = inv * table[2 * k + 1];\n                    const MCr = Cr * tableCr - Ci * tableCi;\n                    const MCi = Cr * tableCi + Ci * tableCr;\n\n                    const tableDr = table[3 * k];\n                    const tableDi = inv * table[3 * k + 1];\n                    const MDr = Dr * tableDr - Di * tableDi;\n                    const MDi = Dr * tableDi + Di * tableDr;\n\n                    // Pre-Final values\n                    const T0r = MAr + MCr;\n                    const T0i = MAi + MCi;\n                    const T1r = MAr - MCr;\n                    const T1i = MAi - MCi;\n                    const T2r = MBr + MDr;\n                    const T2i = MBi + MDi;\n                    const T3r = inv * (MBr - MDr);\n                    const T3i = inv * (MBi - MDi);\n\n                    // Final values\n                    out[A] = T0r + T2r;\n                    out[A + 1] = T0i + T2i;\n                    out[B] = T1r + T3i;\n                    out[B + 1] = T1i - T3r;\n\n                    // Output final middle point\n                    if (i === 0) {\n                        out[C] = T0r - T2r;\n                        out[C + 1] = T0i - T2i;\n                        continue;\n                    }\n\n                    // Do not overwrite ourselves\n                    if (i === hquarterLen)\n                        continue;\n\n                    const SA = outOff + quarterLen - i;\n                    const SB = outOff + halfLen - i;\n\n                    out[SA] = T1r - inv * T3i;\n                    out[SA + 1] = -T1i - inv * T3r;\n                    out[SB] = T0r - inv * T2r;\n                    out[SB + 1] = -T0i + inv * T2i;\n                }\n            }\n        }\n\n        // Complete the spectrum by adding its mirrored negative frequency components.\n        const half = size >>> 1;\n        for (let i = 2; i < half; i += 2) {\n            out[size - i] = out[i];\n            out[size - i + 1] = -out[i + 1];\n        }\n    }\n\n    /**\n     * Performs a single real input radix-2 transformation on the provided data\n     * \n     * @param {Float64Array} data The input data array\n     * @param {Float64Array} out The output data array\n     * @param {number} outOff The output offset\n     * @param {number} off The input offset\n     * @param {number} step The step\n     * \n     * @returns {void}\n     */\n    _singleRealTransform2(data, out, outOff, off, step) {\n        // radix-2 implementation\n        // NOTE: Only called for len=4\n\n        const evenR = data[off];\n        const oddR = data[off + step];\n\n        out[outOff] = evenR + oddR;\n        out[outOff + 1] = 0;\n        out[outOff + 2] = evenR - oddR;\n        out[outOff + 3] = 0;\n    }\n\n    /**\n     * Computes a single real-valued transform using radix-4 algorithm.\n     * This method is only called for len=8.\n     *\n     * @param {Float64Array} data The input data array.\n     * @param {Float64Array} out The output data array.\n     * @param {number} outOff The offset into the output array.\n     * @param {number} off The offset into the input array.\n     * @param {number} step The step size for the input array.\n     * @param {number} inv The value of inverse.\n     */\n    _singleRealTransform4(data, out, outOff, off, step, inv) {\n        // radix-4\n        // NOTE: Only called for len=8\n        const step2 = step * 2;\n        const step3 = step * 3;\n\n        // Original values\n        const Ar = data[off];\n        const Br = data[off + step];\n        const Cr = data[off + step2];\n        const Dr = data[off + step3];\n\n        // Pre-Final values\n        const T0r = Ar + Cr;\n        const T1r = Ar - Cr;\n        const T2r = Br + Dr;\n        const T3r = inv * (Br - Dr);\n\n        // Final values\n        out[outOff] = T0r + T2r;\n        out[outOff + 1] = 0;\n        out[outOff + 2] = T1r;\n        out[outOff + 3] = -T3r;\n        out[outOff + 4] = T0r - T2r;\n        out[outOff + 5] = 0;\n        out[outOff + 6] = T1r;\n        out[outOff + 7] = T3r;\n    }\n}\n\n/**\n * NP2FFT class provides functionality for performing Fast Fourier Transform on arrays\n * which are not a power of two in length. In such cases, the chirp-z transform is used.\n * \n * For more information, see: https://math.stackexchange.com/questions/77118/non-power-of-2-ffts/77156#77156\n */\nclass NP2FFT {\n\n    /**\n     * Constructs a new NP2FFT object.\n     * @param {number} fft_length The length of the FFT\n     */\n    constructor(fft_length) {\n        // Helper variables\n        const a = 2 * (fft_length - 1);\n        const b = 2 * (2 * fft_length - 1);\n        const nextP2 = 2 ** (Math.ceil(Math.log2(b)))\n        this.bufferSize = nextP2;\n        this._a = a;\n\n        // Define buffers\n        // Compute chirp for transform\n        const chirp = new Float64Array(b);\n        const ichirp = new Float64Array(nextP2);\n        this._chirpBuffer = new Float64Array(nextP2);\n        this._buffer1 = new Float64Array(nextP2);\n        this._buffer2 = new Float64Array(nextP2);\n        this._outBuffer1 = new Float64Array(nextP2);\n        this._outBuffer2 = new Float64Array(nextP2);\n\n        // Compute complex exponentiation\n        const theta = -2 * Math.PI / fft_length;\n        const baseR = Math.cos(theta);\n        const baseI = Math.sin(theta);\n\n        // Precompute helper for chirp-z transform\n        for (let i = 0; i < b >> 1; ++i) {\n            // Compute complex power:\n            const e = (i + 1 - fft_length) ** 2 / 2.0;\n\n            // Compute the modulus and argument of the result\n            const result_mod = Math.sqrt(baseR ** 2 + baseI ** 2) ** e;\n            const result_arg = e * Math.atan2(baseI, baseR);\n\n            // Convert the result back to rectangular form\n            // and assign to chirp and ichirp\n            const i2 = 2 * i;\n            chirp[i2] = result_mod * Math.cos(result_arg);\n            chirp[i2 + 1] = result_mod * Math.sin(result_arg);\n\n            // conjugate\n            ichirp[i2] = chirp[i2];\n            ichirp[i2 + 1] = - chirp[i2 + 1];\n        }\n        this._slicedChirpBuffer = chirp.subarray(a, b);\n\n        // create object to perform Fast Fourier Transforms\n        // with `nextP2` complex numbers\n        this._f = new P2FFT(nextP2 >> 1);\n        this._f.transform(this._chirpBuffer, ichirp);\n    }\n\n    _transform(output, input, real) {\n        const ib1 = this._buffer1;\n        const ib2 = this._buffer2;\n        const ob2 = this._outBuffer1;\n        const ob3 = this._outBuffer2;\n        const cb = this._chirpBuffer;\n        const sb = this._slicedChirpBuffer;\n        const a = this._a;\n\n        if (real) {\n            // Real multiplication\n            for (let j = 0; j < sb.length; j += 2) {\n                const j2 = j + 1\n                const j3 = j >> 1;\n\n                const a_real = input[j3];\n                ib1[j] = a_real * sb[j];\n                ib1[j2] = a_real * sb[j2];\n            }\n        } else {\n            // Complex multiplication\n            for (let j = 0; j < sb.length; j += 2) {\n                const j2 = j + 1\n                ib1[j] = input[j] * sb[j] - input[j2] * sb[j2];\n                ib1[j2] = input[j] * sb[j2] + input[j2] * sb[j];\n            }\n        }\n        this._f.transform(ob2, ib1);\n\n        for (let j = 0; j < cb.length; j += 2) {\n            const j2 = j + 1;\n\n            ib2[j] = ob2[j] * cb[j] - ob2[j2] * cb[j2];\n            ib2[j2] = ob2[j] * cb[j2] + ob2[j2] * cb[j];\n        }\n        this._f.inverseTransform(ob3, ib2);\n\n        for (let j = 0; j < ob3.length; j += 2) {\n            const a_real = ob3[j + a];\n            const a_imag = ob3[j + a + 1];\n            const b_real = sb[j];\n            const b_imag = sb[j + 1];\n\n            output[j] = a_real * b_real - a_imag * b_imag;\n            output[j + 1] = a_real * b_imag + a_imag * b_real;\n        }\n    }\n\n    transform(output, input) {\n        this._transform(output, input, false);\n    }\n\n    realTransform(output, input) {\n        this._transform(output, input, true);\n    }\n}\n\nexport class FFT {\n    constructor(fft_length) {\n        this.fft_length = fft_length;\n        this.isPowerOfTwo = isPowerOfTwo(fft_length);\n        if (this.isPowerOfTwo) {\n            this.fft = new P2FFT(fft_length);\n            this.outputBufferSize = 2 * fft_length;\n        } else {\n            this.fft = new NP2FFT(fft_length);\n            this.outputBufferSize = this.fft.bufferSize;\n        }\n    }\n\n    realTransform(out, input) {\n        this.fft.realTransform(out, input);\n    }\n\n    transform(out, input) {\n        this.fft.transform(out, input);\n    }\n}\n\n\n/**\n * Performs median filter on the provided data. Padding is done by mirroring the data.\n * @param {AnyTypedArray} data The input array\n * @param {number} windowSize The window size\n */\nexport function medianFilter(data, windowSize) {\n\n    if (windowSize % 2 === 0 || windowSize <= 0) {\n        throw new Error('Window size must be a positive odd number');\n    }\n\n    // @ts-ignore\n    const outputArray = new data.constructor(data.length);\n\n    // @ts-ignore\n    const buffer = new data.constructor(windowSize); // Reusable array for storing values\n\n    const halfWindowSize = Math.floor(windowSize / 2);\n\n    for (let i = 0; i < data.length; ++i) {\n        let valuesIndex = 0;\n\n        for (let j = -halfWindowSize; j <= halfWindowSize; ++j) {\n            let index = i + j;\n            if (index < 0) {\n                index = Math.abs(index);\n            } else if (index >= data.length) {\n                index = 2 * (data.length - 1) - index;\n            }\n\n            buffer[valuesIndex++] = data[index];\n        }\n\n        buffer.sort();\n        outputArray[i] = buffer[halfWindowSize];\n    }\n\n    return outputArray;\n}\n\n/**\n * Helper function to round a number to a given number of decimals\n * @param {number} num The number to round\n * @param {number} decimals The number of decimals\n * @returns {number} The rounded number\n */\nexport function round(num, decimals) {\n    const pow = Math.pow(10, decimals);\n    return Math.round(num * pow) / pow;\n}\n\n/**\n * Helper function to round a number to the nearest integer, with ties rounded to the nearest even number.\n * Also known as \"bankers' rounding\". This is the default rounding mode in python. For example:\n * 1.5 rounds to 2 and 2.5 rounds to 2.\n * \n * @param {number} x The number to round\n * @returns {number} The rounded number\n */\nexport function bankers_round(x) {\n    const r = Math.round(x);\n    const br = Math.abs(x) % 1 === 0.5 ? (r % 2 === 0 ? r : r - 1) : r;\n    return br;\n}\n\n\n/**\n * Measures similarity between two temporal sequences (e.g., input audio and output tokens\n * to generate token-level timestamps).\n * @param {number[][]} matrix \n * @returns {number[][]}\n */\nexport function dynamic_time_warping(matrix) {\n    const output_length = matrix.length;\n    const input_length = matrix[0].length;\n\n    const outputShape = [output_length + 1, input_length + 1];\n\n    const cost = Array.from(\n        { length: outputShape[0] },\n        () => Array(outputShape[1]).fill(Infinity)\n    );\n    cost[0][0] = 0;\n\n    const trace = Array.from(\n        { length: outputShape[0] },\n        () => Array(outputShape[1]).fill(-1)\n    );\n\n    for (let j = 1; j < outputShape[1]; ++j) {\n        for (let i = 1; i < outputShape[0]; ++i) {\n            const c0 = cost[i - 1][j - 1];\n            const c1 = cost[i - 1][j];\n            const c2 = cost[i][j - 1];\n\n            let c, t;\n            if (c0 < c1 && c0 < c2) {\n                c = c0;\n                t = 0;\n            } else if (c1 < c0 && c1 < c2) {\n                c = c1;\n                t = 1;\n            } else {\n                c = c2;\n                t = 2;\n            }\n            cost[i][j] = matrix[i - 1][j - 1] + c;\n            trace[i][j] = t;\n        }\n    }\n\n    for (let i = 0; i < outputShape[1]; ++i) { // trace[0, :] = 2\n        trace[0][i] = 2;\n    }\n    for (let i = 0; i < outputShape[0]; ++i) { // trace[:, 0] = 1\n        trace[i][0] = 1;\n    }\n\n    // backtrace\n    let i = output_length;\n    let j = input_length;\n    let text_indices = [];\n    let time_indices = [];\n    while (i > 0 || j > 0) {\n        text_indices.push(i - 1);\n        time_indices.push(j - 1);\n\n        switch (trace[i][j]) {\n            case 0:\n                --i; --j;\n                break;\n            case 1:\n                --i;\n                break;\n            case 2:\n                --j;\n                break;\n            default:\n                throw new Error(\n                    `Internal error in dynamic time warping. Unexpected trace[${i}, ${j}]. Please file a bug report.`\n                )\n        }\n    }\n\n    text_indices.reverse();\n    time_indices.reverse();\n\n    return [text_indices, time_indices];\n\n}\n","/**\n * @file Helper module for `Tensor` processing.\n * \n * These functions and classes are only used internally, \n * meaning an end-user shouldn't need to access anything here.\n * \n * @module utils/tensor\n */\n\nimport {\n    interpolate_data,\n    permute_data\n} from './maths.js';\n\nimport {\n    Tensor as ONNXTensor, isONNXTensor,\n} from '../backends/onnx.js';\n\nimport { TensorOpRegistry } from '../ops/registry.js';\n\nconst DataTypeMap = Object.freeze({\n    float32: Float32Array,\n    float16: Uint16Array,\n    float64: Float64Array,\n    string: Array, // string[]\n    int8: Int8Array,\n    uint8: Uint8Array,\n    int16: Int16Array,\n    uint16: Uint16Array,\n    int32: Int32Array,\n    uint32: Uint32Array,\n    int64: BigInt64Array,\n    uint64: BigUint64Array,\n    bool: Uint8Array,\n});\n\n/**\n * @typedef {keyof typeof DataTypeMap} DataType\n * @typedef {import('./maths.js').AnyTypedArray | any[]} DataArray\n */\n\n\nexport class Tensor {\n    /** @type {number[]} Dimensions of the tensor. */\n    get dims() {\n        // @ts-ignore\n        return this.ort_tensor.dims;\n    }\n    set dims(value) {\n        // FIXME: ONNXTensor declares dims as readonly so one needs to use the constructor() if dims change.\n        // @ts-ignore\n        this.ort_tensor.dims = value;\n    }\n\n    /** @type {DataType} Type of the tensor. */\n    get type() {\n        return this.ort_tensor.type;\n    };\n\n    /** @type {DataArray} The data stored in the tensor. */\n    get data() {\n        return this.ort_tensor.data;\n    }\n\n    /** @type {number} The number of elements in the tensor. */\n    get size() {\n        return this.ort_tensor.size;\n    };\n\n    /** @type {string} The location of the tensor data. */\n    get location() {\n        return this.ort_tensor.location;\n    };\n\n    ort_tensor;\n\n    /**\n     * Create a new Tensor or copy an existing Tensor.\n     * @param {[DataType, DataArray, number[]]|[ONNXTensor]} args\n     */\n    constructor(...args) {\n        if (isONNXTensor(args[0])) {\n            this.ort_tensor = /** @type {ONNXTensor} */ (args[0]);\n        } else {\n            // Create new tensor\n            this.ort_tensor = new ONNXTensor(\n                /** @type {DataType} */(args[0]),\n                /** @type {Exclude<import('./maths.js').AnyTypedArray, Uint8ClampedArray>} */(args[1]),\n                args[2]\n            );\n        }\n\n        return new Proxy(this, {\n            get: (obj, key) => {\n                if (typeof key === 'string') {\n                    let index = Number(key);\n                    if (Number.isInteger(index)) {\n                        // key is an integer (i.e., index)\n                        return obj._getitem(index);\n                    }\n                }\n                // @ts-ignore\n                return obj[key];\n            },\n            set: (obj, key, value) => {\n                // TODO allow setting of data\n\n                // @ts-ignore\n                return obj[key] = value;\n            }\n        });\n    }\n\n    dispose() {\n        this.ort_tensor.dispose();\n        // this.ort_tensor = undefined;\n    }\n\n    /**\n     * Returns an iterator object for iterating over the tensor data in row-major order.\n     * If the tensor has more than one dimension, the iterator will yield subarrays.\n     * @returns {Iterator} An iterator object for iterating over the tensor data in row-major order.\n     */\n    *[Symbol.iterator]() {\n        const [iterLength, ...iterDims] = this.dims;\n\n        if (iterDims.length > 0) {\n            const iterSize = iterDims.reduce((a, b) => a * b);\n            for (let i = 0; i < iterLength; ++i) {\n                yield this._subarray(i, iterSize, iterDims);\n            }\n        } else {\n            yield* this.data\n        }\n\n    }\n\n    /**\n     * Index into a Tensor object.\n     * @param {number} index The index to access.\n     * @returns {Tensor} The data at the specified index.\n     */\n    _getitem(index) {\n        const [iterLength, ...iterDims] = this.dims;\n\n        index = safeIndex(index, iterLength);\n\n        if (iterDims.length > 0) {\n            const iterSize = iterDims.reduce((a, b) => a * b);\n            return this._subarray(index, iterSize, iterDims);\n        } else {\n            return new Tensor(this.type, [this.data[index]], iterDims);\n        }\n    }\n\n    /**\n     * @param {number|bigint} item The item to search for in the tensor\n     * @returns {number} The index of the first occurrence of item in the tensor data.\n     */\n    indexOf(item) {\n        const this_data = this.data;\n        for (let index = 0; index < this_data.length; ++index) {\n            // Note: == instead of === so we can match Ints with BigInts\n            if (this_data[index] == item) {\n                return index;\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * @param {number} index \n     * @param {number} iterSize \n     * @param {any} iterDims \n     * @returns {Tensor}\n     */\n    _subarray(index, iterSize, iterDims) {\n        const o1 = index * iterSize;\n        const o2 = (index + 1) * iterSize;\n\n        // We use subarray if available (typed array), otherwise we use slice (normal array)\n        const data =\n            ('subarray' in this.data)\n                ? this.data.subarray(o1, o2)\n                : this.data.slice(o1, o2);\n        return new Tensor(this.type, data, iterDims);\n    }\n\n    /**\n     * Returns the value of this tensor as a standard JavaScript Number. This only works\n     * for tensors with one element. For other cases, see `Tensor.tolist()`.\n     * @returns {number|bigint} The value of this tensor as a standard JavaScript Number.\n     * @throws {Error} If the tensor has more than one element.\n     */\n    item() {\n        const this_data = this.data;\n        if (this_data.length !== 1) {\n            throw new Error(`a Tensor with ${this_data.length} elements cannot be converted to Scalar`);\n        }\n        return this_data[0];\n    }\n\n    /**\n     * Convert tensor data to a n-dimensional JS list\n     * @returns {Array}\n     */\n    tolist() {\n        return reshape(this.data, this.dims)\n    }\n\n    /**\n     * Return a new Tensor with the sigmoid function applied to each element.\n     * @returns {Tensor} The tensor with the sigmoid function applied.\n     */\n    sigmoid() {\n        return this.clone().sigmoid_();\n    }\n\n    /**\n     * Applies the sigmoid function to the tensor in place.\n     * @returns {Tensor} Returns `this`.\n     */\n    sigmoid_() {\n        const this_data = this.data;\n        for (let i = 0; i < this_data.length; ++i) {\n            this_data[i] = 1 / (1 + Math.exp(-this_data[i]));\n        }\n        return this;\n    }\n\n    /**\n     * Return a new Tensor with every element multiplied by a constant.\n     * @param {number} val The value to multiply by.\n     * @returns {Tensor} The new tensor.\n     */\n    mul(val) {\n        return this.clone().mul_(val);\n    }\n\n    /**\n     * Multiply the tensor by a constant in place.\n     * @param {number} val The value to multiply by.\n     * @returns {Tensor} Returns `this`.\n     */\n    mul_(val) {\n        const this_data = this.data;\n        for (let i = 0; i < this_data.length; ++i) {\n            this_data[i] *= val;\n        }\n        return this;\n    }\n\n    /**\n     * Return a new Tensor with every element divided by a constant.\n     * @param {number} val The value to divide by.\n     * @returns {Tensor} The new tensor.\n     */\n    div(val) {\n        return this.clone().div_(val);\n    }\n\n    /**\n     * Divide the tensor by a constant in place.\n     * @param {number} val The value to divide by.\n     * @returns {Tensor} Returns `this`.\n     */\n    div_(val) {\n        const this_data = this.data;\n        for (let i = 0; i < this_data.length; ++i) {\n            this_data[i] /= val;\n        }\n        return this;\n    }\n    /**\n     * Return a new Tensor with every element added by a constant.\n     * @param {number} val The value to add by.\n     * @returns {Tensor} The new tensor.\n     */\n    add(val) {\n        return this.clone().add_(val);\n    }\n\n    /**\n     * Add the tensor by a constant in place.\n     * @param {number} val The value to add by.\n     * @returns {Tensor} Returns `this`.\n     */\n    add_(val) {\n        const this_data = this.data;\n        for (let i = 0; i < this_data.length; ++i) {\n            this_data[i] += val;\n        }\n        return this;\n    }\n\n    clone() {\n        return new Tensor(this.type, this.data.slice(), this.dims.slice());\n    }\n\n    slice(...slices) {\n        // This allows for slicing with ranges and numbers\n        const newTensorDims = [];\n        const newOffsets = [];\n\n        // slices is an array of numbers or arrays of numbers\n        // e.g., slices = [0, [1, 3], null, [0, 3]]\n        for (let sliceIndex = 0; sliceIndex < this.dims.length; ++sliceIndex) {\n            let slice = slices[sliceIndex];\n\n            if (slice === null || slice === undefined) {\n                // null or undefined means take the whole dimension\n                newOffsets.push([0, this.dims[sliceIndex]]);\n                newTensorDims.push(this.dims[sliceIndex]);\n\n            } else if (typeof slice === 'number') {\n                slice = safeIndex(slice, this.dims[sliceIndex], sliceIndex);\n\n                // A number means take a single element\n                newOffsets.push([slice, slice + 1]);\n\n            } else if (Array.isArray(slice) && slice.length === 2) {\n                // An array of length 2 means take a range of elements\n                let [start, end] = slice;\n                start = start === null\n                    ? 0\n                    : safeIndex(start, this.dims[sliceIndex], sliceIndex, false);\n                end = end === null\n                    ? this.dims[sliceIndex]\n                    : safeIndex(end, this.dims[sliceIndex], sliceIndex, false);\n\n                if (start > end) {\n                    throw new Error(`Invalid slice: ${slice}`);\n                }\n\n                const offsets = [\n                    Math.max(start, 0),\n                    Math.min(end, this.dims[sliceIndex])\n                ];\n\n                newOffsets.push(offsets);\n                newTensorDims.push(offsets[1] - offsets[0]);\n\n            } else {\n                throw new Error(`Invalid slice: ${slice}`);\n            }\n        }\n\n        const newDims = newOffsets.map(([start, end]) => end - start);\n        const newBufferSize = newDims.reduce((a, b) => a * b);\n\n        const this_data = this.data;\n        // Allocate memory\n        // @ts-ignore\n        const data = new this_data.constructor(newBufferSize);\n\n        // Precompute strides\n        const stride = this.stride();\n\n        for (let i = 0; i < newBufferSize; ++i) {\n            let originalIndex = 0;\n            for (let j = newDims.length - 1, num = i; j >= 0; --j) {\n                const size = newDims[j];\n                originalIndex += ((num % size) + newOffsets[j][0]) * stride[j];\n                num = Math.floor(num / size);\n            }\n            data[i] = this_data[originalIndex];\n        }\n        return new Tensor(this.type, data, newTensorDims);\n\n    }\n\n    /**\n     * Return a permuted version of this Tensor, according to the provided dimensions.\n     * @param  {...number} dims Dimensions to permute.\n     * @returns {Tensor} The permuted tensor.\n     */\n    permute(...dims) {\n        return permute(this, dims);\n    }\n\n    // TODO: implement transpose. For now (backwards compatibility), it's just an alias for permute()\n    transpose(...dims) {\n        return this.permute(...dims);\n    }\n\n    // TODO add .max() and .min() methods\n\n    /**\n     * Returns the sum of each row of the input tensor in the given dimension dim.\n     * \n     * @param {number} [dim=null] The dimension or dimensions to reduce. If `null`, all dimensions are reduced.\n     * @param {boolean} keepdim Whether the output tensor has `dim` retained or not.\n     * @returns The summed tensor\n     */\n    sum(dim = null, keepdim = false) {\n        return this.norm(1, dim, keepdim);\n    }\n\n    /**\n     * Returns the matrix norm or vector norm of a given tensor.\n     * @param {number|string} [p='fro'] The order of norm\n     * @param {number} [dim=null] Specifies which dimension of the tensor to calculate the norm across.\n     * If dim is None, the norm will be calculated across all dimensions of input.\n     * @param {boolean} [keepdim=false] Whether the output tensors have dim retained or not.\n     * @returns {Tensor} The norm of the tensor.\n     */\n    norm(p = 'fro', dim = null, keepdim = false) {\n        if (p === 'fro') {\n            // NOTE: Since we only support integer dims, Frobenius norm produces the same result as p=2.\n            p = 2;\n        } else if (typeof p === 'string') {\n            throw Error(`Unsupported norm: ${p}`);\n        }\n\n        const this_data = this.data;\n\n        if (dim === null) {\n            // @ts-ignore\n            let val = this_data.reduce((a, b) => a + (b ** p), 0) ** (1 / p);\n            return new Tensor(this.type, [val], []);\n        }\n\n        // Negative indexing\n        dim = safeIndex(dim, this.dims.length);\n\n        // Calculate the shape of the resulting array after summation\n        const resultDims = this.dims.slice(); // Copy the original dimensions\n        resultDims[dim] = 1; // Remove the specified axis\n\n        // Create a new array to store the accumulated values\n        // @ts-ignore\n        const result = new this_data.constructor(this_data.length / this.dims[dim]);\n\n        // Iterate over the data array\n        for (let i = 0; i < this_data.length; ++i) {\n\n            // Calculate the index in the resulting array\n            let resultIndex = 0;\n\n            for (let j = this.dims.length - 1, num = i, resultMultiplier = 1; j >= 0; --j) {\n                const size = this.dims[j];\n                if (j !== dim) {\n                    const index = num % size;\n                    resultIndex += index * resultMultiplier;\n                    resultMultiplier *= resultDims[j];\n                }\n                num = Math.floor(num / size);\n            }\n\n            // Accumulate the value at the current index\n            result[resultIndex] += (this_data[i]) ** p;\n        }\n\n        if (p !== 1) {\n            for (let i = 0; i < result.length; ++i) {\n                result[i] = result[i] ** (1 / p);\n            }\n        }\n\n        if (!keepdim) {\n            resultDims.splice(dim, 1);\n        }\n\n        return new Tensor(this.type, result, resultDims);\n    }\n\n    /**\n     * Performs `L_p` normalization of inputs over specified dimension. Operates in place.\n     * @param {number} [p=2] The exponent value in the norm formulation\n     * @param {number} [dim=1] The dimension to reduce\n     * @returns {Tensor} `this` for operation chaining.\n     */\n    normalize_(p = 2.0, dim = 1) {\n        dim = safeIndex(dim, this.dims.length);\n\n        const norm = this.norm(p, dim, true);\n\n        const this_data = this.data;\n        const norm_data = norm.data;\n        for (let i = 0; i < this_data.length; ++i) {\n\n            // Calculate the index in the resulting array\n            let resultIndex = 0;\n\n            for (let j = this.dims.length - 1, num = i, resultMultiplier = 1; j >= 0; --j) {\n                const size = this.dims[j];\n                if (j !== dim) {\n                    const index = num % size;\n                    resultIndex += index * resultMultiplier;\n                    resultMultiplier *= this.dims[j];\n                }\n                num = Math.floor(num / size);\n            }\n\n            // Divide by normalized value\n            this_data[i] /= norm_data[resultIndex];\n        }\n\n        return this;\n    }\n\n    /**\n     * Performs `L_p` normalization of inputs over specified dimension.\n     * @param {number} [p=2] The exponent value in the norm formulation\n     * @param {number} [dim=1] The dimension to reduce\n     * @returns {Tensor} The normalized tensor.\n     */\n    normalize(p = 2.0, dim = 1) {\n        return this.clone().normalize_(p, dim);\n    }\n\n    /**\n     * Compute and return the stride of this tensor.\n     * Stride is the jump necessary to go from one element to the next one in the specified dimension dim.\n     * @returns {number[]} The stride of this tensor.\n     */\n    stride() {\n        return dimsToStride(this.dims);\n    }\n\n    /**\n     * Returns a tensor with all specified dimensions of input of size 1 removed.\n     * \n     * NOTE: The returned tensor shares the storage with the input tensor, so changing the contents of one will change the contents of the other.\n     * If you would like a copy, use `tensor.clone()` before squeezing.\n     * \n     * @param {number} [dim=null] If given, the input will be squeezed only in the specified dimensions.\n     * @returns {Tensor} The squeezed tensor\n     */\n    squeeze(dim = null) {\n        return new Tensor(\n            this.type,\n            this.data,\n            calc_squeeze_dims(this.dims, dim)\n        )\n    }\n\n    /**\n     * In-place version of @see {@link Tensor.squeeze}\n     */\n    squeeze_(dim = null) {\n        this.dims = calc_squeeze_dims(this.dims, dim);\n        return this;\n    }\n\n    /**\n     * Returns a new tensor with a dimension of size one inserted at the specified position.\n     * \n     * NOTE: The returned tensor shares the same underlying data with this tensor.\n     * \n     * @param {number} dim The index at which to insert the singleton dimension\n     * @returns {Tensor} The unsqueezed tensor\n     */\n    unsqueeze(dim = null) {\n        return new Tensor(\n            this.type,\n            this.data,\n            calc_unsqueeze_dims(this.dims, dim)\n        );\n    }\n\n    /**\n     * In-place version of @see {@link Tensor.unsqueeze}\n     */\n    unsqueeze_(dim = null) {\n        this.dims = calc_unsqueeze_dims(this.dims, dim);\n        return this;\n    }\n\n    /**\n     * In-place version of @see {@link Tensor.flatten}\n     */\n    flatten_(start_dim = 0, end_dim = -1) {\n        // TODO validate inputs\n        end_dim = (end_dim + this.dims.length) % this.dims.length;\n\n        let dimsToKeepBefore = this.dims.slice(0, start_dim);\n        let dimsToFlatten = this.dims.slice(start_dim, end_dim + 1);\n        let dimsToKeepAfter = this.dims.slice(end_dim + 1);\n\n        this.dims = [...dimsToKeepBefore, dimsToFlatten.reduce((a, b) => a * b, 1), ...dimsToKeepAfter]\n        return this;\n    }\n\n    /**\n     * Flattens input by reshaping it into a one-dimensional tensor.\n     * If `start_dim` or `end_dim` are passed, only dimensions starting with `start_dim`\n     * and ending with `end_dim` are flattened. The order of elements in input is unchanged.\n     * @param {number} start_dim the first dim to flatten\n     * @param {number} end_dim the last dim to flatten\n     * @returns {Tensor} The flattened tensor.\n     */\n    flatten(start_dim = 0, end_dim = -1) {\n        return this.clone().flatten_(start_dim, end_dim);\n    }\n\n    /**\n     * Returns a new tensor with the same data as the `self` tensor but of a different `shape`.\n     * @param  {...number} dims the desired size\n     * @returns {Tensor} The tensor with the same data but different shape\n     */\n    view(...dims) {\n        // TODO: validate dims\n        let inferredIndex = -1;\n        for (let i = 0; i < dims.length; ++i) {\n            if (dims[i] === -1) {\n                if (inferredIndex !== -1) {\n                    throw new Error(\"Only one dimension can be inferred\");\n                }\n                inferredIndex = i;\n            }\n        }\n\n        const this_data = this.data;\n        if (inferredIndex !== -1) {\n            // Some dimension must be inferred\n            const productOther = dims.reduce((product, curr, index) => {\n                return index !== inferredIndex ? product * curr : product\n            }, 1);\n\n            dims[inferredIndex] = this_data.length / productOther;\n        }\n        return new Tensor(this.type, this_data, dims); // NOTE: uses same underlying storage\n    }\n\n    neg_() {\n        const this_data = this.data;\n        for (let i = 0; i < this_data.length; ++i) {\n            this_data[i] = -this_data[i];\n        }\n        return this;\n    }\n    neg() {\n        return this.clone().neg_();\n    }\n\n    /**\n     * In-place version of @see {@link Tensor.clamp}\n     */\n    clamp_(min, max) {\n        const this_data = this.data;\n        for (let i = 0; i < this_data.length; ++i) {\n            this_data[i] = Math.min(Math.max(this_data[i], min), max);\n        }\n        return this;\n    }\n\n    /**\n     * Clamps all elements in input into the range [ min, max ]\n     * @param {number} min lower-bound of the range to be clamped to\n     * @param {number} max upper-bound of the range to be clamped to\n     * @returns {Tensor} the output tensor.\n     */\n    clamp(min, max) {\n        return this.clone().clamp_(min, max);\n    }\n\n    /**\n     * In-place version of @see {@link Tensor.round}\n     */\n    round_() {\n        const this_data = this.data;\n        for (let i = 0; i < this_data.length; ++i) {\n            this_data[i] = Math.round(this_data[i]);\n        }\n        return this;\n    }\n\n    /**\n     * Rounds elements of input to the nearest integer.\n     * @returns {Tensor} the output tensor.\n     */\n    round() {\n        return this.clone().round_();\n    }\n\n    mean(dim = null, keepdim = false) {\n        return mean(this, dim, keepdim);\n    }\n\n    /**\n     * Performs Tensor dtype conversion.\n     * @param {DataType} type The desired data type.\n     * @returns {Tensor} The converted tensor.\n     */\n    to(type) {\n        // If the self Tensor already has the correct dtype, then self is returned.\n        if (this.type === type) return this;\n\n        // Otherwise, the returned tensor is a copy of self with the desired dtype.\n        if (!DataTypeMap.hasOwnProperty(type)) {\n            throw new Error(`Unsupported type: ${type}`);\n        }\n        // @ts-ignore\n        return new Tensor(type, DataTypeMap[type].from(this.data), this.dims);\n    }\n}\n\n/**\n * This creates a nested array of a given type and depth (see examples).\n * \n * @example\n *   NestArray<string, 1>; // string[]\n * @example\n *   NestArray<number, 2>; // number[][]\n * @example\n *   NestArray<string, 3>; // string[][][] etc.\n * @template T\n * @template {number} Depth\n * @template {never[]} [Acc=[]]\n * @typedef {Acc['length'] extends Depth ? T : NestArray<T[], Depth, [...Acc, never]>} NestArray\n */\n\n/**\n * Reshapes a 1-dimensional array into an n-dimensional array, according to the provided dimensions.\n *\n * @example\n *   reshape([10                    ], [1      ]); // Type: number[]      Value: [10]\n *   reshape([1, 2, 3, 4            ], [2, 2   ]); // Type: number[][]    Value: [[1, 2], [3, 4]]\n *   reshape([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 2]); // Type: number[][][]  Value: [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]\n *   reshape([1, 2, 3, 4, 5, 6, 7, 8], [4, 2   ]); // Type: number[][]    Value: [[1, 2], [3, 4], [5, 6], [7, 8]]\n * @param {T[]|DataArray} data The input array to reshape.\n * @param {DIM} dimensions The target shape/dimensions.\n * @template T\n * @template {[number]|number[]} DIM\n * @returns {NestArray<T, DIM[\"length\"]>} The reshaped array.\n */\nfunction reshape(data, dimensions) {\n\n    const totalElements = data.length;\n    const dimensionSize = dimensions.reduce((a, b) => a * b);\n\n    if (totalElements !== dimensionSize) {\n        throw Error(`cannot reshape array of size ${totalElements} into shape (${dimensions})`);\n    }\n\n    /** @type {any} */\n    let reshapedArray = data;\n\n    for (let i = dimensions.length - 1; i >= 0; i--) {\n        reshapedArray = reshapedArray.reduce((acc, val) => {\n            let lastArray = acc[acc.length - 1];\n\n            if (lastArray.length < dimensions[i]) {\n                lastArray.push(val);\n            } else {\n                acc.push([val]);\n            }\n\n            return acc;\n        }, [[]]);\n    }\n\n    return reshapedArray[0];\n}\n\n/**\n * Permutes a tensor according to the provided axes.\n * @param {any} tensor The input tensor to permute.\n * @param {Array} axes The axes to permute the tensor along.\n * @returns {Tensor} The permuted tensor.\n */\nexport function permute(tensor, axes) {\n    const [permutedData, shape] = permute_data(tensor.data, tensor.dims, axes);\n    return new Tensor(tensor.type, permutedData, shape);\n}\n\n\n/**\n * Interpolates an Tensor to the given size.\n * @param {Tensor} input The input tensor to interpolate. Data must be channel-first (i.e., [c, h, w])\n * @param {number[]} size The output size of the image\n * @param {string} mode The interpolation mode\n * @param {boolean} align_corners Whether to align corners.\n * @returns {Tensor} The interpolated tensor.\n */\nexport function interpolate(input, [out_height, out_width], mode = 'bilinear', align_corners = false) {\n\n    // Input image dimensions\n    const in_channels = input.dims.at(-3) ?? 1;\n    const in_height = input.dims.at(-2);\n    const in_width = input.dims.at(-1);\n\n    let output = interpolate_data(\n        /** @type {import('./maths.js').TypedArray}*/(input.data),\n        [in_channels, in_height, in_width],\n        [out_height, out_width],\n        mode,\n        align_corners\n    );\n    return new Tensor(input.type, output, [in_channels, out_height, out_width]);\n}\n\n\n/**\n * Down/up samples the input.\n * Inspired by https://pytorch.org/docs/stable/generated/torch.nn.functional.interpolate.html.\n * @param {Tensor} input the input tensor\n * @param {Object} options the options for the interpolation\n * @param {[number, number]|[number, number, number]|[number, number, number, number]} [options.size=null] output spatial size.\n * @param {\"bilinear\"|\"bicubic\"} [options.mode='bilinear'] algorithm used for upsampling\n * @returns {Promise<Tensor>} The interpolated tensor.\n */\nexport async function interpolate_4d(input, {\n    size = null,\n    mode = 'bilinear',\n} = {}) {\n\n    // Error checking\n    if (input.dims.length !== 4) {\n        throw new Error('`interpolate_4d` currently only supports 4D input.');\n    }\n    if (!size) {\n        // TODO: support scale_factor\n        throw new Error('`interpolate_4d` requires a `size` argument.');\n    }\n\n    // Fill in missing dimensions\n    let targetDims;\n    if (size.length === 2) {\n        targetDims = [...input.dims.slice(0, 2), ...size];\n    } else if (size.length === 3) {\n        targetDims = [input.dims[0], ...size];\n    } else if (size.length === 4) {\n        targetDims = size;\n    } else {\n        throw new Error('`size` must be of length 2, 3, or 4.');\n    }\n\n    let op;\n    if (mode === 'bilinear') {\n        op = await TensorOpRegistry.bilinear_interpolate_4d;\n    } else if (mode === 'bicubic') {\n        op = await TensorOpRegistry.bicubic_interpolate_4d;\n    } else {\n        throw new Error(`Unsupported mode: ${mode}`);\n    }\n\n    const sizeTensor = new Tensor('int64', new BigInt64Array(targetDims.map(BigInt)), [targetDims.length]);\n    return await op({ x: input, s: sizeTensor });\n}\n\n/**\n * Matrix product of two tensors.\n * Inspired by https://pytorch.org/docs/stable/generated/torch.matmul.html\n * @param {Tensor} a the first tensor to be multiplied\n * @param {Tensor} b the second tensor to be multiplied\n * @returns {Promise<Tensor>} The matrix product of the two tensors.\n */\nexport async function matmul(a, b) {\n    const op = await TensorOpRegistry.matmul;\n    return await op({ a, b });\n}\n\n/**\n * Computes the one dimensional Fourier transform of real-valued input.\n * Inspired by https://pytorch.org/docs/stable/generated/torch.fft.rfft.html\n * @param {Tensor} x the real input tensor\n * @param {Tensor} a The dimension along which to take the one dimensional real FFT.\n * @returns {Promise<Tensor>} the output tensor.\n */\nexport async function rfft(x, a) {\n    const op = await TensorOpRegistry.rfft;\n    return await op({ x, a });\n}\n\n\n/**\n * Returns the k largest elements of the given input tensor.\n * Inspired by https://pytorch.org/docs/stable/generated/torch.topk.html\n * @param {Tensor} x the input tensor\n * @param {number} k the k in \"top-k\"\n * @returns {Promise<[Tensor, Tensor]>} the output tuple of (Tensor, LongTensor) of top-k elements and their indices.\n */\nexport async function topk(x, k) {\n    const op = await TensorOpRegistry.top_k;\n\n    if (k === null) {\n        k = x.dims.at(-1);\n    } else {\n        k = Math.min(k, x.dims.at(-1));\n    }\n    return await op({\n        x,\n        k: new Tensor(\n            'int64',\n            [BigInt(k)],\n            [1]\n        )\n    });\n}\n\n/**\n * Perform mean pooling of the last hidden state followed by a normalization step.\n * @param {Tensor} last_hidden_state Tensor of shape [batchSize, seqLength, embedDim]\n * @param {Tensor} attention_mask Tensor of shape [batchSize, seqLength]\n * @returns {Tensor} Returns a new Tensor of shape [batchSize, embedDim].\n */\nexport function mean_pooling(last_hidden_state, attention_mask) {\n    // last_hidden_state: [batchSize, seqLength, embedDim]\n    // attention_mask:    [batchSize, seqLength]\n    const lastHiddenStateData = last_hidden_state.data;\n    const attentionMaskData = attention_mask.data;\n\n    const shape = [last_hidden_state.dims[0], last_hidden_state.dims[2]];\n\n    // @ts-ignore\n    const returnedData = new lastHiddenStateData.constructor(shape[0] * shape[1]);\n    const [batchSize, seqLength, embedDim] = last_hidden_state.dims;\n\n    let outIndex = 0;\n    for (let i = 0; i < batchSize; ++i) {\n        const offset = i * embedDim * seqLength;\n\n        for (let k = 0; k < embedDim; ++k) {\n            let sum = 0;\n            let count = 0;\n\n            const attnMaskOffset = i * seqLength;\n            const offset2 = offset + k;\n            // Pool over all words in sequence\n            for (let j = 0; j < seqLength; ++j) {\n                // index into attention mask\n                const attn = Number(attentionMaskData[attnMaskOffset + j]);\n\n                count += attn;\n                sum += lastHiddenStateData[offset2 + j * embedDim] * attn;\n            }\n\n            const avg = sum / count;\n            returnedData[outIndex++] = avg;\n        }\n    }\n\n    return new Tensor(\n        last_hidden_state.type,\n        returnedData,\n        shape\n    )\n}\n\n/**\n * Apply Layer Normalization for last certain number of dimensions.\n * @param {Tensor} input The input tensor\n * @param {number[]} normalized_shape input shape from an expected input of size\n * @param {Object} options The options for the layer normalization\n * @param {number} [options.eps=1e-5] A value added to the denominator for numerical stability.\n * @returns {Tensor} The normalized tensor.\n */\nexport function layer_norm(input, normalized_shape, {\n    eps = 1e-5,\n} = {}) {\n    if (input.dims.length !== 2) {\n        throw new Error('`layer_norm` currently only supports 2D input.');\n    }\n\n    const [batchSize, featureDim] = input.dims;\n\n    if (normalized_shape.length !== 1 && normalized_shape[0] !== featureDim) {\n        throw new Error('`normalized_shape` must be a 1D array with shape `[input.dims[1]]`.');\n    }\n\n    const [std, mean] = std_mean(input, 1, 0, true);\n    const stdData = /** @type {Float32Array} */(std.data);\n    const meanData = /** @type {Float32Array} */(mean.data);\n\n    const inputData = /** @type {Float32Array} */(input.data);\n\n    // @ts-ignore\n    const returnedData = new inputData.constructor(inputData.length);\n\n    for (let i = 0; i < batchSize; ++i) {\n        const offset = i * featureDim;\n        for (let j = 0; j < featureDim; ++j) {\n            const offset2 = offset + j;\n            returnedData[offset2] = (inputData[offset2] - meanData[i]) / (stdData[i] + eps);\n        }\n    }\n    return new Tensor(input.type, returnedData, input.dims);\n}\n\n/**\n * Helper function to calculate new dimensions when performing a squeeze operation.\n * @param {number[]} dims The dimensions of the tensor.\n * @param {number|number[]|null} dim The dimension(s) to squeeze.\n * @returns {number[]} The new dimensions.\n * @private\n */\nfunction calc_squeeze_dims(dims, dim) {\n    dims = dims.slice();\n    if (dim === null) {\n        dims = dims.filter((d) => d !== 1);\n    } else if (typeof dim === 'number') {\n        if (dims[dim] === 1) {\n            dims.splice(dim, 1);\n        }\n    } else if (Array.isArray(dim)) {\n        dims = dims.filter((x, i) => {\n            return x !== 1 || !dim.includes(i);\n        });\n    }\n    return dims;\n}\n\n/**\n * Helper function to calculate new dimensions when performing an unsqueeze operation.\n * @param {number[]} dims The dimensions of the tensor.\n * @param {number} dim The dimension to unsqueeze.\n * @returns {number[]} The new dimensions.\n * @private\n */\nfunction calc_unsqueeze_dims(dims, dim) {\n    // Dimension out of range (e.g., \"expected to be in range of [-4, 3], but got 4\")\n    // + 1 since we allow inserting at the end (i.e. dim = -1)\n    dim = safeIndex(dim, dims.length + 1);\n    dims = dims.slice();\n    // Insert 1 into specified dimension\n    dims.splice(dim, 0, 1);\n    return dims;\n}\n\n/**\n * Safely calculate the index for an array of a given size, allowing negative indexing.\n * @param {number} index The index that will be used.\n * @param {number} size The size of the array.\n * @param {number} [dimension=null] The dimension that the index is for (optional).\n * @returns {number} The index, guaranteed to be non-negative and less than `arrayLength`.\n * \n * @throws {Error} If the index is out of range.\n * @private\n */\nfunction safeIndex(index, size, dimension = null, boundsCheck = true) {\n    if (boundsCheck && (index < -size || index >= size)) {\n        throw new Error(`IndexError: index ${index} is out of bounds for dimension${dimension === null ? '' : ' ' + dimension} with size ${size}`);\n    }\n\n    if (index < 0) {\n        // Negative indexing, ensuring positive index\n        index = ((index % size) + size) % size;\n    }\n    return index;\n}\n\n/**\n * Concatenates an array of tensors along a specified dimension.\n * @param {Tensor[]} tensors The array of tensors to concatenate.\n * @param {number} dim The dimension to concatenate along.\n * @returns {Tensor} The concatenated tensor.\n */\nexport function cat(tensors, dim = 0) {\n    dim = safeIndex(dim, tensors[0].dims.length);\n\n    // TODO do validation of shapes\n\n    const resultDims = tensors[0].dims.slice();\n    resultDims[dim] = tensors.reduce((a, b) => a + b.dims[dim], 0);\n\n    // Create a new array to store the accumulated values\n    const resultSize = resultDims.reduce((a, b) => a * b, 1);\n    // @ts-ignore\n    const result = new tensors[0].data.constructor(resultSize);\n\n    // Create output tensor of same type as first\n    const resultType = tensors[0].type;\n\n    if (dim === 0) {\n        // Handle special case for performance reasons\n\n        let offset = 0;\n        for (const tensor of tensors) {\n            const tensorData = tensor.data;\n            result.set(tensorData, offset);\n            offset += tensorData.length;\n        }\n\n    } else {\n\n        let currentDim = 0;\n\n        for (let t = 0; t < tensors.length; ++t) {\n            const { data, dims } = tensors[t];\n\n            // Iterate over the data array\n            for (let i = 0; i < data.length; ++i) {\n                // Calculate the index in the resulting array\n                let resultIndex = 0;\n\n                for (let j = dims.length - 1, num = i, resultMultiplier = 1; j >= 0; --j) {\n                    const size = dims[j];\n                    let index = num % size;\n                    if (j === dim) {\n                        index += currentDim;\n                    }\n                    resultIndex += index * resultMultiplier;\n                    resultMultiplier *= resultDims[j];\n                    num = Math.floor(num / size);\n                }\n                // Accumulate the value at the current index\n                result[resultIndex] = data[i];\n            }\n\n            currentDim += dims[dim];\n        }\n    }\n    return new Tensor(resultType, result, resultDims);\n}\n\n/**\n * Stack an array of tensors along a specified dimension.\n * @param {Tensor[]} tensors The array of tensors to stack.\n * @param {number} dim The dimension to stack along.\n * @returns {Tensor} The stacked tensor.\n */\nexport function stack(tensors, dim = 0) {\n    // TODO do validation of shapes\n    // NOTE: stack expects each tensor to be equal size\n    return cat(tensors.map(t => t.unsqueeze(dim)), dim);\n}\n\n\n/**\n * Calculates the standard deviation and mean over the dimensions specified by dim. dim can be a single dimension or `null` to reduce over all dimensions.\n * @param {Tensor} input the input tenso\n * @param {number|null} dim the dimension to reduce. If None, all dimensions are reduced.\n * @param {number} correction difference between the sample size and sample degrees of freedom. Defaults to Bessel's correction, correction=1.\n * @param {boolean} keepdim whether the output tensor has dim retained or not.\n * @returns {Tensor[]} A tuple of (std, mean) tensors.\n */\nexport function std_mean(input, dim = null, correction = 1, keepdim = false) {\n    const inputData = /** @type {Float32Array} */(input.data);\n    const inputDims = input.dims;\n\n    if (dim === null) {\n        // None to reduce over all dimensions.\n        const sum = inputData.reduce((a, b) => a + b, 0);\n        const mean = sum / inputData.length;\n        const std = Math.sqrt(inputData.reduce((a, b) => a + (b - mean) ** 2, 0) / (inputData.length - correction));\n\n        const meanTensor = new Tensor(input.type, [mean], [/* scalar */]);\n        const stdTensor = new Tensor(input.type, [std], [/* scalar */]);\n\n        return [stdTensor, meanTensor];\n    }\n\n    // Negative indexing\n    dim = safeIndex(dim, inputDims.length);\n\n    const meanTensor = mean(input, dim, keepdim);\n    const meanTensorData = meanTensor.data;\n\n    // Calculate the shape of the resulting array after summation\n    const resultDims = inputDims.slice(); // Copy the original dimensions\n    resultDims[dim] = 1; // Remove the specified axis\n\n    // Create a new array to store the accumulated values\n    // @ts-ignore\n    const result = new inputData.constructor(inputData.length / inputDims[dim]);\n\n    // Iterate over the data array\n    for (let i = 0; i < inputData.length; ++i) {\n\n        // Calculate the index in the resulting array\n        let resultIndex = 0;\n\n        for (let j = inputDims.length - 1, num = i, resultMultiplier = 1; j >= 0; --j) {\n            const size = inputDims[j];\n            if (j !== dim) {\n                const index = num % size;\n                resultIndex += index * resultMultiplier;\n                resultMultiplier *= resultDims[j];\n            }\n            num = Math.floor(num / size);\n        }\n\n        // Accumulate the value at the current index\n        result[resultIndex] += (inputData[i] - meanTensorData[resultIndex]) ** 2;\n    }\n\n    for (let i = 0; i < result.length; ++i) {\n        result[i] = Math.sqrt(result[i] / (inputDims[dim] - correction));\n    }\n\n    if (!keepdim) {\n        resultDims.splice(dim, 1);\n    }\n\n    const stdTensor = new Tensor(input.type, result, resultDims);\n\n    return [stdTensor, meanTensor];\n}\n\n\n/**\n * Returns the mean value of each row of the input tensor in the given dimension dim.\n * @param {Tensor} input the input tensor.\n * @param {number|null} dim the dimension to reduce.\n * @param {boolean} keepdim whether the output tensor has dim retained or not.\n * @returns {Tensor} A new tensor with means taken along the specified dimension.\n */\nexport function mean(input, dim = null, keepdim = false) {\n    const inputData = /** @type {Float32Array} */(input.data);\n\n    if (dim === null) {\n        // None to reduce over all dimensions.\n        // @ts-ignore\n        const val = inputData.reduce((a, b) => a + b, 0);\n        return new Tensor(input.type, [val / inputData.length], [/* scalar */]);\n    }\n    const inputDims = input.dims;\n\n    // Negative indexing\n    dim = safeIndex(dim, inputDims.length);\n\n    // Calculate the shape of the resulting array after summation\n    const resultDims = inputDims.slice(); // Copy the original dimensions\n    resultDims[dim] = 1; // Remove the specified axis\n\n    // Create a new array to store the accumulated values\n    // @ts-ignore\n    const result = new inputData.constructor(inputData.length / inputDims[dim]);\n\n    // Iterate over the data array\n    for (let i = 0; i < inputData.length; ++i) {\n\n        // Calculate the index in the resulting array\n        let resultIndex = 0;\n\n        for (let j = inputDims.length - 1, num = i, resultMultiplier = 1; j >= 0; --j) {\n            const size = inputDims[j];\n            if (j !== dim) {\n                const index = num % size;\n                resultIndex += index * resultMultiplier;\n                resultMultiplier *= resultDims[j];\n            }\n            num = Math.floor(num / size);\n        }\n\n        // Accumulate the value at the current index\n        result[resultIndex] += inputData[i];\n    }\n\n    if (inputDims[dim] !== 1) {\n        for (let i = 0; i < result.length; ++i) {\n            result[i] = result[i] / inputDims[dim];\n        }\n    }\n\n    if (!keepdim) {\n        resultDims.splice(dim, 1);\n    }\n\n    return new Tensor(input.type, result, resultDims);\n}\n\n\nfunction dimsToStride(dims) {\n    const stride = new Array(dims.length);\n    for (let i = dims.length - 1, s2 = 1; i >= 0; --i) {\n        stride[i] = s2;\n        s2 *= dims[i];\n    }\n    return stride;\n}\n\nfunction fullHelper(size, fill_value, dtype, cls) {\n    const numElements = size.reduce((a, b) => a * b, 1);\n    return new Tensor(\n        dtype,\n        new cls(numElements).fill(fill_value),\n        size\n    )\n}\n\n/**\n * Creates a tensor of size size filled with fill_value. The tensor's dtype is inferred from fill_value.\n * @param {number[]} size A sequence of integers defining the shape of the output tensor.\n * @param {number|bigint} fill_value The value to fill the output tensor with.\n * @returns {Tensor} The filled tensor.\n */\nexport function full(size, fill_value) {\n    let dtype;\n    let typedArrayCls;\n    if (typeof fill_value === 'number') {\n        dtype = 'float32';\n        typedArrayCls = Float32Array;\n    } else if (typeof fill_value === 'bigint') {\n        dtype = 'int64';\n        typedArrayCls = BigInt64Array;\n    } else {\n        // TODO: support other dtypes\n        throw new Error(`Unsupported data type: ${typeof fill_value}`);\n    }\n    return fullHelper(size, fill_value, dtype, typedArrayCls);\n}\n\nexport function full_like(tensor, fill_value) {\n    return full(tensor.dims, fill_value);\n}\n\n/**\n * Returns a tensor filled with the scalar value 1, with the shape defined by the variable argument size.\n * @param {number[]} size A sequence of integers defining the shape of the output tensor.\n * @returns {Tensor} The ones tensor.\n */\nexport function ones(size) {\n    return fullHelper(size, 1n, 'int64', BigInt64Array);\n}\n\n/**\n * Returns a tensor filled with the scalar value 1, with the same size as input.\n * @param {Tensor} tensor The size of input will determine size of the output tensor.\n * @returns {Tensor} The ones tensor.\n */\nexport function ones_like(tensor) {\n    return ones(tensor.dims);\n}\n\n/**\n * Returns a tensor filled with the scalar value 0, with the shape defined by the variable argument size.\n * @param {number[]} size A sequence of integers defining the shape of the output tensor.\n * @returns {Tensor} The zeros tensor.\n */\nexport function zeros(size) {\n    return fullHelper(size, 0n, 'int64', BigInt64Array);\n}\n\n/**\n * Returns a tensor filled with the scalar value 0, with the same size as input.\n * @param {Tensor} tensor The size of input will determine size of the output tensor.\n * @returns {Tensor} The zeros tensor.\n */\nexport function zeros_like(tensor) {\n    return zeros(tensor.dims);\n}\n\n/**\n * Quantizes the embeddings tensor to binary or unsigned binary precision.\n * @param {Tensor} tensor The tensor to quantize.\n * @param {'binary'|'ubinary'} precision The precision to use for quantization.\n * @returns {Tensor} The quantized tensor.\n */\nexport function quantize_embeddings(tensor, precision) {\n    if (tensor.dims.length !== 2) {\n        throw new Error(\"The tensor must have 2 dimensions\");\n    }\n    if (tensor.dims.at(-1) % 8 !== 0) {\n        throw new Error(\"The last dimension of the tensor must be a multiple of 8\");\n    }\n    if (!['binary', 'ubinary'].includes(precision)) {\n        throw new Error(\"The precision must be either 'binary' or 'ubinary'\");\n    }\n\n    const signed = precision === 'binary';\n    const dtype = signed ? 'int8' : 'uint8';\n\n    // Create a typed array to store the packed bits\n    const cls = signed ? Int8Array : Uint8Array;\n    const inputData = tensor.data;\n    const outputData = new cls(inputData.length / 8);\n\n    // Iterate over each number in the array\n    for (let i = 0; i < inputData.length; ++i) {\n        // Determine if the number is greater than 0\n        const bit = inputData[i] > 0 ? 1 : 0;\n\n        // Calculate the index in the typed array and the position within the byte\n        const arrayIndex = Math.floor(i / 8);\n        const bitPosition = i % 8;\n\n        // Pack the bit into the typed array\n        outputData[arrayIndex] |= bit << (7 - bitPosition);\n        if (signed && bitPosition === 0) {\n            outputData[arrayIndex] -= 128;\n        }\n    };\n\n    return new Tensor(dtype, outputData, [tensor.dims[0], tensor.dims[1] / 8]);\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (typeof import.meta.url === \"string\") scriptUrl = import.meta.url\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = undefined;"],"names":["leafPrototypes","getProto","TOKEN_TYPES","Object","freeze","Text","NumericLiteral","BooleanLiteral","StringLiteral","Identifier","Equals","OpenParen","CloseParen","OpenStatement","CloseStatement","OpenExpression","CloseExpression","OpenSquareBracket","CloseSquareBracket","OpenCurlyBracket","CloseCurlyBracket","Comma","Dot","Colon","Pipe","CallOperator","AdditiveBinaryOperator","MultiplicativeBinaryOperator","ComparisonBinaryOperator","UnaryOperator","Set","If","For","In","Is","NotIn","Else","EndIf","ElseIf","EndFor","And","Or","Not","Macro","EndMacro","KEYWORDS","set","for","in","is","if","else","endif","elif","endfor","and","or","not","macro","endmacro","true","false","True","False","Token","constructor","value","type","this","isWord","char","test","isInteger","ORDERED_MAPPING_TABLE","ESCAPE_CHARACTERS","Map","tokenize","source","options","tokens","src","template","endsWith","slice","replace","lstrip_blocks","trim_blocks","preprocess","cursorPosition","consumeWhile","predicate","str","length","SyntaxError","escaped","unescaped","get","main","lastTokenType","at","text","push","char2","lastTokenType2","num","token","word","hasOwn","pop","c","Statement","Program","body","super","alternate","loopvar","iterable","defaultBlock","SetStatement","assignee","name","args","Expression","MemberExpression","object","property","computed","CallExpression","callee","Literal","ArrayLiteral","TupleLiteral","ObjectLiteral","BinaryExpression","operator","left","right","FilterExpression","operand","filter","SelectExpression","TestExpression","negate","UnaryExpression","argument","SliceExpression","start","stop","step","KeywordArgumentExpression","key","parse","program","current","expect","error","prev","Error","parseAny","result","parseSetStatement","parseIfStatement","parsePrimaryExpression","parseArgs","parseMacroStatement","loopVariable","parseExpressionSequence","parseExpression","alternative","parseForStatement","parseJinjaStatement","parseJinjaExpression","types","some","i","every","primary","fn","expressions","isTuple","a","parseLogicalOrExpression","b","parseIfExpression","parseLogicalAndExpression","parseLogicalNegationExpression","arg","parseAdditiveExpression","parseComparisonExpression","parseMultiplicativeExpression","parseCallMemberExpression","member","parseMemberExpressionArgumentsList","parseMemberExpression","parseCallExpression","callExpression","parseArgumentsList","slices","isSlice","parseTestExpression","parseFilterExpression","toString","Number","toLowerCase","expression","values","range","array","direction","Math","sign","max","min","titleCase","toUpperCase","RuntimeValue","builtins","__bool__","BooleanValue","NumericValue","StringValue","FunctionValue","trim","ObjectValue","size","defaultValue","NullValue","ArrayValue","Array","from","entries","map","KeywordArgumentsValue","TupleValue","UndefinedValue","Environment","parent","variables","tests","declareVariable","convertToRuntimeValues","has","setVariable","resolve","lookupVariable","Interpreter","global","env","run","evaluate","evaluateBinaryExpression","node","environment","concat","find","x","includes","evaluateArguments","positionalArguments","keywordArguments","kwarg","evaluateFilterExpression","toJSON","reverse","sort","localeCompare","charAt","split","join","abs","filterName","kwargs","indent","attr","testName","testFunction","filtered","item","mapped","width","first","blank","lines","repeat","indented","evaluateTestExpression","evaluateUnaryExpression","evalProgram","evaluateBlock","statements","statement","lastEvaluated","evaluateIdentifier","evaluateCallExpression","expr","evaluateSliceExpression","evaluateMemberExpression","evaluateSet","rhs","variableName","JSON","stringify","evaluateIf","evaluateFor","scope","select","items","scopeUpdateFunctions","loopScope","scopeUpdateFunction","scope2","j","noIteration","loop","evaluateMacro","macroScope","nodeArg","passedArg","identifier","mapping","evaluatedKey","input","isArray","_scope","depth","currentDepth","indentValue","basePadding","childrenPadding","core","v","Template","parsed","render","backends","backendsSortedByPriority","registerBackend","backend","priority","init","createInferenceSessionHandler","TypeError","currentBackend","undefined","indexOf","splice","tryResolveAndInitializeBackend","async","backendName","backendInfo","initialized","aborted","isInitializing","initPromise","e","resolveBackendAndExecutionProviders","eps","executionProviders","backendHints","backendNames","errors","availableBackendNames","resolveResult","err","add","console","warn","filteredEps","Proxy","target","prop","Reflect","logLevelValue","wasm","webgl","webgpu","versions","common","version","logLevel","defineProperty","enumerable","InferenceSession","handler","feeds","arg1","arg2","TRACE_FUNC_BEGIN","fetches","Tensor","isFetchesEmpty","outputNames","RangeError","isFetches","arg1Keys","getOwnPropertyNames","inputNames","results","returnValue","hasOwnProperty","call","data","dims","TRACE_FUNC_END","dispose","static","arg0","arg3","filePathOrUint8Array","Uint8Array","ArrayBuffer","SharedArrayBuffer","buffer","byteOffset","byteLength","isSafeInteger","optionsWithValidatedEPs","startProfiling","endProfiling","tensorToDataURL","tensor","canvas","document","createElement","OffscreenCanvas","height","pixels2DContext","getContext","tensorLayout","inputformat","format","norm","normMean","normBias","mean","bias","stride","rTensorPointer","gTensorPointer","bTensorPointer","aTensorPointer","R","G","B","A","fillStyle","fillRect","toDataURL","tensorToImageData","image","channels","rImagePointer","gImagePointer","bImagePointer","aImagePointer","createImageData","bufferToTensor","outputformat","tensorFormat","float32Data","Float32Array","tensorFromImage","isHTMLImageEle","HTMLImageElement","isImageDataEle","ImageData","isImageBitmap","ImageBitmap","isString","bufferToTensorOptions","createCanvas","createCanvasContext","HTMLCanvasElement","resizedHeight","resizedWidth","drawImage","getImageData","Promise","reject","context","newImage","Image","crossOrigin","onload","img","tempCanvas","putImageData","tensorFromTexture","texture","download","location","tensorFromGpuBuffer","gpuBuffer","dataType","tensorFromPinnedBuffer","NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP","Int8Array","Uint16Array","Int16Array","Int32Array","Float64Array","Uint32Array","NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP","isTypedArrayChecked","checkTypedArray","isBigInt64ArrayAvailable","BigInt64Array","isBigUint64ArrayAvailable","BigUint64Array","isFloat16ArrayAvailable","Float16Array","dataLocation","expectedTypedArrayConstructor","cpuData","gpuTextureData","downloader","disposer","gpuBufferData","maybeDims","typedArrayConstructor","BigInt","firstElementType","mappedType","calculateSize","toImageData","ensureValid","releaseData","isDownloading","reshape","tensorReshape","dim","TRACE","deviceType","label","timeStamp","TRACE_FUNC","msg","extraMsg","stack","hasTraceFunc","TrainingSession","hasOptimizerModel","hasEvalModel","trainingInputNames","trainingOutputNames","evalInputNames","evalOutputNames","trainingOptions","sessionOptions","evalModel","optimizerModel","createTrainingSessionHandler","checkpointState","trainModel","typeNarrowingForRunStep","convertHandlerReturnTypeToMapOfTensors","lazyResetGrad","runTrainStep","runOptimizerStep","runEvalStep","trainableOnly","getParametersSize","paramsSize","loadParametersBuffer","getContiguousParameters","wr","$t","_t","up","vr","Xi","Qi","Ne","be","ea","ta","Vn","na","oa","ia","aa","xt","qt","ua","da","ca","pa","Be","De","Sr","fa","We","Me","Ir","dp","Cr","cp","Rn","op","getOwnPropertyDescriptor","ip","ap","prototype","Mn","require","apply","arguments","t","r","U","Ft","br","n","o","sp","$r","d","p","l","Yi","Zi","Un","Ji","ra","m","u","h","w","g","_","$","S","I","T","sa","_r","la","ma","xr","Nn","trace","ha","ga","ya","ba","wa","va","$a","_a","Wn","Ke","Tr","Ca","default","pp","Sa","Ia","Ta","Hn","St","jt","globalThis","self","onmessage","Ar","then","Er","postMessage","epName","kr","Kt","out","model","Pr","sessionId","inputIndices","inputs","outputIndices","Dr","fill","Br","zr","Worker","Ut","Ea","mp","Gn","Aa","fp","hp","gp","Pa","Oa","yp","Da","Ln","Fn","Rr","za","bp","wp","Ie","Te","Yt","_e","Ba","vp","$p","_p","xp","Ma","qn","ht","It","Ur","Xt","Vr","jn","Zt","Sp","Ip","Va","Na","Wa","Cp","ve","Ha","La","Yn","Xn","Tp","Ap","Fa","Qn","Zn","ja","Jn","te","eo","tt","k","Ct","Wr","Hr","Gr","Tt","ro","ge","Oe","V","$e","gt","At","Xe","no","E","M","Lr","to","Ya","Nt","Ep","Xa","kp","Pp","Ue","Za","Qa","Op","Dp","zp","Bp","Rp","Mp","Up","Vp","Np","Wp","rt","Ja","es","ts","rs","ns","os","as","ss","us","nt","Hp","qr","oo","ot","Gp","Lp","Fp","qp","jp","Kp","Yp","Xp","Zp","Qp","it","ls","cs","ps","ms","fs","hs","gs","ys","bs","ws","vs","$s","_s","io","Jp","em","tm","rm","Wt","nm","Ss","om","im","am","sm","um","Ts","dm","fe","Es","ks","Ps","Os","Ds","zs","Bs","Rs","Ms","lm","Us","Vs","Ns","Ws","Qt","Hs","Kr","Gs","Ls","Fs","qs","js","Ks","Ys","Xs","Zs","Qs","Js","eu","tu","ru","nu","ou","iu","au","ao","so","su","uu","du","cm","pm","lu","mm","fm","pu","hm","gm","fu","hu","gu","yu","bu","wu","vu","$u","_u","xu","bm","wm","vm","$m","Iu","Cu","He","Ge","Le","Xr","Ee","Zr","Qr","_m","xm","er","Au","Sm","tr","Im","Jr","Cm","Eu","Tm","Pu","en","Am","Ou","Em","Du","zu","lo","Ru","po","km","Uu","tn","fo","Pm","ho","go","Om","Dm","zm","yo","Bm","Vu","Rm","bo","Mm","Um","Vm","Hu","Gu","Nm","Wm","Hm","Gm","Lu","Lm","qu","ju","Fm","qm","jm","Yu","Xu","wo","rn","Qu","Ym","vo","$o","Ju","Xm","ed","td","Zm","nd","Qm","Jm","od","ef","ad","tf","rf","ud","dd","nf","of","cd","pd","af","sf","fd","hd","Ve","lf","bd","yd","cf","nr","wd","vd","pf","mf","xo","$d","ff","_d","Sd","hf","xd","Id","gf","yf","bf","Td","wf","vf","Ed","$f","_f","Pd","Od","xf","Sf","Cf","Tf","Af","Ef","kf","zd","nn","Rd","Md","Ud","Vd","Pf","Of","Nd","Wd","Hd","Gd","Ld","Fd","qd","jd","Kd","Yd","Xd","Zd","zf","Bf","Jd","Rf","Mf","Uf","Vf","Nf","Wf","Hf","Gf","Lf","Ff","qf","tl","jf","Kf","Yf","Xf","Zf","rl","nl","Qf","Jf","il","eh","th","sl","rh","on","nh","dl","oh","ih","ll","cl","ah","sh","ml","fl","uh","dh","lh","ch","ph","gl","yl","mh","fh","wl","$l","an","hh","gh","Io","sn","ka","url","le","re","we","se","Z","ne","J","ke","Re","assign","s","window","importScripts","mountExternalData","Fb","unmountExternalData","WebAssembly","Memory","initial","maximum","shared","f","y","C","O","Je","N","L","An","Eb","bc","Mb","flush","all","_OrtCreateSession","_OrtRun","_OrtRunWithBinding","_OrtBindInput","jsepInit","Tb","Xb","Nb","Wb","jb","Yb","$b","Ub","Vb","Zb","jsepRegisterBuffer","registerBuffer","jsepGetBuffer","getBuffer","jsepCreateDownloader","createDownloader","jsepOnReleaseSession","onReleaseSession","jsepOnRunStart","onRunStart","D","href","currentScript","startsWith","substr","lastIndexOf","XMLHttpRequest","open","responseType","send","response","status","onerror","z","H","log","bind","W","X","Y","cmd","startWorker","handlers","proxy","Lb","kc","wasmMemory","pe","wasmModule","On","pthread_ptr","Hl","No","ue","Mi","Gl","start_routine","Mt","gr","sr","Ui","alert","mc","instantiateWasm","Instance","Bo","onunhandledrejection","reason","wasmBinary","K","de","F","ce","Se","HEAP8","HEAP16","HEAPU8","HEAPU16","HEAP32","HEAPU32","HEAPF32","HEAPF64","HEAP64","HEAPU64","Lt","Pe","ze","Fe","Ot","yt","ko","clearInterval","Dt","RuntimeError","mn","Po","Oo","Do","zo","fetch","credentials","ok","arrayBuffer","catch","instantiate","Wl","Nl","Fl","Lo","jo","Ko","Xo","Zo","qa","Qo","Jo","ei","ti","ri","ni","oi","ii","ai","ql","Kl","P","Yl","Zl","Jl","ec","tc","rc","dc","Q","lc","cc","pc","fc","hc","gc","yc","vc","$c","xc","xn","Sc","Tc","Ac","Ec","Pc","Oc","Dc","zc","Bc","Rc","Mc","Uc","Vc","Nc","vi","$i","Wc","Hc","Gc","Lc","Fc","qc","jc","Kc","xi","Yc","Xc","Zc","Qc","xa","Jc","Ci","Ti","bn","Ai","Ei","ki","Pi","yn","zi","q","rp","Ae","substring","subarray","wasmOffsetConverter","alpha","beta","keepDims","noopWithEmptyAxes","axes","perm","blocksize","mode","me","he","ee","autoPad","dilations","group","kernelShape","pads","strides","wIsConst","outputPadding","outputShape","activation","ye","auto_pad","ceil_mode","count_include_pad","storage_order","kernel_shape","transA","transB","selectLastIndex","axis","numOutputs","splitSizes","antialias","coordinateTransformMode","cubicCoeffA","excludeOutside","extrapolationValue","keepAspectRatioPolicy","nearestMode","starts","ends","epsilon","equation","momentum","spatial","trainingMode","exclusive","numHeads","isUnidirectional","maskFilterValue","scale","doRotary","qkvHiddenSizes","pastPresentShareBuffer","w_is_const","activation_params","kvNumHeads","simplified","accuracyLevel","bits","blockSize","interleaved","rotaryEmbeddingDim","hi","hn","message","gn","terminate","Ro","ct","Ho","Wo","wt","Ze","Ab","Pb","ic","bt","xe","Bn","zn","Vi","yr","Mo","Uo","Vo","Dn","forEach","targetThread","transferList","thread","loaded","threadId","filename","lineno","URL","workerData","ar","shift","Wi","Hi","Ll","Ib","Go","Fo","TextDecoder","qo","decode","String","fromCharCode","wn","charCodeAt","Yo","zt","si","pt","Qe","vn","$n","jl","st","Rb","ui","fromWireType","toWireType","argPackAdvance","mt","readValueFromPointer","Db","_n","ut","qe","je","Sn","Xl","Ql","et","Uint8ClampedArray","hr","di","nc","oc","ac","sc","uc","Sb","li","Atomics","store","Ni","setTimeout","Cn","np","Tn","Ri","ci","ur","ft","pi","dr","mi","fi","wc","Fi","Browser","Jb","Qb","resume","pause","Gi","qi","lr","_c","cr","gi","Function","Ic","Cc","yi","NaN","Date","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","getTime","UTC","Bt","bi","wi","getSeconds","getMinutes","getHours","getDate","getMonth","getFullYear","getDay","getTimezoneOffset","setTime","getYear","isNaN","toLocaleTimeString","hour12","timeZoneName","En","_i","now","performance","timeOrigin","navigator","hardwareConcurrency","grow","pr","Rt","Si","Ob","kn","Pn","Ii","USER","LOGNAME","PATH","PWD","HOME","LANG","languages","ep","Oi","Di","tp","Ki","vt","Bb","Cb","setDate","setMonth","setFullYear","Gb","Kb","Hb","ub","RegExp","floor","numThreads","unshift","Bi","mr","BindingError","InternalError","count_emval_handles","exports","Li","Fibers","fb","gb","emscripten_main_runtime_thread_id","sb","tb","ib","locateFile","instance","module","instantiateStreaming","_OrtInit","_OrtGetLastError","_OrtCreateSessionOptions","Ga","_OrtAppendExecutionProvider","_OrtAddFreeDimensionOverride","_OrtAddSessionConfigEntry","_OrtReleaseSessionOptions","Ka","_OrtReleaseSession","_OrtGetInputOutputCount","_OrtGetInputName","_OrtGetOutputName","_OrtFree","_OrtCreateTensor","Ra","_OrtGetTensorData","_OrtReleaseTensor","_OrtCreateRunOptions","Ua","_OrtAddRunConfigEntry","_OrtReleaseRunOptions","_OrtCreateBinding","_OrtBindOutput","_OrtClearBoundOutputs","_OrtReleaseBinding","ab","bb","_OrtEndProfiling","cb","_JsepOutput","db","_JsepGetNodeName","eb","fr","_malloc","_free","hb","kb","lb","mb","nb","ob","pb","qb","rb","dynCall_ii","vb","wb","xb","yb","zb","ji","calledRun","___start_em_js","___stop_em_js","stackSave","stackRestore","stackAlloc","UTF8ToString","stringToUTF8","lengthBytesUTF8","origin","blob","createObjectURL","MessageChannel","port1","validate","initTimeout","crossOriginIsolated","wasmPaths","mjs","revokeObjectURL","race","Mr","logSeverityLevel","logVerbosityLevel","tag","extra","WeakSet","session","use_ort_model_bytes_directly","enableMemPattern","preferredLayout","graphOptimizationLevel","executionMode","logId","optimizedModelFilePath","enableCpuMemArena","enableProfiling","enableGraphCapture","freeDimensionOverrides","Kn","headers","parseInt","getReader","ceil","done","read","Blob","dt","toISOString","Nr","device","createBuffer","usage","GPUBufferUsage","COPY_DST","MAP_READ","getCommandEncoder","endComputePass","copyBufferToBuffer","mapAsync","GPUMapMode","READ","getMappedRange","destroy","storageCache","freeBuffers","freeUniformBuffers","buffersForUploadingPending","buffersPending","externalBuffers","capturedPendingBuffers","upload","originalSize","mappedAtCreation","MAP_WRITE","COPY_SRC","unmap","gpuData","memcpy","registerExternalBuffer","capturedCommandList","currentSessionId","delete","id","unregisterExternalBuffer","create","STORAGE","UNIFORM","release","refreshPendingBuffers","sessionStatus","Ce","cacheKey","ae","calcMatMulShape","getSizeFromDimensionRange","normalizeAxis","adjustPadAndReturnShape","computeShapeHelper","isValidBroadcast","ie","computeStrides","keys","indices","storage","offsetToIndices","indicesToOffset","broadcastedIndicesToOffset","setByIndices","getByIndices","impl","indicesGet","rank","indicesSet","setByOffset","getByOffset","shape","normalizedDispatchGroup","limits","internalVariables","uniforms","variableIndex","guardAgainstOutOfBoundsWorkgroupSizes","mainStart","maxComputeWorkgroupSizeX","maxComputeWorkgroupSizeY","maxComputeWorkgroupSizeZ","maxComputeInvocationsPerWorkgroup","appendVariableUniforms","declareVariables","registerInternalVariable","registerInternalVariables","registerUniform","registerUniforms","uniformDeclaration","additionalImplementations","variablesInfo","Et","sortBasedOnPerm","shaderCache","hint","inputDependencies","getRunData","outputs","dispatchGroup","programUniforms","getShaderSource","compute","ds","Fr","sum","prod","sumSquare","logSumExp","l1","l2","logSum","normalizeAxes","getBigInt64Array","xs","jr","batchSize","sequenceLength","pastSequenceLength","kvSequenceLength","totalSequenceLength","maxSequenceLength","inputHiddenSize","hiddenSize","vHiddenSize","headSize","vHeadSize","maskType","broadcastResPosBias","passPastInKv","qkvFormat","outputCount","sqrt","gpuDataType","nReps","Cs","validateInputContent","As","Yr","getFloat32Array","mu","Su","scalar","vector","areEqual","calcShape","Tu","reduce","lt","clipMax","clipMin","Jt","uo","rr","ku","Bu","trunc","top","bottom","front","back","padInfo","outDepth","outHeight","outWidth","dataFormat","inDepth","inHeight","inWidth","inChannels","outChannels","strideDepth","strideHeight","strideWidth","filterDepth","filterHeight","filterWidth","effectiveFilterDepth","effectiveFilterHeight","effectiveFilterWidth","dilationDepth","dilationHeight","dilationWidth","inShape","outShape","filterShape","Mu","co","mo","adjustPadsBasedOnAutoPad","adapterInfo","isArchitecture","kernelCustomData","wT","Nu","Wu","Fu","Ku","getInt32Array","Zu","rd","symbolToIndices","inputIndex","addSymbol","hasEllipsis","symbolToInfo","lhs","outputDims","match","processTerm","count","ellipsisDims","dimValue","sd","ld","md","gd","getShapeOfGemmResult","_o","So","Cd","isPastkvBSNH","Ad","sizeToDimension","sizeFromDimension","kd","Dd","convertShape","getMaxComputeWorkgroupSizes","getMaxComputeWorkgroupStoragesize","Bd","padShape","Qd","adjustPoolAttributes","computePoolOutputShape","ceilMode","countIncludePad","storageOrder","el","ol","round","MAX_VALUE","MIN_VALUE","customDataBuffer","al","ul","pl","hl","bl","vl","_l","xl","repo","attributesBound","getArtifact","setArtifact","programInfo","getComputePassEncoder","writeTimestamp","pendingDispatchNumber","binding","resource","createBindGroup","layout","computePipeline","getBindGroupLayout","kernelId","currentKernelId","bindGroup","setPipeline","setBindGroup","dispatchWorkgroups","maxDispatchNumber","queryType","build","features","createShaderModule","code","createComputePipeline","entryPoint","uniformVariablesInfo","normalizeDispatchGroupSize","maxComputeWorkgroupsPerDimension","cbrt","Sl","architecture","vendor","isVendor","commandEncoder","computePassEncoder","pendingKernels","pendingQueries","capturedPendingKernels","sessionExternalDataMapping","currentKernelCustomData","requiredLimits","maxComputeWorkgroupStorageSize","maxStorageBufferBindingSize","maxBufferSize","requiredFeatures","requestDevice","info","requestAdapterInfo","gpuDataManager","programManager","kernels","kernelPersistentData","debug","onuncapturederror","GPUValidationError","writable","configurable","setQueryType","querySet","createCommandEncoder","timestampWrites","beginningOfPassWriteIndex","endOfPassWriteIndex","beginComputePass","end","resolveQuerySet","queryResolveBuffer","queue","submit","finish","kernelType","kernelName","programName","inputTensorViews","outputTensorViews","queryTimeBase","profiling","ondata","inputsMetadata","outputsMetadata","startTime","endTime","temporaryData","writeBuffer","offset","alloc","free","createKernel","kernelEntry","attributes","releaseKernel","computeKernel","pushErrorScope","popErrorScope","unregisterBuffers","createQuerySet","QUERY_RESOLVE","captureBegin","captureEnd","replay","Il","yh","Co","bh","kt","wh","Tl","Pt","Ye","ir","dn","ln","un","To","Ao","Ht","Gt","$h","Al","El","kl","Pl","Ol","Dl","zl","Bl","_h","cn","xh","pn","Cl","customDataOffset","customDataSize","opKernelContext","output","initialize","gpu","adapter","powerPreference","forceFallbackAdapter","requestAdapter","externalData","path","currentContext","gpuDevice","createContext","preferredOutputLocation","handle","outputPreferredLocations","outputPreferredLocationsEncoded","Eo","Rl","fromGpuBuffer","fetchModelAndCopyToWasmMemory","Ml","simd","cpus","loadModel","Ul","wasmBackend","Sh","Vl","K_","supportedExecutionProviders","defaultExecutionProviders","ONNX","apis","deviceToExecutionProviders","wasmInitPromise","createInferenceSession","session_options","sessionPromise","isONNXTensor","ONNX_ENV","userAgent","isONNXProxy","getNormalizedConfig","config","init_normalized_config","model_type","text_config","phi_config","decoder","decoderConfig","add_encoder_pkv","pick","num_decoder_layers","num_decoder_heads","decoder_hidden_size","num_encoder_layers","num_encoder_heads","encoder_hidden_size","num_layers","num_heads","hidden_size","normalized_config","getKeyValueShapes","prefix","decoderFeeds","is_encoder_decoder","encoder_dim_kv","decoder_dim_kv","encoder_dims","decoder_dims","dim_kv","num_attention_heads","multi_query","keyDims","valueDims","PretrainedConfig","max_position_embeddings","configJSON","pretrained_model_name_or_path","progress_callback","cache_dir","local_files_only","revision","getModelJSON","loadConfig","AutoConfig","from_pretrained","IS_BROWSER_ENV","IS_WEBWORKER_ENV","IS_WEB_CACHE_AVAILABLE","IS_WEBGPU_AVAILABLE","IS_PROCESS_AVAILABLE","process","IS_NODE_ENV","IS_FS_AVAILABLE","isEmpty","IS_PATH_AVAILABLE","RUNNING_LOCALLY","__dirname","DEFAULT_CACHE_DIR","DEFAULT_LOCAL_MODEL_PATH","onnx","tfjs","allowRemoteModels","remoteHost","remotePathTemplate","allowLocalModels","localModelPath","useFS","useBrowserCache","useFSCache","cacheDir","useCustomCache","customCache","obj","GenerationConfig","max_length","max_new_tokens","min_length","min_new_tokens","early_stopping","max_time","do_sample","num_beams","num_beam_groups","penalty_alpha","use_cache","temperature","top_k","top_p","typical_p","epsilon_cutoff","eta_cutoff","diversity_penalty","repetition_penalty","encoder_repetition_penalty","length_penalty","no_repeat_ngram_size","bad_words_ids","force_words_ids","renormalize_logits","constraints","forced_bos_token_id","forced_eos_token_id","remove_invalid_values","exponential_decay_length_penalty","suppress_tokens","begin_suppress_tokens","forced_decoder_ids","guidance_scale","num_return_sequences","output_attentions","output_hidden_states","output_scores","return_dict_in_generate","pad_token_id","bos_token_id","eos_token_id","encoder_no_repeat_ngram_size","decoder_start_token_id","generation_kwargs","LogitsProcessor","Callable","_call","input_ids","logits","LogitsWarper","LogitsProcessorList","processors","extend","toReturn","processor","Symbol","iterator","ForcedBOSTokenLogitsProcessor","batch_logits","Infinity","ForcedEOSTokenLogitsProcessor","eos_token","SuppressTokensAtBeginLogitsProcessor","begin_index","token_id","WhisperTimeStampLogitsProcessor","generate_config","init_tokens","no_timestamps_token_id","timestamp_begin","max_initial_timestamp_index","logitsData","seq","last_was_timestamp","penultimate_was_timestamp","last_allowed","logprobs","log_softmax","exp","NoRepeatNGramLogitsProcessor","getNgrams","prevInputIds","curLen","ngrams","ngram","generatedNgram","prevNgram","prevNgramKey","prevNgramValue","getGeneratedNgrams","bannedNgrams","ngramIdx","calcBannedNgramTokens","bannedTokens","generatedNgrams","RepetitionPenaltyLogitsProcessor","penalty","input_id","MinLengthLogitsProcessor","MinNewTokensLengthLogitsProcessor","prompt_length_to_skip","NoBadWordsLogitsProcessor","bad_word_ids","mark","ClassifierFreeGuidanceLogitsProcessor","unguided_bsz","cond_logits","uncond_logits","TemperatureLogitsWarper","errorMessage","TopPLogitsWarper","filter_value","min_tokens_to_keep","TopKLogitsWarper","LogitsSampler","generation_config","sample","getLogits","index","vocabSize","logs","startIndex","randomSelect","probabilities","sumProbabilities","random","MultinomialSampler","BeamSearchSampler","GreedySampler","argmax","topk","softmax","sampledIndex","StoppingCriteria","scores","StoppingCriteriaList","criteria","is_done","criterion","criterion_done","MaxLengthCriteria","ids","EosTokenCriteria","last","eos_id","InterruptableStoppingCriteria","interrupted","interrupt","reset","BaseStreamer","put","stdout_write","stdout","write","TextStreamer","tokenizer","skip_prompt","callback_function","token_callback_function","decode_kwargs","token_cache","print_len","next_tokens_are_prompt","mergeArrays","printable_text","is_chinese_char","on_finalized_text","stream_end","WhisperTextStreamer","on_chunk_start","on_chunk_end","on_finalize","time_precision","skip_special_tokens","waiting_for_timestamp","time","MODEL_TYPES","MODEL_TYPE_MAPPING","MODEL_NAME_TO_CLASS_MAPPING","MODEL_CLASS_TO_NAME_MAPPING","constructSessions","names","fromEntries","fileName","dtype","DEFAULT_DEVICE_DTYPE_MAPPING","DEFAULT_DTYPE_SUFFIX_MAPPING","DATA_TYPES","isWebGpuFp16Supported","suffix","modelFileName","subfolder","bufferPromise","getModelFile","externalDataPromises","use_external_data_format","fullPath","ext","ext_buffer","shapes","getSession","sessionRun","checkedInputs","missingInputs","inputName","clone","numInputsProvided","numInputsNeeded","ignored","validateInputs","ortFeed","ort_tensor","replaceTensors","toI64Tensor","flat","boolTensor","seq2seqForward","model_inputs","encoder_outputs","decoder_input_ids","other_decoder_inputs","encoder_inputs","sessions","encoderForward","last_hidden_state","encoder_hidden_states","encoder_attention_mask","attention_mask","decoderForward","encoderFeeds","inputs_embeds","encode_text","token_type_ids","past_key_values","new_model_inputs","use_cache_branch","position_ids","bz","seq_len","createPositionIds","addPastKeyValues","fixed","imageTextToTextForward","pixel_values","logits_processor","image_features","encode_image","_merge_input_ids_with_image_features","target_length","past_length","cat","ones","decoder_prepare_inputs_for_generation","image_token_index","num_image_tokens","num_new_tokens","encoder_decoder_prepare_inputs_for_generation","image_text_to_text_prepare_inputs_for_generation","PreTrainedModel","main_input_name","forward_params","modelName","modelType","can_generate","_forward","_prepare_inputs_for_generation","custom_config","promises","model_file_name","decoder_model_merged","prompt_encoder_mask_decoder","embed_tokens","vision_encoder","encodec_decode","forward","_get_logits_warper","warpers","_get_logits_processor","input_ids_seq_length","_prepare_generation_config","cls","gen_config","_get_stopping_criteria","stopping_criteria","_validate_model_class","generate_compatible_mappings","MODEL_FOR_CAUSAL_LM_MAPPING_NAMES","MODEL_FOR_VISION_2_SEQ_MAPPING_NAMES","MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING_NAMES","MODEL_FOR_SPEECH_SEQ_2_SEQ_MAPPING_NAMES","generate_compatible_classes","model_mapping","supported_models","prepare_inputs_for_generation","_update_model_kwargs_for_generation","generated_input_ids","getPastKeyValues","_prepare_model_inputs","model_kwargs","input_name","inputs_tensor","model_input_name","prepared_inputs","_prepare_inputs_embeds","full_like","zeros_like","decoder_input_ids_batch_size","_prepare_decoder_input_ids_for_generation","batch_size","num_codebooks","ones_like","streamer","_prepare_encoder_decoder_kwargs_for_generation","input_ids_length","prepared_logits_processor","prepared_stopping_criteria","numInputs","sampler","all_input_ids","tolist","attentions","token_attentions","getAttentions","next_tokens_scores","batch_idx","sampledTokens","newTokenId","logProb","bigint","sequences","decoderResults","pastKeyValues","pkvs","newName","model_output","attnName","kv_cache_dtype","empty","ModelOutput","BaseModelOutput","hidden_states","BertPreTrainedModel","BertModel","BertForMaskedLM","MaskedLMOutput","BertForSequenceClassification","SequenceClassifierOutput","BertForTokenClassification","TokenClassifierOutput","BertForQuestionAnswering","QuestionAnsweringModelOutput","NomicBertPreTrainedModel","NomicBertModel","RoFormerPreTrainedModel","RoFormerModel","RoFormerForMaskedLM","RoFormerForSequenceClassification","RoFormerForTokenClassification","RoFormerForQuestionAnswering","ConvBertPreTrainedModel","ConvBertModel","ConvBertForMaskedLM","ConvBertForSequenceClassification","ConvBertForTokenClassification","ConvBertForQuestionAnswering","ElectraPreTrainedModel","ElectraModel","ElectraForMaskedLM","ElectraForSequenceClassification","ElectraForTokenClassification","ElectraForQuestionAnswering","CamembertPreTrainedModel","CamembertModel","CamembertForMaskedLM","CamembertForSequenceClassification","CamembertForTokenClassification","CamembertForQuestionAnswering","DebertaPreTrainedModel","DebertaModel","DebertaForMaskedLM","DebertaForSequenceClassification","DebertaForTokenClassification","DebertaForQuestionAnswering","DebertaV2PreTrainedModel","DebertaV2Model","DebertaV2ForMaskedLM","DebertaV2ForSequenceClassification","DebertaV2ForTokenClassification","DebertaV2ForQuestionAnswering","DistilBertPreTrainedModel","DistilBertModel","DistilBertForSequenceClassification","DistilBertForTokenClassification","DistilBertForQuestionAnswering","DistilBertForMaskedLM","EsmPreTrainedModel","EsmModel","EsmForMaskedLM","EsmForSequenceClassification","EsmForTokenClassification","MobileBertPreTrainedModel","MobileBertModel","MobileBertForMaskedLM","MobileBertForSequenceClassification","MobileBertForQuestionAnswering","MPNetPreTrainedModel","MPNetModel","MPNetForMaskedLM","MPNetForSequenceClassification","MPNetForTokenClassification","MPNetForQuestionAnswering","SqueezeBertPreTrainedModel","SqueezeBertModel","SqueezeBertForMaskedLM","SqueezeBertForSequenceClassification","SqueezeBertForQuestionAnswering","AlbertPreTrainedModel","AlbertModel","AlbertForSequenceClassification","AlbertForQuestionAnswering","AlbertForMaskedLM","T5PreTrainedModel","T5Model","T5ForConditionalGeneration","LongT5PreTrainedModel","LongT5Model","LongT5ForConditionalGeneration","MT5PreTrainedModel","MT5Model","MT5ForConditionalGeneration","BartPretrainedModel","BartModel","BartForConditionalGeneration","BartForSequenceClassification","MBartPreTrainedModel","MBartModel","MBartForConditionalGeneration","MBartForSequenceClassification","MBartForCausalLM","BlenderbotPreTrainedModel","BlenderbotModel","BlenderbotForConditionalGeneration","BlenderbotSmallPreTrainedModel","BlenderbotSmallModel","BlenderbotSmallForConditionalGeneration","RobertaPreTrainedModel","RobertaModel","RobertaForMaskedLM","RobertaForSequenceClassification","RobertaForTokenClassification","RobertaForQuestionAnswering","XLMPreTrainedModel","XLMModel","XLMWithLMHeadModel","XLMForSequenceClassification","XLMForTokenClassification","XLMForQuestionAnswering","XLMRobertaPreTrainedModel","XLMRobertaModel","XLMRobertaForMaskedLM","XLMRobertaForSequenceClassification","XLMRobertaForTokenClassification","XLMRobertaForQuestionAnswering","ASTPreTrainedModel","ASTModel","ASTForAudioClassification","WhisperPreTrainedModel","requires_attention_mask","WhisperModel","WhisperForConditionalGeneration","WhisperGenerationConfig","_retrieve_init_tokens","language","task","is_multilingual","language_token","whisper_language_to_code","lang_to_id","task_to_id","return_timestamps","return_token_timestamps","alignment_heads","generate","_extract_token_timestamps","num_frames","generate_outputs","cross_attentions","median_filter_width","batch","decoder_layers","weights","transpose","std","calculatedMean","std_mean","smoothedWeights","aTensor","bTensor","stdTensorData","meanTensorData","cTensorData","medianFilter","batchedMatrices","timestampsShape","timestamps","matrix","neg","squeeze_","text_indices","time_indices","dynamic_time_warping","diffs","jumps","jump_times","VisionEncoderDecoderModel","LlavaPreTrainedModel","LlavaForConditionalGeneration","indexOfImage","findIndex","noImages","allImages","stacked","stacked_attention_mask","Moondream1ForConditionalGeneration","Florence2PreTrainedModel","Florence2ForConditionalGeneration","text_features","decoder_attention_mask","decoder_inputs_embeds","CLIPPreTrainedModel","CLIPModel","CLIPTextModelWithProjection","CLIPVisionModelWithProjection","SiglipPreTrainedModel","SiglipModel","SiglipTextModel","SiglipVisionModel","ChineseCLIPPreTrainedModel","ChineseCLIPModel","CLIPSegPreTrainedModel","CLIPSegModel","CLIPSegForImageSegmentation","GPT2PreTrainedModel","GPT2Model","GPT2LMHeadModel","GPTNeoPreTrainedModel","GPTNeoModel","GPTNeoForCausalLM","GPTNeoXPreTrainedModel","GPTNeoXModel","GPTNeoXForCausalLM","GPTJPreTrainedModel","GPTJModel","GPTJForCausalLM","GPTBigCodePreTrainedModel","GPTBigCodeModel","GPTBigCodeForCausalLM","CodeGenPreTrainedModel","CodeGenModel","CodeGenForCausalLM","LlamaPreTrainedModel","LlamaModel","LlamaForCausalLM","CoherePreTrainedModel","CohereModel","CohereForCausalLM","GemmaPreTrainedModel","GemmaModel","GemmaForCausalLM","Gemma2PreTrainedModel","Gemma2Model","Gemma2ForCausalLM","OpenELMPreTrainedModel","OpenELMModel","OpenELMForCausalLM","Qwen2PreTrainedModel","Qwen2Model","Qwen2ForCausalLM","PhiPreTrainedModel","PhiModel","PhiForCausalLM","Phi3PreTrainedModel","Phi3Model","Phi3ForCausalLM","BloomPreTrainedModel","BloomModel","BloomForCausalLM","MptPreTrainedModel","MptModel","MptForCausalLM","OPTPreTrainedModel","OPTModel","OPTForCausalLM","ViTPreTrainedModel","ViTModel","ViTForImageClassification","FastViTPreTrainedModel","FastViTModel","FastViTForImageClassification","VitMattePreTrainedModel","VitMatteForImageMatting","ImageMattingOutput","MobileViTPreTrainedModel","MobileViTModel","MobileViTForImageClassification","MobileViTV2PreTrainedModel","MobileViTV2Model","MobileViTV2ForImageClassification","OwlViTPreTrainedModel","OwlViTModel","OwlViTForObjectDetection","Owlv2PreTrainedModel","Owlv2Model","Owlv2ForObjectDetection","BeitPreTrainedModel","BeitModel","BeitForImageClassification","DetrPreTrainedModel","DetrModel","DetrForObjectDetection","DetrObjectDetectionOutput","DetrForSegmentation","DetrSegmentationOutput","pred_boxes","pred_masks","RTDetrPreTrainedModel","RTDetrModel","RTDetrForObjectDetection","RTDetrObjectDetectionOutput","TableTransformerPreTrainedModel","TableTransformerModel","TableTransformerForObjectDetection","TableTransformerObjectDetectionOutput","DeiTPreTrainedModel","DeiTModel","DeiTForImageClassification","ResNetPreTrainedModel","ResNetModel","ResNetForImageClassification","SwinPreTrainedModel","SwinModel","SwinForImageClassification","Swin2SRPreTrainedModel","Swin2SRModel","Swin2SRForImageSuperResolution","DPTPreTrainedModel","DPTModel","DPTForDepthEstimation","DepthAnythingPreTrainedModel","DepthAnythingForDepthEstimation","GLPNPreTrainedModel","GLPNModel","GLPNForDepthEstimation","DonutSwinPreTrainedModel","DonutSwinModel","ConvNextPreTrainedModel","ConvNextModel","ConvNextForImageClassification","ConvNextV2PreTrainedModel","ConvNextV2Model","ConvNextV2ForImageClassification","Dinov2PreTrainedModel","Dinov2Model","Dinov2ForImageClassification","YolosPreTrainedModel","YolosModel","YolosForObjectDetection","YolosObjectDetectionOutput","SamPreTrainedModel","SamModel","image_embeddings","image_positional_embeddings","get_image_embeddings","input_labels","input_points","numElements","decoder_inputs","input_boxes","SamImageSegmentationOutput","iou_scores","MarianPreTrainedModel","MarianModel","MarianMTModel","M2M100PreTrainedModel","M2M100Model","M2M100ForConditionalGeneration","Wav2Vec2PreTrainedModel","Wav2Vec2Model","Wav2Vec2ForCTC","CausalLMOutput","Wav2Vec2ForSequenceClassification","Wav2Vec2ForAudioFrameClassification","PyAnnotePreTrainedModel","PyAnnoteModel","PyAnnoteForAudioFrameClassification","WeSpeakerResNetPreTrainedModel","WeSpeakerResNetModel","UniSpeechPreTrainedModel","UniSpeechModel","UniSpeechForCTC","UniSpeechForSequenceClassification","UniSpeechSatPreTrainedModel","UniSpeechSatModel","UniSpeechSatForCTC","UniSpeechSatForSequenceClassification","UniSpeechSatForAudioFrameClassification","Wav2Vec2BertPreTrainedModel","Wav2Vec2BertModel","Wav2Vec2BertForCTC","Wav2Vec2BertForSequenceClassification","HubertPreTrainedModel","HubertModel","HubertForCTC","HubertForSequenceClassification","WavLMPreTrainedModel","WavLMModel","WavLMForCTC","WavLMForSequenceClassification","WavLMForXVector","XVectorOutput","WavLMForAudioFrameClassification","SpeechT5PreTrainedModel","SpeechT5Model","SpeechT5ForSpeechToText","SpeechT5ForTextToSpeech","input_values","speaker_embeddings","threshold","minlenratio","maxlenratio","vocoder","reduction_factor","maxlen","minlen","num_mel_bins","spectrogramParts","decoder_outputs","idx","output_sequence","output_sequence_out","prob","spectrum","spectrogram","waveform","SpeechT5HifiGan","TrOCRPreTrainedModel","TrOCRForCausalLM","MistralPreTrainedModel","MistralModel","MistralForCausalLM","Starcoder2PreTrainedModel","Starcoder2Model","Starcoder2ForCausalLM","FalconPreTrainedModel","FalconModel","FalconForCausalLM","ClapPreTrainedModel","ClapModel","ClapTextModelWithProjection","ClapAudioModelWithProjection","VitsPreTrainedModel","VitsModel","VitsModelOutput","SegformerPreTrainedModel","SegformerModel","SegformerForImageClassification","SegformerForSemanticSegmentation","StableLmPreTrainedModel","StableLmModel","StableLmForCausalLM","EfficientNetPreTrainedModel","EfficientNetModel","EfficientNetForImageClassification","MusicgenPreTrainedModel","MusicgenModel","MusicgenForCausalLM","MusicgenForConditionalGeneration","_apply_and_filter_by_delay_pattern_mask","bs_x_codebooks","seqLength","upperBound","newDataSize","diff","inferred","clonedInputIds","structuredClone","output_ids","audio_codes","unsqueeze_","audio_values","MobileNetV1PreTrainedModel","MobileNetV1Model","MobileNetV1ForImageClassification","MobileNetV2PreTrainedModel","MobileNetV2Model","MobileNetV2ForImageClassification","MobileNetV3PreTrainedModel","MobileNetV3Model","MobileNetV3ForImageClassification","MobileNetV4PreTrainedModel","MobileNetV4Model","MobileNetV4ForImageClassification","PretrainedMixin","MODEL_CLASS_MAPPINGS","MODEL_CLASS_MAPPING","modelInfo","BASE_IF_FAIL","MODEL_MAPPING_NAMES_ENCODER_ONLY","MODEL_MAPPING_NAMES_ENCODER_DECODER","MODEL_MAPPING_NAMES_DECODER_ONLY","MODEL_FOR_TEXT_TO_SPECTROGRAM_MAPPING_NAMES","MODEL_FOR_TEXT_TO_WAVEFORM_MAPPING_NAMES","MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING_NAMES","MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING_NAMES","MODEL_FOR_MASKED_LM_MAPPING_NAMES","MODEL_FOR_QUESTION_ANSWERING_MAPPING_NAMES","MODEL_FOR_IMAGE_TEXT_TO_TEXT_MAPPING_NAMES","MODEL_FOR_DOCUMENT_QUESTION_ANSWERING_MAPPING_NAMES","MODEL_FOR_IMAGE_CLASSIFICATION_MAPPING_NAMES","MODEL_FOR_OBJECT_DETECTION_MAPPING_NAMES","MODEL_FOR_ZERO_SHOT_OBJECT_DETECTION_MAPPING_NAMES","MODEL_FOR_IMAGE_SEGMENTATION_MAPPING_NAMES","MODEL_FOR_SEMANTIC_SEGMENTATION_MAPPING_NAMES","MODEL_FOR_MASK_GENERATION_MAPPING_NAMES","MODEL_FOR_CTC_MAPPING_NAMES","MODEL_FOR_AUDIO_CLASSIFICATION_MAPPING_NAMES","MODEL_FOR_AUDIO_XVECTOR_MAPPING_NAMES","MODEL_FOR_AUDIO_FRAME_CLASSIFICATION_MAPPING_NAMES","MODEL_FOR_IMAGE_MATTING_MAPPING_NAMES","MODEL_FOR_IMAGE_TO_IMAGE_MAPPING_NAMES","MODEL_FOR_DEPTH_ESTIMATION_MAPPING_NAMES","MODEL_FOR_IMAGE_FEATURE_EXTRACTION_MAPPING_NAMES","MODEL_CLASS_TYPE_MAPPING","mappings","CUSTOM_MAPPING","AutoModel","AutoModelForSequenceClassification","AutoModelForTokenClassification","AutoModelForSeq2SeqLM","AutoModelForSpeechSeq2Seq","AutoModelForTextToSpectrogram","AutoModelForTextToWaveform","AutoModelForCausalLM","AutoModelForMaskedLM","AutoModelForQuestionAnswering","AutoModelForVision2Seq","AutoModelForImageClassification","AutoModelForImageSegmentation","AutoModelForSemanticSegmentation","AutoModelForObjectDetection","AutoModelForZeroShotObjectDetection","AutoModelForMaskGeneration","AutoModelForCTC","AutoModelForAudioClassification","AutoModelForXVector","AutoModelForAudioFrameClassification","AutoModelForDocumentQuestionAnswering","AutoModelForImageMatting","AutoModelForImageToImage","AutoModelForDepthEstimation","AutoModelForImageFeatureExtraction","Seq2SeqLMOutput","decoder_attentions","embeddings","start_logits","end_logits","CausalLMOutputWithPast","alphas","WHISPER_LANGUAGES","WHISPER_LANGUAGE_MAPPING","WHISPER_TO_LANGUAGE_CODE_MAPPING","language_code","langs","prompt_ids","wrap","session_bytes","TensorOpRegistry","bilinear_interpolate_4d","_bilinear_interpolate_4d","bicubic_interpolate_4d","_bicubic_interpolate_4d","matmul","_matmul","stft","_stft","rfft","_rfft","_top_k","prepareImages","images","RawImage","prepareAudios","audios","sampling_rate","read_audio","get_bounding_box","box","asInteger","xmin","ymin","xmax","ymax","Pipeline","TextClassificationPipeline","texts","padding","truncation","function_to_apply","problem_type","sigmoid","id2label","vals","score","TokenClassificationPipeline","ignore_labels","isBatched","tokenData","topScoreIndex","entity","QuestionAnsweringPipeline","question","text_pair","special_tokens","all_special_ids","sepIndex","sep_token_id","ix","start_scores","end_scores","product","answer_tokens","answer","FillMaskPipeline","mask_token_index","mask_token_id","mask_token","itemLogits","sequence","token_str","vocab","Text2TextGenerationPipeline","_key","generate_kwargs","task_specific_params","tokenizer_options","TranslationPipeline","_build_translation_inputs","outputTokenIds","batch_decode","SummarizationPipeline","isChat","TextGenerationPipeline","isChatInput","apply_chat_template","add_generation_prompt","add_special_tokens","return_full_text","padding_side","text_inputs","decoded","promptLengths","textIndex","generated_text","role","content","ZeroShotClassificationPipeline","label2id","entailment_id","contradiction_id","candidate_labels","hypothesis_template","multi_label","hypotheses","softmaxEach","premise","entails_logits","hypothesis","scores_sorted","labels","FeatureExtractionPipeline","pooling","normalize","quantize","precision","token_embeddings","mean_pooling","quantize_embeddings","ImageFeatureExtractionPipeline","pool","preparedImages","pooler_output","image_embeds","AudioClassificationPipeline","audio","feature_extractor","preparedAudios","aud","ZeroShotAudioClassificationPipeline","single","audio_inputs","probs","logits_per_audio","AutomaticSpeechRecognitionPipeline","_call_whisper","_call_wav2vec2","predicted_ids","predicted_sentences","chunk_length_s","force_full_sequences","stride_length_s","chunk_length","max_source_positions","hop_length","chunks","jump","offset_end","subarr","feature","is_first","is_last","input_features","chunk","token_timestamps","full_text","optional","_decode_asr","ImageToTextPipeline","ImageClassificationPipeline","ImageSegmentationPipeline","subtasks_mapping","panoptic","semantic","mask_threshold","overlap_mask_area_threshold","label_ids_to_fuse","target_sizes","subtask","imageSizes","pixel_mask","func","annotation","processed","segmentation","segment","segments_info","maskData","mask","label_id","ZeroShotImageClassificationPipeline","logits_per_image","ObjectDetectionPipeline","percentage","post_process_object_detection","boxes","classes","ZeroShotObjectDetectionPipeline","imageSize","DocumentQuestionAnsweringPipeline","TextToAudioPipeline","DEFAULT_VOCODER_ID","_call_text_to_spectrogram","_call_text_to_waveform","generate_speech","ImageToImagePipeline","reconstruction","squeeze","clamp_","mul_","round_","DepthEstimationPipeline","predicted_depth","prediction","interpolate","formatted","SUPPORTED_TASKS","AutoTokenizer","AutoProcessor","TASK_ALIASES","pipeline","pipelineInfo","pretrainedOptions","promise","loadItems","dispatchCallback","pipelineClass","center_to_corners_format","centerX","centerY","is_zero_shot","out_logits","out_bbox","num_boxes","num_classes","target_size","bbox","logit","maxIndex","validate_audio_inputs","constraint_to_multiple_of","val","multiple","minVal","maxVal","bankers_round","enforce_size_divisibility","divisor","FeatureExtractor","ImageFeatureExtractor","image_mean","image_std","resample","do_rescale","rescale_factor","do_normalize","do_resize","do_thumbnail","size_divisibility","size_divisor","do_center_crop","crop_size","do_convert_rgb","do_crop_margin","pad_size","do_pad","do_flip_channel_order","input_height","input_width","output_height","output_width","resize","gray_threshold","gray_image","grayscale","minValue","x_min","y_min","x_max","y_max","gray_image_data","row","crop","pad_image","pixelData","imgDims","padSize","center","constant_values","imageHeight","imageWidth","imageChannels","paddedImageWidth","paddedImageHeight","paddedPixelData","h1","w1","calculateReflectOffset","rescale","get_resize_output_image_size","srcWidth","srcHeight","shortest_edge","longest_edge","max_size","shortResizeFactor","newWidth","newHeight","longResizeFactor","finalWidth","toFixed","finalHeight","keep_aspect_ratio","ensure_multiple_of","scale_height","scale_width","do_convert_grayscale","crop_margin","rgb","thumbnail","crop_width","crop_height","center_crop","reshaped_input_size","padded","paddedWidth","paddedHeight","temp","original_size","permute","imageData","original_sizes","reshaped_input_sizes","SegformerFeatureExtractor","post_process_semantic_segmentation","segmentation_data","hasLabel","DPTFeatureExtractor","DPTImageProcessor","BitImageProcessor","GLPNFeatureExtractor","CLIPFeatureExtractor","CLIPImageProcessor","ChineseCLIPFeatureExtractor","SiglipImageProcessor","ConvNextFeatureExtractor","crop_pct","resize_shortest_edge","ConvNextImageProcessor","ViTFeatureExtractor","ViTImageProcessor","EfficientNetImageProcessor","include_top","MobileNetV1FeatureExtractor","MobileNetV2FeatureExtractor","MobileNetV3FeatureExtractor","MobileNetV4FeatureExtractor","MobileViTFeatureExtractor","MobileViTImageProcessor","OwlViTFeatureExtractor","Owlv2ImageProcessor","RTDetrImageProcessor","DeiTFeatureExtractor","BeitFeatureExtractor","DonutFeatureExtractor","NougatImageProcessor","DetrFeatureExtractor","maskSize","remove_low_and_no_objects","class_logits","mask_logits","object_mask_threshold","num_labels","mask_probs_item","pred_scores_item","pred_labels_item","pred_label","pred_score","check_segment_validity","mask_labels","mask_probs","mask_k","mask_k_area","original_area","mask_probs_k_data","mask_exists","compute_segments","pred_scores","pred_labels","segments","bestScores","mask_probs_i_data","current_segment_id","pred_class","post_process_panoptic_segmentation","class_queries_logits","num_queries","post_process_instance_segmentation","YolosFeatureExtractor","SamImageProcessor","reshape_input_points","is_bounding_box","calculateDimensions","originalImageSize","reshapedImageSize","resizeFactors","add_input_labels","masks","binarize","output_masks","target_image_size","interpolated_mask","interpolate_4d","binarizedMaskData","generate_crop_boxes","crop_n_layers","overlap_ratio","points_per_crop","crop_n_points_downscale_factor","Swin2SRImageProcessor","VitMatteImageProcessor","trimaps","trimapData","WhisperFeatureExtractor","mel_filters","mel_filter_bank","n_fft","feature_size","window_function","power","log_mel","max_num_frames","nb_max_frames","maxValue","n_samples","_extract_fbank_features","Wav2Vec2FeatureExtractor","_zero_mean_unit_var_norm","variance","SeamlessM4TFeatureExtractor","periodic","fft_length","preemphasis","mel_floor","remove_dc_offset","pad_to_multiple_of","do_normalize_per_mel_bins","return_attention_mask","padded_attention_mask","num_features","num_channels","padded_data","padding_value","numPaddedFrames","view","reshapedNumFrames","attention_mask_data","padded_attention_mask_data","ASTFeatureExtractor","denom","features_data","ClapFeatureExtractor","nb_frequency_bins","frequency_min","frequency_max","mel_filters_slaney","fft_window_size","input_mel","longer","nb_max_samples","_get_input_mel","PyAnnoteFeatureExtractor","samples_to_frames","samples","post_process_speaker_diarization","num_samples","ratio","accumulated_segments","current_speaker","confidence","WeSpeakerFeatureExtractor","min_num_frames","fbank_centering_span","meanData","featuresData","offset1","offset2","offset3","SpeechT5FeatureExtractor","Processor","SamProcessor","post_process_masks","WhisperProcessor","Wav2Vec2ProcessorWithLM","PyAnnoteProcessor","SpeechT5Processor","OwlViTProcessor","Florence2Processor","tasks_answer_post_processing_type","task_prompts_without_inputs","task_prompts_with_input","regexes","quad_boxes","bboxes","size_per_bin","construct_prompts","prompts","prompt","replaceAll","post_process_generation","image_size","task_answer_post_processing_type","final_answer","matches","matchAll","locations","preprocessorConfig","feature_extractor_type","image_processor_type","feature_extractor_class","FEATURE_EXTRACTOR_CLASS_MAPPING","PROCESSOR_CLASS_MAPPING","processor_class","loadTokenizer","legacy","createPattern","pattern","invert","Regex","regex","PROBLEMATIC_REGEX_MAP","escapeRegExp","objectToMap","prepareTensorForDecode","clean_up_tokenization","remove_accents","PUNCTUATION_REGEX","PUNCTUATION_ONLY_REGEX","AddedToken","single_word","lstrip","rstrip","special","normalized","TokenizerModel","tokens_to_ids","unk_token_id","unk_token","end_of_word_suffix","fuse_unk","WordPieceTokenizer","Unigram","BPE","LegacyTokenizerModel","encode","arr","fused","fuse","convert_tokens_to_ids","convert_ids_to_tokens","max_input_chars_per_word","outputTokens","chars","isUnknown","subTokens","currentSubstring","continuing_subword_prefix","moreConfig","piece","unk_id","bosToken","bosTokenId","eosToken","eosTokenId","unkToken","minScore","unkScore","trie","CharTrie","populateNodes","lattice","sentence","len","beginPos","mblen","hasSingleNode","commonPrefixSearch","tokenId","tokenScore","insert","TokenLattice","tokenized","BYTES_TO_UNICODE","ccs","UNICODE_TO_BYTES","reverseDictionary","BPE_SPLIT_TOKEN","bpe_ranks","merges","continuing_subword_suffix","byte_fallback","text_encoder","TextEncoder","ignore_merges","cache","bpe","cached","PriorityQueue","startingNode","next","previousNode","currentNode","_add_node","deleted","newPreviousNode","merged","bpe_token_list","padStart","target_lang","bos_token","pad_token","Normalizer","BertNormalizer","Precompiled","NormalizerSequence","Replace","NFC","NFKC","NFKD","StripNormalizer","StripAccents","Lowercase","Prepend","strip_left","strip_right","trimStart","trimEnd","prepend","normalizers","fromConfig","normalizer","_tokenize_chinese_chars","stripAccents","_is_control","_clean_text","clean_text","handle_chinese_chars","lowercase","strip_accents","PreTokenizer","BertPreTokenizer","PreTokenizerSequence","WhitespacePreTokenizer","WhitespaceSplit","MetaspacePreTokenizer","ByteLevelPreTokenizer","SplitPreTokenizer","PunctuationPreTokenizer","DigitsPreTokenizer","ReplacePreTokenizer","pre_tokenize_text","pre_tokenize","add_prefix_space","trim_offsets","use_regex","byte_encoder","byte","fullMatch","regexSplit","digit_pattern","individual_digits","PostProcessor","TemplateProcessing","ByteLevelPostProcessor","RobertaProcessing","BertProcessing","PostProcessorSequence","post_process","sep","tokens_pair","middle","after","pair","processedTokens","SpecialToken","type_id","Sequence","Decoder","added_tokens","WordPieceDecoder","MetaspaceDecoder","ByteLevelDecoder","ReplaceDecoder","ByteFallback","FuseDecoder","StripDecoder","DecoderSequence","CTCDecoder","BPEDecoder","decode_chain","text_decoder","new_tokens","previous_byte_tokens","bytes","string","start_cut","stop_cut","cleanup","byte_decoder","fatal","ignoreBOM","convert_tokens_to_string","byteArray","sub_texts","current_sub_text","word_delimiter_token","grouped_tokens","decoders","toks","VitsDecoder","addPrefixSpace","replacement","strRep","str_rep","prepend_scheme","section_index","charsmap","precompiled_charsmap","parts","part","tokenizers","pretokenizers","preTokenizedText","whitespace_split","SPECIAL_TOKEN_ATTRIBUTES","padHelper","value_fn","side","padData","truncateHelper","PreTrainedTokenizer","return_token_type_ids","tokenizerJSON","tokenizerConfig","_tokenizer_config","pre_tokenizer","post_processor","addedToken","additional_special_tokens","added_tokens_regex","toSorted","getToken","sep_token","model_max_length","remove_space","clean_up_tokenization_spaces","do_lowercase_and_remove_accent","chat_template","_compiled_template_cache","__type","return_tensor","encodedTokens","_encode_plus","flatMap","_encode_text","lowercase_and_remove_accent","sectionTokens","_tokenize_helper","tokens2","decode_args","token_ids","isIntegralNumber","decode_single","conversation","tools","documents","return_dict","tokenizer_kwargs","template_dict","compiledTemplate","special_tokens_map","rendered","messages","BertTokenizer","AlbertTokenizer","MobileBertTokenizer","SqueezeBertTokenizer","DebertaTokenizer","DebertaV2Tokenizer","HerbertTokenizer","ConvBertTokenizer","RoFormerTokenizer","DistilBertTokenizer","CamembertTokenizer","XLMTokenizer","ElectraTokenizer","T5Tokenizer","GPT2Tokenizer","BartTokenizer","MBartTokenizer","languageRegex","language_codes","lang_to_token","raw_inputs","MBart50Tokenizer","RobertaTokenizer","BloomTokenizer","splitChars","patternObject","SPIECE_UNDERLINE","LlamaTokenizer","CodeLlamaTokenizer","XLMRobertaTokenizer","MPNetTokenizer","FalconTokenizer","GPTNeoXTokenizer","EsmTokenizer","Qwen2Tokenizer","GemmaTokenizer","Grok1Tokenizer","src_lang_token","src_lang","tgt_lang_token","tgt_lang","NllbTokenizer","M2M100Tokenizer","WhisperTokenizer","return_language","last_language","returnWordTimestamps","new_chunk","time_offset","previous_tokens","previous_token_timestamps","skip","right_stride_start","last_timestamp","first_timestamp","chunk_len","stride_left","stride_right","current_tokens","current_token_timestamps","resolved_tokens","findLongestCommonSequence","resolved_text","rounded_time","timestamp","resolved_token_timestamps","words","collateWordTimestamps","end_time","start_time","decoded_text","new_chunks","token_timestamp_sequences","leftSequence","leftLength","totalSequence","use_token_timestamp_sequences","total_token_timestamp_sequence","left_token_timestamp_sequence","rightSequence","maxIndices","rightLength","leftStart","leftStop","rightStart","rightStop","elem","matching","leftMid","rightMid","token_indices","combineTokensIntoWords","timings","prepend_punctionations","append_punctuations","word_tokens","splitTokensOnUnicode","splitTokensOnSpaces","mergePunctuations","decode_with_timestamps","decodeWithTimestamps","decoded_full","current_indices","unicode_offset","token_idx","subwords","subword_tokens_list","subword_indices_list","punctuationRegex","subword","subword_tokens","subword_indices","with_space","trimmed","punctuation","prepended","appended","newWords","newTokens","newIndices","get_decoder_prompt_ids","no_timestamps","language_token_id","GITHUB_ISSUE_URL","task_token_id","no_timestamps_id","CodeGenTokenizer","CLIPTokenizer","SiglipTokenizer","MarianTokenizer","supported_language_codes","matchInfo","remainder","Wav2Vec2CTCTokenizer","BlenderbotTokenizer","BlenderbotSmallTokenizer","SpeechT5Tokenizer","NougatTokenizer","VitsTokenizer","CohereTokenizer","tokenizerName","tokenizer_class","TOKENIZER_CLASS_MAPPING","AudioContext","getFile","audioCTX","sampleRate","decodeAudioData","numberOfChannels","SCALING_FACTOR","getChannelData","generalized_cosine_window","a_0","a_1","factor","PI","cos_vals","cos","hanning","hamming","HERTZ_TO_MEL_MAPPING","freq","log10","min_log_hertz","min_log_mel","logstep","hertz_to_mel","mel_scale","MEL_TO_HERTZ_MAPPING","mels","linspace","num_frequency_bins","num_mel_filters","min_frequency","max_frequency","triangularize_in_mel_space","mel_freqs","fft_freqs","filter_freqs","mel_to_hertz","fft_bin_width","filter_diff","slopes","slope","numFreqs","ret","down","_create_triangular_filter_bank","enorm","_db_conversion_helper","reference","min_value","db_range","logReference","frame_length","pad_mode","onesided","window_length","half_window","padReflect","d1","d1Max","fft","FFT","inputBuffer","outputBuffer","outputBufferSize","transposedMagnitudeData","buffer_size","realTransform","j2","pow","mel_spec","mel_spec_data","amplitude_to_db","power_to_db","isTypedArray","__proto__","dimensions","arrs","props","comparator","maxSize","_heap","_comparator","_maxSize","peek","_siftUp","smallest","_smallest","_siftUpFrom","poppedValue","_swap","_siftDown","replacedValue","_parent","_left","_right","_greater","maxChild","log2","root","CharTrieNode","child","children","isLeaf","nodes","beginNodes","endNodes","bos","TokenLatticeNode","eos","pos","nodeId","viterbi","rnode","bestScore","bestNode","lnode","backtraceScore","tokenIds","DEVICE_TYPES","cpu","cachedResult","fp32","fp16","q8","int8","uint8","q4","bnb4","q4f16","closure","setPrototypeOf","FileResponse","_CONTENT_TYPE_MAP","filePath","Headers","exists","statusText","stats","updateContentType","ReadableStream","controller","enqueue","close","extension","isValidUrl","protocols","validHosts","protocol","hostname","urlOrPath","IS_CI","TESTING_REMOTELY","HF_TOKEN","HF_ACCESS_TOKEN","ERROR_MAPPING","FileCache","request","file","Buffer","outputPath","recursive","path_or_repo_id","caches","requestURL","pathJoin","localPath","remoteURL","encodeURIComponent","fsCacheKey","proposedCacheKey","toCacheResponse","tryCache","cacheHit","handleError","Response","progressInfo","progress","total","contentLength","reader","newLoaded","newBuffer","readResponse","modelPath","jsonData","BROWSER_ENV","WEBWORKER_ENV","createCanvasFunction","ImageDataClass","loadImageFunction","createImageBitmap","rawChannels","metadata","rotate","raw","toBuffer","resolveWithObject","convert","RESAMPLING_MAPPING","CONTENT_TYPE_MAP","fromURL","fromBlob","ctx","channel_format","newData","red","green","blue","_update","rgba","resampleMethod","numChannels","toCanvas","toSharp","affine","interpolator","fit","kernel","extract","width_offset","height_offset","sourceX","sourceY","destX","destY","y_padding","y_extract","x_padding","x_extract","quality","convertToBlob","toTensor","cloned","clonedCanvas","toFile","mime","toBlob","dataURL","downloadLink","click","remove","interpolate_data","in_channels","in_height","in_width","out_height","out_width","align_corners","x_scale","y_scale","out_img","inStride","outStride","outOffset","x1","y1","x2","y2","w2","w3","w4","yStride","xStride","idx1","idx2","idx3","idx4","cOffset","permute_data","invStride","permutedData","newIndex","exps","sumExps","acc","dot","arr1","arr2","cos_sim","magnitude","indexOfMin","indexOfMax","isPowerOfTwo","number","P2FFT","_csize","table","angle","sin","_width","_bitrev","revShift","createComplexArray","fromComplexArray","complex","res","toComplexArray","transform","_transform4","_realTransform4","inverseTransform","inv","outOff","bitrev","off","_singleTransform2","_singleTransform4","quarterLen","limit","tableBr","tableBi","MBr","MBi","tableCr","tableCi","MCr","MCi","tableDr","tableDi","MDr","MDi","T0r","T0i","T1r","T1i","T2r","T2i","T3r","T3i","evenR","evenI","oddR","oddI","step2","step3","_singleRealTransform2","_singleRealTransform4","halfLen","hquarterLen","MAr","MAi","SA","SB","half","NP2FFT","nextP2","bufferSize","chirp","ichirp","_chirpBuffer","_buffer1","_buffer2","_outBuffer1","_outBuffer2","theta","baseR","baseI","result_mod","result_arg","atan2","i2","_slicedChirpBuffer","_transform","real","ib1","ib2","ob2","ob3","a_real","a_imag","b_real","b_imag","windowSize","outputArray","halfWindowSize","valuesIndex","decimals","output_length","input_length","cost","c0","c1","c2","DataTypeMap","float32","float16","float64","int16","uint16","int32","uint32","int64","uint64","bool","_getitem","iterLength","iterDims","iterSize","_subarray","safeIndex","this_data","o1","o2","totalElements","dimensionSize","reshapedArray","lastArray","sigmoid_","mul","div","div_","add_","newTensorDims","newOffsets","sliceIndex","offsets","newDims","newBufferSize","originalIndex","keepdim","resultDims","resultIndex","resultMultiplier","normalize_","norm_data","s2","dimsToStride","calc_squeeze_dims","unsqueeze","calc_unsqueeze_dims","flatten_","start_dim","end_dim","dimsToKeepBefore","dimsToFlatten","dimsToKeepAfter","flatten","inferredIndex","productOther","curr","neg_","clamp","targetDims","sizeTensor","lastHiddenStateData","attentionMaskData","returnedData","embedDim","outIndex","attnMaskOffset","attn","avg","layer_norm","normalized_shape","featureDim","stdData","inputData","dimension","boundsCheck","tensors","resultSize","resultType","tensorData","currentDim","correction","inputDims","meanTensor","fullHelper","fill_value","full","typedArrayCls","zeros","signed","outputData","bit","arrayIndex","bitPosition","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getPrototypeOf","__esModule","def","definition","toStringTag","scriptUrl"],"sourceRoot":""}